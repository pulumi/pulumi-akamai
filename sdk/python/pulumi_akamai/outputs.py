# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClientlistListItem',
    'CloudletsApplicationLoadBalancerDataCenter',
    'CloudletsApplicationLoadBalancerLivenessSettings',
    'CloudwrapperActivationTimeouts',
    'CloudwrapperConfigurationLocation',
    'CloudwrapperConfigurationLocationCapacity',
    'CloudwrapperConfigurationTimeouts',
    'CpsDvEnrollmentAdminContact',
    'CpsDvEnrollmentCsr',
    'CpsDvEnrollmentDnsChallenge',
    'CpsDvEnrollmentHttpChallenge',
    'CpsDvEnrollmentNetworkConfiguration',
    'CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication',
    'CpsDvEnrollmentOrganization',
    'CpsDvEnrollmentTechContact',
    'CpsThirdPartyEnrollmentAdminContact',
    'CpsThirdPartyEnrollmentCsr',
    'CpsThirdPartyEnrollmentNetworkConfiguration',
    'CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication',
    'CpsThirdPartyEnrollmentOrganization',
    'CpsThirdPartyEnrollmentTechContact',
    'DatastreamAzureConnector',
    'DatastreamDatadogConnector',
    'DatastreamDeliveryConfiguration',
    'DatastreamDeliveryConfigurationFrequency',
    'DatastreamElasticsearchConnector',
    'DatastreamGcsConnector',
    'DatastreamHttpsConnector',
    'DatastreamLogglyConnector',
    'DatastreamNewRelicConnector',
    'DatastreamOracleConnector',
    'DatastreamS3Connector',
    'DatastreamSplunkConnector',
    'DatastreamSumologicConnector',
    'DnsZoneTsigKey',
    'EdgeKvInitialData',
    'GtmAsmapAssignment',
    'GtmAsmapDefaultDatacenter',
    'GtmCidrmapAssignment',
    'GtmCidrmapDefaultDatacenter',
    'GtmDatacenterDefaultLoadObject',
    'GtmGeomapAssignment',
    'GtmGeomapDefaultDatacenter',
    'GtmPropertyLivenessTest',
    'GtmPropertyLivenessTestHttpHeader',
    'GtmPropertyStaticRrSet',
    'GtmPropertyTrafficTarget',
    'GtmResourceResourceInstance',
    'PropertyActivationComplianceRecord',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergency',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic',
    'PropertyActivationComplianceRecordNoncomplianceReasonNone',
    'PropertyActivationComplianceRecordNoncomplianceReasonOther',
    'PropertyActivationRuleError',
    'PropertyHostname',
    'PropertyHostnameCertStatus',
    'PropertyIncludeActivationComplianceRecord',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone',
    'PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther',
    'PropertyRuleError',
    'GetCPSEnrollmentAdminContactResult',
    'GetCPSEnrollmentCsrResult',
    'GetCPSEnrollmentDnsChallengeResult',
    'GetCPSEnrollmentHttpChallengeResult',
    'GetCPSEnrollmentNetworkConfigurationResult',
    'GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult',
    'GetCPSEnrollmentOrganizationResult',
    'GetCPSEnrollmentTechContactResult',
    'GetCPSEnrollmentsEnrollmentResult',
    'GetCPSEnrollmentsEnrollmentAdminContactResult',
    'GetCPSEnrollmentsEnrollmentCsrResult',
    'GetCPSEnrollmentsEnrollmentNetworkConfigurationResult',
    'GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult',
    'GetCPSEnrollmentsEnrollmentOrganizationResult',
    'GetCPSEnrollmentsEnrollmentTechContactResult',
    'GetClientlistListsListResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsApplicationLoadBalancerDataCenterResult',
    'GetCloudletsApplicationLoadBalancerLivenessSettingResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsPolicyActivationResult',
    'GetCloudletsPolicyActivationPolicyInfoResult',
    'GetCloudletsPolicyActivationPropertyInfoResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult',
    'GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult',
    'GetCloudwrapperCapacitiesCapacityResult',
    'GetCloudwrapperCapacitiesCapacityApprovedResult',
    'GetCloudwrapperCapacitiesCapacityAssignedResult',
    'GetCloudwrapperCapacitiesCapacityUnassignedResult',
    'GetCloudwrapperConfigurationLocationResult',
    'GetCloudwrapperConfigurationLocationCapacityResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsBoccResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult',
    'GetCloudwrapperConfigurationMultiCdnSettingsOriginResult',
    'GetCloudwrapperConfigurationsConfigurationResult',
    'GetCloudwrapperConfigurationsConfigurationLocationResult',
    'GetCloudwrapperConfigurationsConfigurationLocationCapacityResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult',
    'GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult',
    'GetCloudwrapperLocationsLocationResult',
    'GetCloudwrapperLocationsLocationTrafficTypeResult',
    'GetCloudwrapperPropertiesPropertyResult',
    'GetContractsContractResult',
    'GetDatastreamActivationHistoryActivationResult',
    'GetDatastreamDatasetFieldsDatasetFieldResult',
    'GetDatastreamsStreamsDetailResult',
    'GetDatastreamsStreamsDetailPropertyResult',
    'GetGroupsGroupResult',
    'GetGtmDatacenterDefaultLoadObjectResult',
    'GetGtmDatacenterLinkResult',
    'GetGtmDatacentersDatacenterResult',
    'GetGtmDatacentersDatacenterDefaultLoadObjectResult',
    'GetGtmDatacentersDatacenterLinkResult',
    'GetIamGrantableRolesGrantableRoleResult',
    'GetIamRolesRoleResult',
    'GetIamTimezonesTimezoneResult',
    'GetImagingPolicyImagePolicyResult',
    'GetImagingPolicyImagePolicyBreakpointsResult',
    'GetImagingPolicyImagePolicyOutputResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult',
    'GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult',
    'GetImagingPolicyImagePolicyTransformationResult',
    'GetImagingPolicyImagePolicyTransformationAppendResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult',
    'GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult',
    'GetImagingPolicyImagePolicyTransformationAspectCropResult',
    'GetImagingPolicyImagePolicyTransformationBackgroundColorResult',
    'GetImagingPolicyImagePolicyTransformationBlurResult',
    'GetImagingPolicyImagePolicyTransformationChromaKeyResult',
    'GetImagingPolicyImagePolicyTransformationCompositeResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult',
    'GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult',
    'GetImagingPolicyImagePolicyTransformationCompoundResult',
    'GetImagingPolicyImagePolicyTransformationContrastResult',
    'GetImagingPolicyImagePolicyTransformationCropResult',
    'GetImagingPolicyImagePolicyTransformationFaceCropResult',
    'GetImagingPolicyImagePolicyTransformationFeatureCropResult',
    'GetImagingPolicyImagePolicyTransformationFitAndFillResult',
    'GetImagingPolicyImagePolicyTransformationGoopResult',
    'GetImagingPolicyImagePolicyTransformationGrayscaleResult',
    'GetImagingPolicyImagePolicyTransformationHslResult',
    'GetImagingPolicyImagePolicyTransformationHsvResult',
    'GetImagingPolicyImagePolicyTransformationIfDimensionResult',
    'GetImagingPolicyImagePolicyTransformationIfOrientationResult',
    'GetImagingPolicyImagePolicyTransformationImQueryResult',
    'GetImagingPolicyImagePolicyTransformationMaxColorResult',
    'GetImagingPolicyImagePolicyTransformationMirrorResult',
    'GetImagingPolicyImagePolicyTransformationMonoHueResult',
    'GetImagingPolicyImagePolicyTransformationOpacityResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult',
    'GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult',
    'GetImagingPolicyImagePolicyTransformationRelativeCropResult',
    'GetImagingPolicyImagePolicyTransformationRemoveColorResult',
    'GetImagingPolicyImagePolicyTransformationResizeResult',
    'GetImagingPolicyImagePolicyTransformationRotateResult',
    'GetImagingPolicyImagePolicyTransformationScaleResult',
    'GetImagingPolicyImagePolicyTransformationShearsResult',
    'GetImagingPolicyImagePolicyTransformationTrimResult',
    'GetImagingPolicyImagePolicyTransformationUnsharpMaskResult',
    'GetImagingPolicyImagePolicyVariableResult',
    'GetImagingPolicyImagePolicyVariableEnumOptionResult',
    'GetImagingPolicyVideoPolicyResult',
    'GetImagingPolicyVideoPolicyBreakpointsResult',
    'GetImagingPolicyVideoPolicyOutputResult',
    'GetImagingPolicyVideoPolicyVariableResult',
    'GetImagingPolicyVideoPolicyVariableEnumOptionResult',
    'GetPropertiesPropertyResult',
    'GetPropertiesSearchPropertyResult',
    'GetPropertyHostnamesHostnameResult',
    'GetPropertyHostnamesHostnameCertStatusResult',
    'GetPropertyIncludeParentsParentResult',
    'GetPropertyIncludesIncludeResult',
    'GetPropertyIncludesParentPropertyResult',
    'GetPropertyProductsProductResult',
    'GetPropertyRulesBuilderRulesV20230105Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReportResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult',
    'GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionBucketResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionPathResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRandomResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionTimeResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult',
    'GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult',
    'GetPropertyRulesBuilderRulesV20230105CustomOverrideResult',
    'GetPropertyRulesBuilderRulesV20230105VariableResult',
    'GetPropertyRulesBuilderRulesV20230530Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReportResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult',
    'GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionBucketResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionPathResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRandomResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionTimeResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult',
    'GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult',
    'GetPropertyRulesBuilderRulesV20230530CustomOverrideResult',
    'GetPropertyRulesBuilderRulesV20230530VariableResult',
    'GetPropertyRulesTemplateTemplateResult',
    'GetPropertyRulesTemplateVariableResult',
]

@pulumi.output_type
class ClientlistListItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationDate":
            suggest = "expiration_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClientlistListItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClientlistListItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClientlistListItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 description: Optional[str] = None,
                 expiration_date: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class CloudletsApplicationLoadBalancerDataCenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originId":
            suggest = "origin_id"
        elif key == "cloudServerHostHeaderOverride":
            suggest = "cloud_server_host_header_override"
        elif key == "cloudService":
            suggest = "cloud_service"
        elif key == "livenessHosts":
            suggest = "liveness_hosts"
        elif key == "stateOrProvince":
            suggest = "state_or_province"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudletsApplicationLoadBalancerDataCenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudletsApplicationLoadBalancerDataCenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudletsApplicationLoadBalancerDataCenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 continent: str,
                 country: str,
                 latitude: float,
                 longitude: float,
                 origin_id: str,
                 percent: float,
                 city: Optional[str] = None,
                 cloud_server_host_header_override: Optional[bool] = None,
                 cloud_service: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 liveness_hosts: Optional[Sequence[str]] = None,
                 state_or_province: Optional[str] = None):
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if cloud_server_host_header_override is not None:
            pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        if cloud_service is not None:
            pulumi.set(__self__, "cloud_service", cloud_service)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if liveness_hosts is not None:
            pulumi.set(__self__, "liveness_hosts", liveness_hosts)
        if state_or_province is not None:
            pulumi.set(__self__, "state_or_province", state_or_province)

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> float:
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> Optional[bool]:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> Optional[bool]:
        return pulumi.get(self, "cloud_service")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "liveness_hosts")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> Optional[str]:
        return pulumi.get(self, "state_or_province")


@pulumi.output_type
class CloudletsApplicationLoadBalancerLivenessSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalHeaders":
            suggest = "additional_headers"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "peerCertificateVerification":
            suggest = "peer_certificate_verification"
        elif key == "requestString":
            suggest = "request_string"
        elif key == "responseString":
            suggest = "response_string"
        elif key == "status3xxFailure":
            suggest = "status3xx_failure"
        elif key == "status4xxFailure":
            suggest = "status4xx_failure"
        elif key == "status5xxFailure":
            suggest = "status5xx_failure"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudletsApplicationLoadBalancerLivenessSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudletsApplicationLoadBalancerLivenessSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudletsApplicationLoadBalancerLivenessSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 port: int,
                 protocol: str,
                 additional_headers: Optional[Mapping[str, str]] = None,
                 host_header: Optional[str] = None,
                 interval: Optional[int] = None,
                 peer_certificate_verification: Optional[bool] = None,
                 request_string: Optional[str] = None,
                 response_string: Optional[str] = None,
                 status3xx_failure: Optional[bool] = None,
                 status4xx_failure: Optional[bool] = None,
                 status5xx_failure: Optional[bool] = None,
                 timeout: Optional[float] = None):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if additional_headers is not None:
            pulumi.set(__self__, "additional_headers", additional_headers)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if status3xx_failure is not None:
            pulumi.set(__self__, "status3xx_failure", status3xx_failure)
        if status4xx_failure is not None:
            pulumi.set(__self__, "status4xx_failure", status4xx_failure)
        if status5xx_failure is not None:
            pulumi.set(__self__, "status5xx_failure", status5xx_failure)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "additional_headers")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[bool]:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[str]:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[str]:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status3xx_failure")

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status4xx_failure")

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> Optional[bool]:
        return pulumi.get(self, "status5xx_failure")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[float]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class CloudwrapperActivationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 update: Optional[str] = None):
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        return pulumi.get(self, "update")


@pulumi.output_type
class CloudwrapperConfigurationLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trafficTypeId":
            suggest = "traffic_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwrapperConfigurationLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwrapperConfigurationLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwrapperConfigurationLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: str,
                 traffic_type_id: int,
                 capacity: Optional['outputs.CloudwrapperConfigurationLocationCapacity'] = None):
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")

    @property
    @pulumi.getter
    def capacity(self) -> Optional['outputs.CloudwrapperConfigurationLocationCapacity']:
        return pulumi.get(self, "capacity")


@pulumi.output_type
class CloudwrapperConfigurationLocationCapacity(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class CloudwrapperConfigurationTimeouts(dict):
    def __init__(__self__, *,
                 delete: Optional[str] = None):
        if delete is not None:
            pulumi.set(__self__, "delete", delete)

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        return pulumi.get(self, "delete")


@pulumi.output_type
class CpsDvEnrollmentAdminContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentAdminContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentAdminContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentAdminContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsDvEnrollmentCsr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "preferredTrustChain":
            suggest = "preferred_trust_chain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentCsr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentCsr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentCsr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 state: str,
                 preferred_trust_chain: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[str]:
        return pulumi.get(self, "preferred_trust_chain")


@pulumi.output_type
class CpsDvEnrollmentDnsChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullPath":
            suggest = "full_path"
        elif key == "responseBody":
            suggest = "response_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentDnsChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentDnsChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentDnsChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 full_path: Optional[str] = None,
                 response_body: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[str]:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[str]:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class CpsDvEnrollmentHttpChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullPath":
            suggest = "full_path"
        elif key == "responseBody":
            suggest = "response_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentHttpChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentHttpChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentHttpChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 full_path: Optional[str] = None,
                 response_body: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_path is not None:
            pulumi.set(__self__, "full_path", full_path)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> Optional[str]:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[str]:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class CpsDvEnrollmentNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientMutualAuthentication":
            suggest = "client_mutual_authentication"
        elif key == "cloneDnsNames":
            suggest = "clone_dns_names"
        elif key == "disallowedTlsVersions":
            suggest = "disallowed_tls_versions"
        elif key == "mustHaveCiphers":
            suggest = "must_have_ciphers"
        elif key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "preferredCiphers":
            suggest = "preferred_ciphers"
        elif key == "quicEnabled":
            suggest = "quic_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geography: str,
                 client_mutual_authentication: Optional['outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
                 clone_dns_names: Optional[bool] = None,
                 disallowed_tls_versions: Optional[Sequence[str]] = None,
                 must_have_ciphers: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 preferred_ciphers: Optional[str] = None,
                 quic_enabled: Optional[bool] = None):
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional['outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication']:
        return pulumi.get(self, "client_mutual_authentication")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[bool]:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "sendCaListToClient":
            suggest = "send_ca_list_to_client"
        elif key == "setId":
            suggest = "set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocsp_enabled: Optional[bool] = None,
                 send_ca_list_to_client: Optional[bool] = None,
                 set_id: Optional[str] = None):
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[bool]:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[str]:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class CpsDvEnrollmentOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")


@pulumi.output_type
class CpsDvEnrollmentTechContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsDvEnrollmentTechContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsDvEnrollmentTechContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsDvEnrollmentTechContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsThirdPartyEnrollmentAdminContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentAdminContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentAdminContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentAdminContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CpsThirdPartyEnrollmentCsr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"
        elif key == "preferredTrustChain":
            suggest = "preferred_trust_chain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentCsr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentCsr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentCsr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 state: str,
                 preferred_trust_chain: Optional[str] = None):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "state", state)
        if preferred_trust_chain is not None:
            pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> Optional[str]:
        return pulumi.get(self, "preferred_trust_chain")


@pulumi.output_type
class CpsThirdPartyEnrollmentNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientMutualAuthentication":
            suggest = "client_mutual_authentication"
        elif key == "cloneDnsNames":
            suggest = "clone_dns_names"
        elif key == "disallowedTlsVersions":
            suggest = "disallowed_tls_versions"
        elif key == "mustHaveCiphers":
            suggest = "must_have_ciphers"
        elif key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "preferredCiphers":
            suggest = "preferred_ciphers"
        elif key == "quicEnabled":
            suggest = "quic_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geography: str,
                 client_mutual_authentication: Optional['outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication'] = None,
                 clone_dns_names: Optional[bool] = None,
                 disallowed_tls_versions: Optional[Sequence[str]] = None,
                 must_have_ciphers: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 preferred_ciphers: Optional[str] = None,
                 quic_enabled: Optional[bool] = None):
        pulumi.set(__self__, "geography", geography)
        if client_mutual_authentication is not None:
            pulumi.set(__self__, "client_mutual_authentication", client_mutual_authentication)
        if clone_dns_names is not None:
            pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        if disallowed_tls_versions is not None:
            pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        if must_have_ciphers is not None:
            pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if preferred_ciphers is not None:
            pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        if quic_enabled is not None:
            pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="clientMutualAuthentication")
    def client_mutual_authentication(self) -> Optional['outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication']:
        return pulumi.get(self, "client_mutual_authentication")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> Optional[bool]:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> Optional[str]:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspEnabled":
            suggest = "ocsp_enabled"
        elif key == "sendCaListToClient":
            suggest = "send_ca_list_to_client"
        elif key == "setId":
            suggest = "set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocsp_enabled: Optional[bool] = None,
                 send_ca_list_to_client: Optional[bool] = None,
                 set_id: Optional[str] = None):
        if ocsp_enabled is not None:
            pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        if send_ca_list_to_client is not None:
            pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        if set_id is not None:
            pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> Optional[bool]:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> Optional[str]:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class CpsThirdPartyEnrollmentOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")


@pulumi.output_type
class CpsThirdPartyEnrollmentTechContact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressLineOne":
            suggest = "address_line_one"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "addressLineTwo":
            suggest = "address_line_two"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CpsThirdPartyEnrollmentTechContact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CpsThirdPartyEnrollmentTechContact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CpsThirdPartyEnrollmentTechContact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class DatastreamAzureConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "accountName":
            suggest = "account_name"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamAzureConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamAzureConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamAzureConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 account_name: str,
                 container_name: str,
                 display_name: str,
                 path: str,
                 compress_logs: Optional[bool] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> str:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamDatadogConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDatadogConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDatadogConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDatadogConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 compress_logs: Optional[bool] = None,
                 service: Optional[str] = None,
                 source: Optional[str] = None,
                 tags: Optional[str] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class DatastreamDeliveryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDelimiter":
            suggest = "field_delimiter"
        elif key == "uploadFilePrefix":
            suggest = "upload_file_prefix"
        elif key == "uploadFileSuffix":
            suggest = "upload_file_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 frequency: 'outputs.DatastreamDeliveryConfigurationFrequency',
                 field_delimiter: Optional[str] = None,
                 upload_file_prefix: Optional[str] = None,
                 upload_file_suffix: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "frequency", frequency)
        if field_delimiter is not None:
            pulumi.set(__self__, "field_delimiter", field_delimiter)
        if upload_file_prefix is not None:
            pulumi.set(__self__, "upload_file_prefix", upload_file_prefix)
        if upload_file_suffix is not None:
            pulumi.set(__self__, "upload_file_suffix", upload_file_suffix)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def frequency(self) -> 'outputs.DatastreamDeliveryConfigurationFrequency':
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="fieldDelimiter")
    def field_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "field_delimiter")

    @property
    @pulumi.getter(name="uploadFilePrefix")
    def upload_file_prefix(self) -> Optional[str]:
        return pulumi.get(self, "upload_file_prefix")

    @property
    @pulumi.getter(name="uploadFileSuffix")
    def upload_file_suffix(self) -> Optional[str]:
        return pulumi.get(self, "upload_file_suffix")


@pulumi.output_type
class DatastreamDeliveryConfigurationFrequency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalInSecs":
            suggest = "interval_in_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamDeliveryConfigurationFrequency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamDeliveryConfigurationFrequency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamDeliveryConfigurationFrequency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_in_secs: int):
        pulumi.set(__self__, "interval_in_secs", interval_in_secs)

    @property
    @pulumi.getter(name="intervalInSecs")
    def interval_in_secs(self) -> int:
        return pulumi.get(self, "interval_in_secs")


@pulumi.output_type
class DatastreamElasticsearchConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "indexName":
            suggest = "index_name"
        elif key == "userName":
            suggest = "user_name"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamElasticsearchConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamElasticsearchConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamElasticsearchConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 endpoint: str,
                 index_name: str,
                 password: str,
                 user_name: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 tls_hostname: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")


@pulumi.output_type
class DatastreamGcsConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "serviceAccountName":
            suggest = "service_account_name"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamGcsConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamGcsConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamGcsConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 display_name: str,
                 private_key: str,
                 project_id: str,
                 service_account_name: str,
                 compress_logs: Optional[bool] = None,
                 path: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_account_name", service_account_name)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> str:
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class DatastreamHttpsConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationType":
            suggest = "authentication_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamHttpsConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamHttpsConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamHttpsConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_type: str,
                 display_name: str,
                 endpoint: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 compress_logs: Optional[bool] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 password: Optional[str] = None,
                 tls_hostname: Optional[str] = None,
                 user_name: Optional[str] = None):
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class DatastreamLogglyConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamLogglyConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamLogglyConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamLogglyConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 tags: Optional[str] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter
    def tags(self) -> Optional[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class DatastreamNewRelicConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authToken":
            suggest = "auth_token"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamNewRelicConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamNewRelicConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamNewRelicConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_token: str,
                 display_name: str,
                 endpoint: str,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> str:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")


@pulumi.output_type
class DatastreamOracleConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamOracleConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamOracleConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamOracleConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 bucket: str,
                 display_name: str,
                 namespace: str,
                 path: str,
                 region: str,
                 secret_access_key: str,
                 compress_logs: Optional[bool] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamS3Connector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "compressLogs":
            suggest = "compress_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamS3Connector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamS3Connector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamS3Connector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: str,
                 bucket: str,
                 display_name: str,
                 path: str,
                 region: str,
                 secret_access_key: str,
                 compress_logs: Optional[bool] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")


@pulumi.output_type
class DatastreamSplunkConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "eventCollectorToken":
            suggest = "event_collector_token"
        elif key == "caCert":
            suggest = "ca_cert"
        elif key == "clientCert":
            suggest = "client_cert"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"
        elif key == "mTls":
            suggest = "m_tls"
        elif key == "tlsHostname":
            suggest = "tls_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamSplunkConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamSplunkConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamSplunkConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 endpoint: str,
                 event_collector_token: str,
                 ca_cert: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 client_key: Optional[str] = None,
                 compress_logs: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None,
                 m_tls: Optional[bool] = None,
                 tls_hostname: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "event_collector_token", event_collector_token)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)
        if m_tls is not None:
            pulumi.set(__self__, "m_tls", m_tls)
        if tls_hostname is not None:
            pulumi.set(__self__, "tls_hostname", tls_hostname)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="eventCollectorToken")
    def event_collector_token(self) -> str:
        return pulumi.get(self, "event_collector_token")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")

    @property
    @pulumi.getter(name="mTls")
    def m_tls(self) -> Optional[bool]:
        return pulumi.get(self, "m_tls")

    @property
    @pulumi.getter(name="tlsHostname")
    def tls_hostname(self) -> Optional[str]:
        return pulumi.get(self, "tls_hostname")


@pulumi.output_type
class DatastreamSumologicConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorCode":
            suggest = "collector_code"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "compressLogs":
            suggest = "compress_logs"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "customHeaderName":
            suggest = "custom_header_name"
        elif key == "customHeaderValue":
            suggest = "custom_header_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatastreamSumologicConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatastreamSumologicConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatastreamSumologicConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_code: str,
                 display_name: str,
                 endpoint: str,
                 compress_logs: Optional[bool] = None,
                 content_type: Optional[str] = None,
                 custom_header_name: Optional[str] = None,
                 custom_header_value: Optional[str] = None):
        pulumi.set(__self__, "collector_code", collector_code)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint", endpoint)
        if compress_logs is not None:
            pulumi.set(__self__, "compress_logs", compress_logs)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if custom_header_value is not None:
            pulumi.set(__self__, "custom_header_value", custom_header_value)

    @property
    @pulumi.getter(name="collectorCode")
    def collector_code(self) -> str:
        return pulumi.get(self, "collector_code")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="compressLogs")
    def compress_logs(self) -> Optional[bool]:
        return pulumi.get(self, "compress_logs")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="customHeaderValue")
    def custom_header_value(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_value")


@pulumi.output_type
class DnsZoneTsigKey(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 name: str,
                 secret: str):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class EdgeKvInitialData(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 group: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if group is not None:
            pulumi.set(__self__, "group", group)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        return pulumi.get(self, "group")


@pulumi.output_type
class GtmAsmapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asNumbers":
            suggest = "as_numbers"
        elif key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmAsmapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmAsmapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmAsmapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_numbers: Sequence[int],
                 datacenter_id: int,
                 nickname: str):
        pulumi.set(__self__, "as_numbers", as_numbers)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="asNumbers")
    def as_numbers(self) -> Sequence[int]:
        return pulumi.get(self, "as_numbers")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmAsmapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmAsmapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmAsmapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmAsmapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmCidrmapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmCidrmapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmCidrmapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmCidrmapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: str,
                 blocks: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter
    def blocks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "blocks")


@pulumi.output_type
class GtmCidrmapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmCidrmapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmCidrmapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmCidrmapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmDatacenterDefaultLoadObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadObject":
            suggest = "load_object"
        elif key == "loadObjectPort":
            suggest = "load_object_port"
        elif key == "loadServers":
            suggest = "load_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmDatacenterDefaultLoadObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmDatacenterDefaultLoadObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmDatacenterDefaultLoadObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_object: Optional[str] = None,
                 load_object_port: Optional[int] = None,
                 load_servers: Optional[Sequence[str]] = None):
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[str]:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[int]:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GtmGeomapAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmGeomapAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmGeomapAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmGeomapAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: str,
                 countries: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "nickname", nickname)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")


@pulumi.output_type
class GtmGeomapDefaultDatacenter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmGeomapDefaultDatacenter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmGeomapDefaultDatacenter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmGeomapDefaultDatacenter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 nickname: Optional[str] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if nickname is not None:
            pulumi.set(__self__, "nickname", nickname)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def nickname(self) -> Optional[str]:
        return pulumi.get(self, "nickname")


@pulumi.output_type
class GtmPropertyLivenessTest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "testInterval":
            suggest = "test_interval"
        elif key == "testObjectProtocol":
            suggest = "test_object_protocol"
        elif key == "testTimeout":
            suggest = "test_timeout"
        elif key == "answersRequired":
            suggest = "answers_required"
        elif key == "disableNonstandardPortWarning":
            suggest = "disable_nonstandard_port_warning"
        elif key == "errorPenalty":
            suggest = "error_penalty"
        elif key == "httpError3xx":
            suggest = "http_error3xx"
        elif key == "httpError4xx":
            suggest = "http_error4xx"
        elif key == "httpError5xx":
            suggest = "http_error5xx"
        elif key == "httpHeaders":
            suggest = "http_headers"
        elif key == "peerCertificateVerification":
            suggest = "peer_certificate_verification"
        elif key == "recursionRequested":
            suggest = "recursion_requested"
        elif key == "requestString":
            suggest = "request_string"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "responseString":
            suggest = "response_string"
        elif key == "sslClientCertificate":
            suggest = "ssl_client_certificate"
        elif key == "sslClientPrivateKey":
            suggest = "ssl_client_private_key"
        elif key == "testObject":
            suggest = "test_object"
        elif key == "testObjectPassword":
            suggest = "test_object_password"
        elif key == "testObjectPort":
            suggest = "test_object_port"
        elif key == "testObjectUsername":
            suggest = "test_object_username"
        elif key == "timeoutPenalty":
            suggest = "timeout_penalty"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmPropertyLivenessTest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmPropertyLivenessTest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmPropertyLivenessTest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 test_interval: int,
                 test_object_protocol: str,
                 test_timeout: float,
                 answers_required: Optional[bool] = None,
                 disable_nonstandard_port_warning: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 error_penalty: Optional[float] = None,
                 http_error3xx: Optional[bool] = None,
                 http_error4xx: Optional[bool] = None,
                 http_error5xx: Optional[bool] = None,
                 http_headers: Optional[Sequence['outputs.GtmPropertyLivenessTestHttpHeader']] = None,
                 peer_certificate_verification: Optional[bool] = None,
                 recursion_requested: Optional[bool] = None,
                 request_string: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 response_string: Optional[str] = None,
                 ssl_client_certificate: Optional[str] = None,
                 ssl_client_private_key: Optional[str] = None,
                 test_object: Optional[str] = None,
                 test_object_password: Optional[str] = None,
                 test_object_port: Optional[int] = None,
                 test_object_username: Optional[str] = None,
                 timeout_penalty: Optional[float] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "test_interval", test_interval)
        pulumi.set(__self__, "test_object_protocol", test_object_protocol)
        pulumi.set(__self__, "test_timeout", test_timeout)
        if answers_required is not None:
            pulumi.set(__self__, "answers_required", answers_required)
        if disable_nonstandard_port_warning is not None:
            pulumi.set(__self__, "disable_nonstandard_port_warning", disable_nonstandard_port_warning)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if error_penalty is not None:
            pulumi.set(__self__, "error_penalty", error_penalty)
        if http_error3xx is not None:
            pulumi.set(__self__, "http_error3xx", http_error3xx)
        if http_error4xx is not None:
            pulumi.set(__self__, "http_error4xx", http_error4xx)
        if http_error5xx is not None:
            pulumi.set(__self__, "http_error5xx", http_error5xx)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if peer_certificate_verification is not None:
            pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        if recursion_requested is not None:
            pulumi.set(__self__, "recursion_requested", recursion_requested)
        if request_string is not None:
            pulumi.set(__self__, "request_string", request_string)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if response_string is not None:
            pulumi.set(__self__, "response_string", response_string)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_private_key is not None:
            pulumi.set(__self__, "ssl_client_private_key", ssl_client_private_key)
        if test_object is not None:
            pulumi.set(__self__, "test_object", test_object)
        if test_object_password is not None:
            pulumi.set(__self__, "test_object_password", test_object_password)
        if test_object_port is not None:
            pulumi.set(__self__, "test_object_port", test_object_port)
        if test_object_username is not None:
            pulumi.set(__self__, "test_object_username", test_object_username)
        if timeout_penalty is not None:
            pulumi.set(__self__, "timeout_penalty", timeout_penalty)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="testInterval")
    def test_interval(self) -> int:
        return pulumi.get(self, "test_interval")

    @property
    @pulumi.getter(name="testObjectProtocol")
    def test_object_protocol(self) -> str:
        return pulumi.get(self, "test_object_protocol")

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> float:
        return pulumi.get(self, "test_timeout")

    @property
    @pulumi.getter(name="answersRequired")
    def answers_required(self) -> Optional[bool]:
        return pulumi.get(self, "answers_required")

    @property
    @pulumi.getter(name="disableNonstandardPortWarning")
    def disable_nonstandard_port_warning(self) -> Optional[bool]:
        return pulumi.get(self, "disable_nonstandard_port_warning")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="errorPenalty")
    def error_penalty(self) -> Optional[float]:
        return pulumi.get(self, "error_penalty")

    @property
    @pulumi.getter(name="httpError3xx")
    def http_error3xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error3xx")

    @property
    @pulumi.getter(name="httpError4xx")
    def http_error4xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error4xx")

    @property
    @pulumi.getter(name="httpError5xx")
    def http_error5xx(self) -> Optional[bool]:
        return pulumi.get(self, "http_error5xx")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Sequence['outputs.GtmPropertyLivenessTestHttpHeader']]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> Optional[bool]:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter(name="recursionRequested")
    def recursion_requested(self) -> Optional[bool]:
        return pulumi.get(self, "recursion_requested")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> Optional[str]:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> Optional[str]:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_certificate")

    @property
    @pulumi.getter(name="sslClientPrivateKey")
    def ssl_client_private_key(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_private_key")

    @property
    @pulumi.getter(name="testObject")
    def test_object(self) -> Optional[str]:
        return pulumi.get(self, "test_object")

    @property
    @pulumi.getter(name="testObjectPassword")
    def test_object_password(self) -> Optional[str]:
        return pulumi.get(self, "test_object_password")

    @property
    @pulumi.getter(name="testObjectPort")
    def test_object_port(self) -> Optional[int]:
        return pulumi.get(self, "test_object_port")

    @property
    @pulumi.getter(name="testObjectUsername")
    def test_object_username(self) -> Optional[str]:
        return pulumi.get(self, "test_object_username")

    @property
    @pulumi.getter(name="timeoutPenalty")
    def timeout_penalty(self) -> Optional[float]:
        return pulumi.get(self, "timeout_penalty")


@pulumi.output_type
class GtmPropertyLivenessTestHttpHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GtmPropertyStaticRrSet(dict):
    def __init__(__self__, *,
                 rdatas: Optional[Sequence[str]] = None,
                 ttl: Optional[int] = None,
                 type: Optional[str] = None):
        if rdatas is not None:
            pulumi.set(__self__, "rdatas", rdatas)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def rdatas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rdatas")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GtmPropertyTrafficTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "handoutCname":
            suggest = "handout_cname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmPropertyTrafficTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmPropertyTrafficTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmPropertyTrafficTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 handout_cname: Optional[str] = None,
                 name: Optional[str] = None,
                 servers: Optional[Sequence[str]] = None,
                 weight: Optional[float] = None):
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if handout_cname is not None:
            pulumi.set(__self__, "handout_cname", handout_cname)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[int]:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="handoutCname")
    def handout_cname(self) -> Optional[str]:
        return pulumi.get(self, "handout_cname")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        warnings.warn("""The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""", DeprecationWarning)
        pulumi.log.warn("""name is deprecated: The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored""")

        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GtmResourceResourceInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "datacenterId":
            suggest = "datacenter_id"
        elif key == "loadObject":
            suggest = "load_object"
        elif key == "loadObjectPort":
            suggest = "load_object_port"
        elif key == "loadServers":
            suggest = "load_servers"
        elif key == "useDefaultLoadObject":
            suggest = "use_default_load_object"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GtmResourceResourceInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GtmResourceResourceInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GtmResourceResourceInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter_id: int,
                 load_object: Optional[str] = None,
                 load_object_port: Optional[int] = None,
                 load_servers: Optional[Sequence[str]] = None,
                 use_default_load_object: Optional[bool] = None):
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if load_object is not None:
            pulumi.set(__self__, "load_object", load_object)
        if load_object_port is not None:
            pulumi.set(__self__, "load_object_port", load_object_port)
        if load_servers is not None:
            pulumi.set(__self__, "load_servers", load_servers)
        if use_default_load_object is not None:
            pulumi.set(__self__, "use_default_load_object", use_default_load_object)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> Optional[str]:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> Optional[int]:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_servers")

    @property
    @pulumi.getter(name="useDefaultLoadObject")
    def use_default_load_object(self) -> Optional[bool]:
        return pulumi.get(self, "use_default_load_object")


@pulumi.output_type
class PropertyActivationComplianceRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noncomplianceReasonEmergency":
            suggest = "noncompliance_reason_emergency"
        elif key == "noncomplianceReasonNoProductionTraffic":
            suggest = "noncompliance_reason_no_production_traffic"
        elif key == "noncomplianceReasonNone":
            suggest = "noncompliance_reason_none"
        elif key == "noncomplianceReasonOther":
            suggest = "noncompliance_reason_other"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
                 noncompliance_reason_no_production_traffic: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
                 noncompliance_reason_none: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone'] = None,
                 noncompliance_reason_other: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther'] = None):
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency']:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic']:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone']:
        return pulumi.get(self, "noncompliance_reason_none")

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther']:
        return pulumi.get(self, "noncompliance_reason_other")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonEmergency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonEmergency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerEmail":
            suggest = "customer_email"
        elif key == "peerReviewedBy":
            suggest = "peer_reviewed_by"
        elif key == "ticketId":
            suggest = "ticket_id"
        elif key == "unitTested":
            suggest = "unit_tested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_email: Optional[str] = None,
                 peer_reviewed_by: Optional[str] = None,
                 ticket_id: Optional[str] = None,
                 unit_tested: Optional[bool] = None):
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[str]:
        return pulumi.get(self, "customer_email")

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[str]:
        return pulumi.get(self, "peer_reviewed_by")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[bool]:
        return pulumi.get(self, "unit_tested")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherNoncomplianceReason":
            suggest = "other_noncompliance_reason"
        elif key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[str] = None,
                 ticket_id: Optional[str] = None):
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[str]:
        return pulumi.get(self, "other_noncompliance_reason")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class PropertyHostname(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certProvisioningType":
            suggest = "cert_provisioning_type"
        elif key == "cnameFrom":
            suggest = "cname_from"
        elif key == "cnameTo":
            suggest = "cname_to"
        elif key == "certStatuses":
            suggest = "cert_statuses"
        elif key == "cnameType":
            suggest = "cname_type"
        elif key == "edgeHostnameId":
            suggest = "edge_hostname_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostname. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostname.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostname.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_provisioning_type: str,
                 cname_from: str,
                 cname_to: str,
                 cert_statuses: Optional[Sequence['outputs.PropertyHostnameCertStatus']] = None,
                 cname_type: Optional[str] = None,
                 edge_hostname_id: Optional[str] = None):
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "cname_from", cname_from)
        pulumi.set(__self__, "cname_to", cname_to)
        if cert_statuses is not None:
            pulumi.set(__self__, "cert_statuses", cert_statuses)
        if cname_type is not None:
            pulumi.set(__self__, "cname_type", cname_type)
        if edge_hostname_id is not None:
            pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> str:
        return pulumi.get(self, "cert_provisioning_type")

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> str:
        return pulumi.get(self, "cname_from")

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> str:
        return pulumi.get(self, "cname_to")

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Optional[Sequence['outputs.PropertyHostnameCertStatus']]:
        return pulumi.get(self, "cert_statuses")

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> Optional[str]:
        return pulumi.get(self, "cname_type")

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname_id")


@pulumi.output_type
class PropertyHostnameCertStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productionStatus":
            suggest = "production_status"
        elif key == "stagingStatus":
            suggest = "staging_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostnameCertStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 production_status: Optional[str] = None,
                 staging_status: Optional[str] = None,
                 target: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noncomplianceReasonEmergency":
            suggest = "noncompliance_reason_emergency"
        elif key == "noncomplianceReasonNoProductionTraffic":
            suggest = "noncompliance_reason_no_production_traffic"
        elif key == "noncomplianceReasonNone":
            suggest = "noncompliance_reason_none"
        elif key == "noncomplianceReasonOther":
            suggest = "noncompliance_reason_other"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
                 noncompliance_reason_no_production_traffic: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
                 noncompliance_reason_none: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone'] = None,
                 noncompliance_reason_other: Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther'] = None):
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency']:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic']:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone']:
        return pulumi.get(self, "noncompliance_reason_none")

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional['outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther']:
        return pulumi.get(self, "noncompliance_reason_other")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerEmail":
            suggest = "customer_email"
        elif key == "peerReviewedBy":
            suggest = "peer_reviewed_by"
        elif key == "ticketId":
            suggest = "ticket_id"
        elif key == "unitTested":
            suggest = "unit_tested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_email: Optional[str] = None,
                 peer_reviewed_by: Optional[str] = None,
                 ticket_id: Optional[str] = None,
                 unit_tested: Optional[bool] = None):
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[str]:
        return pulumi.get(self, "customer_email")

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[str]:
        return pulumi.get(self, "peer_reviewed_by")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[bool]:
        return pulumi.get(self, "unit_tested")


@pulumi.output_type
class PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherNoncomplianceReason":
            suggest = "other_noncompliance_reason"
        elif key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[str] = None,
                 ticket_id: Optional[str] = None):
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[str]:
        return pulumi.get(self, "other_noncompliance_reason")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCPSEnrollmentAdminContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentCsrResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 preferred_trust_chain: str,
                 state: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> str:
        return pulumi.get(self, "preferred_trust_chain")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCPSEnrollmentDnsChallengeResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 full_path: str,
                 response_body: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_path", full_path)
        pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> str:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class GetCPSEnrollmentHttpChallengeResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 full_path: str,
                 response_body: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_path", full_path)
        pulumi.set(__self__, "response_body", response_body)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullPath")
    def full_path(self) -> str:
        return pulumi.get(self, "full_path")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")


@pulumi.output_type
class GetCPSEnrollmentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
                 clone_dns_names: bool,
                 disallowed_tls_versions: Sequence[str],
                 geography: str,
                 must_have_ciphers: str,
                 ocsp_stapling: str,
                 preferred_ciphers: str,
                 quic_enabled: bool):
        pulumi.set(__self__, "client_mutual_authentications", client_mutual_authentications)
        pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        pulumi.set(__self__, "geography", geography)
        pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter(name="clientMutualAuthentications")
    def client_mutual_authentications(self) -> Sequence['outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult']:
        return pulumi.get(self, "client_mutual_authentications")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> bool:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Sequence[str]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> str:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> str:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> str:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> bool:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class GetCPSEnrollmentNetworkConfigurationClientMutualAuthenticationResult(dict):
    def __init__(__self__, *,
                 ocsp_enabled: bool,
                 send_ca_list_to_client: bool,
                 set_id: str):
        pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> bool:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> str:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class GetCPSEnrollmentOrganizationResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 address_line_two: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "address_line_two", address_line_two)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> str:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCPSEnrollmentTechContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentResult(dict):
    def __init__(__self__, *,
                 admin_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentAdminContactResult'],
                 certificate_chain_type: str,
                 certificate_type: str,
                 common_name: str,
                 csrs: Sequence['outputs.GetCPSEnrollmentsEnrollmentCsrResult'],
                 enable_multi_stacked_certificates: bool,
                 enrollment_id: int,
                 network_configurations: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationResult'],
                 organizations: Sequence['outputs.GetCPSEnrollmentsEnrollmentOrganizationResult'],
                 pending_changes: bool,
                 registration_authority: str,
                 sans: Sequence[str],
                 secure_network: str,
                 signature_algorithm: str,
                 sni_only: bool,
                 tech_contacts: Sequence['outputs.GetCPSEnrollmentsEnrollmentTechContactResult'],
                 validation_type: str):
        pulumi.set(__self__, "admin_contacts", admin_contacts)
        pulumi.set(__self__, "certificate_chain_type", certificate_chain_type)
        pulumi.set(__self__, "certificate_type", certificate_type)
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "csrs", csrs)
        pulumi.set(__self__, "enable_multi_stacked_certificates", enable_multi_stacked_certificates)
        pulumi.set(__self__, "enrollment_id", enrollment_id)
        pulumi.set(__self__, "network_configurations", network_configurations)
        pulumi.set(__self__, "organizations", organizations)
        pulumi.set(__self__, "pending_changes", pending_changes)
        pulumi.set(__self__, "registration_authority", registration_authority)
        pulumi.set(__self__, "sans", sans)
        pulumi.set(__self__, "secure_network", secure_network)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "sni_only", sni_only)
        pulumi.set(__self__, "tech_contacts", tech_contacts)
        pulumi.set(__self__, "validation_type", validation_type)

    @property
    @pulumi.getter(name="adminContacts")
    def admin_contacts(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentAdminContactResult']:
        return pulumi.get(self, "admin_contacts")

    @property
    @pulumi.getter(name="certificateChainType")
    def certificate_chain_type(self) -> str:
        return pulumi.get(self, "certificate_chain_type")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> str:
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> str:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter
    def csrs(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentCsrResult']:
        return pulumi.get(self, "csrs")

    @property
    @pulumi.getter(name="enableMultiStackedCertificates")
    def enable_multi_stacked_certificates(self) -> bool:
        return pulumi.get(self, "enable_multi_stacked_certificates")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> int:
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationResult']:
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentOrganizationResult']:
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter(name="pendingChanges")
    def pending_changes(self) -> bool:
        return pulumi.get(self, "pending_changes")

    @property
    @pulumi.getter(name="registrationAuthority")
    def registration_authority(self) -> str:
        return pulumi.get(self, "registration_authority")

    @property
    @pulumi.getter
    def sans(self) -> Sequence[str]:
        return pulumi.get(self, "sans")

    @property
    @pulumi.getter(name="secureNetwork")
    def secure_network(self) -> str:
        return pulumi.get(self, "secure_network")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> str:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="sniOnly")
    def sni_only(self) -> bool:
        return pulumi.get(self, "sni_only")

    @property
    @pulumi.getter(name="techContacts")
    def tech_contacts(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentTechContactResult']:
        return pulumi.get(self, "tech_contacts")

    @property
    @pulumi.getter(name="validationType")
    def validation_type(self) -> str:
        return pulumi.get(self, "validation_type")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentAdminContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentCsrResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 organization: str,
                 organizational_unit: str,
                 preferred_trust_chain: str,
                 state: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "organizational_unit", organizational_unit)
        pulumi.set(__self__, "preferred_trust_chain", preferred_trust_chain)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> str:
        return pulumi.get(self, "organizational_unit")

    @property
    @pulumi.getter(name="preferredTrustChain")
    def preferred_trust_chain(self) -> str:
        return pulumi.get(self, "preferred_trust_chain")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 client_mutual_authentications: Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult'],
                 clone_dns_names: bool,
                 disallowed_tls_versions: Sequence[str],
                 geography: str,
                 must_have_ciphers: str,
                 ocsp_stapling: str,
                 preferred_ciphers: str,
                 quic_enabled: bool):
        pulumi.set(__self__, "client_mutual_authentications", client_mutual_authentications)
        pulumi.set(__self__, "clone_dns_names", clone_dns_names)
        pulumi.set(__self__, "disallowed_tls_versions", disallowed_tls_versions)
        pulumi.set(__self__, "geography", geography)
        pulumi.set(__self__, "must_have_ciphers", must_have_ciphers)
        pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        pulumi.set(__self__, "preferred_ciphers", preferred_ciphers)
        pulumi.set(__self__, "quic_enabled", quic_enabled)

    @property
    @pulumi.getter(name="clientMutualAuthentications")
    def client_mutual_authentications(self) -> Sequence['outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult']:
        return pulumi.get(self, "client_mutual_authentications")

    @property
    @pulumi.getter(name="cloneDnsNames")
    def clone_dns_names(self) -> bool:
        return pulumi.get(self, "clone_dns_names")

    @property
    @pulumi.getter(name="disallowedTlsVersions")
    def disallowed_tls_versions(self) -> Sequence[str]:
        return pulumi.get(self, "disallowed_tls_versions")

    @property
    @pulumi.getter
    def geography(self) -> str:
        return pulumi.get(self, "geography")

    @property
    @pulumi.getter(name="mustHaveCiphers")
    def must_have_ciphers(self) -> str:
        return pulumi.get(self, "must_have_ciphers")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> str:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="preferredCiphers")
    def preferred_ciphers(self) -> str:
        return pulumi.get(self, "preferred_ciphers")

    @property
    @pulumi.getter(name="quicEnabled")
    def quic_enabled(self) -> bool:
        return pulumi.get(self, "quic_enabled")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthenticationResult(dict):
    def __init__(__self__, *,
                 ocsp_enabled: bool,
                 send_ca_list_to_client: bool,
                 set_id: str):
        pulumi.set(__self__, "ocsp_enabled", ocsp_enabled)
        pulumi.set(__self__, "send_ca_list_to_client", send_ca_list_to_client)
        pulumi.set(__self__, "set_id", set_id)

    @property
    @pulumi.getter(name="ocspEnabled")
    def ocsp_enabled(self) -> bool:
        return pulumi.get(self, "ocsp_enabled")

    @property
    @pulumi.getter(name="sendCaListToClient")
    def send_ca_list_to_client(self) -> bool:
        return pulumi.get(self, "send_ca_list_to_client")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> str:
        return pulumi.get(self, "set_id")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentOrganizationResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 address_line_two: str,
                 city: str,
                 country_code: str,
                 name: str,
                 phone: str,
                 postal_code: str,
                 region: str):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "address_line_two", address_line_two)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> str:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCPSEnrollmentsEnrollmentTechContactResult(dict):
    def __init__(__self__, *,
                 address_line_one: str,
                 city: str,
                 country_code: str,
                 email: str,
                 first_name: str,
                 last_name: str,
                 organization: str,
                 phone: str,
                 postal_code: str,
                 region: str,
                 address_line_two: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "address_line_one", address_line_one)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "region", region)
        if address_line_two is not None:
            pulumi.set(__self__, "address_line_two", address_line_two)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="addressLineOne")
    def address_line_one(self) -> str:
        return pulumi.get(self, "address_line_one")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def phone(self) -> str:
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="addressLineTwo")
    def address_line_two(self) -> Optional[str]:
        return pulumi.get(self, "address_line_two")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetClientlistListsListResult(dict):
    def __init__(__self__, *,
                 create_date: str,
                 created_by: str,
                 deprecated: bool,
                 items_count: int,
                 list_id: str,
                 list_type: str,
                 notes: str,
                 production_activation_status: str,
                 read_only: bool,
                 shared: bool,
                 staging_activation_status: str,
                 tags: Sequence[str],
                 update_date: str,
                 updated_by: str,
                 version: int,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "create_date", create_date)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "items_count", items_count)
        pulumi.set(__self__, "list_id", list_id)
        pulumi.set(__self__, "list_type", list_type)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "production_activation_status", production_activation_status)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "shared", shared)
        pulumi.set(__self__, "staging_activation_status", staging_activation_status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "update_date", update_date)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> str:
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter(name="itemsCount")
    def items_count(self) -> int:
        return pulumi.get(self, "items_count")

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> str:
        return pulumi.get(self, "list_id")

    @property
    @pulumi.getter(name="listType")
    def list_type(self) -> str:
        return pulumi.get(self, "list_type")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="productionActivationStatus")
    def production_activation_status(self) -> str:
        return pulumi.get(self, "production_activation_status")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def shared(self) -> bool:
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter(name="stagingActivationStatus")
    def staging_activation_status(self) -> str:
        return pulumi.get(self, "staging_activation_status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> str:
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerDataCenterResult(dict):
    def __init__(__self__, *,
                 city: str,
                 cloud_server_host_header_override: bool,
                 cloud_service: bool,
                 continent: str,
                 country: str,
                 hostname: str,
                 latitude: float,
                 liveness_hosts: Sequence[str],
                 longitude: float,
                 origin_id: str,
                 percent: float,
                 state_or_province: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        pulumi.set(__self__, "cloud_service", cloud_service)
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "liveness_hosts", liveness_hosts)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "state_or_province", state_or_province)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> bool:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudService")
    def cloud_service(self) -> bool:
        return pulumi.get(self, "cloud_service")

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter(name="livenessHosts")
    def liveness_hosts(self) -> Sequence[str]:
        return pulumi.get(self, "liveness_hosts")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> float:
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> str:
        return pulumi.get(self, "state_or_province")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerLivenessSettingResult(dict):
    def __init__(__self__, *,
                 additional_headers: Mapping[str, str],
                 host_header: str,
                 interval: int,
                 path: str,
                 peer_certificate_verification: bool,
                 port: int,
                 protocol: str,
                 request_string: str,
                 response_string: str,
                 status3xx_failure: bool,
                 status4xx_failure: bool,
                 status5xx_failure: bool,
                 timeout: float):
        pulumi.set(__self__, "additional_headers", additional_headers)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "peer_certificate_verification", peer_certificate_verification)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "request_string", request_string)
        pulumi.set(__self__, "response_string", response_string)
        pulumi.set(__self__, "status3xx_failure", status3xx_failure)
        pulumi.set(__self__, "status4xx_failure", status4xx_failure)
        pulumi.set(__self__, "status5xx_failure", status5xx_failure)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="additionalHeaders")
    def additional_headers(self) -> Mapping[str, str]:
        return pulumi.get(self, "additional_headers")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="peerCertificateVerification")
    def peer_certificate_verification(self) -> bool:
        return pulumi.get(self, "peer_certificate_verification")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestString")
    def request_string(self) -> str:
        return pulumi.get(self, "request_string")

    @property
    @pulumi.getter(name="responseString")
    def response_string(self) -> str:
        return pulumi.get(self, "response_string")

    @property
    @pulumi.getter(name="status3xxFailure")
    def status3xx_failure(self) -> bool:
        return pulumi.get(self, "status3xx_failure")

    @property
    @pulumi.getter(name="status4xxFailure")
    def status4xx_failure(self) -> bool:
        return pulumi.get(self, "status4xx_failure")

    @property
    @pulumi.getter(name="status5xxFailure")
    def status5xx_failure(self) -> bool:
        return pulumi.get(self, "status5xx_failure")

    @property
    @pulumi.getter
    def timeout(self) -> float:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult'],
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 id: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult']:
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingResult(dict):
    def __init__(__self__, *,
                 origin_id: str):
        pulumi.set(__self__, "origin_id", origin_id)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 redirect_url: str,
                 status_code: int,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None,
                 use_incoming_query_string: Optional[bool] = None,
                 use_relative_url: Optional[str] = None):
        pulumi.set(__self__, "redirect_url", redirect_url)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)
        if use_relative_url is not None:
            pulumi.set(__self__, "use_relative_url", use_relative_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")

    @property
    @pulumi.getter(name="useRelativeUrl")
    def use_relative_url(self) -> Optional[str]:
        return pulumi.get(self, "use_relative_url")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: Optional[str] = None,
                 path_and_qs: Optional[str] = None,
                 use_incoming_query_string: Optional[bool] = None):
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if path_and_qs is not None:
            pulumi.set(__self__, "path_and_qs", path_and_qs)
        if use_incoming_query_string is not None:
            pulumi.set(__self__, "use_incoming_query_string", use_incoming_query_string)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="pathAndQs")
    def path_and_qs(self) -> Optional[str]:
        return pulumi.get(self, "path_and_qs")

    @property
    @pulumi.getter(name="useIncomingQueryString")
    def use_incoming_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_incoming_query_string")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 forward_settings: 'outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult',
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "forward_settings", forward_settings)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="forwardSettings")
    def forward_settings(self) -> 'outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult':
        return pulumi.get(self, "forward_settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsResult(dict):
    def __init__(__self__, *,
                 origin_id: str,
                 percent: int):
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def percent(self) -> int:
        return pulumi.get(self, "percent")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsPolicyActivationResult(dict):
    def __init__(__self__, *,
                 api_version: str,
                 network: str,
                 policy_infos: Sequence['outputs.GetCloudletsPolicyActivationPolicyInfoResult'],
                 property_infos: Sequence['outputs.GetCloudletsPolicyActivationPropertyInfoResult']):
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "policy_infos", policy_infos)
        pulumi.set(__self__, "property_infos", property_infos)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="policyInfos")
    def policy_infos(self) -> Sequence['outputs.GetCloudletsPolicyActivationPolicyInfoResult']:
        return pulumi.get(self, "policy_infos")

    @property
    @pulumi.getter(name="propertyInfos")
    def property_infos(self) -> Sequence['outputs.GetCloudletsPolicyActivationPropertyInfoResult']:
        return pulumi.get(self, "property_infos")


@pulumi.output_type
class GetCloudletsPolicyActivationPolicyInfoResult(dict):
    def __init__(__self__, *,
                 activated_by: str,
                 activation_date: int,
                 name: str,
                 policy_id: int,
                 status: str,
                 status_detail: str,
                 version: int):
        pulumi.set(__self__, "activated_by", activated_by)
        pulumi.set(__self__, "activation_date", activation_date)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_detail", status_detail)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="activatedBy")
    def activated_by(self) -> str:
        return pulumi.get(self, "activated_by")

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> int:
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> int:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> str:
        return pulumi.get(self, "status_detail")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCloudletsPolicyActivationPropertyInfoResult(dict):
    def __init__(__self__, *,
                 activated_by: str,
                 activation_date: int,
                 group_id: int,
                 name: str,
                 status: str,
                 version: int):
        pulumi.set(__self__, "activated_by", activated_by)
        pulumi.set(__self__, "activation_date", activation_date)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="activatedBy")
    def activated_by(self) -> str:
        return pulumi.get(self, "activated_by")

    @property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> int:
        return pulumi.get(self, "activation_date")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 allow_deny: str,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchResult']] = None,
                 matches_always: Optional[bool] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "allow_deny", allow_deny)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if matches_always is not None:
            pulumi.set(__self__, "matches_always", matches_always)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="allowDeny")
    def allow_deny(self) -> str:
        return pulumi.get(self, "allow_deny")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="matchesAlways")
    def matches_always(self) -> Optional[bool]:
        return pulumi.get(self, "matches_always")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleResult(dict):
    def __init__(__self__, *,
                 pass_through_percent: float,
                 type: str,
                 disabled: Optional[bool] = None,
                 end: Optional[int] = None,
                 match_url: Optional[str] = None,
                 matches: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult']] = None,
                 name: Optional[str] = None,
                 start: Optional[int] = None):
        pulumi.set(__self__, "pass_through_percent", pass_through_percent)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if match_url is not None:
            pulumi.set(__self__, "match_url", match_url)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="passThroughPercent")
    def pass_through_percent(self) -> float:
        return pulumi.get(self, "pass_through_percent")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter(name="matchUrl")
    def match_url(self) -> Optional[str]:
        return pulumi.get(self, "match_url")

    @property
    @pulumi.getter
    def matches(self) -> Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult']]:
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 check_ips: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 negate: Optional[bool] = None,
                 object_match_values: Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if object_match_values is not None:
            pulumi.set(__self__, "object_match_values", object_match_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def negate(self) -> Optional[bool]:
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter(name="objectMatchValues")
    def object_match_values(self) -> Optional[Sequence['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult']]:
        return pulumi.get(self, "object_match_values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueResult(dict):
    def __init__(__self__, *,
                 type: str,
                 name: Optional[str] = None,
                 name_case_sensitive: Optional[bool] = None,
                 name_has_wildcard: Optional[bool] = None,
                 options: Optional['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult'] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_case_sensitive is not None:
            pulumi.set(__self__, "name_case_sensitive", name_case_sensitive)
        if name_has_wildcard is not None:
            pulumi.set(__self__, "name_has_wildcard", name_has_wildcard)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameCaseSensitive")
    def name_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "name_case_sensitive")

    @property
    @pulumi.getter(name="nameHasWildcard")
    def name_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "name_has_wildcard")

    @property
    @pulumi.getter
    def options(self) -> Optional['outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsResult(dict):
    def __init__(__self__, *,
                 value_case_sensitive: Optional[bool] = None,
                 value_escaped: Optional[bool] = None,
                 value_has_wildcard: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        if value_case_sensitive is not None:
            pulumi.set(__self__, "value_case_sensitive", value_case_sensitive)
        if value_escaped is not None:
            pulumi.set(__self__, "value_escaped", value_escaped)
        if value_has_wildcard is not None:
            pulumi.set(__self__, "value_has_wildcard", value_has_wildcard)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="valueCaseSensitive")
    def value_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "value_case_sensitive")

    @property
    @pulumi.getter(name="valueEscaped")
    def value_escaped(self) -> Optional[bool]:
        return pulumi.get(self, "value_escaped")

    @property
    @pulumi.getter(name="valueHasWildcard")
    def value_has_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "value_has_wildcard")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityResult(dict):
    def __init__(__self__, *,
                 approved: 'outputs.GetCloudwrapperCapacitiesCapacityApprovedResult',
                 assigned: 'outputs.GetCloudwrapperCapacitiesCapacityAssignedResult',
                 contract_id: str,
                 location_id: int,
                 location_name: str,
                 type: str,
                 unassigned: 'outputs.GetCloudwrapperCapacitiesCapacityUnassignedResult'):
        pulumi.set(__self__, "approved", approved)
        pulumi.set(__self__, "assigned", assigned)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unassigned", unassigned)

    @property
    @pulumi.getter
    def approved(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityApprovedResult':
        return pulumi.get(self, "approved")

    @property
    @pulumi.getter
    def assigned(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityAssignedResult':
        return pulumi.get(self, "assigned")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def unassigned(self) -> 'outputs.GetCloudwrapperCapacitiesCapacityUnassignedResult':
        return pulumi.get(self, "unassigned")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityApprovedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityAssignedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperCapacitiesCapacityUnassignedResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationLocationResult(dict):
    def __init__(__self__, *,
                 capacity: 'outputs.GetCloudwrapperConfigurationLocationCapacityResult',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.GetCloudwrapperConfigurationLocationCapacityResult':
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperConfigurationLocationCapacityResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsResult(dict):
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccResult'] = None,
                 cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnResult']] = None,
                 data_streams: Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult'] = None,
                 origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginResult']] = None):
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @property
    @pulumi.getter
    def bocc(self) -> Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccResult']:
        return pulumi.get(self, "bocc")

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnResult']]:
        return pulumi.get(self, "cdns")

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['outputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult']:
        return pulumi.get(self, "data_streams")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginResult']]:
        return pulumi.get(self, "origins")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsBoccResult(dict):
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnResult(dict):
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None):
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']]:
        return pulumi.get(self, "cdn_auth_keys")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyResult(dict):
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsResult(dict):
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetCloudwrapperConfigurationMultiCdnSettingsOriginResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 capacity_alerts_threshold: int,
                 comments: str,
                 config_name: str,
                 contract_id: str,
                 id: int,
                 last_activated_by: str,
                 last_activated_date: str,
                 last_updated_by: str,
                 last_updated_date: str,
                 notification_emails: Sequence[str],
                 property_ids: Sequence[str],
                 retain_idle_objects: bool,
                 status: str,
                 locations: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationLocationResult']] = None,
                 multi_cdn_settings: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult'] = None):
        pulumi.set(__self__, "capacity_alerts_threshold", capacity_alerts_threshold)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_activated_by", last_activated_by)
        pulumi.set(__self__, "last_activated_date", last_activated_date)
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        pulumi.set(__self__, "notification_emails", notification_emails)
        pulumi.set(__self__, "property_ids", property_ids)
        pulumi.set(__self__, "retain_idle_objects", retain_idle_objects)
        pulumi.set(__self__, "status", status)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if multi_cdn_settings is not None:
            pulumi.set(__self__, "multi_cdn_settings", multi_cdn_settings)

    @property
    @pulumi.getter(name="capacityAlertsThreshold")
    def capacity_alerts_threshold(self) -> int:
        return pulumi.get(self, "capacity_alerts_threshold")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastActivatedBy")
    def last_activated_by(self) -> str:
        return pulumi.get(self, "last_activated_by")

    @property
    @pulumi.getter(name="lastActivatedDate")
    def last_activated_date(self) -> str:
        return pulumi.get(self, "last_activated_date")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> str:
        return pulumi.get(self, "last_updated_date")

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Sequence[str]:
        return pulumi.get(self, "notification_emails")

    @property
    @pulumi.getter(name="propertyIds")
    def property_ids(self) -> Sequence[str]:
        return pulumi.get(self, "property_ids")

    @property
    @pulumi.getter(name="retainIdleObjects")
    def retain_idle_objects(self) -> bool:
        return pulumi.get(self, "retain_idle_objects")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationLocationResult']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="multiCdnSettings")
    def multi_cdn_settings(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult']:
        return pulumi.get(self, "multi_cdn_settings")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationLocationResult(dict):
    def __init__(__self__, *,
                 capacity: 'outputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityResult',
                 comments: str,
                 map_name: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "map_name", map_name)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityResult':
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationLocationCapacityResult(dict):
    def __init__(__self__, *,
                 unit: str,
                 value: int):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsResult(dict):
    def __init__(__self__, *,
                 enable_soft_alerts: bool,
                 bocc: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult'] = None,
                 cdns: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult']] = None,
                 data_streams: Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult'] = None,
                 origins: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult']] = None):
        pulumi.set(__self__, "enable_soft_alerts", enable_soft_alerts)
        if bocc is not None:
            pulumi.set(__self__, "bocc", bocc)
        if cdns is not None:
            pulumi.set(__self__, "cdns", cdns)
        if data_streams is not None:
            pulumi.set(__self__, "data_streams", data_streams)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="enableSoftAlerts")
    def enable_soft_alerts(self) -> bool:
        return pulumi.get(self, "enable_soft_alerts")

    @property
    @pulumi.getter
    def bocc(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult']:
        return pulumi.get(self, "bocc")

    @property
    @pulumi.getter
    def cdns(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult']]:
        return pulumi.get(self, "cdns")

    @property
    @pulumi.getter(name="dataStreams")
    def data_streams(self) -> Optional['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult']:
        return pulumi.get(self, "data_streams")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult']]:
        return pulumi.get(self, "origins")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult(dict):
    def __init__(__self__, *,
                 conditional_sampling_frequency: str,
                 enabled: bool,
                 forward_type: str,
                 request_type: str,
                 sampling_frequency: str):
        pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "forward_type", forward_type)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "sampling_frequency", sampling_frequency)

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> str:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> str:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> str:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> str:
        return pulumi.get(self, "sampling_frequency")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnResult(dict):
    def __init__(__self__, *,
                 cdn_code: str,
                 enabled: bool,
                 https_only: bool,
                 ip_acl_cidrs: Sequence[str],
                 cdn_auth_keys: Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']] = None):
        pulumi.set(__self__, "cdn_code", cdn_code)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "https_only", https_only)
        pulumi.set(__self__, "ip_acl_cidrs", ip_acl_cidrs)
        if cdn_auth_keys is not None:
            pulumi.set(__self__, "cdn_auth_keys", cdn_auth_keys)

    @property
    @pulumi.getter(name="cdnCode")
    def cdn_code(self) -> str:
        return pulumi.get(self, "cdn_code")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> bool:
        return pulumi.get(self, "https_only")

    @property
    @pulumi.getter(name="ipAclCidrs")
    def ip_acl_cidrs(self) -> Sequence[str]:
        return pulumi.get(self, "ip_acl_cidrs")

    @property
    @pulumi.getter(name="cdnAuthKeys")
    def cdn_auth_keys(self) -> Optional[Sequence['outputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult']]:
        return pulumi.get(self, "cdn_auth_keys")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyResult(dict):
    def __init__(__self__, *,
                 auth_key_name: str,
                 expiry_date: str,
                 header_name: str,
                 secret: str):
        pulumi.set(__self__, "auth_key_name", auth_key_name)
        pulumi.set(__self__, "expiry_date", expiry_date)
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter(name="authKeyName")
    def auth_key_name(self) -> str:
        return pulumi.get(self, "auth_key_name")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsResult(dict):
    def __init__(__self__, *,
                 data_stream_ids: Sequence[int],
                 enabled: bool,
                 sampling_rate: int):
        pulumi.set(__self__, "data_stream_ids", data_stream_ids)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sampling_rate", sampling_rate)

    @property
    @pulumi.getter(name="dataStreamIds")
    def data_stream_ids(self) -> Sequence[int]:
        return pulumi.get(self, "data_stream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> int:
        return pulumi.get(self, "sampling_rate")


@pulumi.output_type
class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 origin_id: str,
                 property_id: int):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "origin_id", origin_id)
        pulumi.set(__self__, "property_id", property_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")


@pulumi.output_type
class GetCloudwrapperLocationsLocationResult(dict):
    def __init__(__self__, *,
                 location_id: int,
                 location_name: str,
                 multi_cdn_location_id: str,
                 traffic_types: Optional[Sequence['outputs.GetCloudwrapperLocationsLocationTrafficTypeResult']] = None):
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "multi_cdn_location_id", multi_cdn_location_id)
        if traffic_types is not None:
            pulumi.set(__self__, "traffic_types", traffic_types)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="multiCdnLocationId")
    def multi_cdn_location_id(self) -> str:
        return pulumi.get(self, "multi_cdn_location_id")

    @property
    @pulumi.getter(name="trafficTypes")
    def traffic_types(self) -> Optional[Sequence['outputs.GetCloudwrapperLocationsLocationTrafficTypeResult']]:
        return pulumi.get(self, "traffic_types")


@pulumi.output_type
class GetCloudwrapperLocationsLocationTrafficTypeResult(dict):
    def __init__(__self__, *,
                 location_id: str,
                 traffic_type: str,
                 traffic_type_id: int):
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "traffic_type", traffic_type)
        pulumi.set(__self__, "traffic_type_id", traffic_type_id)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> str:
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter(name="trafficTypeId")
    def traffic_type_id(self) -> int:
        return pulumi.get(self, "traffic_type_id")


@pulumi.output_type
class GetCloudwrapperPropertiesPropertyResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 group_id: int,
                 property_id: int,
                 property_name: str,
                 type: str):
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetContractsContractResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 contract_type_name: str):
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "contract_type_name", contract_type_name)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="contractTypeName")
    def contract_type_name(self) -> str:
        return pulumi.get(self, "contract_type_name")


@pulumi.output_type
class GetDatastreamActivationHistoryActivationResult(dict):
    def __init__(__self__, *,
                 modified_by: str,
                 modified_date: str,
                 status: str,
                 stream_id: int,
                 stream_version: int):
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_date", modified_date)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "stream_version", stream_version)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> int:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamVersion")
    def stream_version(self) -> int:
        return pulumi.get(self, "stream_version")


@pulumi.output_type
class GetDatastreamDatasetFieldsDatasetFieldResult(dict):
    def __init__(__self__, *,
                 dataset_field_description: str,
                 dataset_field_group: str,
                 dataset_field_id: int,
                 dataset_field_json_key: str,
                 dataset_field_name: str):
        pulumi.set(__self__, "dataset_field_description", dataset_field_description)
        pulumi.set(__self__, "dataset_field_group", dataset_field_group)
        pulumi.set(__self__, "dataset_field_id", dataset_field_id)
        pulumi.set(__self__, "dataset_field_json_key", dataset_field_json_key)
        pulumi.set(__self__, "dataset_field_name", dataset_field_name)

    @property
    @pulumi.getter(name="datasetFieldDescription")
    def dataset_field_description(self) -> str:
        return pulumi.get(self, "dataset_field_description")

    @property
    @pulumi.getter(name="datasetFieldGroup")
    def dataset_field_group(self) -> str:
        return pulumi.get(self, "dataset_field_group")

    @property
    @pulumi.getter(name="datasetFieldId")
    def dataset_field_id(self) -> int:
        return pulumi.get(self, "dataset_field_id")

    @property
    @pulumi.getter(name="datasetFieldJsonKey")
    def dataset_field_json_key(self) -> str:
        return pulumi.get(self, "dataset_field_json_key")

    @property
    @pulumi.getter(name="datasetFieldName")
    def dataset_field_name(self) -> str:
        return pulumi.get(self, "dataset_field_name")


@pulumi.output_type
class GetDatastreamsStreamsDetailResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 created_by: str,
                 created_date: str,
                 group_id: int,
                 latest_version: int,
                 modified_by: str,
                 modified_date: str,
                 product_id: str,
                 properties: Sequence['outputs.GetDatastreamsStreamsDetailPropertyResult'],
                 stream_id: int,
                 stream_name: str,
                 stream_status: str,
                 stream_version: int):
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "modified_date", modified_date)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "stream_id", stream_id)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_status", stream_status)
        pulumi.set(__self__, "stream_version", stream_version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedDate")
    def modified_date(self) -> str:
        return pulumi.get(self, "modified_date")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDatastreamsStreamsDetailPropertyResult']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> int:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamStatus")
    def stream_status(self) -> str:
        return pulumi.get(self, "stream_status")

    @property
    @pulumi.getter(name="streamVersion")
    def stream_version(self) -> int:
        return pulumi.get(self, "stream_version")


@pulumi.output_type
class GetDatastreamsStreamsDetailPropertyResult(dict):
    def __init__(__self__, *,
                 property_id: int,
                 property_name: str):
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> int:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 contract_ids: Sequence[str],
                 group_id: str,
                 group_name: str,
                 parent_group_id: str):
        pulumi.set(__self__, "contract_ids", contract_ids)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "parent_group_id", parent_group_id)

    @property
    @pulumi.getter(name="contractIds")
    def contract_ids(self) -> Sequence[str]:
        return pulumi.get(self, "contract_ids")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="parentGroupId")
    def parent_group_id(self) -> str:
        return pulumi.get(self, "parent_group_id")


@pulumi.output_type
class GetGtmDatacenterDefaultLoadObjectResult(dict):
    def __init__(__self__, *,
                 load_object: str,
                 load_object_port: int,
                 load_servers: Sequence[str]):
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> str:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> int:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[str]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GetGtmDatacenterLinkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 rel: str):
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetGtmDatacentersDatacenterResult(dict):
    def __init__(__self__, *,
                 city: str,
                 clone_of: int,
                 cloud_server_host_header_override: bool,
                 cloud_server_targeting: bool,
                 continent: str,
                 country: str,
                 datacenter_id: int,
                 default_load_objects: Sequence['outputs.GetGtmDatacentersDatacenterDefaultLoadObjectResult'],
                 latitude: float,
                 links: Sequence['outputs.GetGtmDatacentersDatacenterLinkResult'],
                 longitude: float,
                 nickname: str,
                 score_penalty: int,
                 servermonitor_pool: str,
                 state_or_province: str,
                 virtual: bool):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "clone_of", clone_of)
        pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        pulumi.set(__self__, "cloud_server_targeting", cloud_server_targeting)
        pulumi.set(__self__, "continent", continent)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        pulumi.set(__self__, "default_load_objects", default_load_objects)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "nickname", nickname)
        pulumi.set(__self__, "score_penalty", score_penalty)
        pulumi.set(__self__, "servermonitor_pool", servermonitor_pool)
        pulumi.set(__self__, "state_or_province", state_or_province)
        pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloneOf")
    def clone_of(self) -> int:
        return pulumi.get(self, "clone_of")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> bool:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudServerTargeting")
    def cloud_server_targeting(self) -> bool:
        return pulumi.get(self, "cloud_server_targeting")

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="defaultLoadObjects")
    def default_load_objects(self) -> Sequence['outputs.GetGtmDatacentersDatacenterDefaultLoadObjectResult']:
        return pulumi.get(self, "default_load_objects")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetGtmDatacentersDatacenterLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter(name="scorePenalty")
    def score_penalty(self) -> int:
        return pulumi.get(self, "score_penalty")

    @property
    @pulumi.getter(name="servermonitorPool")
    def servermonitor_pool(self) -> str:
        return pulumi.get(self, "servermonitor_pool")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> str:
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter
    def virtual(self) -> bool:
        return pulumi.get(self, "virtual")


@pulumi.output_type
class GetGtmDatacentersDatacenterDefaultLoadObjectResult(dict):
    def __init__(__self__, *,
                 load_object: str,
                 load_object_port: int,
                 load_servers: Sequence[str]):
        pulumi.set(__self__, "load_object", load_object)
        pulumi.set(__self__, "load_object_port", load_object_port)
        pulumi.set(__self__, "load_servers", load_servers)

    @property
    @pulumi.getter(name="loadObject")
    def load_object(self) -> str:
        return pulumi.get(self, "load_object")

    @property
    @pulumi.getter(name="loadObjectPort")
    def load_object_port(self) -> int:
        return pulumi.get(self, "load_object_port")

    @property
    @pulumi.getter(name="loadServers")
    def load_servers(self) -> Sequence[str]:
        return pulumi.get(self, "load_servers")


@pulumi.output_type
class GetGtmDatacentersDatacenterLinkResult(dict):
    def __init__(__self__, *,
                 href: str,
                 rel: str):
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @property
    @pulumi.getter
    def href(self) -> str:
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def rel(self) -> str:
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetIamGrantableRolesGrantableRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 granted_role_id: int,
                 name: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "granted_role_id", granted_role_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantedRoleId")
    def granted_role_id(self) -> int:
        return pulumi.get(self, "granted_role_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIamRolesRoleResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 description: str,
                 modified_by: str,
                 name: str,
                 role_id: str,
                 time_created: str,
                 time_modified: str,
                 type: str):
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_modified", time_modified)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeModified")
    def time_modified(self) -> str:
        return pulumi.get(self, "time_modified")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIamTimezonesTimezoneResult(dict):
    def __init__(__self__, *,
                 description: str,
                 offset: str,
                 posix: str,
                 timezone: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "posix", posix)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def offset(self) -> str:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def posix(self) -> str:
        return pulumi.get(self, "posix")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetImagingPolicyImagePolicyResult(dict):
    def __init__(__self__, *,
                 breakpoints: Optional['outputs.GetImagingPolicyImagePolicyBreakpointsResult'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['outputs.GetImagingPolicyImagePolicyOutputResult'] = None,
                 post_breakpoint_transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None,
                 rollout_duration: Optional[str] = None,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None,
                 variables: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableResult']] = None):
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if post_breakpoint_transformations is not None:
            pulumi.set(__self__, "post_breakpoint_transformations", post_breakpoint_transformations)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['outputs.GetImagingPolicyImagePolicyBreakpointsResult']:
        return pulumi.get(self, "breakpoints")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def output(self) -> Optional['outputs.GetImagingPolicyImagePolicyOutputResult']:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="postBreakpointTransformations")
    def post_breakpoint_transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']]:
        return pulumi.get(self, "post_breakpoint_transformations")

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']]:
        return pulumi.get(self, "transformations")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImagingPolicyImagePolicyBreakpointsResult(dict):
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")


@pulumi.output_type
class GetImagingPolicyImagePolicyOutputResult(dict):
    def __init__(__self__, *,
                 adaptive_quality: Optional[str] = None,
                 allowed_formats: Optional[Sequence[str]] = None,
                 forced_formats: Optional[Sequence[str]] = None,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_floor: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 quality: Optional[str] = None,
                 quality_var: Optional[str] = None):
        if adaptive_quality is not None:
            pulumi.set(__self__, "adaptive_quality", adaptive_quality)
        if allowed_formats is not None:
            pulumi.set(__self__, "allowed_formats", allowed_formats)
        if forced_formats is not None:
            pulumi.set(__self__, "forced_formats", forced_formats)
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_floor is not None:
            pulumi.set(__self__, "perceptual_quality_floor", perceptual_quality_floor)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quality_var is not None:
            pulumi.set(__self__, "quality_var", quality_var)

    @property
    @pulumi.getter(name="adaptiveQuality")
    def adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "adaptive_quality")

    @property
    @pulumi.getter(name="allowedFormats")
    def allowed_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_formats")

    @property
    @pulumi.getter(name="forcedFormats")
    def forced_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "forced_formats")

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @property
    @pulumi.getter(name="perceptualQualityFloor")
    def perceptual_quality_floor(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_floor")

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @property
    @pulumi.getter
    def quality(self) -> Optional[str]:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="qualityVar")
    def quality_var(self) -> Optional[str]:
        return pulumi.get(self, "quality_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationResult(dict):
    def __init__(__self__, *,
                 background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult']] = None,
                 blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult']] = None,
                 chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult']] = None,
                 composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult']] = None,
                 compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult']] = None,
                 contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult']] = None,
                 goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult']] = None,
                 grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult']] = None,
                 hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult']] = None,
                 hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult']] = None,
                 if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult']] = None,
                 if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult']] = None,
                 max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult']] = None,
                 mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult']] = None,
                 mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult']] = None,
                 opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult']] = None,
                 remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult']] = None,
                 unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult']] = None):
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult']]:
        return pulumi.get(self, "background_colors")

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult']]:
        return pulumi.get(self, "blurs")

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult']]:
        return pulumi.get(self, "chroma_keys")

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult']]:
        return pulumi.get(self, "composites")

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult']]:
        return pulumi.get(self, "compounds")

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult']]:
        return pulumi.get(self, "contrasts")

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult']]:
        return pulumi.get(self, "goops")

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult']]:
        return pulumi.get(self, "grayscales")

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult']]:
        return pulumi.get(self, "hsls")

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult']]:
        return pulumi.get(self, "hsvs")

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult']]:
        return pulumi.get(self, "if_dimensions")

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult']]:
        return pulumi.get(self, "if_orientations")

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult']]:
        return pulumi.get(self, "max_colors")

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult']]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult']]:
        return pulumi.get(self, "mono_hues")

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult']]:
        return pulumi.get(self, "opacities")

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult']]:
        return pulumi.get(self, "remove_colors")

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult']]:
        return pulumi.get(self, "unsharp_masks")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult(dict):
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult(dict):
    def __init__(__self__, *,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']]:
        return pulumi.get(self, "transformations")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult(dict):
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult(dict):
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 greater_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 less_than: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @property
    @pulumi.getter
    def equal(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "equal")

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "greater_than")

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 landscape: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 portrait: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None,
                 square: Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def landscape(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "landscape")

    @property
    @pulumi.getter
    def portrait(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "portrait")

    @property
    @pulumi.getter
    def square(self) -> Optional['outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult']:
        return pulumi.get(self, "square")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult(dict):
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult(dict):
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult(dict):
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult(dict):
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationResult(dict):
    def __init__(__self__, *,
                 appends: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendResult']] = None,
                 aspect_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAspectCropResult']] = None,
                 background_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBackgroundColorResult']] = None,
                 blurs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBlurResult']] = None,
                 chroma_keys: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationChromaKeyResult']] = None,
                 composites: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeResult']] = None,
                 compounds: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompoundResult']] = None,
                 contrasts: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationContrastResult']] = None,
                 crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCropResult']] = None,
                 face_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFaceCropResult']] = None,
                 feature_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFeatureCropResult']] = None,
                 fit_and_fills: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFitAndFillResult']] = None,
                 goops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGoopResult']] = None,
                 grayscales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGrayscaleResult']] = None,
                 hsls: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHslResult']] = None,
                 hsvs: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHsvResult']] = None,
                 if_dimensions: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfDimensionResult']] = None,
                 if_orientations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfOrientationResult']] = None,
                 im_queries: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationImQueryResult']] = None,
                 max_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMaxColorResult']] = None,
                 mirrors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMirrorResult']] = None,
                 mono_hues: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMonoHueResult']] = None,
                 opacities: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationOpacityResult']] = None,
                 region_of_interest_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult']] = None,
                 relative_crops: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRelativeCropResult']] = None,
                 remove_colors: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRemoveColorResult']] = None,
                 resizes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResizeResult']] = None,
                 rotates: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRotateResult']] = None,
                 scales: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationScaleResult']] = None,
                 shears: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationShearsResult']] = None,
                 trims: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationTrimResult']] = None,
                 unsharp_masks: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskResult']] = None):
        if appends is not None:
            pulumi.set(__self__, "appends", appends)
        if aspect_crops is not None:
            pulumi.set(__self__, "aspect_crops", aspect_crops)
        if background_colors is not None:
            pulumi.set(__self__, "background_colors", background_colors)
        if blurs is not None:
            pulumi.set(__self__, "blurs", blurs)
        if chroma_keys is not None:
            pulumi.set(__self__, "chroma_keys", chroma_keys)
        if composites is not None:
            pulumi.set(__self__, "composites", composites)
        if compounds is not None:
            pulumi.set(__self__, "compounds", compounds)
        if contrasts is not None:
            pulumi.set(__self__, "contrasts", contrasts)
        if crops is not None:
            pulumi.set(__self__, "crops", crops)
        if face_crops is not None:
            pulumi.set(__self__, "face_crops", face_crops)
        if feature_crops is not None:
            pulumi.set(__self__, "feature_crops", feature_crops)
        if fit_and_fills is not None:
            pulumi.set(__self__, "fit_and_fills", fit_and_fills)
        if goops is not None:
            pulumi.set(__self__, "goops", goops)
        if grayscales is not None:
            pulumi.set(__self__, "grayscales", grayscales)
        if hsls is not None:
            pulumi.set(__self__, "hsls", hsls)
        if hsvs is not None:
            pulumi.set(__self__, "hsvs", hsvs)
        if if_dimensions is not None:
            pulumi.set(__self__, "if_dimensions", if_dimensions)
        if if_orientations is not None:
            pulumi.set(__self__, "if_orientations", if_orientations)
        if im_queries is not None:
            pulumi.set(__self__, "im_queries", im_queries)
        if max_colors is not None:
            pulumi.set(__self__, "max_colors", max_colors)
        if mirrors is not None:
            pulumi.set(__self__, "mirrors", mirrors)
        if mono_hues is not None:
            pulumi.set(__self__, "mono_hues", mono_hues)
        if opacities is not None:
            pulumi.set(__self__, "opacities", opacities)
        if region_of_interest_crops is not None:
            pulumi.set(__self__, "region_of_interest_crops", region_of_interest_crops)
        if relative_crops is not None:
            pulumi.set(__self__, "relative_crops", relative_crops)
        if remove_colors is not None:
            pulumi.set(__self__, "remove_colors", remove_colors)
        if resizes is not None:
            pulumi.set(__self__, "resizes", resizes)
        if rotates is not None:
            pulumi.set(__self__, "rotates", rotates)
        if scales is not None:
            pulumi.set(__self__, "scales", scales)
        if shears is not None:
            pulumi.set(__self__, "shears", shears)
        if trims is not None:
            pulumi.set(__self__, "trims", trims)
        if unsharp_masks is not None:
            pulumi.set(__self__, "unsharp_masks", unsharp_masks)

    @property
    @pulumi.getter
    def appends(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendResult']]:
        return pulumi.get(self, "appends")

    @property
    @pulumi.getter(name="aspectCrops")
    def aspect_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAspectCropResult']]:
        return pulumi.get(self, "aspect_crops")

    @property
    @pulumi.getter(name="backgroundColors")
    def background_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBackgroundColorResult']]:
        return pulumi.get(self, "background_colors")

    @property
    @pulumi.getter
    def blurs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationBlurResult']]:
        return pulumi.get(self, "blurs")

    @property
    @pulumi.getter(name="chromaKeys")
    def chroma_keys(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationChromaKeyResult']]:
        return pulumi.get(self, "chroma_keys")

    @property
    @pulumi.getter
    def composites(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeResult']]:
        return pulumi.get(self, "composites")

    @property
    @pulumi.getter
    def compounds(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompoundResult']]:
        return pulumi.get(self, "compounds")

    @property
    @pulumi.getter
    def contrasts(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationContrastResult']]:
        return pulumi.get(self, "contrasts")

    @property
    @pulumi.getter
    def crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCropResult']]:
        return pulumi.get(self, "crops")

    @property
    @pulumi.getter(name="faceCrops")
    def face_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFaceCropResult']]:
        return pulumi.get(self, "face_crops")

    @property
    @pulumi.getter(name="featureCrops")
    def feature_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFeatureCropResult']]:
        return pulumi.get(self, "feature_crops")

    @property
    @pulumi.getter(name="fitAndFills")
    def fit_and_fills(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationFitAndFillResult']]:
        return pulumi.get(self, "fit_and_fills")

    @property
    @pulumi.getter
    def goops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGoopResult']]:
        return pulumi.get(self, "goops")

    @property
    @pulumi.getter
    def grayscales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationGrayscaleResult']]:
        return pulumi.get(self, "grayscales")

    @property
    @pulumi.getter
    def hsls(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHslResult']]:
        return pulumi.get(self, "hsls")

    @property
    @pulumi.getter
    def hsvs(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationHsvResult']]:
        return pulumi.get(self, "hsvs")

    @property
    @pulumi.getter(name="ifDimensions")
    def if_dimensions(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfDimensionResult']]:
        return pulumi.get(self, "if_dimensions")

    @property
    @pulumi.getter(name="ifOrientations")
    def if_orientations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationIfOrientationResult']]:
        return pulumi.get(self, "if_orientations")

    @property
    @pulumi.getter(name="imQueries")
    def im_queries(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationImQueryResult']]:
        return pulumi.get(self, "im_queries")

    @property
    @pulumi.getter(name="maxColors")
    def max_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMaxColorResult']]:
        return pulumi.get(self, "max_colors")

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMirrorResult']]:
        return pulumi.get(self, "mirrors")

    @property
    @pulumi.getter(name="monoHues")
    def mono_hues(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationMonoHueResult']]:
        return pulumi.get(self, "mono_hues")

    @property
    @pulumi.getter
    def opacities(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationOpacityResult']]:
        return pulumi.get(self, "opacities")

    @property
    @pulumi.getter(name="regionOfInterestCrops")
    def region_of_interest_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult']]:
        return pulumi.get(self, "region_of_interest_crops")

    @property
    @pulumi.getter(name="relativeCrops")
    def relative_crops(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRelativeCropResult']]:
        return pulumi.get(self, "relative_crops")

    @property
    @pulumi.getter(name="removeColors")
    def remove_colors(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRemoveColorResult']]:
        return pulumi.get(self, "remove_colors")

    @property
    @pulumi.getter
    def resizes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResizeResult']]:
        return pulumi.get(self, "resizes")

    @property
    @pulumi.getter
    def rotates(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRotateResult']]:
        return pulumi.get(self, "rotates")

    @property
    @pulumi.getter
    def scales(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationScaleResult']]:
        return pulumi.get(self, "scales")

    @property
    @pulumi.getter
    def shears(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationShearsResult']]:
        return pulumi.get(self, "shears")

    @property
    @pulumi.getter
    def trims(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationTrimResult']]:
        return pulumi.get(self, "trims")

    @property
    @pulumi.getter(name="unsharpMasks")
    def unsharp_masks(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskResult']]:
        return pulumi.get(self, "unsharp_masks")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyTransformationAppendImageResult',
                 gravity: Optional[str] = None,
                 gravity_priority: Optional[str] = None,
                 gravity_priority_var: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 preserve_minor_dimension: Optional[str] = None,
                 preserve_minor_dimension_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_priority is not None:
            pulumi.set(__self__, "gravity_priority", gravity_priority)
        if gravity_priority_var is not None:
            pulumi.set(__self__, "gravity_priority_var", gravity_priority_var)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if preserve_minor_dimension is not None:
            pulumi.set(__self__, "preserve_minor_dimension", preserve_minor_dimension)
        if preserve_minor_dimension_var is not None:
            pulumi.set(__self__, "preserve_minor_dimension_var", preserve_minor_dimension_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationAppendImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityPriority")
    def gravity_priority(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority")

    @property
    @pulumi.getter(name="gravityPriorityVar")
    def gravity_priority_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_priority_var")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter(name="preserveMinorDimension")
    def preserve_minor_dimension(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension")

    @property
    @pulumi.getter(name="preserveMinorDimensionVar")
    def preserve_minor_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "preserve_minor_dimension_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAppendImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationAspectCropResult(dict):
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationBackgroundColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationBlurResult(dict):
    def __init__(__self__, *,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None):
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationChromaKeyResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_feather: Optional[str] = None,
                 hue_feather_var: Optional[str] = None,
                 hue_tolerance: Optional[str] = None,
                 hue_tolerance_var: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness_feather: Optional[str] = None,
                 lightness_feather_var: Optional[str] = None,
                 lightness_tolerance: Optional[str] = None,
                 lightness_tolerance_var: Optional[str] = None,
                 saturation_feather: Optional[str] = None,
                 saturation_feather_var: Optional[str] = None,
                 saturation_tolerance: Optional[str] = None,
                 saturation_tolerance_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_feather is not None:
            pulumi.set(__self__, "hue_feather", hue_feather)
        if hue_feather_var is not None:
            pulumi.set(__self__, "hue_feather_var", hue_feather_var)
        if hue_tolerance is not None:
            pulumi.set(__self__, "hue_tolerance", hue_tolerance)
        if hue_tolerance_var is not None:
            pulumi.set(__self__, "hue_tolerance_var", hue_tolerance_var)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness_feather is not None:
            pulumi.set(__self__, "lightness_feather", lightness_feather)
        if lightness_feather_var is not None:
            pulumi.set(__self__, "lightness_feather_var", lightness_feather_var)
        if lightness_tolerance is not None:
            pulumi.set(__self__, "lightness_tolerance", lightness_tolerance)
        if lightness_tolerance_var is not None:
            pulumi.set(__self__, "lightness_tolerance_var", lightness_tolerance_var)
        if saturation_feather is not None:
            pulumi.set(__self__, "saturation_feather", saturation_feather)
        if saturation_feather_var is not None:
            pulumi.set(__self__, "saturation_feather_var", saturation_feather_var)
        if saturation_tolerance is not None:
            pulumi.set(__self__, "saturation_tolerance", saturation_tolerance)
        if saturation_tolerance_var is not None:
            pulumi.set(__self__, "saturation_tolerance_var", saturation_tolerance_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueFeather")
    def hue_feather(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather")

    @property
    @pulumi.getter(name="hueFeatherVar")
    def hue_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_feather_var")

    @property
    @pulumi.getter(name="hueTolerance")
    def hue_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance")

    @property
    @pulumi.getter(name="hueToleranceVar")
    def hue_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_tolerance_var")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter(name="lightnessFeather")
    def lightness_feather(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather")

    @property
    @pulumi.getter(name="lightnessFeatherVar")
    def lightness_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_feather_var")

    @property
    @pulumi.getter(name="lightnessTolerance")
    def lightness_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance")

    @property
    @pulumi.getter(name="lightnessToleranceVar")
    def lightness_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_tolerance_var")

    @property
    @pulumi.getter(name="saturationFeather")
    def saturation_feather(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather")

    @property
    @pulumi.getter(name="saturationFeatherVar")
    def saturation_feather_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_feather_var")

    @property
    @pulumi.getter(name="saturationTolerance")
    def saturation_tolerance(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance")

    @property
    @pulumi.getter(name="saturationToleranceVar")
    def saturation_tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeResult(dict):
    def __init__(__self__, *,
                 image: 'outputs.GetImagingPolicyImagePolicyTransformationCompositeImageResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 placement: Optional[str] = None,
                 placement_var: Optional[str] = None,
                 scale: Optional[str] = None,
                 scale_dimension: Optional[str] = None,
                 scale_dimension_var: Optional[str] = None,
                 scale_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        pulumi.set(__self__, "image", image)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if placement_var is not None:
            pulumi.set(__self__, "placement_var", placement_var)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if scale_dimension is not None:
            pulumi.set(__self__, "scale_dimension", scale_dimension)
        if scale_dimension_var is not None:
            pulumi.set(__self__, "scale_dimension_var", scale_dimension_var)
        if scale_var is not None:
            pulumi.set(__self__, "scale_var", scale_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter
    def image(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationCompositeImageResult':
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def placement(self) -> Optional[str]:
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="placementVar")
    def placement_var(self) -> Optional[str]:
        return pulumi.get(self, "placement_var")

    @property
    @pulumi.getter
    def scale(self) -> Optional[str]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="scaleDimension")
    def scale_dimension(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension")

    @property
    @pulumi.getter(name="scaleDimensionVar")
    def scale_dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_dimension_var")

    @property
    @pulumi.getter(name="scaleVar")
    def scale_var(self) -> Optional[str]:
        return pulumi.get(self, "scale_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageResult(dict):
    def __init__(__self__, *,
                 box_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult']] = None,
                 circle_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult']] = None,
                 text_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult']] = None,
                 url_images: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult']] = None):
        if box_images is not None:
            pulumi.set(__self__, "box_images", box_images)
        if circle_images is not None:
            pulumi.set(__self__, "circle_images", circle_images)
        if text_images is not None:
            pulumi.set(__self__, "text_images", text_images)
        if url_images is not None:
            pulumi.set(__self__, "url_images", url_images)

    @property
    @pulumi.getter(name="boxImages")
    def box_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult']]:
        return pulumi.get(self, "box_images")

    @property
    @pulumi.getter(name="circleImages")
    def circle_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult']]:
        return pulumi.get(self, "circle_images")

    @property
    @pulumi.getter(name="textImages")
    def text_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult']]:
        return pulumi.get(self, "text_images")

    @property
    @pulumi.getter(name="urlImages")
    def url_images(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult']]:
        return pulumi.get(self, "url_images")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 diameter: Optional[str] = None,
                 diameter_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if diameter is not None:
            pulumi.set(__self__, "diameter", diameter)
        if diameter_var is not None:
            pulumi.set(__self__, "diameter_var", diameter_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def diameter(self) -> Optional[str]:
        return pulumi.get(self, "diameter")

    @property
    @pulumi.getter(name="diameterVar")
    def diameter_var(self) -> Optional[str]:
        return pulumi.get(self, "diameter_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageTextImageResult(dict):
    def __init__(__self__, *,
                 fill: Optional[str] = None,
                 fill_var: Optional[str] = None,
                 size: Optional[str] = None,
                 size_var: Optional[str] = None,
                 stroke: Optional[str] = None,
                 stroke_size: Optional[str] = None,
                 stroke_size_var: Optional[str] = None,
                 stroke_var: Optional[str] = None,
                 text: Optional[str] = None,
                 text_var: Optional[str] = None,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 typeface: Optional[str] = None,
                 typeface_var: Optional[str] = None):
        if fill is not None:
            pulumi.set(__self__, "fill", fill)
        if fill_var is not None:
            pulumi.set(__self__, "fill_var", fill_var)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_var is not None:
            pulumi.set(__self__, "size_var", size_var)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if stroke_size is not None:
            pulumi.set(__self__, "stroke_size", stroke_size)
        if stroke_size_var is not None:
            pulumi.set(__self__, "stroke_size_var", stroke_size_var)
        if stroke_var is not None:
            pulumi.set(__self__, "stroke_var", stroke_var)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_var is not None:
            pulumi.set(__self__, "text_var", text_var)
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if typeface is not None:
            pulumi.set(__self__, "typeface", typeface)
        if typeface_var is not None:
            pulumi.set(__self__, "typeface_var", typeface_var)

    @property
    @pulumi.getter
    def fill(self) -> Optional[str]:
        return pulumi.get(self, "fill")

    @property
    @pulumi.getter(name="fillVar")
    def fill_var(self) -> Optional[str]:
        return pulumi.get(self, "fill_var")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sizeVar")
    def size_var(self) -> Optional[str]:
        return pulumi.get(self, "size_var")

    @property
    @pulumi.getter
    def stroke(self) -> Optional[str]:
        return pulumi.get(self, "stroke")

    @property
    @pulumi.getter(name="strokeSize")
    def stroke_size(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size")

    @property
    @pulumi.getter(name="strokeSizeVar")
    def stroke_size_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_size_var")

    @property
    @pulumi.getter(name="strokeVar")
    def stroke_var(self) -> Optional[str]:
        return pulumi.get(self, "stroke_var")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textVar")
    def text_var(self) -> Optional[str]:
        return pulumi.get(self, "text_var")

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def typeface(self) -> Optional[str]:
        return pulumi.get(self, "typeface")

    @property
    @pulumi.getter(name="typefaceVar")
    def typeface_var(self) -> Optional[str]:
        return pulumi.get(self, "typeface_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageResult(dict):
    def __init__(__self__, *,
                 transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 url: Optional[str] = None,
                 url_var: Optional[str] = None):
        if transformation is not None:
            pulumi.set(__self__, "transformation", transformation)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if url_var is not None:
            pulumi.set(__self__, "url_var", url_var)

    @property
    @pulumi.getter
    def transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "transformation")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlVar")
    def url_var(self) -> Optional[str]:
        return pulumi.get(self, "url_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCompoundResult(dict):
    def __init__(__self__, *,
                 transformations: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']] = None):
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationResult']]:
        return pulumi.get(self, "transformations")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationContrastResult(dict):
    def __init__(__self__, *,
                 brightness: Optional[str] = None,
                 brightness_var: Optional[str] = None,
                 contrast: Optional[str] = None,
                 contrast_var: Optional[str] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if brightness_var is not None:
            pulumi.set(__self__, "brightness_var", brightness_var)
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if contrast_var is not None:
            pulumi.set(__self__, "contrast_var", contrast_var)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[str]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter(name="brightnessVar")
    def brightness_var(self) -> Optional[str]:
        return pulumi.get(self, "brightness_var")

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter(name="contrastVar")
    def contrast_var(self) -> Optional[str]:
        return pulumi.get(self, "contrast_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationCropResult(dict):
    def __init__(__self__, *,
                 allow_expansion: Optional[str] = None,
                 allow_expansion_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None,
                 x_position: Optional[str] = None,
                 x_position_var: Optional[str] = None,
                 y_position: Optional[str] = None,
                 y_position_var: Optional[str] = None):
        if allow_expansion is not None:
            pulumi.set(__self__, "allow_expansion", allow_expansion)
        if allow_expansion_var is not None:
            pulumi.set(__self__, "allow_expansion_var", allow_expansion_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)
        if x_position is not None:
            pulumi.set(__self__, "x_position", x_position)
        if x_position_var is not None:
            pulumi.set(__self__, "x_position_var", x_position_var)
        if y_position is not None:
            pulumi.set(__self__, "y_position", y_position)
        if y_position_var is not None:
            pulumi.set(__self__, "y_position_var", y_position_var)

    @property
    @pulumi.getter(name="allowExpansion")
    def allow_expansion(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion")

    @property
    @pulumi.getter(name="allowExpansionVar")
    def allow_expansion_var(self) -> Optional[str]:
        return pulumi.get(self, "allow_expansion_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> Optional[str]:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="xPositionVar")
    def x_position_var(self) -> Optional[str]:
        return pulumi.get(self, "x_position_var")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> Optional[str]:
        return pulumi.get(self, "y_position")

    @property
    @pulumi.getter(name="yPositionVar")
    def y_position_var(self) -> Optional[str]:
        return pulumi.get(self, "y_position_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFaceCropResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 algorithm_var: Optional[str] = None,
                 confidence: Optional[str] = None,
                 confidence_var: Optional[str] = None,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 focus: Optional[str] = None,
                 focus_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if algorithm_var is not None:
            pulumi.set(__self__, "algorithm_var", algorithm_var)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if confidence_var is not None:
            pulumi.set(__self__, "confidence_var", confidence_var)
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if focus is not None:
            pulumi.set(__self__, "focus", focus)
        if focus_var is not None:
            pulumi.set(__self__, "focus_var", focus_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="algorithmVar")
    def algorithm_var(self) -> Optional[str]:
        return pulumi.get(self, "algorithm_var")

    @property
    @pulumi.getter
    def confidence(self) -> Optional[str]:
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter(name="confidenceVar")
    def confidence_var(self) -> Optional[str]:
        return pulumi.get(self, "confidence_var")

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @property
    @pulumi.getter
    def focus(self) -> Optional[str]:
        return pulumi.get(self, "focus")

    @property
    @pulumi.getter(name="focusVar")
    def focus_var(self) -> Optional[str]:
        return pulumi.get(self, "focus_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFeatureCropResult(dict):
    def __init__(__self__, *,
                 fail_gravity: Optional[str] = None,
                 fail_gravity_var: Optional[str] = None,
                 feature_radius: Optional[str] = None,
                 feature_radius_var: Optional[str] = None,
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 max_features: Optional[str] = None,
                 max_features_var: Optional[str] = None,
                 min_feature_quality: Optional[str] = None,
                 min_feature_quality_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if fail_gravity is not None:
            pulumi.set(__self__, "fail_gravity", fail_gravity)
        if fail_gravity_var is not None:
            pulumi.set(__self__, "fail_gravity_var", fail_gravity_var)
        if feature_radius is not None:
            pulumi.set(__self__, "feature_radius", feature_radius)
        if feature_radius_var is not None:
            pulumi.set(__self__, "feature_radius_var", feature_radius_var)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if max_features is not None:
            pulumi.set(__self__, "max_features", max_features)
        if max_features_var is not None:
            pulumi.set(__self__, "max_features_var", max_features_var)
        if min_feature_quality is not None:
            pulumi.set(__self__, "min_feature_quality", min_feature_quality)
        if min_feature_quality_var is not None:
            pulumi.set(__self__, "min_feature_quality_var", min_feature_quality_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="failGravity")
    def fail_gravity(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity")

    @property
    @pulumi.getter(name="failGravityVar")
    def fail_gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "fail_gravity_var")

    @property
    @pulumi.getter(name="featureRadius")
    def feature_radius(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius")

    @property
    @pulumi.getter(name="featureRadiusVar")
    def feature_radius_var(self) -> Optional[str]:
        return pulumi.get(self, "feature_radius_var")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter(name="maxFeatures")
    def max_features(self) -> Optional[str]:
        return pulumi.get(self, "max_features")

    @property
    @pulumi.getter(name="maxFeaturesVar")
    def max_features_var(self) -> Optional[str]:
        return pulumi.get(self, "max_features_var")

    @property
    @pulumi.getter(name="minFeatureQuality")
    def min_feature_quality(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality")

    @property
    @pulumi.getter(name="minFeatureQualityVar")
    def min_feature_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "min_feature_quality_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationFitAndFillResult(dict):
    def __init__(__self__, *,
                 fill_transformation: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if fill_transformation is not None:
            pulumi.set(__self__, "fill_transformation", fill_transformation)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="fillTransformation")
    def fill_transformation(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "fill_transformation")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationGoopResult(dict):
    def __init__(__self__, *,
                 chaos: Optional[str] = None,
                 chaos_var: Optional[str] = None,
                 density: Optional[str] = None,
                 density_var: Optional[str] = None,
                 power: Optional[str] = None,
                 power_var: Optional[str] = None,
                 seed: Optional[str] = None,
                 seed_var: Optional[str] = None):
        if chaos is not None:
            pulumi.set(__self__, "chaos", chaos)
        if chaos_var is not None:
            pulumi.set(__self__, "chaos_var", chaos_var)
        if density is not None:
            pulumi.set(__self__, "density", density)
        if density_var is not None:
            pulumi.set(__self__, "density_var", density_var)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_var is not None:
            pulumi.set(__self__, "power_var", power_var)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if seed_var is not None:
            pulumi.set(__self__, "seed_var", seed_var)

    @property
    @pulumi.getter
    def chaos(self) -> Optional[str]:
        return pulumi.get(self, "chaos")

    @property
    @pulumi.getter(name="chaosVar")
    def chaos_var(self) -> Optional[str]:
        return pulumi.get(self, "chaos_var")

    @property
    @pulumi.getter
    def density(self) -> Optional[str]:
        return pulumi.get(self, "density")

    @property
    @pulumi.getter(name="densityVar")
    def density_var(self) -> Optional[str]:
        return pulumi.get(self, "density_var")

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerVar")
    def power_var(self) -> Optional[str]:
        return pulumi.get(self, "power_var")

    @property
    @pulumi.getter
    def seed(self) -> Optional[str]:
        return pulumi.get(self, "seed")

    @property
    @pulumi.getter(name="seedVar")
    def seed_var(self) -> Optional[str]:
        return pulumi.get(self, "seed_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationGrayscaleResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationHslResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 lightness: Optional[str] = None,
                 lightness_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if lightness is not None:
            pulumi.set(__self__, "lightness", lightness)
        if lightness_var is not None:
            pulumi.set(__self__, "lightness_var", lightness_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def lightness(self) -> Optional[str]:
        return pulumi.get(self, "lightness")

    @property
    @pulumi.getter(name="lightnessVar")
    def lightness_var(self) -> Optional[str]:
        return pulumi.get(self, "lightness_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationHsvResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None,
                 saturation: Optional[str] = None,
                 saturation_var: Optional[str] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)
        if saturation_var is not None:
            pulumi.set(__self__, "saturation_var", saturation_var)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")

    @property
    @pulumi.getter(name="saturationVar")
    def saturation_var(self) -> Optional[str]:
        return pulumi.get(self, "saturation_var")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationIfDimensionResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 dimension: Optional[str] = None,
                 dimension_var: Optional[str] = None,
                 equal: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 greater_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 less_than: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 value: Optional[str] = None,
                 value_var: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dimension is not None:
            pulumi.set(__self__, "dimension", dimension)
        if dimension_var is not None:
            pulumi.set(__self__, "dimension_var", dimension_var)
        if equal is not None:
            pulumi.set(__self__, "equal", equal)
        if greater_than is not None:
            pulumi.set(__self__, "greater_than", greater_than)
        if less_than is not None:
            pulumi.set(__self__, "less_than", less_than)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_var is not None:
            pulumi.set(__self__, "value_var", value_var)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def dimension(self) -> Optional[str]:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="dimensionVar")
    def dimension_var(self) -> Optional[str]:
        return pulumi.get(self, "dimension_var")

    @property
    @pulumi.getter
    def equal(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "equal")

    @property
    @pulumi.getter(name="greaterThan")
    def greater_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "greater_than")

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueVar")
    def value_var(self) -> Optional[str]:
        return pulumi.get(self, "value_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationIfOrientationResult(dict):
    def __init__(__self__, *,
                 default: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 landscape: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 portrait: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None,
                 square: Optional['outputs.GetImagingPolicyImagePolicyTransformationResult'] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if landscape is not None:
            pulumi.set(__self__, "landscape", landscape)
        if portrait is not None:
            pulumi.set(__self__, "portrait", portrait)
        if square is not None:
            pulumi.set(__self__, "square", square)

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def landscape(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "landscape")

    @property
    @pulumi.getter
    def portrait(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "portrait")

    @property
    @pulumi.getter
    def square(self) -> Optional['outputs.GetImagingPolicyImagePolicyTransformationResult']:
        return pulumi.get(self, "square")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationImQueryResult(dict):
    def __init__(__self__, *,
                 allowed_transformations: Sequence[str],
                 query_var: str):
        pulumi.set(__self__, "allowed_transformations", allowed_transformations)
        pulumi.set(__self__, "query_var", query_var)

    @property
    @pulumi.getter(name="allowedTransformations")
    def allowed_transformations(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_transformations")

    @property
    @pulumi.getter(name="queryVar")
    def query_var(self) -> str:
        return pulumi.get(self, "query_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMaxColorResult(dict):
    def __init__(__self__, *,
                 colors: Optional[str] = None,
                 colors_var: Optional[str] = None):
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if colors_var is not None:
            pulumi.set(__self__, "colors_var", colors_var)

    @property
    @pulumi.getter
    def colors(self) -> Optional[str]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter(name="colorsVar")
    def colors_var(self) -> Optional[str]:
        return pulumi.get(self, "colors_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMirrorResult(dict):
    def __init__(__self__, *,
                 horizontal: Optional[str] = None,
                 horizontal_var: Optional[str] = None,
                 vertical: Optional[str] = None,
                 vertical_var: Optional[str] = None):
        if horizontal is not None:
            pulumi.set(__self__, "horizontal", horizontal)
        if horizontal_var is not None:
            pulumi.set(__self__, "horizontal_var", horizontal_var)
        if vertical is not None:
            pulumi.set(__self__, "vertical", vertical)
        if vertical_var is not None:
            pulumi.set(__self__, "vertical_var", vertical_var)

    @property
    @pulumi.getter
    def horizontal(self) -> Optional[str]:
        return pulumi.get(self, "horizontal")

    @property
    @pulumi.getter(name="horizontalVar")
    def horizontal_var(self) -> Optional[str]:
        return pulumi.get(self, "horizontal_var")

    @property
    @pulumi.getter
    def vertical(self) -> Optional[str]:
        return pulumi.get(self, "vertical")

    @property
    @pulumi.getter(name="verticalVar")
    def vertical_var(self) -> Optional[str]:
        return pulumi.get(self, "vertical_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationMonoHueResult(dict):
    def __init__(__self__, *,
                 hue: Optional[str] = None,
                 hue_var: Optional[str] = None):
        if hue is not None:
            pulumi.set(__self__, "hue", hue)
        if hue_var is not None:
            pulumi.set(__self__, "hue_var", hue_var)

    @property
    @pulumi.getter
    def hue(self) -> Optional[str]:
        return pulumi.get(self, "hue")

    @property
    @pulumi.getter(name="hueVar")
    def hue_var(self) -> Optional[str]:
        return pulumi.get(self, "hue_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationOpacityResult(dict):
    def __init__(__self__, *,
                 opacity: Optional[str] = None,
                 opacity_var: Optional[str] = None):
        if opacity is not None:
            pulumi.set(__self__, "opacity", opacity)
        if opacity_var is not None:
            pulumi.set(__self__, "opacity_var", opacity_var)

    @property
    @pulumi.getter
    def opacity(self) -> Optional[str]:
        return pulumi.get(self, "opacity")

    @property
    @pulumi.getter(name="opacityVar")
    def opacity_var(self) -> Optional[str]:
        return pulumi.get(self, "opacity_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropResult(dict):
    def __init__(__self__, *,
                 region_of_interest: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult',
                 gravity: Optional[str] = None,
                 gravity_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 style: Optional[str] = None,
                 style_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "region_of_interest", region_of_interest)
        if gravity is not None:
            pulumi.set(__self__, "gravity", gravity)
        if gravity_var is not None:
            pulumi.set(__self__, "gravity_var", gravity_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if style_var is not None:
            pulumi.set(__self__, "style_var", style_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter(name="regionOfInterest")
    def region_of_interest(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult':
        return pulumi.get(self, "region_of_interest")

    @property
    @pulumi.getter
    def gravity(self) -> Optional[str]:
        return pulumi.get(self, "gravity")

    @property
    @pulumi.getter(name="gravityVar")
    def gravity_var(self) -> Optional[str]:
        return pulumi.get(self, "gravity_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def style(self) -> Optional[str]:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="styleVar")
    def style_var(self) -> Optional[str]:
        return pulumi.get(self, "style_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestResult(dict):
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult']] = None,
                 point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult']] = None,
                 polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult']] = None,
                 rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult']] = None,
                 union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult']] = None):
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult']]:
        return pulumi.get(self, "circle_shapes")

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult']]:
        return pulumi.get(self, "point_shapes")

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult']]:
        return pulumi.get(self, "polygon_shapes")

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult']]:
        return pulumi.get(self, "rectangle_shapes")

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult']]:
        return pulumi.get(self, "union_shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeResult(dict):
    def __init__(__self__, *,
                 center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult':
        return pulumi.get(self, "center")

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeResult(dict):
    def __init__(__self__, *,
                 points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult']):
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult']:
        return pulumi.get(self, "points")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeResult(dict):
    def __init__(__self__, *,
                 anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult':
        return pulumi.get(self, "anchor")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeResult(dict):
    def __init__(__self__, *,
                 shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult']:
        return pulumi.get(self, "shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeResult(dict):
    def __init__(__self__, *,
                 circle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult']] = None,
                 point_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult']] = None,
                 polygon_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult']] = None,
                 rectangle_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult']] = None,
                 union_shapes: Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult']] = None):
        if circle_shapes is not None:
            pulumi.set(__self__, "circle_shapes", circle_shapes)
        if point_shapes is not None:
            pulumi.set(__self__, "point_shapes", point_shapes)
        if polygon_shapes is not None:
            pulumi.set(__self__, "polygon_shapes", polygon_shapes)
        if rectangle_shapes is not None:
            pulumi.set(__self__, "rectangle_shapes", rectangle_shapes)
        if union_shapes is not None:
            pulumi.set(__self__, "union_shapes", union_shapes)

    @property
    @pulumi.getter(name="circleShapes")
    def circle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult']]:
        return pulumi.get(self, "circle_shapes")

    @property
    @pulumi.getter(name="pointShapes")
    def point_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult']]:
        return pulumi.get(self, "point_shapes")

    @property
    @pulumi.getter(name="polygonShapes")
    def polygon_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult']]:
        return pulumi.get(self, "polygon_shapes")

    @property
    @pulumi.getter(name="rectangleShapes")
    def rectangle_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult']]:
        return pulumi.get(self, "rectangle_shapes")

    @property
    @pulumi.getter(name="unionShapes")
    def union_shapes(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult']]:
        return pulumi.get(self, "union_shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeResult(dict):
    def __init__(__self__, *,
                 center: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult',
                 radius: Optional[str] = None,
                 radius_var: Optional[str] = None):
        pulumi.set(__self__, "center", center)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if radius_var is not None:
            pulumi.set(__self__, "radius_var", radius_var)

    @property
    @pulumi.getter
    def center(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult':
        return pulumi.get(self, "center")

    @property
    @pulumi.getter
    def radius(self) -> Optional[str]:
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="radiusVar")
    def radius_var(self) -> Optional[str]:
        return pulumi.get(self, "radius_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeResult(dict):
    def __init__(__self__, *,
                 points: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult']):
        pulumi.set(__self__, "points", points)

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult']:
        return pulumi.get(self, "points")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeResult(dict):
    def __init__(__self__, *,
                 anchor: 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult',
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        pulumi.set(__self__, "anchor", anchor)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def anchor(self) -> 'outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult':
        return pulumi.get(self, "anchor")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorResult(dict):
    def __init__(__self__, *,
                 x: Optional[str] = None,
                 x_var: Optional[str] = None,
                 y: Optional[str] = None,
                 y_var: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x_var is not None:
            pulumi.set(__self__, "x_var", x_var)
        if y is not None:
            pulumi.set(__self__, "y", y)
        if y_var is not None:
            pulumi.set(__self__, "y_var", y_var)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xVar")
    def x_var(self) -> Optional[str]:
        return pulumi.get(self, "x_var")

    @property
    @pulumi.getter
    def y(self) -> Optional[str]:
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yVar")
    def y_var(self) -> Optional[str]:
        return pulumi.get(self, "y_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeResult(dict):
    def __init__(__self__, *,
                 shapes: Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult']):
        pulumi.set(__self__, "shapes", shapes)

    @property
    @pulumi.getter
    def shapes(self) -> Sequence['outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult']:
        return pulumi.get(self, "shapes")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRelativeCropResult(dict):
    def __init__(__self__, *,
                 east: Optional[str] = None,
                 east_var: Optional[str] = None,
                 north: Optional[str] = None,
                 north_var: Optional[str] = None,
                 south: Optional[str] = None,
                 south_var: Optional[str] = None,
                 west: Optional[str] = None,
                 west_var: Optional[str] = None):
        if east is not None:
            pulumi.set(__self__, "east", east)
        if east_var is not None:
            pulumi.set(__self__, "east_var", east_var)
        if north is not None:
            pulumi.set(__self__, "north", north)
        if north_var is not None:
            pulumi.set(__self__, "north_var", north_var)
        if south is not None:
            pulumi.set(__self__, "south", south)
        if south_var is not None:
            pulumi.set(__self__, "south_var", south_var)
        if west is not None:
            pulumi.set(__self__, "west", west)
        if west_var is not None:
            pulumi.set(__self__, "west_var", west_var)

    @property
    @pulumi.getter
    def east(self) -> Optional[str]:
        return pulumi.get(self, "east")

    @property
    @pulumi.getter(name="eastVar")
    def east_var(self) -> Optional[str]:
        return pulumi.get(self, "east_var")

    @property
    @pulumi.getter
    def north(self) -> Optional[str]:
        return pulumi.get(self, "north")

    @property
    @pulumi.getter(name="northVar")
    def north_var(self) -> Optional[str]:
        return pulumi.get(self, "north_var")

    @property
    @pulumi.getter
    def south(self) -> Optional[str]:
        return pulumi.get(self, "south")

    @property
    @pulumi.getter(name="southVar")
    def south_var(self) -> Optional[str]:
        return pulumi.get(self, "south_var")

    @property
    @pulumi.getter
    def west(self) -> Optional[str]:
        return pulumi.get(self, "west")

    @property
    @pulumi.getter(name="westVar")
    def west_var(self) -> Optional[str]:
        return pulumi.get(self, "west_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRemoveColorResult(dict):
    def __init__(__self__, *,
                 color: Optional[str] = None,
                 color_var: Optional[str] = None,
                 feather: Optional[str] = None,
                 feather_var: Optional[str] = None,
                 tolerance: Optional[str] = None,
                 tolerance_var: Optional[str] = None):
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_var is not None:
            pulumi.set(__self__, "color_var", color_var)
        if feather is not None:
            pulumi.set(__self__, "feather", feather)
        if feather_var is not None:
            pulumi.set(__self__, "feather_var", feather_var)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if tolerance_var is not None:
            pulumi.set(__self__, "tolerance_var", tolerance_var)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="colorVar")
    def color_var(self) -> Optional[str]:
        return pulumi.get(self, "color_var")

    @property
    @pulumi.getter
    def feather(self) -> Optional[str]:
        return pulumi.get(self, "feather")

    @property
    @pulumi.getter(name="featherVar")
    def feather_var(self) -> Optional[str]:
        return pulumi.get(self, "feather_var")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[str]:
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter(name="toleranceVar")
    def tolerance_var(self) -> Optional[str]:
        return pulumi.get(self, "tolerance_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationResizeResult(dict):
    def __init__(__self__, *,
                 aspect: Optional[str] = None,
                 aspect_var: Optional[str] = None,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 type: Optional[str] = None,
                 type_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if aspect is not None:
            pulumi.set(__self__, "aspect", aspect)
        if aspect_var is not None:
            pulumi.set(__self__, "aspect_var", aspect_var)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_var is not None:
            pulumi.set(__self__, "type_var", type_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def aspect(self) -> Optional[str]:
        return pulumi.get(self, "aspect")

    @property
    @pulumi.getter(name="aspectVar")
    def aspect_var(self) -> Optional[str]:
        return pulumi.get(self, "aspect_var")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeVar")
    def type_var(self) -> Optional[str]:
        return pulumi.get(self, "type_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationRotateResult(dict):
    def __init__(__self__, *,
                 degrees: Optional[str] = None,
                 degrees_var: Optional[str] = None):
        if degrees is not None:
            pulumi.set(__self__, "degrees", degrees)
        if degrees_var is not None:
            pulumi.set(__self__, "degrees_var", degrees_var)

    @property
    @pulumi.getter
    def degrees(self) -> Optional[str]:
        return pulumi.get(self, "degrees")

    @property
    @pulumi.getter(name="degreesVar")
    def degrees_var(self) -> Optional[str]:
        return pulumi.get(self, "degrees_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationScaleResult(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 height_var: Optional[str] = None,
                 width: Optional[str] = None,
                 width_var: Optional[str] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_var is not None:
            pulumi.set(__self__, "height_var", height_var)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if width_var is not None:
            pulumi.set(__self__, "width_var", width_var)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightVar")
    def height_var(self) -> Optional[str]:
        return pulumi.get(self, "height_var")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="widthVar")
    def width_var(self) -> Optional[str]:
        return pulumi.get(self, "width_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationShearsResult(dict):
    def __init__(__self__, *,
                 x_shear: Optional[str] = None,
                 x_shear_var: Optional[str] = None,
                 y_shear: Optional[str] = None,
                 y_shear_var: Optional[str] = None):
        if x_shear is not None:
            pulumi.set(__self__, "x_shear", x_shear)
        if x_shear_var is not None:
            pulumi.set(__self__, "x_shear_var", x_shear_var)
        if y_shear is not None:
            pulumi.set(__self__, "y_shear", y_shear)
        if y_shear_var is not None:
            pulumi.set(__self__, "y_shear_var", y_shear_var)

    @property
    @pulumi.getter(name="xShear")
    def x_shear(self) -> Optional[str]:
        return pulumi.get(self, "x_shear")

    @property
    @pulumi.getter(name="xShearVar")
    def x_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "x_shear_var")

    @property
    @pulumi.getter(name="yShear")
    def y_shear(self) -> Optional[str]:
        return pulumi.get(self, "y_shear")

    @property
    @pulumi.getter(name="yShearVar")
    def y_shear_var(self) -> Optional[str]:
        return pulumi.get(self, "y_shear_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationTrimResult(dict):
    def __init__(__self__, *,
                 fuzz: Optional[str] = None,
                 fuzz_var: Optional[str] = None,
                 padding: Optional[str] = None,
                 padding_var: Optional[str] = None):
        if fuzz is not None:
            pulumi.set(__self__, "fuzz", fuzz)
        if fuzz_var is not None:
            pulumi.set(__self__, "fuzz_var", fuzz_var)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)
        if padding_var is not None:
            pulumi.set(__self__, "padding_var", padding_var)

    @property
    @pulumi.getter
    def fuzz(self) -> Optional[str]:
        return pulumi.get(self, "fuzz")

    @property
    @pulumi.getter(name="fuzzVar")
    def fuzz_var(self) -> Optional[str]:
        return pulumi.get(self, "fuzz_var")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")

    @property
    @pulumi.getter(name="paddingVar")
    def padding_var(self) -> Optional[str]:
        return pulumi.get(self, "padding_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyTransformationUnsharpMaskResult(dict):
    def __init__(__self__, *,
                 gain: Optional[str] = None,
                 gain_var: Optional[str] = None,
                 sigma: Optional[str] = None,
                 sigma_var: Optional[str] = None,
                 threshold: Optional[str] = None,
                 threshold_var: Optional[str] = None):
        if gain is not None:
            pulumi.set(__self__, "gain", gain)
        if gain_var is not None:
            pulumi.set(__self__, "gain_var", gain_var)
        if sigma is not None:
            pulumi.set(__self__, "sigma", sigma)
        if sigma_var is not None:
            pulumi.set(__self__, "sigma_var", sigma_var)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_var is not None:
            pulumi.set(__self__, "threshold_var", threshold_var)

    @property
    @pulumi.getter
    def gain(self) -> Optional[str]:
        return pulumi.get(self, "gain")

    @property
    @pulumi.getter(name="gainVar")
    def gain_var(self) -> Optional[str]:
        return pulumi.get(self, "gain_var")

    @property
    @pulumi.getter
    def sigma(self) -> Optional[str]:
        return pulumi.get(self, "sigma")

    @property
    @pulumi.getter(name="sigmaVar")
    def sigma_var(self) -> Optional[str]:
        return pulumi.get(self, "sigma_var")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[str]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdVar")
    def threshold_var(self) -> Optional[str]:
        return pulumi.get(self, "threshold_var")


@pulumi.output_type
class GetImagingPolicyImagePolicyVariableResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableEnumOptionResult']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['outputs.GetImagingPolicyImagePolicyVariableEnumOptionResult']]:
        return pulumi.get(self, "enum_options")

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetImagingPolicyImagePolicyVariableEnumOptionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImagingPolicyVideoPolicyResult(dict):
    def __init__(__self__, *,
                 breakpoints: Optional['outputs.GetImagingPolicyVideoPolicyBreakpointsResult'] = None,
                 hosts: Optional[Sequence[str]] = None,
                 output: Optional['outputs.GetImagingPolicyVideoPolicyOutputResult'] = None,
                 rollout_duration: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableResult']] = None):
        if breakpoints is not None:
            pulumi.set(__self__, "breakpoints", breakpoints)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if rollout_duration is not None:
            pulumi.set(__self__, "rollout_duration", rollout_duration)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def breakpoints(self) -> Optional['outputs.GetImagingPolicyVideoPolicyBreakpointsResult']:
        return pulumi.get(self, "breakpoints")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def output(self) -> Optional['outputs.GetImagingPolicyVideoPolicyOutputResult']:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="rolloutDuration")
    def rollout_duration(self) -> Optional[str]:
        return pulumi.get(self, "rollout_duration")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImagingPolicyVideoPolicyBreakpointsResult(dict):
    def __init__(__self__, *,
                 widths: Optional[Sequence[int]] = None):
        if widths is not None:
            pulumi.set(__self__, "widths", widths)

    @property
    @pulumi.getter
    def widths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "widths")


@pulumi.output_type
class GetImagingPolicyVideoPolicyOutputResult(dict):
    def __init__(__self__, *,
                 perceptual_quality: Optional[str] = None,
                 perceptual_quality_var: Optional[str] = None,
                 placeholder_video_url: Optional[str] = None,
                 placeholder_video_url_var: Optional[str] = None,
                 video_adaptive_quality: Optional[str] = None,
                 video_adaptive_quality_var: Optional[str] = None):
        if perceptual_quality is not None:
            pulumi.set(__self__, "perceptual_quality", perceptual_quality)
        if perceptual_quality_var is not None:
            pulumi.set(__self__, "perceptual_quality_var", perceptual_quality_var)
        if placeholder_video_url is not None:
            pulumi.set(__self__, "placeholder_video_url", placeholder_video_url)
        if placeholder_video_url_var is not None:
            pulumi.set(__self__, "placeholder_video_url_var", placeholder_video_url_var)
        if video_adaptive_quality is not None:
            pulumi.set(__self__, "video_adaptive_quality", video_adaptive_quality)
        if video_adaptive_quality_var is not None:
            pulumi.set(__self__, "video_adaptive_quality_var", video_adaptive_quality_var)

    @property
    @pulumi.getter(name="perceptualQuality")
    def perceptual_quality(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality")

    @property
    @pulumi.getter(name="perceptualQualityVar")
    def perceptual_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "perceptual_quality_var")

    @property
    @pulumi.getter(name="placeholderVideoUrl")
    def placeholder_video_url(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url")

    @property
    @pulumi.getter(name="placeholderVideoUrlVar")
    def placeholder_video_url_var(self) -> Optional[str]:
        return pulumi.get(self, "placeholder_video_url_var")

    @property
    @pulumi.getter(name="videoAdaptiveQuality")
    def video_adaptive_quality(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality")

    @property
    @pulumi.getter(name="videoAdaptiveQualityVar")
    def video_adaptive_quality_var(self) -> Optional[str]:
        return pulumi.get(self, "video_adaptive_quality_var")


@pulumi.output_type
class GetImagingPolicyVideoPolicyVariableResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 type: str,
                 enum_options: Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableEnumOptionResult']] = None,
                 postfix: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if enum_options is not None:
            pulumi.set(__self__, "enum_options", enum_options)
        if postfix is not None:
            pulumi.set(__self__, "postfix", postfix)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="enumOptions")
    def enum_options(self) -> Optional[Sequence['outputs.GetImagingPolicyVideoPolicyVariableEnumOptionResult']]:
        return pulumi.get(self, "enum_options")

    @property
    @pulumi.getter
    def postfix(self) -> Optional[str]:
        return pulumi.get(self, "postfix")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetImagingPolicyVideoPolicyVariableEnumOptionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertiesPropertyResult(dict):
    def __init__(__self__, *,
                 contract_id: str,
                 group_id: str,
                 latest_version: int,
                 note: str,
                 product_id: str,
                 production_version: int,
                 property_id: str,
                 property_name: str,
                 rule_format: str,
                 staging_version: int):
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "note", note)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "production_version", production_version)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "rule_format", rule_format)
        pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def note(self) -> str:
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> int:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter(name="ruleFormat")
    def rule_format(self) -> str:
        return pulumi.get(self, "rule_format")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> int:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertiesSearchPropertyResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 asset_id: str,
                 contract_id: str,
                 edge_hostname: str,
                 group_id: str,
                 hostname: str,
                 production_status: str,
                 property_id: str,
                 property_name: str,
                 property_version: int,
                 staging_status: str,
                 updated_by_user: str,
                 updated_date: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "asset_id", asset_id)
        pulumi.set(__self__, "contract_id", contract_id)
        pulumi.set(__self__, "edge_hostname", edge_hostname)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "production_status", production_status)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "property_name", property_name)
        pulumi.set(__self__, "property_version", property_version)
        pulumi.set(__self__, "staging_status", staging_status)
        pulumi.set(__self__, "updated_by_user", updated_by_user)
        pulumi.set(__self__, "updated_date", updated_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="assetId")
    def asset_id(self) -> str:
        return pulumi.get(self, "asset_id")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="edgeHostname")
    def edge_hostname(self) -> str:
        return pulumi.get(self, "edge_hostname")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> str:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> str:
        return pulumi.get(self, "property_id")

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> str:
        return pulumi.get(self, "property_name")

    @property
    @pulumi.getter(name="propertyVersion")
    def property_version(self) -> int:
        return pulumi.get(self, "property_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> str:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="updatedByUser")
    def updated_by_user(self) -> str:
        return pulumi.get(self, "updated_by_user")

    @property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> str:
        return pulumi.get(self, "updated_date")


@pulumi.output_type
class GetPropertyHostnamesHostnameResult(dict):
    def __init__(__self__, *,
                 cert_provisioning_type: str,
                 cert_statuses: Sequence['outputs.GetPropertyHostnamesHostnameCertStatusResult'],
                 cname_from: str,
                 cname_to: str,
                 cname_type: str,
                 edge_hostname_id: str):
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "cert_statuses", cert_statuses)
        pulumi.set(__self__, "cname_from", cname_from)
        pulumi.set(__self__, "cname_to", cname_to)
        pulumi.set(__self__, "cname_type", cname_type)
        pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> str:
        return pulumi.get(self, "cert_provisioning_type")

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Sequence['outputs.GetPropertyHostnamesHostnameCertStatusResult']:
        return pulumi.get(self, "cert_statuses")

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> str:
        return pulumi.get(self, "cname_from")

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> str:
        return pulumi.get(self, "cname_to")

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> str:
        return pulumi.get(self, "cname_type")

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> str:
        return pulumi.get(self, "edge_hostname_id")


@pulumi.output_type
class GetPropertyHostnamesHostnameCertStatusResult(dict):
    def __init__(__self__, *,
                 hostname: str,
                 production_status: str,
                 staging_status: str,
                 target: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "production_status", production_status)
        pulumi.set(__self__, "staging_status", staging_status)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> str:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> str:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetPropertyIncludeParentsParentResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_include_used_in_production_version: bool,
                 is_include_used_in_staging_version: bool,
                 name: str,
                 production_version: str,
                 staging_version: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_include_used_in_production_version", is_include_used_in_production_version)
        pulumi.set(__self__, "is_include_used_in_staging_version", is_include_used_in_staging_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "production_version", production_version)
        pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIncludeUsedInProductionVersion")
    def is_include_used_in_production_version(self) -> bool:
        return pulumi.get(self, "is_include_used_in_production_version")

    @property
    @pulumi.getter(name="isIncludeUsedInStagingVersion")
    def is_include_used_in_staging_version(self) -> bool:
        return pulumi.get(self, "is_include_used_in_staging_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> str:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> str:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyIncludesIncludeResult(dict):
    def __init__(__self__, *,
                 id: str,
                 latest_version: int,
                 name: str,
                 production_version: str,
                 staging_version: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latest_version", latest_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "production_version", production_version)
        pulumi.set(__self__, "staging_version", staging_version)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> str:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> str:
        return pulumi.get(self, "staging_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPropertyIncludesParentPropertyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 version: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyProductsProductResult(dict):
    def __init__(__self__, *,
                 product_id: str,
                 product_name: str):
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "product_name", product_name)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105Result(dict):
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResult']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResult']] = None,
                 custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CustomOverrideResult'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105VariableResult']] = None):
        pulumi.set(__self__, "name", name)
        if advanced_override is not None:
            pulumi.set(__self__, "advanced_override", advanced_override)
        if behaviors is not None:
            pulumi.set(__self__, "behaviors", behaviors)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if criteria_locked is not None:
            pulumi.set(__self__, "criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            pulumi.set(__self__, "criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)
        if custom_override is not None:
            pulumi.set(__self__, "custom_override", custom_override)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if template_link is not None:
            pulumi.set(__self__, "template_link", template_link)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResult']]:
        return pulumi.get(self, "behaviors")

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResult']]:
        return pulumi.get(self, "criterions")

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CustomOverrideResult']:
        return pulumi.get(self, "custom_override")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105VariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResult(dict):
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult'] = None,
                 adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult'] = None,
                 adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult'] = None,
                 advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult'] = None,
                 aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult'] = None,
                 akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult'] = None,
                 akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult'] = None,
                 all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult'] = None,
                 allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult'] = None,
                 allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult'] = None,
                 allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult'] = None,
                 allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult'] = None,
                 allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult'] = None,
                 allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult'] = None,
                 allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult'] = None,
                 allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult'] = None,
                 allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult'] = None,
                 alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult'] = None,
                 api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult'] = None,
                 application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult'] = None,
                 audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult'] = None,
                 auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult'] = None,
                 base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult'] = None,
                 boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult'] = None,
                 breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult'] = None,
                 break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult'] = None,
                 brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult'] = None,
                 cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult'] = None,
                 cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult'] = None,
                 cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult'] = None,
                 cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult'] = None,
                 cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult'] = None,
                 cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult'] = None,
                 cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult'] = None,
                 cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult'] = None,
                 cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult'] = None,
                 caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult'] = None,
                 central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult'] = None,
                 chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult'] = None,
                 client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult'] = None,
                 cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult'] = None,
                 cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult'] = None,
                 cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult'] = None,
                 conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult'] = None,
                 construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult'] = None,
                 content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult'] = None,
                 content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult'] = None,
                 content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult'] = None,
                 content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
                 content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult'] = None,
                 content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult'] = None,
                 content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult'] = None,
                 content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult'] = None,
                 cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult'] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult'] = None,
                 custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult'] = None,
                 datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult'] = None,
                 dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult'] = None,
                 dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult'] = None,
                 dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult'] = None,
                 dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult'] = None,
                 dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult'] = None,
                 dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult'] = None,
                 dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult'] = None,
                 dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult'] = None,
                 delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult'] = None,
                 deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult'] = None,
                 deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult'] = None,
                 device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult'] = None,
                 device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult'] = None,
                 dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult'] = None,
                 dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult'] = None,
                 downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult'] = None,
                 download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult'] = None,
                 download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult'] = None,
                 downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult'] = None,
                 dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult'] = None,
                 dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
                 dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult'] = None,
                 ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult'] = None,
                 ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult'] = None,
                 ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult'] = None,
                 ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult'] = None,
                 edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult'] = None,
                 edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult'] = None,
                 edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult'] = None,
                 edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult'] = None,
                 edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult'] = None,
                 edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult'] = None,
                 edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult'] = None,
                 edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult'] = None,
                 edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult'] = None,
                 enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult'] = None,
                 enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult'] = None,
                 epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult'] = None,
                 fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult'] = None,
                 failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
                 fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult'] = None,
                 first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult'] = None,
                 first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult'] = None,
                 forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult'] = None,
                 front_end_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult'] = None,
                 g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult'] = None,
                 global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult'] = None,
                 graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult'] = None,
                 gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult'] = None,
                 hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult'] = None,
                 health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult'] = None,
                 hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult'] = None,
                 http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result'] = None,
                 http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result'] = None,
                 http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult'] = None,
                 http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult'] = None,
                 im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult'] = None,
                 image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult'] = None,
                 image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult'] = None,
                 image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult'] = None,
                 include: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult'] = None,
                 input_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult'] = None,
                 instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult'] = None,
                 instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult'] = None,
                 large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult'] = None,
                 large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult'] = None,
                 limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult'] = None,
                 log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult'] = None,
                 m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult'] = None,
                 manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult'] = None,
                 manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult'] = None,
                 manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult'] = None,
                 media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult'] = None,
                 media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult'] = None,
                 media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult'] = None,
                 media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult'] = None,
                 media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult'] = None,
                 metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult'] = None,
                 mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult'] = None,
                 modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult'] = None,
                 modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult'] = None,
                 modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult'] = None,
                 modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult'] = None,
                 modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult'] = None,
                 origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult'] = None,
                 origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult'] = None,
                 origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult'] = None,
                 origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult'] = None,
                 origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult'] = None,
                 origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult'] = None,
                 persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult'] = None,
                 persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult'] = None,
                 personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult'] = None,
                 phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult'] = None,
                 preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult'] = None,
                 predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult'] = None,
                 predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult'] = None,
                 prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult'] = None,
                 prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult'] = None,
                 prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult'] = None,
                 quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult'] = None,
                 quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult'] = None,
                 random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult'] = None,
                 rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult'] = None,
                 read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult'] = None,
                 real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult'] = None,
                 real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult'] = None,
                 redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult'] = None,
                 redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult'] = None,
                 referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult'] = None,
                 remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult'] = None,
                 remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult'] = None,
                 report: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReportResult'] = None,
                 request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult'] = None,
                 request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult'] = None,
                 resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult'] = None,
                 resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
                 response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult'] = None,
                 response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult'] = None,
                 restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult'] = None,
                 return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult'] = None,
                 rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult'] = None,
                 rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult'] = None,
                 saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult'] = None,
                 sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult'] = None,
                 sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
                 save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult'] = None,
                 schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult'] = None,
                 script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult'] = None,
                 segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult'] = None,
                 segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult'] = None,
                 segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
                 set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult'] = None,
                 shutr: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult'] = None,
                 simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult'] = None,
                 site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult'] = None,
                 standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult'] = None,
                 standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult'] = None,
                 strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult'] = None,
                 sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult'] = None,
                 sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult'] = None,
                 tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult'] = None,
                 tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult'] = None,
                 tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult'] = None,
                 tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult'] = None,
                 tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult'] = None,
                 timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult'] = None,
                 uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult'] = None,
                 validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult'] = None,
                 verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult'] = None,
                 verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult'] = None,
                 verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult'] = None,
                 virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
                 visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult'] = None,
                 visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult'] = None,
                 visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
                 watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult'] = None,
                 web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult'] = None,
                 web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult'] = None,
                 webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult'] = None):
        if ad_scaler_circuit_breaker is not None:
            pulumi.set(__self__, "ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            pulumi.set(__self__, "adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            pulumi.set(__self__, "adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if aggregated_reporting is not None:
            pulumi.set(__self__, "aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            pulumi.set(__self__, "akamaizer", akamaizer)
        if akamaizer_tag is not None:
            pulumi.set(__self__, "akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            pulumi.set(__self__, "all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            pulumi.set(__self__, "allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            pulumi.set(__self__, "allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            pulumi.set(__self__, "allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if allow_patch is not None:
            pulumi.set(__self__, "allow_patch", allow_patch)
        if allow_post is not None:
            pulumi.set(__self__, "allow_post", allow_post)
        if allow_put is not None:
            pulumi.set(__self__, "allow_put", allow_put)
        if allow_transfer_encoding is not None:
            pulumi.set(__self__, "allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            pulumi.set(__self__, "alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            pulumi.set(__self__, "api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            pulumi.set(__self__, "application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            pulumi.set(__self__, "audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            pulumi.set(__self__, "auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            pulumi.set(__self__, "base_directory", base_directory)
        if boss_beaconing is not None:
            pulumi.set(__self__, "boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            pulumi.set(__self__, "breadcrumbs", breadcrumbs)
        if break_connection is not None:
            pulumi.set(__self__, "break_connection", break_connection)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if cache_error is not None:
            pulumi.set(__self__, "cache_error", cache_error)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if cache_key_ignore_case is not None:
            pulumi.set(__self__, "cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            pulumi.set(__self__, "cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            pulumi.set(__self__, "cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            pulumi.set(__self__, "cache_post", cache_post)
        if cache_redirect is not None:
            pulumi.set(__self__, "cache_redirect", cache_redirect)
        if cache_tag is not None:
            pulumi.set(__self__, "cache_tag", cache_tag)
        if cache_tag_visible is not None:
            pulumi.set(__self__, "cache_tag_visible", cache_tag_visible)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if central_authorization is not None:
            pulumi.set(__self__, "central_authorization", central_authorization)
        if chase_redirects is not None:
            pulumi.set(__self__, "chase_redirects", chase_redirects)
        if client_characteristics is not None:
            pulumi.set(__self__, "client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            pulumi.set(__self__, "cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            pulumi.set(__self__, "cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            pulumi.set(__self__, "cloud_wrapper_advanced", cloud_wrapper_advanced)
        if conditional_origin is not None:
            pulumi.set(__self__, "conditional_origin", conditional_origin)
        if construct_response is not None:
            pulumi.set(__self__, "construct_response", construct_response)
        if content_characteristics is not None:
            pulumi.set(__self__, "content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            pulumi.set(__self__, "content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            pulumi.set(__self__, "content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            pulumi.set(__self__, "content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            pulumi.set(__self__, "content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            pulumi.set(__self__, "content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            pulumi.set(__self__, "content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            pulumi.set(__self__, "content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            pulumi.set(__self__, "cors_support", cors_support)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if custom_behavior is not None:
            pulumi.set(__self__, "custom_behavior", custom_behavior)
        if datastream is not None:
            pulumi.set(__self__, "datastream", datastream)
        if dcp is not None:
            pulumi.set(__self__, "dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            pulumi.set(__self__, "dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            pulumi.set(__self__, "dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            pulumi.set(__self__, "dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            pulumi.set(__self__, "dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            pulumi.set(__self__, "dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            pulumi.set(__self__, "dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            pulumi.set(__self__, "dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            pulumi.set(__self__, "delivery_receipt", delivery_receipt)
        if deny_access is not None:
            pulumi.set(__self__, "deny_access", deny_access)
        if deny_direct_failover_access is not None:
            pulumi.set(__self__, "deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            pulumi.set(__self__, "device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            pulumi.set(__self__, "device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            pulumi.set(__self__, "dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            pulumi.set(__self__, "dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            pulumi.set(__self__, "downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            pulumi.set(__self__, "download_complete_marker", download_complete_marker)
        if download_notification is not None:
            pulumi.set(__self__, "download_notification", download_notification)
        if downstream_cache is not None:
            pulumi.set(__self__, "downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            pulumi.set(__self__, "ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            pulumi.set(__self__, "ecms_database", ecms_database)
        if ecms_dataset is not None:
            pulumi.set(__self__, "ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            pulumi.set(__self__, "ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            pulumi.set(__self__, "edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            pulumi.set(__self__, "edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            pulumi.set(__self__, "edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            pulumi.set(__self__, "edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            pulumi.set(__self__, "edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            pulumi.set(__self__, "edge_redirector", edge_redirector)
        if edge_scape is not None:
            pulumi.set(__self__, "edge_scape", edge_scape)
        if edge_side_includes is not None:
            pulumi.set(__self__, "edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            pulumi.set(__self__, "edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            pulumi.set(__self__, "enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            pulumi.set(__self__, "enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            pulumi.set(__self__, "epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            pulumi.set(__self__, "fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            pulumi.set(__self__, "failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            pulumi.set(__self__, "fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            pulumi.set(__self__, "first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            pulumi.set(__self__, "first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            pulumi.set(__self__, "forward_rewrite", forward_rewrite)
        if front_end_optimization is not None:
            pulumi.set(__self__, "front_end_optimization", front_end_optimization)
        if g2oheader is not None:
            pulumi.set(__self__, "g2oheader", g2oheader)
        if global_request_number is not None:
            pulumi.set(__self__, "global_request_number", global_request_number)
        if graphql_caching is not None:
            pulumi.set(__self__, "graphql_caching", graphql_caching)
        if gzip_response is not None:
            pulumi.set(__self__, "gzip_response", gzip_response)
        if hd_data_advanced is not None:
            pulumi.set(__self__, "hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            pulumi.set(__self__, "health_detection", health_detection)
        if hsaf_eip_binding is not None:
            pulumi.set(__self__, "hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if http_strict_transport_security is not None:
            pulumi.set(__self__, "http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            pulumi.set(__self__, "http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            pulumi.set(__self__, "im_override", im_override)
        if image_and_video_manager is not None:
            pulumi.set(__self__, "image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            pulumi.set(__self__, "image_manager", image_manager)
        if image_manager_video is not None:
            pulumi.set(__self__, "image_manager_video", image_manager_video)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if input_validation is not None:
            pulumi.set(__self__, "input_validation", input_validation)
        if instant is not None:
            pulumi.set(__self__, "instant", instant)
        if instant_config is not None:
            pulumi.set(__self__, "instant_config", instant_config)
        if large_file_optimization is not None:
            pulumi.set(__self__, "large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            pulumi.set(__self__, "large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            pulumi.set(__self__, "limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            pulumi.set(__self__, "log_custom", log_custom)
        if m_pulse is not None:
            pulumi.set(__self__, "m_pulse", m_pulse)
        if manifest_personalization is not None:
            pulumi.set(__self__, "manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            pulumi.set(__self__, "manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            pulumi.set(__self__, "manual_server_push", manual_server_push)
        if media_acceleration is not None:
            pulumi.set(__self__, "media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            pulumi.set(__self__, "media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            pulumi.set(__self__, "media_client", media_client)
        if media_file_retrieval_optimization is not None:
            pulumi.set(__self__, "media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            pulumi.set(__self__, "media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            pulumi.set(__self__, "metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            pulumi.set(__self__, "mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            pulumi.set(__self__, "modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            pulumi.set(__self__, "modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            pulumi.set(__self__, "modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            pulumi.set(__self__, "modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            pulumi.set(__self__, "modify_via_header", modify_via_header)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_characteristics is not None:
            pulumi.set(__self__, "origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            pulumi.set(__self__, "origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            pulumi.set(__self__, "origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            pulumi.set(__self__, "origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            pulumi.set(__self__, "origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            pulumi.set(__self__, "persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            pulumi.set(__self__, "personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            pulumi.set(__self__, "phased_release", phased_release)
        if preconnect is not None:
            pulumi.set(__self__, "preconnect", preconnect)
        if predictive_content_delivery is not None:
            pulumi.set(__self__, "predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            pulumi.set(__self__, "predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if prefetchable is not None:
            pulumi.set(__self__, "prefetchable", prefetchable)
        if prefresh_cache is not None:
            pulumi.set(__self__, "prefresh_cache", prefresh_cache)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quic_beta is not None:
            pulumi.set(__self__, "quic_beta", quic_beta)
        if random_seek is not None:
            pulumi.set(__self__, "random_seek", random_seek)
        if rapid is not None:
            pulumi.set(__self__, "rapid", rapid)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if real_time_reporting is not None:
            pulumi.set(__self__, "real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirectplus is not None:
            pulumi.set(__self__, "redirectplus", redirectplus)
        if referer_checking is not None:
            pulumi.set(__self__, "referer_checking", referer_checking)
        if remove_query_parameter is not None:
            pulumi.set(__self__, "remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            pulumi.set(__self__, "remove_vary", remove_vary)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if request_control is not None:
            pulumi.set(__self__, "request_control", request_control)
        if request_type_marker is not None:
            pulumi.set(__self__, "request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            pulumi.set(__self__, "resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            pulumi.set(__self__, "resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_cookie is not None:
            pulumi.set(__self__, "response_cookie", response_cookie)
        if restrict_object_caching is not None:
            pulumi.set(__self__, "restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            pulumi.set(__self__, "return_cache_status", return_cache_status)
        if rewrite_url is not None:
            pulumi.set(__self__, "rewrite_url", rewrite_url)
        if rum_custom is not None:
            pulumi.set(__self__, "rum_custom", rum_custom)
        if saas_definitions is not None:
            pulumi.set(__self__, "saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            pulumi.set(__self__, "save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            pulumi.set(__self__, "schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            pulumi.set(__self__, "script_management", script_management)
        if segmented_content_protection is not None:
            pulumi.set(__self__, "segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            pulumi.set(__self__, "segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            pulumi.set(__self__, "segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            pulumi.set(__self__, "set_variable", set_variable)
        if shutr is not None:
            pulumi.set(__self__, "shutr", shutr)
        if simulate_error_code is not None:
            pulumi.set(__self__, "simulate_error_code", simulate_error_code)
        if site_shield is not None:
            pulumi.set(__self__, "site_shield", site_shield)
        if standard_tls_migration is not None:
            pulumi.set(__self__, "standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            pulumi.set(__self__, "standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            pulumi.set(__self__, "strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            pulumi.set(__self__, "sub_customer", sub_customer)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            pulumi.set(__self__, "tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            pulumi.set(__self__, "tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            pulumi.set(__self__, "tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            pulumi.set(__self__, "tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uid_configuration is not None:
            pulumi.set(__self__, "uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            pulumi.set(__self__, "validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            pulumi.set(__self__, "verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            pulumi.set(__self__, "verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            pulumi.set(__self__, "verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            pulumi.set(__self__, "virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            pulumi.set(__self__, "virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            pulumi.set(__self__, "visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            pulumi.set(__self__, "watermarking", watermarking)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            pulumi.set(__self__, "web_sockets", web_sockets)
        if webdav is not None:
            pulumi.set(__self__, "webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult']:
        return pulumi.get(self, "adaptive_acceleration")

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult']:
        return pulumi.get(self, "adaptive_image_compression")

    @property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult']:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult']:
        return pulumi.get(self, "aggregated_reporting")

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult']:
        return pulumi.get(self, "akamaizer")

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult']:
        return pulumi.get(self, "akamaizer_tag")

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult']:
        return pulumi.get(self, "allow_delete")

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult']:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult']:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult']:
        return pulumi.get(self, "allow_patch")

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult']:
        return pulumi.get(self, "allow_post")

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult']:
        return pulumi.get(self, "allow_put")

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult']:
        return pulumi.get(self, "allow_transfer_encoding")

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult']:
        return pulumi.get(self, "alt_svc_header")

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult']:
        return pulumi.get(self, "api_prioritization")

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult']:
        return pulumi.get(self, "application_load_balancer")

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult']:
        return pulumi.get(self, "audience_segmentation")

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult']:
        return pulumi.get(self, "auto_domain_validation")

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult']:
        return pulumi.get(self, "base_directory")

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult']:
        return pulumi.get(self, "boss_beaconing")

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult']:
        return pulumi.get(self, "breadcrumbs")

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult']:
        return pulumi.get(self, "break_connection")

    @property
    @pulumi.getter
    def brotli(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult']:
        return pulumi.get(self, "brotli")

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult']:
        return pulumi.get(self, "cache_error")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult']:
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult']:
        return pulumi.get(self, "cache_key_ignore_case")

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult']:
        return pulumi.get(self, "cache_key_query_params")

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult']:
        return pulumi.get(self, "cache_key_rewrite")

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult']:
        return pulumi.get(self, "cache_post")

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult']:
        return pulumi.get(self, "cache_redirect")

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult']:
        return pulumi.get(self, "cache_tag")

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult']:
        return pulumi.get(self, "cache_tag_visible")

    @property
    @pulumi.getter
    def caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult']:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult']:
        return pulumi.get(self, "central_authorization")

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult']:
        return pulumi.get(self, "chase_redirects")

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult']:
        return pulumi.get(self, "client_characteristics")

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult']:
        return pulumi.get(self, "cloud_interconnects")

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult']:
        return pulumi.get(self, "cloud_wrapper")

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult']:
        return pulumi.get(self, "conditional_origin")

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult']:
        return pulumi.get(self, "construct_response")

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult']:
        return pulumi.get(self, "content_characteristics")

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult']:
        return pulumi.get(self, "content_characteristics_amd")

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult']:
        return pulumi.get(self, "content_characteristics_dd")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult']:
        return pulumi.get(self, "content_pre_position")

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult']:
        return pulumi.get(self, "content_targeting_protection")

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult']:
        return pulumi.get(self, "cors_support")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult']:
        return pulumi.get(self, "custom_behavior")

    @property
    @pulumi.getter
    def datastream(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult']:
        return pulumi.get(self, "datastream")

    @property
    @pulumi.getter
    def dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult']:
        return pulumi.get(self, "dcp")

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult']:
        return pulumi.get(self, "dcp_dev_relations")

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult']:
        return pulumi.get(self, "dcp_real_time_auth")

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult']:
        return pulumi.get(self, "delivery_receipt")

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult']:
        return pulumi.get(self, "deny_access")

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult']:
        return pulumi.get(self, "deny_direct_failover_access")

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult']:
        return pulumi.get(self, "device_characteristic_header")

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult']:
        return pulumi.get(self, "dns_async_refresh")

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult']:
        return pulumi.get(self, "dns_prefresh")

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult']:
        return pulumi.get(self, "downgrade_protocol")

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult']:
        return pulumi.get(self, "download_complete_marker")

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult']:
        return pulumi.get(self, "download_notification")

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult']:
        return pulumi.get(self, "downstream_cache")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult']:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult']:
        return pulumi.get(self, "ecms_bulk_upload")

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult']:
        return pulumi.get(self, "ecms_database")

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult']:
        return pulumi.get(self, "ecms_dataset")

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult']:
        return pulumi.get(self, "ecms_object_key")

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult']:
        return pulumi.get(self, "edge_connect")

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult']:
        return pulumi.get(self, "edge_origin_authorization")

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult']:
        return pulumi.get(self, "edge_redirector")

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult']:
        return pulumi.get(self, "edge_scape")

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult']:
        return pulumi.get(self, "edge_side_includes")

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult']:
        return pulumi.get(self, "edge_worker")

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult']:
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult']:
        return pulumi.get(self, "fast_invalidate")

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult']:
        return pulumi.get(self, "first_party_marketing")

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult']:
        return pulumi.get(self, "first_party_marketing_plus")

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult']:
        return pulumi.get(self, "forward_rewrite")

    @property
    @pulumi.getter(name="frontEndOptimization")
    def front_end_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult']:
        return pulumi.get(self, "front_end_optimization")

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult']:
        return pulumi.get(self, "g2oheader")

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult']:
        return pulumi.get(self, "global_request_number")

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult']:
        return pulumi.get(self, "graphql_caching")

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult']:
        return pulumi.get(self, "gzip_response")

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult']:
        return pulumi.get(self, "hd_data_advanced")

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult']:
        return pulumi.get(self, "health_detection")

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult']:
        return pulumi.get(self, "hsaf_eip_binding")

    @property
    @pulumi.getter
    def http2(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result']:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def http3(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result']:
        return pulumi.get(self, "http3")

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult']:
        return pulumi.get(self, "http_strict_transport_security")

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult']:
        return pulumi.get(self, "http_to_https_upgrade")

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult']:
        return pulumi.get(self, "im_override")

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult']:
        return pulumi.get(self, "image_and_video_manager")

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult']:
        return pulumi.get(self, "image_manager")

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult']:
        return pulumi.get(self, "image_manager_video")

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult']:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter(name="inputValidation")
    def input_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult']:
        return pulumi.get(self, "input_validation")

    @property
    @pulumi.getter
    def instant(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult']:
        return pulumi.get(self, "instant")

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult']:
        return pulumi.get(self, "instant_config")

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult']:
        return pulumi.get(self, "large_file_optimization")

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult']:
        return pulumi.get(self, "limit_bit_rate")

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult']:
        return pulumi.get(self, "log_custom")

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult']:
        return pulumi.get(self, "m_pulse")

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult']:
        return pulumi.get(self, "manifest_personalization")

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult']:
        return pulumi.get(self, "manifest_rerouting")

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult']:
        return pulumi.get(self, "manual_server_push")

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult']:
        return pulumi.get(self, "media_acceleration")

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult']:
        return pulumi.get(self, "media_client")

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult']:
        return pulumi.get(self, "media_origin_failover")

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult']:
        return pulumi.get(self, "metadata_caching")

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult']:
        return pulumi.get(self, "mobile_sdk_performance")

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult']:
        return pulumi.get(self, "modify_incoming_request_header")

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult']:
        return pulumi.get(self, "modify_incoming_response_header")

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult']:
        return pulumi.get(self, "modify_via_header")

    @property
    @pulumi.getter
    def origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult']:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult']:
        return pulumi.get(self, "origin_characteristics")

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult']:
        return pulumi.get(self, "origin_ip_acl")

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult']:
        return pulumi.get(self, "persistent_client_connection")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult']:
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult']:
        return pulumi.get(self, "personally_identifiable_information")

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult']:
        return pulumi.get(self, "phased_release")

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult']:
        return pulumi.get(self, "preconnect")

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult']:
        return pulumi.get(self, "predictive_content_delivery")

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult']:
        return pulumi.get(self, "predictive_prefetching")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult']:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult']:
        return pulumi.get(self, "prefetchable")

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult']:
        return pulumi.get(self, "prefresh_cache")

    @property
    @pulumi.getter
    def quality(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult']:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult']:
        return pulumi.get(self, "quic_beta")

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult']:
        return pulumi.get(self, "random_seek")

    @property
    @pulumi.getter
    def rapid(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult']:
        return pulumi.get(self, "rapid")

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult']:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult']:
        return pulumi.get(self, "real_time_reporting")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult']:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult']:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult']:
        return pulumi.get(self, "redirectplus")

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult']:
        return pulumi.get(self, "referer_checking")

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult']:
        return pulumi.get(self, "remove_query_parameter")

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult']:
        return pulumi.get(self, "remove_vary")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReportResult']:
        return pulumi.get(self, "report")

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult']:
        return pulumi.get(self, "request_control")

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult']:
        return pulumi.get(self, "request_type_marker")

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult']:
        return pulumi.get(self, "resource_optimizer")

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult']:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult']:
        return pulumi.get(self, "response_cookie")

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult']:
        return pulumi.get(self, "restrict_object_caching")

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult']:
        return pulumi.get(self, "return_cache_status")

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult']:
        return pulumi.get(self, "rewrite_url")

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult']:
        return pulumi.get(self, "rum_custom")

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult']:
        return pulumi.get(self, "saas_definitions")

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult']:
        return pulumi.get(self, "save_post_dca_processing")

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult']:
        return pulumi.get(self, "schedule_invalidation")

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult']:
        return pulumi.get(self, "script_management")

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult']:
        return pulumi.get(self, "segmented_content_protection")

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult']:
        return pulumi.get(self, "segmented_media_optimization")

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult']:
        return pulumi.get(self, "set_variable")

    @property
    @pulumi.getter
    def shutr(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult']:
        return pulumi.get(self, "shutr")

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult']:
        return pulumi.get(self, "simulate_error_code")

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult']:
        return pulumi.get(self, "site_shield")

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult']:
        return pulumi.get(self, "standard_tls_migration")

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult']:
        return pulumi.get(self, "standard_tls_migration_override")

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult']:
        return pulumi.get(self, "strict_header_parsing")

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult']:
        return pulumi.get(self, "sub_customer")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult']:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult']:
        return pulumi.get(self, "tcp_optimization")

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult']:
        return pulumi.get(self, "tea_leaf")

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult']:
        return pulumi.get(self, "tiered_distribution")

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult']:
        return pulumi.get(self, "tiered_distribution_customization")

    @property
    @pulumi.getter
    def timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult']:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult']:
        return pulumi.get(self, "uid_configuration")

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult']:
        return pulumi.get(self, "validate_entity_tag")

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult']:
        return pulumi.get(self, "verify_json_web_token")

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult']:
        return pulumi.get(self, "verify_token_authorization")

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult']:
        return pulumi.get(self, "virtual_waiting_room")

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult']:
        return pulumi.get(self, "visitor_prioritization")

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult']:
        return pulumi.get(self, "watermarking")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult']:
        return pulumi.get(self, "web_application_firewall")

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult']:
        return pulumi.get(self, "web_sockets")

    @property
    @pulumi.getter
    def webdav(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult']:
        return pulumi.get(self, "webdav")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreakerResult(dict):
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if fallback_action_response_code_based is not None:
            pulumi.set(__self__, "fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code_based is not None:
            pulumi.set(__self__, "response_code_based", response_code_based)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if response_delay_based is not None:
            pulumi.set(__self__, "response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            pulumi.set(__self__, "response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            pulumi.set(__self__, "return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            pulumi.set(__self__, "specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAccelerationResult(dict):
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        if ab_logic is not None:
            pulumi.set(__self__, "ab_logic", ab_logic)
        if ab_testing is not None:
            pulumi.set(__self__, "ab_testing", ab_testing)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            pulumi.set(__self__, "enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            pulumi.set(__self__, "enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            pulumi.set(__self__, "enable_preconnect", enable_preconnect)
        if enable_push is not None:
            pulumi.set(__self__, "enable_push", enable_push)
        if enable_ro is not None:
            pulumi.set(__self__, "enable_ro", enable_ro)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preload_enable is not None:
            pulumi.set(__self__, "preload_enable", preload_enable)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_brotli is not None:
            pulumi.set(__self__, "title_brotli", title_brotli)
        if title_http2_server_push is not None:
            pulumi.set(__self__, "title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            pulumi.set(__self__, "title_preconnect", title_preconnect)
        if title_preload is not None:
            pulumi.set(__self__, "title_preload", title_preload)
        if title_ro is not None:
            pulumi.set(__self__, "title_ro", title_ro)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompressionResult(dict):
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compress_mobile is not None:
            pulumi.set(__self__, "compress_mobile", compress_mobile)
        if compress_standard is not None:
            pulumi.set(__self__, "compress_standard", compress_standard)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            pulumi.set(__self__, "tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            pulumi.set(__self__, "tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            pulumi.set(__self__, "tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            pulumi.set(__self__, "tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            pulumi.set(__self__, "tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            pulumi.set(__self__, "tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            pulumi.set(__self__, "tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            pulumi.set(__self__, "tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            pulumi.set(__self__, "tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            pulumi.set(__self__, "tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            pulumi.set(__self__, "tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            pulumi.set(__self__, "tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            pulumi.set(__self__, "title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            pulumi.set(__self__, "title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReportingResult(dict):
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if attribute1 is not None:
            pulumi.set(__self__, "attribute1", attribute1)
        if attribute2 is not None:
            pulumi.set(__self__, "attribute2", attribute2)
        if attribute3 is not None:
            pulumi.set(__self__, "attribute3", attribute3)
        if attribute4 is not None:
            pulumi.set(__self__, "attribute4", attribute4)
        if attributes_count is not None:
            pulumi.set(__self__, "attributes_count", attributes_count)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if report_name is not None:
            pulumi.set(__self__, "report_name", report_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagResult(dict):
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if include_tags_attribute is not None:
            pulumi.set(__self__, "include_tags_attribute", include_tags_attribute)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_hostname is not None:
            pulumi.set(__self__, "match_hostname", match_hostname)
        if replace_all is not None:
            pulumi.set(__self__, "replace_all", replace_all)
        if replacement_hostname is not None:
            pulumi.set(__self__, "replacement_hostname", replacement_hostname)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tags_attribute is not None:
            pulumi.set(__self__, "tags_attribute", tags_attribute)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchyResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOriginsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if honor_base_directory is not None:
            pulumi.set(__self__, "honor_base_directory", honor_base_directory)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_origin_query_parameter is not None:
            pulumi.set(__self__, "purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowDeleteResult(dict):
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_body is not None:
            pulumi.set(__self__, "allow_body", allow_body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngradeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptionsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPostResult(dict):
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_without_content_length is not None:
            pulumi.set(__self__, "allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowPutResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncodingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeaderResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationResult(dict):
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if alternate_response_cache_ttl is not None:
            pulumi.set(__self__, "alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throttled_cp_code is not None:
            pulumi.set(__self__, "throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            pulumi.set(__self__, "throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            pulumi.set(__self__, "use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            pulumi.set(__self__, "use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult']:
        return pulumi.get(self, "throttled_cp_code")

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerResult(dict):
    def __init__(__self__, *,
                 all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if all_down_net_storage is not None:
            pulumi.set(__self__, "all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            pulumi.set(__self__, "all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            pulumi.set(__self__, "all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            pulumi.set(__self__, "all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            pulumi.set(__self__, "allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            pulumi.set(__self__, "cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_attempts_threshold is not None:
            pulumi.set(__self__, "failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if failover_origin_maps is not None:
            pulumi.set(__self__, "failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            pulumi.set(__self__, "failover_status_codes", failover_status_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_cookie_name is not None:
            pulumi.set(__self__, "origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            pulumi.set(__self__, "specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            pulumi.set(__self__, "stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            pulumi.set(__self__, "stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            pulumi.set(__self__, "stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            pulumi.set(__self__, "stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            pulumi.set(__self__, "stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            pulumi.set(__self__, "stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            pulumi.set(__self__, "stickiness_title", stickiness_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult']:
        return pulumi.get(self, "all_down_net_storage")

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult']]:
        return pulumi.get(self, "failover_origin_maps")

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMapResult(dict):
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        if from_origin_id is not None:
            pulumi.set(__self__, "from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            pulumi.set(__self__, "to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_automatic_salt is not None:
            pulumi.set(__self__, "population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            pulumi.set(__self__, "population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            pulumi.set(__self__, "population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            pulumi.set(__self__, "population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if segment_tracking_cookie_name is not None:
            pulumi.set(__self__, "segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            pulumi.set(__self__, "segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            pulumi.set(__self__, "segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            pulumi.set(__self__, "segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            pulumi.set(__self__, "segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            pulumi.set(__self__, "specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidationResult(dict):
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if autodv is not None:
            pulumi.set(__self__, "autodv", autodv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectoryResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconingResult(dict):
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if conditional_error_pattern is not None:
            pulumi.set(__self__, "conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            pulumi.set(__self__, "conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            pulumi.set(__self__, "cpcodes", cpcodes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if sampling_frequency is not None:
            pulumi.set(__self__, "sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if opt_mode is not None:
            pulumi.set(__self__, "opt_mode", opt_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorBrotliResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheErrorResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preserve_stale is not None:
            pulumi.set(__self__, "preserve_stale", preserve_stale)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if include_value is not None:
            pulumi.set(__self__, "include_value", include_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParamsResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewriteResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_key is not None:
            pulumi.set(__self__, "purge_key", purge_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachePostResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_body is not None:
            pulumi.set(__self__, "use_body", use_body)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirectResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisibleResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCachingResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if cache_control_directives is not None:
            pulumi.set(__self__, "cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            pulumi.set(__self__, "cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            pulumi.set(__self__, "enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            pulumi.set(__self__, "expiration_settings", expiration_settings)
        if honor_max_age is not None:
            pulumi.set(__self__, "honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            pulumi.set(__self__, "honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            pulumi.set(__self__, "honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            pulumi.set(__self__, "honor_no_store", honor_no_store)
        if honor_private is not None:
            pulumi.set(__self__, "honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            pulumi.set(__self__, "honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            pulumi.set(__self__, "honor_s_maxage", honor_s_maxage)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if must_revalidate is not None:
            pulumi.set(__self__, "must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            pulumi.set(__self__, "revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirectsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serve404 is not None:
            pulumi.set(__self__, "serve404", serve404)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristicsResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnectsResult(dict):
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloud_locations is not None:
            pulumi.set(__self__, "cloud_locations", cloud_locations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvancedResult(dict):
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_failover_map is not None:
            pulumi.set(__self__, "custom_failover_map", custom_failover_map)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_map is not None:
            pulumi.set(__self__, "failover_map", failover_map)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponseResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_eviction is not None:
            pulumi.set(__self__, "force_eviction", force_eviction)
        if ignore_purge is not None:
            pulumi.set(__self__, "ignore_purge", ignore_purge)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            pulumi.set(__self__, "segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            pulumi.set(__self__, "segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            pulumi.set(__self__, "segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            pulumi.set(__self__, "segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_option is not None:
            pulumi.set(__self__, "optimize_option", optimize_option)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFileResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLiveResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVodResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePositionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if first_location is not None:
            pulumi.set(__self__, "first_location", first_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if second_location is not None:
            pulumi.set(__self__, "second_location", second_location)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtectionResult(dict):
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if dmas is not None:
            pulumi.set(__self__, "dmas", dmas)
        if enable_geo_protection is not None:
            pulumi.set(__self__, "enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            pulumi.set(__self__, "enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            pulumi.set(__self__, "enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_protection_mode is not None:
            pulumi.set(__self__, "geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            pulumi.set(__self__, "geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            pulumi.set(__self__, "geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            pulumi.set(__self__, "ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            pulumi.set(__self__, "ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            pulumi.set(__self__, "ip_redirect_url", ip_redirect_url)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_ip_addresses is not None:
            pulumi.set(__self__, "override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            pulumi.set(__self__, "referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            pulumi.set(__self__, "referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            pulumi.set(__self__, "referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            pulumi.set(__self__, "referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupportResult(dict):
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if preflight_max_age is not None:
            pulumi.set(__self__, "preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehaviorResult(dict):
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior_id is not None:
            pulumi.set(__self__, "behavior_id", behavior_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDatastreamResult(dict):
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_name: Optional[int] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if beacon_stream_title is not None:
            pulumi.set(__self__, "beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            pulumi.set(__self__, "collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            pulumi.set(__self__, "datastream_ids", datastream_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if log_stream_title is not None:
            pulumi.set(__self__, "log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[int]:
        return pulumi.get(self, "log_stream_name")

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpResult(dict):
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gwenabled is not None:
            pulumi.set(__self__, "gwenabled", gwenabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tlsenabled is not None:
            pulumi.set(__self__, "tlsenabled", tlsenabled)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wsenabled is not None:
            pulumi.set(__self__, "wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformationResult(dict):
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if hash_conversion_algorithm is not None:
            pulumi.set(__self__, "hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            pulumi.set(__self__, "hash_conversion_key", hash_conversion_key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if substring_end is not None:
            pulumi.set(__self__, "substring_end", substring_end)
        if substring_start is not None:
            pulumi.set(__self__, "substring_start", substring_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractorResult(dict):
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if certificate_field is not None:
            pulumi.set(__self__, "certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            pulumi.set(__self__, "dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroupsResult(dict):
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if group_names is not None:
            pulumi.set(__self__, "group_names", group_names)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelationsResult(dict):
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuthResult(dict):
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if extract_hostname is not None:
            pulumi.set(__self__, "extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            pulumi.set(__self__, "extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            pulumi.set(__self__, "extract_namespace", extract_namespace)
        if hostname_claim is not None:
            pulumi.set(__self__, "hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            pulumi.set(__self__, "jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_claim is not None:
            pulumi.set(__self__, "namespace_claim", namespace_claim)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceiptResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeaderResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefreshResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefreshResult(dict):
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocolResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarkerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotificationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCacheResult(dict):
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_behavior is not None:
            pulumi.set(__self__, "allow_behavior", allow_behavior)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if send_headers is not None:
            pulumi.set(__self__, "send_headers", send_headers)
        if send_private is not None:
            pulumi.set(__self__, "send_private", send_private)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverrideResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContentResult(dict):
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if image_compression is not None:
            pulumi.set(__self__, "image_compression", image_compression)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUploadResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabaseResult(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatasetResult(dict):
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKeyResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnectResult(dict):
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if aggregate_lines is not None:
            pulumi.set(__self__, "aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            pulumi.set(__self__, "aggregate_size", aggregate_size)
        if aggregate_time is not None:
            pulumi.set(__self__, "aggregate_time", aggregate_time)
        if api_connector is not None:
            pulumi.set(__self__, "api_connector", api_connector)
        if api_data_elements is not None:
            pulumi.set(__self__, "api_data_elements", api_data_elements)
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_aggregate_settings is not None:
            pulumi.set(__self__, "override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_failover is not None:
            pulumi.set(__self__, "enable_failover", enable_failover)
        if failover_rules is not None:
            pulumi.set(__self__, "failover_rules", failover_rules)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']]:
        return pulumi.get(self, "failover_rules")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult(dict):
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        if absolute_path is not None:
            pulumi.set(__self__, "absolute_path", absolute_path)
        if context_root is not None:
            pulumi.set(__self__, "context_root", context_root)
        if failover_hostname is not None:
            pulumi.set(__self__, "failover_hostname", failover_hostname)
        if modify_request is not None:
            pulumi.set(__self__, "modify_request", modify_request)
        if override_hostname is not None:
            pulumi.set(__self__, "override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOriginResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_session_persistence is not None:
            pulumi.set(__self__, "enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_persistence_title is not None:
            pulumi.set(__self__, "session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorizationResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScapeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludesResult(dict):
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if detect_injection is not None:
            pulumi.set(__self__, "detect_injection", detect_injection)
        if enable_via_http is not None:
            pulumi.set(__self__, "enable_via_http", enable_via_http)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if i18n_charsets is not None:
            pulumi.set(__self__, "i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            pulumi.set(__self__, "i18n_status", i18n_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if pass_client_ip is not None:
            pulumi.set(__self__, "pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            pulumi.set(__self__, "pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorkerResult(dict):
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if create_edge_worker is not None:
            pulumi.set(__self__, "create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            pulumi.set(__self__, "edge_worker_id", edge_worker_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if resource_tier is not None:
            pulumi.set(__self__, "resource_tier", resource_tier)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocolResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetectionResult(dict):
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        if anonymous_vpn is not None:
            pulumi.set(__self__, "anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            pulumi.set(__self__, "best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            pulumi.set(__self__, "best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            pulumi.set(__self__, "detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            pulumi.set(__self__, "detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            pulumi.set(__self__, "detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            pulumi.set(__self__, "detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            pulumi.set(__self__, "detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            pulumi.set(__self__, "detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            pulumi.set(__self__, "detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            pulumi.set(__self__, "detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            pulumi.set(__self__, "detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            pulumi.set(__self__, "detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            pulumi.set(__self__, "detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            pulumi.set(__self__, "detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            pulumi.set(__self__, "detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            pulumi.set(__self__, "detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            pulumi.set(__self__, "enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_header_enrichment is not None:
            pulumi.set(__self__, "forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            pulumi.set(__self__, "hosting_provider", hosting_provider)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if public_proxy is not None:
            pulumi.set(__self__, "public_proxy", public_proxy)
        if residential_proxy is not None:
            pulumi.set(__self__, "residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            pulumi.set(__self__, "smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tor_exit_node is not None:
            pulumi.set(__self__, "tor_exit_node", tor_exit_node)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vpn_data_center is not None:
            pulumi.set(__self__, "vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichmentResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            pulumi.set(__self__, "cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            pulumi.set(__self__, "cex_hostname", cex_hostname)
        if cex_path is not None:
            pulumi.set(__self__, "cex_path", cex_path)
        if content_custom_path is not None:
            pulumi.set(__self__, "content_custom_path", content_custom_path)
        if content_hostname is not None:
            pulumi.set(__self__, "content_hostname", content_hostname)
        if content_path is not None:
            pulumi.set(__self__, "content_path", content_path)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if dynamic_custom_path is not None:
            pulumi.set(__self__, "dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            pulumi.set(__self__, "dynamic_method", dynamic_method)
        if dynamic_path is not None:
            pulumi.set(__self__, "dynamic_path", dynamic_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_protocol is not None:
            pulumi.set(__self__, "modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            pulumi.set(__self__, "net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            pulumi.set(__self__, "preserve_query_string", preserve_query_string)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_custom_path is not None:
            pulumi.set(__self__, "redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            pulumi.set(__self__, "redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            pulumi.set(__self__, "redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            pulumi.set(__self__, "redirect_method", redirect_method)
        if redirect_path is not None:
            pulumi.set(__self__, "redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult']:
        return pulumi.get(self, "net_storage_hostname")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostnameResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibilityResult(dict):
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidateResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorG2oheaderResult(dict):
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            pulumi.set(__self__, "data_header", data_header)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if signed_header is not None:
            pulumi.set(__self__, "signed_header", signed_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumberResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if output_option is not None:
            pulumi.set(__self__, "output_option", output_option)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCachingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cache_responses_with_errors is not None:
            pulumi.set(__self__, "cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if operations_json_body_parameter_name is not None:
            pulumi.set(__self__, "operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            pulumi.set(__self__, "operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            pulumi.set(__self__, "post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponseResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetectionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_reconnects is not None:
            pulumi.set(__self__, "maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBindingResult(dict):
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_extracted_serial is not None:
            pulumi.set(__self__, "custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_max_value is not None:
            pulumi.set(__self__, "hash_max_value", hash_max_value)
        if hash_min_value is not None:
            pulumi.set(__self__, "hash_min_value", hash_min_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp2Result(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttp3Result(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurityResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgradeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImOverrideResult(dict):
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        if dpr is not None:
            pulumi.set(__self__, "dpr", dpr)
        if dprvar is not None:
            pulumi.set(__self__, "dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            pulumi.set(__self__, "exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            pulumi.set(__self__, "excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if formatvar is not None:
            pulumi.set(__self__, "formatvar", formatvar)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policyvar is not None:
            pulumi.set(__self__, "policyvar", policyvar)
        if policyvar_i_mvar is not None:
            pulumi.set(__self__, "policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            pulumi.set(__self__, "policyvar_name", policyvar_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if typesel is not None:
            pulumi.set(__self__, "typesel", typesel)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if widthvar is not None:
            pulumi.set(__self__, "widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerResult(dict):
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image_set is not None:
            pulumi.set(__self__, "image_set", image_set)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set_type is not None:
            pulumi.set(__self__, "policy_set_type", policy_set_type)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if video_set is not None:
            pulumi.set(__self__, "video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorIncludeResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult(dict):
    def __init__(__self__, *,
                 allow_large_post_body: Optional[bool] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failure302_uri: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 penalty302_uri: Optional[str] = None,
                 penalty403_net_storage_path: Optional[str] = None,
                 penalty_action: Optional[str] = None,
                 penalty_branded_deny_cache_ttl: Optional[int] = None,
                 penalty_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult'] = None,
                 penalty_threshold: Optional[int] = None,
                 penalty_title: Optional[str] = None,
                 reset_on_valid: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 validate_on_origin_header_name: Optional[str] = None,
                 validate_on_origin_header_value: Optional[str] = None,
                 validate_on_origin_response_code: Optional[int] = None,
                 validate_on_origin_with: Optional[str] = None,
                 validation_title: Optional[str] = None):
        if allow_large_post_body is not None:
            pulumi.set(__self__, "allow_large_post_body", allow_large_post_body)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failure302_uri is not None:
            pulumi.set(__self__, "failure302_uri", failure302_uri)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if penalty302_uri is not None:
            pulumi.set(__self__, "penalty302_uri", penalty302_uri)
        if penalty403_net_storage_path is not None:
            pulumi.set(__self__, "penalty403_net_storage_path", penalty403_net_storage_path)
        if penalty_action is not None:
            pulumi.set(__self__, "penalty_action", penalty_action)
        if penalty_branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "penalty_branded_deny_cache_ttl", penalty_branded_deny_cache_ttl)
        if penalty_net_storage is not None:
            pulumi.set(__self__, "penalty_net_storage", penalty_net_storage)
        if penalty_threshold is not None:
            pulumi.set(__self__, "penalty_threshold", penalty_threshold)
        if penalty_title is not None:
            pulumi.set(__self__, "penalty_title", penalty_title)
        if reset_on_valid is not None:
            pulumi.set(__self__, "reset_on_valid", reset_on_valid)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if validate_on_origin_header_name is not None:
            pulumi.set(__self__, "validate_on_origin_header_name", validate_on_origin_header_name)
        if validate_on_origin_header_value is not None:
            pulumi.set(__self__, "validate_on_origin_header_value", validate_on_origin_header_value)
        if validate_on_origin_response_code is not None:
            pulumi.set(__self__, "validate_on_origin_response_code", validate_on_origin_response_code)
        if validate_on_origin_with is not None:
            pulumi.set(__self__, "validate_on_origin_with", validate_on_origin_with)
        if validation_title is not None:
            pulumi.set(__self__, "validation_title", validation_title)

    @property
    @pulumi.getter(name="allowLargePostBody")
    def allow_large_post_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_large_post_body")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failure302Uri")
    def failure302_uri(self) -> Optional[str]:
        return pulumi.get(self, "failure302_uri")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="penalty302Uri")
    def penalty302_uri(self) -> Optional[str]:
        return pulumi.get(self, "penalty302_uri")

    @property
    @pulumi.getter(name="penalty403NetStoragePath")
    def penalty403_net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "penalty403_net_storage_path")

    @property
    @pulumi.getter(name="penaltyAction")
    def penalty_action(self) -> Optional[str]:
        return pulumi.get(self, "penalty_action")

    @property
    @pulumi.getter(name="penaltyBrandedDenyCacheTtl")
    def penalty_branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "penalty_branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="penaltyNetStorage")
    def penalty_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult']:
        return pulumi.get(self, "penalty_net_storage")

    @property
    @pulumi.getter(name="penaltyThreshold")
    def penalty_threshold(self) -> Optional[int]:
        return pulumi.get(self, "penalty_threshold")

    @property
    @pulumi.getter(name="penaltyTitle")
    def penalty_title(self) -> Optional[str]:
        return pulumi.get(self, "penalty_title")

    @property
    @pulumi.getter(name="resetOnValid")
    def reset_on_valid(self) -> Optional[bool]:
        return pulumi.get(self, "reset_on_valid")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validateOnOriginHeaderName")
    def validate_on_origin_header_name(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_name")

    @property
    @pulumi.getter(name="validateOnOriginHeaderValue")
    def validate_on_origin_header_value(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_header_value")

    @property
    @pulumi.getter(name="validateOnOriginResponseCode")
    def validate_on_origin_response_code(self) -> Optional[int]:
        return pulumi.get(self, "validate_on_origin_response_code")

    @property
    @pulumi.getter(name="validateOnOriginWith")
    def validate_on_origin_with(self) -> Optional[str]:
        return pulumi.get(self, "validate_on_origin_with")

    @property
    @pulumi.getter(name="validationTitle")
    def validation_title(self) -> Optional[str]:
        return pulumi.get(self, "validation_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantResult(dict):
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_link_relations is not None:
            pulumi.set(__self__, "custom_link_relations", custom_link_relations)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch_cacheable is not None:
            pulumi.set(__self__, "prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            pulumi.set(__self__, "prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            pulumi.set(__self__, "prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            pulumi.set(__self__, "prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfigResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationResult(dict):
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if enable_partial_object_caching is not None:
            pulumi.set(__self__, "enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if minimum_size is not None:
            pulumi.set(__self__, "minimum_size", minimum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_versioning is not None:
            pulumi.set(__self__, "use_versioning", use_versioning)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvancedResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fragment_size is not None:
            pulumi.set(__self__, "fragment_size", fragment_size)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if prefetch_after_request is not None:
            pulumi.set(__self__, "prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            pulumi.set(__self__, "prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateResult(dict):
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult']] = None,
                 uuid: Optional[str] = None):
        if bitrate_tables is not None:
            pulumi.set(__self__, "bitrate_tables", bitrate_tables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if threshold_tables is not None:
            pulumi.set(__self__, "threshold_tables", threshold_tables)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult']]:
        return pulumi.get(self, "bitrate_tables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult']]:
        return pulumi.get(self, "threshold_tables")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTableResult(dict):
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        if bitrate_unit is not None:
            pulumi.set(__self__, "bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            pulumi.set(__self__, "bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTableResult(dict):
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        if threshold_unit is not None:
            pulumi.set(__self__, "threshold_unit", threshold_unit)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorLogCustomResult(dict):
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMPulseResult(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if loader_version is not None:
            pulumi.set(__self__, "loader_version", loader_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if require_pci is not None:
            pulumi.set(__self__, "require_pci", require_pci)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_optional is not None:
            pulumi.set(__self__, "title_optional", title_optional)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hls_enable_debug_headers is not None:
            pulumi.set(__self__, "hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            pulumi.set(__self__, "hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            pulumi.set(__self__, "hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            pulumi.set(__self__, "hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            pulumi.set(__self__, "hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            pulumi.set(__self__, "hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            pulumi.set(__self__, "hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            pulumi.set(__self__, "hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            pulumi.set(__self__, "hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            pulumi.set(__self__, "hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            pulumi.set(__self__, "hls_title", hls_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManifestReroutingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if partner is not None:
            pulumi.set(__self__, "partner", partner)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPushResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serverpushlists is not None:
            pulumi.set(__self__, "serverpushlists", serverpushlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaClientResult(dict):
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if beacon_id is not None:
            pulumi.set(__self__, "beacon_id", beacon_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            pulumi.set(__self__, "use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailoverResult(dict):
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cache_error_response is not None:
            pulumi.set(__self__, "cache_error_response", cache_error_response)
        if cache_window is not None:
            pulumi.set(__self__, "cache_window", cache_window)
        if client_response_code is not None:
            pulumi.set(__self__, "client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            pulumi.set(__self__, "detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            pulumi.set(__self__, "detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            pulumi.set(__self__, "detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            pulumi.set(__self__, "detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            pulumi.set(__self__, "detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            pulumi.set(__self__, "detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_unavailable_alternate_host is not None:
            pulumi.set(__self__, "object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            pulumi.set(__self__, "object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            pulumi.set(__self__, "object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            pulumi.set(__self__, "object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            pulumi.set(__self__, "object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            pulumi.set(__self__, "object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            pulumi.set(__self__, "object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            pulumi.set(__self__, "object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            pulumi.set(__self__, "object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            pulumi.set(__self__, "object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            pulumi.set(__self__, "object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            pulumi.set(__self__, "origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            pulumi.set(__self__, "origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            pulumi.set(__self__, "origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            pulumi.set(__self__, "origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            pulumi.set(__self__, "origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            pulumi.set(__self__, "origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            pulumi.set(__self__, "origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            pulumi.set(__self__, "origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            pulumi.set(__self__, "origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            pulumi.set(__self__, "origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            pulumi.set(__self__, "origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            pulumi.set(__self__, "origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            pulumi.set(__self__, "origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            pulumi.set(__self__, "origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            pulumi.set(__self__, "origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            pulumi.set(__self__, "origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            pulumi.set(__self__, "other_options", other_options)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCachingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformanceResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if secondary_multipath_to_origin is not None:
            pulumi.set(__self__, "secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeaderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modification_option is not None:
            pulumi.set(__self__, "modification_option", modification_option)
        if rename_header_to is not None:
            pulumi.set(__self__, "rename_header_to", rename_header_to)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginResult(dict):
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult']] = None,
                 custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        if cache_key_hostname is not None:
            pulumi.set(__self__, "cache_key_hostname", cache_key_hostname)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if custom_certificate_authorities is not None:
            pulumi.set(__self__, "custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            pulumi.set(__self__, "custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            pulumi.set(__self__, "custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            pulumi.set(__self__, "custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            pulumi.set(__self__, "enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            pulumi.set(__self__, "forward_host_header", forward_host_header)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslorigin is not None:
            pulumi.set(__self__, "mslorigin", mslorigin)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if origin_certificate is not None:
            pulumi.set(__self__, "origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            pulumi.set(__self__, "origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_sni is not None:
            pulumi.set(__self__, "origin_sni", origin_sni)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if second_hostname is not None:
            pulumi.set(__self__, "second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            pulumi.set(__self__, "second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            pulumi.set(__self__, "standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            pulumi.set(__self__, "true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            pulumi.set(__self__, "use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_mode is not None:
            pulumi.set(__self__, "verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult']]:
        return pulumi.get(self, "custom_certificates")

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsResult(dict):
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if access_key_encrypted_storage is not None:
            pulumi.set(__self__, "access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            pulumi.set(__self__, "adc_title", adc_title)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if authentication_method_title is not None:
            pulumi.set(__self__, "authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            pulumi.set(__self__, "aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_host is not None:
            pulumi.set(__self__, "aws_host", aws_host)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            pulumi.set(__self__, "aws_service", aws_service)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            pulumi.set(__self__, "direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if gcs_access_key_version_guid is not None:
            pulumi.set(__self__, "gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            pulumi.set(__self__, "gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            pulumi.set(__self__, "gcs_hmac_key_secret", gcs_hmac_key_secret)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslkey is not None:
            pulumi.set(__self__, "mslkey", mslkey)
        if mslname is not None:
            pulumi.set(__self__, "mslname", mslname)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsdResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origintype is not None:
            pulumi.set(__self__, "origintype", origintype)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        if can_be_ca is not None:
            pulumi.set(__self__, "can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            pulumi.set(__self__, "can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            pulumi.set(__self__, "issuer_rdns", issuer_rdns)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if public_key_algorithm is not None:
            pulumi.set(__self__, "public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            pulumi.set(__self__, "public_key_format", public_key_format)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            pulumi.set(__self__, "sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            pulumi.set(__self__, "subject_cn", subject_cn)
        if subject_rdns is not None:
            pulumi.set(__self__, "subject_rdns", subject_rdns)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        if can_be_ca is not None:
            pulumi.set(__self__, "can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            pulumi.set(__self__, "can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            pulumi.set(__self__, "issuer_rdns", issuer_rdns)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if public_key_algorithm is not None:
            pulumi.set(__self__, "public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            pulumi.set(__self__, "public_key_format", public_key_format)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            pulumi.set(__self__, "sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            pulumi.set(__self__, "subject_cn", subject_cn)
        if subject_rdns is not None:
            pulumi.set(__self__, "subject_rdns", subject_rdns)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateSubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethodResult(dict):
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_status_code is not None:
            pulumi.set(__self__, "custom_status_code", custom_status_code)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if recovery_method is not None:
            pulumi.set(__self__, "recovery_method", recovery_method)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicyResult(dict):
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        if binary_equivalent_content is not None:
            pulumi.set(__self__, "binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            pulumi.set(__self__, "enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            pulumi.set(__self__, "ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            pulumi.set(__self__, "ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if monitor_origin_responsiveness is not None:
            pulumi.set(__self__, "monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            pulumi.set(__self__, "monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            pulumi.set(__self__, "monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            pulumi.set(__self__, "monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            pulumi.set(__self__, "monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            pulumi.set(__self__, "monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            pulumi.set(__self__, "monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            pulumi.set(__self__, "origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            pulumi.set(__self__, "origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            pulumi.set(__self__, "status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            pulumi.set(__self__, "status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            pulumi.set(__self__, "status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tuning_parameters is not None:
            pulumi.set(__self__, "tuning_parameters", tuning_parameters)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAclResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_duration is not None:
            pulumi.set(__self__, "failover_duration", failover_duration)
        if failover_enabled is not None:
            pulumi.set(__self__, "failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            pulumi.set(__self__, "failover_response_codes", failover_response_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_expiration_date is not None:
            pulumi.set(__self__, "population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPreconnectResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preconnectlists is not None:
            pulumi.set(__self__, "preconnectlists", preconnectlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDeliveryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetchingResult(dict):
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if accuracy_target is not None:
            pulumi.set(__self__, "accuracy_target", accuracy_target)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchableResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCacheResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefreshval is not None:
            pulumi.set(__self__, "prefreshval", prefreshval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQualityResult(dict):
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if audience_settings is not None:
            pulumi.set(__self__, "audience_settings", audience_settings)
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_settings is not None:
            pulumi.set(__self__, "content_settings", content_settings)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if delivery_format is not None:
            pulumi.set(__self__, "delivery_format", delivery_format)
        if delivery_type is not None:
            pulumi.set(__self__, "delivery_type", delivery_type)
        if download_type is not None:
            pulumi.set(__self__, "download_type", download_type)
        if end_user_location is not None:
            pulumi.set(__self__, "end_user_location", end_user_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_concurrent_users is not None:
            pulumi.set(__self__, "maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_for is not None:
            pulumi.set(__self__, "optimize_for", optimize_for)
        if origin_settings is not None:
            pulumi.set(__self__, "origin_settings", origin_settings)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorQuicBetaResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if quic_offer_percentage is not None:
            pulumi.set(__self__, "quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeekResult(dict):
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRapidResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReportingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if beacon_sampling_percentage is not None:
            pulumi.set(__self__, "beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectResult(dict):
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            pulumi.set(__self__, "destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            pulumi.set(__self__, "destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            pulumi.set(__self__, "destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if destination_path_other is not None:
            pulumi.set(__self__, "destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            pulumi.set(__self__, "destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            pulumi.set(__self__, "destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            pulumi.set(__self__, "destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            pulumi.set(__self__, "destination_protocol", destination_protocol)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mobile_default_choice is not None:
            pulumi.set(__self__, "mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplusResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRefererCheckingResult(dict):
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_children is not None:
            pulumi.set(__self__, "allow_children", allow_children)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameterResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVaryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReportResult(dict):
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_accept_language is not None:
            pulumi.set(__self__, "log_accept_language", log_accept_language)
        if log_cookies is not None:
            pulumi.set(__self__, "log_cookies", log_cookies)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            pulumi.set(__self__, "log_edge_ip", log_edge_ip)
        if log_host is not None:
            pulumi.set(__self__, "log_host", log_host)
        if log_referer is not None:
            pulumi.set(__self__, "log_referer", log_referer)
        if log_user_agent is not None:
            pulumi.set(__self__, "log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            pulumi.set(__self__, "log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlResult(dict):
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult'] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if branded403_file is not None:
            pulumi.set(__self__, "branded403_file", branded403_file)
        if branded403_status_code is not None:
            pulumi.set(__self__, "branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            pulumi.set(__self__, "branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enable_branded403 is not None:
            pulumi.set(__self__, "enable_branded403", enable_branded403)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarkerResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibilityResult(dict):
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_all_features is not None:
            pulumi.set(__self__, "enable_all_features", enable_all_features)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override206 is not None:
            pulumi.set(__self__, "override206", override206)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if same_site is not None:
            pulumi.set(__self__, "same_site", same_site)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCachingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatusResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrlResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if keep_query_string is not None:
            pulumi.set(__self__, "keep_query_string", keep_query_string)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if match_regex is not None:
            pulumi.set(__self__, "match_regex", match_regex)
        if target_path is not None:
            pulumi.set(__self__, "target_path", target_path)
        if target_path_prepend is not None:
            pulumi.set(__self__, "target_path_prepend", target_path_prepend)
        if target_regex is not None:
            pulumi.set(__self__, "target_regex", target_regex)
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorRumCustomResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if rum_group_name is not None:
            pulumi.set(__self__, "rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            pulumi.set(__self__, "rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitionsResult(dict):
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if application_action is not None:
            pulumi.set(__self__, "application_action", application_action)
        if application_cname_enabled is not None:
            pulumi.set(__self__, "application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            pulumi.set(__self__, "application_cname_level", application_cname_level)
        if application_cookie is not None:
            pulumi.set(__self__, "application_cookie", application_cookie)
        if application_query_string is not None:
            pulumi.set(__self__, "application_query_string", application_query_string)
        if application_regex is not None:
            pulumi.set(__self__, "application_regex", application_regex)
        if application_replace is not None:
            pulumi.set(__self__, "application_replace", application_replace)
        if application_title is not None:
            pulumi.set(__self__, "application_title", application_title)
        if customer_action is not None:
            pulumi.set(__self__, "customer_action", customer_action)
        if customer_cname_enabled is not None:
            pulumi.set(__self__, "customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            pulumi.set(__self__, "customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            pulumi.set(__self__, "customer_cookie", customer_cookie)
        if customer_query_string is not None:
            pulumi.set(__self__, "customer_query_string", customer_query_string)
        if customer_regex is not None:
            pulumi.set(__self__, "customer_regex", customer_regex)
        if customer_replace is not None:
            pulumi.set(__self__, "customer_replace", customer_replace)
        if customer_title is not None:
            pulumi.set(__self__, "customer_title", customer_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if users_action is not None:
            pulumi.set(__self__, "users_action", users_action)
        if users_cname_enabled is not None:
            pulumi.set(__self__, "users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            pulumi.set(__self__, "users_cname_level", users_cname_level)
        if users_cookie is not None:
            pulumi.set(__self__, "users_cookie", users_cookie)
        if users_query_string is not None:
            pulumi.set(__self__, "users_query_string", users_query_string)
        if users_regex is not None:
            pulumi.set(__self__, "users_regex", users_regex)
        if users_replace is not None:
            pulumi.set(__self__, "users_replace", users_replace)
        if users_title is not None:
            pulumi.set(__self__, "users_title", users_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClientResult(dict):
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_override_origin_cache_key is not None:
            pulumi.set(__self__, "allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_host_header is not None:
            pulumi.set(__self__, "origin_host_header", origin_host_header)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if sf3c_origin_host is not None:
            pulumi.set(__self__, "sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            pulumi.set(__self__, "sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeaderResult(dict):
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if host_header_source is not None:
            pulumi.set(__self__, "host_header_source", host_header_source)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if refresh_method is not None:
            pulumi.set(__self__, "refresh_method", refresh_method)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagementResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serviceworker is not None:
            pulumi.set(__self__, "serviceworker", serviceworker)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtectionResult(dict):
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if dash_media_encryption is not None:
            pulumi.set(__self__, "dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            pulumi.set(__self__, "data_payload", data_payload)
        if enable_token_in_uri is not None:
            pulumi.set(__self__, "enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if field_carry_over is not None:
            pulumi.set(__self__, "field_carry_over", field_carry_over)
        if header_for_salts is not None:
            pulumi.set(__self__, "header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            pulumi.set(__self__, "hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            pulumi.set(__self__, "hls_media_encryption", hls_media_encryption)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_encryption_title is not None:
            pulumi.set(__self__, "media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            pulumi.set(__self__, "revoked_list_id", revoked_list_id)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            pulumi.set(__self__, "token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            pulumi.set(__self__, "token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            pulumi.set(__self__, "token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            pulumi.set(__self__, "token_revocation_title", token_revocation_title)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimizationResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if dvr_type is not None:
            pulumi.set(__self__, "dvr_type", dvr_type)
        if dvr_window is not None:
            pulumi.set(__self__, "dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            pulumi.set(__self__, "enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if live_type is not None:
            pulumi.set(__self__, "live_type", live_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if show_advanced is not None:
            pulumi.set(__self__, "show_advanced", show_advanced)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSetVariableResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            pulumi.set(__self__, "certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if end_index is not None:
            pulumi.set(__self__, "end_index", end_index)
        if except_chars is not None:
            pulumi.set(__self__, "except_chars", except_chars)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if force_chars is not None:
            pulumi.set(__self__, "force_chars", force_chars)
        if format_string is not None:
            pulumi.set(__self__, "format_string", format_string)
        if generator is not None:
            pulumi.set(__self__, "generator", generator)
        if global_substitution is not None:
            pulumi.set(__self__, "global_substitution", global_substitution)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            pulumi.set(__self__, "hmac_key", hmac_key)
        if initialization_vector is not None:
            pulumi.set(__self__, "initialization_vector", initialization_vector)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_prefix is not None:
            pulumi.set(__self__, "ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_random_number is not None:
            pulumi.set(__self__, "max_random_number", max_random_number)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if min_random_number is not None:
            pulumi.set(__self__, "min_random_number", min_random_number)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if number_of_bytes is not None:
            pulumi.set(__self__, "number_of_bytes", number_of_bytes)
        if operand_one is not None:
            pulumi.set(__self__, "operand_one", operand_one)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if path_component_offset is not None:
            pulumi.set(__self__, "path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            pulumi.set(__self__, "prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)
        if set_cookie_name is not None:
            pulumi.set(__self__, "set_cookie_name", set_cookie_name)
        if start_index is not None:
            pulumi.set(__self__, "start_index", start_index)
        if sub_string is not None:
            pulumi.set(__self__, "sub_string", sub_string)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value_source is not None:
            pulumi.set(__self__, "value_source", value_source)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_value is not None:
            pulumi.set(__self__, "variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorShutrResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 status: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCodeResult(dict):
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nossmap is not None:
            pulumi.set(__self__, "nossmap", nossmap)
        if ssmap is not None:
            pulumi.set(__self__, "ssmap", ssmap)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult']:
        return pulumi.get(self, "ssmap")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmapResult(dict):
    def __init__(__self__, *,
                 china_cdn_map: Optional[str] = None,
                 has_mixed_hosts: Optional[bool] = None,
                 name: Optional[str] = None,
                 src: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        if china_cdn_map is not None:
            pulumi.set(__self__, "china_cdn_map", china_cdn_map)
        if has_mixed_hosts is not None:
            pulumi.set(__self__, "has_mixed_hosts", has_mixed_hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if srmap is not None:
            pulumi.set(__self__, "srmap", srmap)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="chinaCdnMap")
    def china_cdn_map(self) -> Optional[str]:
        return pulumi.get(self, "china_cdn_map")

    @property
    @pulumi.getter(name="hasMixedHosts")
    def has_mixed_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "has_mixed_hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationResult(dict):
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            pulumi.set(__self__, "allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            pulumi.set(__self__, "cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            pulumi.set(__self__, "cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_certificate_sni_only is not None:
            pulumi.set(__self__, "is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            pulumi.set(__self__, "is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if migration_duration is not None:
            pulumi.set(__self__, "migration_duration", migration_duration)
        if migration_from is not None:
            pulumi.set(__self__, "migration_from", migration_from)
        if migration_start_time is not None:
            pulumi.set(__self__, "migration_start_time", migration_start_time)
        if td_location is not None:
            pulumi.set(__self__, "td_location", td_location)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverrideResult(dict):
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if valid_mode is not None:
            pulumi.set(__self__, "valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomerResult(dict):
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if content_compressor is not None:
            pulumi.set(__self__, "content_compressor", content_compressor)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if large_file_delivery is not None:
            pulumi.set(__self__, "large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            pulumi.set(__self__, "live_video_delivery", live_video_delivery)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_path is not None:
            pulumi.set(__self__, "modify_path", modify_path)
        if on_demand_video_delivery is not None:
            pulumi.set(__self__, "on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if partner_domain_suffix is not None:
            pulumi.set(__self__, "partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if refresh_content is not None:
            pulumi.set(__self__, "refresh_content", refresh_content)
        if site_failover is not None:
            pulumi.set(__self__, "site_failover", site_failover)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorSureRouteResult(dict):
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            pulumi.set(__self__, "custom_map", custom_map)
        if custom_stat_key is not None:
            pulumi.set(__self__, "custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            pulumi.set(__self__, "enable_custom_key", enable_custom_key)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_ssl_forward is not None:
            pulumi.set(__self__, "force_ssl_forward", force_ssl_forward)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if race_stat_ttl is not None:
            pulumi.set(__self__, "race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            pulumi.set(__self__, "sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if test_object_url is not None:
            pulumi.set(__self__, "test_object_url", test_object_url)
        if to_host is not None:
            pulumi.set(__self__, "to_host", to_host)
        if to_host_status is not None:
            pulumi.set(__self__, "to_host_status", to_host_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimizationResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeafResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ibm_customer_id is not None:
            pulumi.set(__self__, "ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            pulumi.set(__self__, "limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvancedResult(dict):
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allowall is not None:
            pulumi.set(__self__, "allowall", allowall)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomizationResult(dict):
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudwrapper_map_migration_title is not None:
            pulumi.set(__self__, "cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            pulumi.set(__self__, "custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            pulumi.set(__self__, "custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if map_migration_enabled is not None:
            pulumi.set(__self__, "map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            pulumi.set(__self__, "migration_end_date", migration_end_date)
        if migration_start_date is not None:
            pulumi.set(__self__, "migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            pulumi.set(__self__, "migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            pulumi.set(__self__, "serial_end", serial_end)
        if serial_start is not None:
            pulumi.set(__self__, "serial_start", serial_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_title is not None:
            pulumi.set(__self__, "tier1_title", tier1_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorUidConfigurationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if legal_text is not None:
            pulumi.set(__self__, "legal_text", legal_text)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTagResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenResult(dict):
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcpResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if custom_header is not None:
            pulumi.set(__self__, "custom_header", custom_header)
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            pulumi.set(__self__, "extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            pulumi.set(__self__, "extract_client_id", extract_client_id)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if extract_user_name is not None:
            pulumi.set(__self__, "extract_user_name", extract_user_name)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if primary_location is not None:
            pulumi.set(__self__, "primary_location", primary_location)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if escape_hmac_inputs is not None:
            pulumi.set(__self__, "escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if ignore_query_string is not None:
            pulumi.set(__self__, "ignore_query_string", ignore_query_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkersResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationResult(dict):
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        if allowed_user_cookie_advanced is not None:
            pulumi.set(__self__, "allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            pulumi.set(__self__, "allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            pulumi.set(__self__, "allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            pulumi.set(__self__, "allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            pulumi.set(__self__, "allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            pulumi.set(__self__, "allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            pulumi.set(__self__, "allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_cache_ttl is not None:
            pulumi.set(__self__, "waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            pulumi.set(__self__, "waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            pulumi.set(__self__, "waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            pulumi.set(__self__, "waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            pulumi.set(__self__, "waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            pulumi.set(__self__, "waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            pulumi.set(__self__, "waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            pulumi.set(__self__, "waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            pulumi.set(__self__, "waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            pulumi.set(__self__, "waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            pulumi.set(__self__, "waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            pulumi.set(__self__, "waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult']:
        return pulumi.get(self, "waiting_room_cp_code")

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult']:
        return pulumi.get(self, "waiting_room_net_storage")

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandaloneResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWatermarkingResult(dict):
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        if ab_variant_location is not None:
            pulumi.set(__self__, "ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            pulumi.set(__self__, "decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            pulumi.set(__self__, "decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            pulumi.set(__self__, "decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            pulumi.set(__self__, "decryption_password_id2", decryption_password_id2)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if miscellaneous_settings_title is not None:
            pulumi.set(__self__, "miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            pulumi.set(__self__, "pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            pulumi.set(__self__, "pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            pulumi.set(__self__, "signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_signing_title is not None:
            pulumi.set(__self__, "token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            pulumi.set(__self__, "use_original_as_a", use_original_as_a)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_key_id1 is not None:
            pulumi.set(__self__, "verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            pulumi.set(__self__, "verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            pulumi.set(__self__, "verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            pulumi.set(__self__, "verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallResult(dict):
    def __init__(__self__, *,
                 firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if firewall_configuration is not None:
            pulumi.set(__self__, "firewall_configuration", firewall_configuration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult']:
        return pulumi.get(self, "firewall_configuration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfigurationResult(dict):
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if production_version is not None:
            pulumi.set(__self__, "production_version", production_version)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if staging_version is not None:
            pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebSocketsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105BehaviorWebdavResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionResult(dict):
    def __init__(__self__, *,
                 advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult'] = None,
                 bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucketResult'] = None,
                 cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult'] = None,
                 china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult'] = None,
                 client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult'] = None,
                 client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult'] = None,
                 client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult'] = None,
                 cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult'] = None,
                 content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult'] = None,
                 content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult'] = None,
                 device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult'] = None,
                 ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult'] = None,
                 ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult'] = None,
                 ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult'] = None,
                 ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult'] = None,
                 edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult'] = None,
                 file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult'] = None,
                 filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult'] = None,
                 hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult'] = None,
                 match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult'] = None,
                 match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult'] = None,
                 match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult'] = None,
                 match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult'] = None,
                 metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult'] = None,
                 origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult'] = None,
                 path: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionPathResult'] = None,
                 query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult'] = None,
                 random: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandomResult'] = None,
                 recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult'] = None,
                 regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult'] = None,
                 request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult'] = None,
                 request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult'] = None,
                 request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult'] = None,
                 request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult'] = None,
                 request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult'] = None,
                 response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult'] = None,
                 time: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTimeResult'] = None,
                 token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult'] = None,
                 user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult'] = None,
                 user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult'] = None,
                 user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult'] = None,
                 variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult'] = None,
                 virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult'] = None,
                 visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult'] = None):
        if advanced_im_match is not None:
            pulumi.set(__self__, "advanced_im_match", advanced_im_match)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cacheability is not None:
            pulumi.set(__self__, "cacheability", cacheability)
        if china_cdn_region is not None:
            pulumi.set(__self__, "china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_version is not None:
            pulumi.set(__self__, "client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            pulumi.set(__self__, "cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            pulumi.set(__self__, "content_delivery_network", content_delivery_network)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if device_characteristic is not None:
            pulumi.set(__self__, "device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            pulumi.set(__self__, "ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            pulumi.set(__self__, "ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            pulumi.set(__self__, "ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            pulumi.set(__self__, "ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            pulumi.set(__self__, "edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if match_advanced is not None:
            pulumi.set(__self__, "match_advanced", match_advanced)
        if match_cp_code is not None:
            pulumi.set(__self__, "match_cp_code", match_cp_code)
        if match_response_code is not None:
            pulumi.set(__self__, "match_response_code", match_response_code)
        if match_variable is not None:
            pulumi.set(__self__, "match_variable", match_variable)
        if metadata_stage is not None:
            pulumi.set(__self__, "metadata_stage", metadata_stage)
        if origin_timeout is not None:
            pulumi.set(__self__, "origin_timeout", origin_timeout)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query_string_parameter is not None:
            pulumi.set(__self__, "query_string_parameter", query_string_parameter)
        if random is not None:
            pulumi.set(__self__, "random", random)
        if recovery_config is not None:
            pulumi.set(__self__, "recovery_config", recovery_config)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if request_cookie is not None:
            pulumi.set(__self__, "request_cookie", request_cookie)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if user_location is not None:
            pulumi.set(__self__, "user_location", user_location)
        if user_network is not None:
            pulumi.set(__self__, "user_network", user_network)
        if variable_error is not None:
            pulumi.set(__self__, "variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            pulumi.set(__self__, "virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            pulumi.set(__self__, "visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult']:
        return pulumi.get(self, "advanced_im_match")

    @property
    @pulumi.getter
    def bucket(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucketResult']:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult']:
        return pulumi.get(self, "cacheability")

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult']:
        return pulumi.get(self, "china_cdn_region")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult']:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult']:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult']:
        return pulumi.get(self, "client_ip_version")

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult']:
        return pulumi.get(self, "cloudlets_origin")

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult']:
        return pulumi.get(self, "content_delivery_network")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult']:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult']:
        return pulumi.get(self, "device_characteristic")

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult']:
        return pulumi.get(self, "ecmd_auth_groups")

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult']:
        return pulumi.get(self, "ecmd_username")

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult']:
        return pulumi.get(self, "edge_workers_failure")

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult']:
        return pulumi.get(self, "file_extension")

    @property
    @pulumi.getter
    def filename(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult']:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult']:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult']:
        return pulumi.get(self, "match_advanced")

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult']:
        return pulumi.get(self, "match_cp_code")

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult']:
        return pulumi.get(self, "match_response_code")

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult']:
        return pulumi.get(self, "match_variable")

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult']:
        return pulumi.get(self, "metadata_stage")

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult']:
        return pulumi.get(self, "origin_timeout")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionPathResult']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult']:
        return pulumi.get(self, "query_string_parameter")

    @property
    @pulumi.getter
    def random(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandomResult']:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult']:
        return pulumi.get(self, "recovery_config")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult']:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult']:
        return pulumi.get(self, "request_cookie")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult']:
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult']:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult']:
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult']:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult']:
        return pulumi.get(self, "response_header")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTimeResult']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult']:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult']:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult']:
        return pulumi.get(self, "user_location")

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult']:
        return pulumi.get(self, "user_network")

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult']:
        return pulumi.get(self, "variable_error")

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult']:
        return pulumi.get(self, "visitor_prioritization_request")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatchResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionBucketResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionCacheabilityResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientCertificateResult(dict):
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if is_certificate_present is not None:
            pulumi.set(__self__, "is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            pulumi.set(__self__, "is_certificate_valid", is_certificate_valid)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_headers is not None:
            pulumi.set(__self__, "use_headers", use_headers)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            pulumi.set(__self__, "use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetworkResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionContentTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristicResult(dict):
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if characteristic is not None:
            pulumi.set(__self__, "characteristic", characteristic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            pulumi.set(__self__, "numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if string_match_operator is not None:
            pulumi.set(__self__, "string_match_operator", string_match_operator)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version_match_operator is not None:
            pulumi.set(__self__, "version_match_operator", version_match_operator)
        if version_value is not None:
            pulumi.set(__self__, "version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroupsResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthSchemeResult(dict):
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if auth_scheme is not None:
            pulumi.set(__self__, "auth_scheme", auth_scheme)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticatedResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsernameResult(dict):
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailureResult(dict):
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if exec_status is not None:
            pulumi.set(__self__, "exec_status", exec_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionFileExtensionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionFilenameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionHostnameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvancedResult(dict):
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if close_xml is not None:
            pulumi.set(__self__, "close_xml", close_xml)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if open_xml is not None:
            pulumi.set(__self__, "open_xml", open_xml)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMatchVariableResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_expression is not None:
            pulumi.set(__self__, "variable_expression", variable_expression)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_values is not None:
            pulumi.set(__self__, "variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionMetadataStageResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionPathResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if normalize is not None:
            pulumi.set(__self__, "normalize", normalize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameterResult(dict):
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if escape_value is not None:
            pulumi.set(__self__, "escape_value", escape_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRandomResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfigResult(dict):
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRegularExpressionResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestMethodResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocolResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionRequestTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionResponseHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionTimeResult(dict):
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if apply_daylight_savings_time is not None:
            pulumi.set(__self__, "apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            pulumi.set(__self__, "begin_date", begin_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if lasting_date is not None:
            pulumi.set(__self__, "lasting_date", lasting_date)
        if lasting_duration is not None:
            pulumi.set(__self__, "lasting_duration", lasting_duration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if repeat_begin_date is not None:
            pulumi.set(__self__, "repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            pulumi.set(__self__, "repeat_duration", repeat_duration)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if status_lists is not None:
            pulumi.set(__self__, "status_lists", status_lists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserAgentResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserLocationResult(dict):
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if continent_values is not None:
            pulumi.set(__self__, "continent_values", continent_values)
        if country_values is not None:
            pulumi.set(__self__, "country_values", country_values)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if region_values is not None:
            pulumi.set(__self__, "region_values", region_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionUserNetworkResult(dict):
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if bandwidth_values is not None:
            pulumi.set(__self__, "bandwidth_values", bandwidth_values)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network_type_values is not None:
            pulumi.set(__self__, "network_type_values", network_type_values)
        if network_values is not None:
            pulumi.set(__self__, "network_values", network_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVariableErrorResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_names is not None:
            pulumi.set(__self__, "variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105CustomOverrideResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_id is not None:
            pulumi.set(__self__, "override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230105VariableResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530Result(dict):
    def __init__(__self__, *,
                 name: str,
                 advanced_override: Optional[str] = None,
                 behaviors: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResult']] = None,
                 childrens: Optional[Sequence[str]] = None,
                 comments: Optional[str] = None,
                 criteria_locked: Optional[bool] = None,
                 criteria_must_satisfy: Optional[str] = None,
                 criterions: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResult']] = None,
                 custom_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CustomOverrideResult'] = None,
                 is_secure: Optional[bool] = None,
                 template_link: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530VariableResult']] = None):
        pulumi.set(__self__, "name", name)
        if advanced_override is not None:
            pulumi.set(__self__, "advanced_override", advanced_override)
        if behaviors is not None:
            pulumi.set(__self__, "behaviors", behaviors)
        if childrens is not None:
            pulumi.set(__self__, "childrens", childrens)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if criteria_locked is not None:
            pulumi.set(__self__, "criteria_locked", criteria_locked)
        if criteria_must_satisfy is not None:
            pulumi.set(__self__, "criteria_must_satisfy", criteria_must_satisfy)
        if criterions is not None:
            pulumi.set(__self__, "criterions", criterions)
        if custom_override is not None:
            pulumi.set(__self__, "custom_override", custom_override)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if template_link is not None:
            pulumi.set(__self__, "template_link", template_link)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="advancedOverride")
    def advanced_override(self) -> Optional[str]:
        return pulumi.get(self, "advanced_override")

    @property
    @pulumi.getter
    def behaviors(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResult']]:
        return pulumi.get(self, "behaviors")

    @property
    @pulumi.getter
    def childrens(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "childrens")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="criteriaLocked")
    def criteria_locked(self) -> Optional[bool]:
        return pulumi.get(self, "criteria_locked")

    @property
    @pulumi.getter(name="criteriaMustSatisfy")
    def criteria_must_satisfy(self) -> Optional[str]:
        return pulumi.get(self, "criteria_must_satisfy")

    @property
    @pulumi.getter
    def criterions(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResult']]:
        return pulumi.get(self, "criterions")

    @property
    @pulumi.getter(name="customOverride")
    def custom_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CustomOverrideResult']:
        return pulumi.get(self, "custom_override")

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[bool]:
        return pulumi.get(self, "is_secure")

    @property
    @pulumi.getter(name="templateLink")
    def template_link(self) -> Optional[str]:
        return pulumi.get(self, "template_link")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530VariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResult(dict):
    def __init__(__self__, *,
                 ad_scaler_circuit_breaker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult'] = None,
                 adaptive_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult'] = None,
                 adaptive_image_compression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult'] = None,
                 advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult'] = None,
                 aggregated_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult'] = None,
                 akamaizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult'] = None,
                 akamaizer_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult'] = None,
                 all_http_in_cache_hierarchy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult'] = None,
                 allow_cloudlets_origins: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult'] = None,
                 allow_delete: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult'] = None,
                 allow_https_cache_key_sharing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult'] = None,
                 allow_https_downgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult'] = None,
                 allow_options: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult'] = None,
                 allow_patch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult'] = None,
                 allow_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult'] = None,
                 allow_put: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult'] = None,
                 allow_transfer_encoding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult'] = None,
                 alt_svc_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult'] = None,
                 api_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult'] = None,
                 application_load_balancer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult'] = None,
                 audience_segmentation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult'] = None,
                 auto_domain_validation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult'] = None,
                 base_directory: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult'] = None,
                 boss_beaconing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult'] = None,
                 breadcrumbs: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult'] = None,
                 break_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult'] = None,
                 brotli: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult'] = None,
                 cache_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult'] = None,
                 cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult'] = None,
                 cache_key_ignore_case: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult'] = None,
                 cache_key_query_params: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult'] = None,
                 cache_key_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult'] = None,
                 cache_post: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult'] = None,
                 cache_redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult'] = None,
                 cache_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult'] = None,
                 cache_tag_visible: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult'] = None,
                 caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult'] = None,
                 central_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult'] = None,
                 chase_redirects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult'] = None,
                 client_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult'] = None,
                 cloud_interconnects: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult'] = None,
                 cloud_wrapper: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult'] = None,
                 cloud_wrapper_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult'] = None,
                 common_media_client_data: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult'] = None,
                 conditional_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult'] = None,
                 construct_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult'] = None,
                 content_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult'] = None,
                 content_characteristics_amd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult'] = None,
                 content_characteristics_dd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult'] = None,
                 content_characteristics_wsd_large_file: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult'] = None,
                 content_characteristics_wsd_live: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult'] = None,
                 content_characteristics_wsd_vod: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult'] = None,
                 content_pre_position: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult'] = None,
                 content_targeting_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult'] = None,
                 cors_support: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult'] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult'] = None,
                 custom_behavior: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult'] = None,
                 datastream: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult'] = None,
                 dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult'] = None,
                 dcp_auth_hmac_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult'] = None,
                 dcp_auth_regex_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult'] = None,
                 dcp_auth_substring_transformation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult'] = None,
                 dcp_auth_variable_extractor: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult'] = None,
                 dcp_default_authz_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult'] = None,
                 dcp_dev_relations: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult'] = None,
                 dcp_real_time_auth: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult'] = None,
                 delivery_receipt: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult'] = None,
                 deny_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult'] = None,
                 deny_direct_failover_access: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult'] = None,
                 device_characteristic_cache_id: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult'] = None,
                 device_characteristic_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult'] = None,
                 dns_async_refresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult'] = None,
                 dns_prefresh: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult'] = None,
                 downgrade_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult'] = None,
                 download_complete_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult'] = None,
                 download_notification: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult'] = None,
                 downstream_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult'] = None,
                 dynamic_throughtput_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult'] = None,
                 dynamic_throughtput_optimization_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult'] = None,
                 dynamic_web_content: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult'] = None,
                 ecms_bulk_upload: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult'] = None,
                 ecms_database: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult'] = None,
                 ecms_dataset: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult'] = None,
                 ecms_object_key: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult'] = None,
                 edge_connect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult'] = None,
                 edge_load_balancing_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult'] = None,
                 edge_load_balancing_data_center: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult'] = None,
                 edge_load_balancing_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult'] = None,
                 edge_origin_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult'] = None,
                 edge_redirector: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult'] = None,
                 edge_scape: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult'] = None,
                 edge_side_includes: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult'] = None,
                 edge_worker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult'] = None,
                 enhanced_akamai_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult'] = None,
                 enhanced_proxy_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult'] = None,
                 epd_forward_header_enrichment: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult'] = None,
                 fail_action: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult'] = None,
                 failover_bot_manager_feature_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult'] = None,
                 fast_invalidate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult'] = None,
                 first_party_marketing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult'] = None,
                 first_party_marketing_plus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult'] = None,
                 forward_rewrite: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult'] = None,
                 g2oheader: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult'] = None,
                 global_request_number: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult'] = None,
                 graphql_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult'] = None,
                 gzip_response: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult'] = None,
                 hd_data_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult'] = None,
                 health_detection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult'] = None,
                 hsaf_eip_binding: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult'] = None,
                 http2: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result'] = None,
                 http3: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result'] = None,
                 http_strict_transport_security: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult'] = None,
                 http_to_https_upgrade: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult'] = None,
                 im_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult'] = None,
                 image_and_video_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult'] = None,
                 image_manager: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult'] = None,
                 image_manager_video: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult'] = None,
                 include: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult'] = None,
                 instant: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult'] = None,
                 instant_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult'] = None,
                 large_file_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult'] = None,
                 large_file_optimization_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult'] = None,
                 limit_bit_rate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult'] = None,
                 log_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult'] = None,
                 m_pulse: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult'] = None,
                 manifest_personalization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult'] = None,
                 manifest_rerouting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult'] = None,
                 manual_server_push: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult'] = None,
                 media_acceleration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult'] = None,
                 media_acceleration_quic_optout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult'] = None,
                 media_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult'] = None,
                 media_file_retrieval_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult'] = None,
                 media_origin_failover: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult'] = None,
                 metadata_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult'] = None,
                 mobile_sdk_performance: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult'] = None,
                 modify_incoming_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult'] = None,
                 modify_incoming_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult'] = None,
                 modify_outgoing_request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult'] = None,
                 modify_outgoing_response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult'] = None,
                 modify_via_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult'] = None,
                 origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult'] = None,
                 origin_characteristics: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult'] = None,
                 origin_characteristics_wsd: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult'] = None,
                 origin_failure_recovery_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult'] = None,
                 origin_failure_recovery_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult'] = None,
                 origin_ip_acl: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult'] = None,
                 persistent_client_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult'] = None,
                 persistent_connection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult'] = None,
                 personally_identifiable_information: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult'] = None,
                 phased_release: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult'] = None,
                 preconnect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult'] = None,
                 predictive_content_delivery: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult'] = None,
                 predictive_prefetching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult'] = None,
                 prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult'] = None,
                 prefetchable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult'] = None,
                 prefresh_cache: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult'] = None,
                 quality: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult'] = None,
                 quic_beta: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult'] = None,
                 random_seek: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult'] = None,
                 rapid: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult'] = None,
                 read_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult'] = None,
                 real_time_reporting: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult'] = None,
                 real_user_monitoring: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult'] = None,
                 redirect: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult'] = None,
                 redirectplus: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult'] = None,
                 referer_checking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult'] = None,
                 remove_query_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult'] = None,
                 remove_vary: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult'] = None,
                 report: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReportResult'] = None,
                 request_control: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult'] = None,
                 request_type_marker: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult'] = None,
                 resource_optimizer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult'] = None,
                 resource_optimizer_extended_compatibility: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult'] = None,
                 response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult'] = None,
                 response_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult'] = None,
                 restrict_object_caching: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult'] = None,
                 return_cache_status: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult'] = None,
                 rewrite_url: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult'] = None,
                 rum_custom: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult'] = None,
                 saas_definitions: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult'] = None,
                 sales_force_commerce_cloud_client: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult'] = None,
                 sales_force_commerce_cloud_provider: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult'] = None,
                 sales_force_commerce_cloud_provider_host_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult'] = None,
                 save_post_dca_processing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult'] = None,
                 schedule_invalidation: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult'] = None,
                 script_management: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult'] = None,
                 segmented_content_protection: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult'] = None,
                 segmented_media_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult'] = None,
                 segmented_media_streaming_prefetch: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult'] = None,
                 set_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult'] = None,
                 simulate_error_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult'] = None,
                 site_shield: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult'] = None,
                 standard_tls_migration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult'] = None,
                 standard_tls_migration_override: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult'] = None,
                 strict_header_parsing: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult'] = None,
                 sub_customer: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult'] = None,
                 sure_route: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult'] = None,
                 tcp_optimization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult'] = None,
                 tea_leaf: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult'] = None,
                 tiered_distribution: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult'] = None,
                 tiered_distribution_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult'] = None,
                 tiered_distribution_customization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult'] = None,
                 timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult'] = None,
                 uid_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult'] = None,
                 validate_entity_tag: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult'] = None,
                 verify_json_web_token: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult'] = None,
                 verify_json_web_token_for_dcp: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult'] = None,
                 verify_token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult'] = None,
                 virtual_waiting_room: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult'] = None,
                 virtual_waiting_room_with_edge_workers: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult'] = None,
                 visitor_prioritization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult'] = None,
                 visitor_prioritization_fifo: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult'] = None,
                 visitor_prioritization_fifo_standalone: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult'] = None,
                 watermarking: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult'] = None,
                 web_application_firewall: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult'] = None,
                 web_sockets: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult'] = None,
                 webdav: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult'] = None):
        if ad_scaler_circuit_breaker is not None:
            pulumi.set(__self__, "ad_scaler_circuit_breaker", ad_scaler_circuit_breaker)
        if adaptive_acceleration is not None:
            pulumi.set(__self__, "adaptive_acceleration", adaptive_acceleration)
        if adaptive_image_compression is not None:
            pulumi.set(__self__, "adaptive_image_compression", adaptive_image_compression)
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if aggregated_reporting is not None:
            pulumi.set(__self__, "aggregated_reporting", aggregated_reporting)
        if akamaizer is not None:
            pulumi.set(__self__, "akamaizer", akamaizer)
        if akamaizer_tag is not None:
            pulumi.set(__self__, "akamaizer_tag", akamaizer_tag)
        if all_http_in_cache_hierarchy is not None:
            pulumi.set(__self__, "all_http_in_cache_hierarchy", all_http_in_cache_hierarchy)
        if allow_cloudlets_origins is not None:
            pulumi.set(__self__, "allow_cloudlets_origins", allow_cloudlets_origins)
        if allow_delete is not None:
            pulumi.set(__self__, "allow_delete", allow_delete)
        if allow_https_cache_key_sharing is not None:
            pulumi.set(__self__, "allow_https_cache_key_sharing", allow_https_cache_key_sharing)
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if allow_patch is not None:
            pulumi.set(__self__, "allow_patch", allow_patch)
        if allow_post is not None:
            pulumi.set(__self__, "allow_post", allow_post)
        if allow_put is not None:
            pulumi.set(__self__, "allow_put", allow_put)
        if allow_transfer_encoding is not None:
            pulumi.set(__self__, "allow_transfer_encoding", allow_transfer_encoding)
        if alt_svc_header is not None:
            pulumi.set(__self__, "alt_svc_header", alt_svc_header)
        if api_prioritization is not None:
            pulumi.set(__self__, "api_prioritization", api_prioritization)
        if application_load_balancer is not None:
            pulumi.set(__self__, "application_load_balancer", application_load_balancer)
        if audience_segmentation is not None:
            pulumi.set(__self__, "audience_segmentation", audience_segmentation)
        if auto_domain_validation is not None:
            pulumi.set(__self__, "auto_domain_validation", auto_domain_validation)
        if base_directory is not None:
            pulumi.set(__self__, "base_directory", base_directory)
        if boss_beaconing is not None:
            pulumi.set(__self__, "boss_beaconing", boss_beaconing)
        if breadcrumbs is not None:
            pulumi.set(__self__, "breadcrumbs", breadcrumbs)
        if break_connection is not None:
            pulumi.set(__self__, "break_connection", break_connection)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if cache_error is not None:
            pulumi.set(__self__, "cache_error", cache_error)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if cache_key_ignore_case is not None:
            pulumi.set(__self__, "cache_key_ignore_case", cache_key_ignore_case)
        if cache_key_query_params is not None:
            pulumi.set(__self__, "cache_key_query_params", cache_key_query_params)
        if cache_key_rewrite is not None:
            pulumi.set(__self__, "cache_key_rewrite", cache_key_rewrite)
        if cache_post is not None:
            pulumi.set(__self__, "cache_post", cache_post)
        if cache_redirect is not None:
            pulumi.set(__self__, "cache_redirect", cache_redirect)
        if cache_tag is not None:
            pulumi.set(__self__, "cache_tag", cache_tag)
        if cache_tag_visible is not None:
            pulumi.set(__self__, "cache_tag_visible", cache_tag_visible)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if central_authorization is not None:
            pulumi.set(__self__, "central_authorization", central_authorization)
        if chase_redirects is not None:
            pulumi.set(__self__, "chase_redirects", chase_redirects)
        if client_characteristics is not None:
            pulumi.set(__self__, "client_characteristics", client_characteristics)
        if cloud_interconnects is not None:
            pulumi.set(__self__, "cloud_interconnects", cloud_interconnects)
        if cloud_wrapper is not None:
            pulumi.set(__self__, "cloud_wrapper", cloud_wrapper)
        if cloud_wrapper_advanced is not None:
            pulumi.set(__self__, "cloud_wrapper_advanced", cloud_wrapper_advanced)
        if common_media_client_data is not None:
            pulumi.set(__self__, "common_media_client_data", common_media_client_data)
        if conditional_origin is not None:
            pulumi.set(__self__, "conditional_origin", conditional_origin)
        if construct_response is not None:
            pulumi.set(__self__, "construct_response", construct_response)
        if content_characteristics is not None:
            pulumi.set(__self__, "content_characteristics", content_characteristics)
        if content_characteristics_amd is not None:
            pulumi.set(__self__, "content_characteristics_amd", content_characteristics_amd)
        if content_characteristics_dd is not None:
            pulumi.set(__self__, "content_characteristics_dd", content_characteristics_dd)
        if content_characteristics_wsd_large_file is not None:
            pulumi.set(__self__, "content_characteristics_wsd_large_file", content_characteristics_wsd_large_file)
        if content_characteristics_wsd_live is not None:
            pulumi.set(__self__, "content_characteristics_wsd_live", content_characteristics_wsd_live)
        if content_characteristics_wsd_vod is not None:
            pulumi.set(__self__, "content_characteristics_wsd_vod", content_characteristics_wsd_vod)
        if content_pre_position is not None:
            pulumi.set(__self__, "content_pre_position", content_pre_position)
        if content_targeting_protection is not None:
            pulumi.set(__self__, "content_targeting_protection", content_targeting_protection)
        if cors_support is not None:
            pulumi.set(__self__, "cors_support", cors_support)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if custom_behavior is not None:
            pulumi.set(__self__, "custom_behavior", custom_behavior)
        if datastream is not None:
            pulumi.set(__self__, "datastream", datastream)
        if dcp is not None:
            pulumi.set(__self__, "dcp", dcp)
        if dcp_auth_hmac_transformation is not None:
            pulumi.set(__self__, "dcp_auth_hmac_transformation", dcp_auth_hmac_transformation)
        if dcp_auth_regex_transformation is not None:
            pulumi.set(__self__, "dcp_auth_regex_transformation", dcp_auth_regex_transformation)
        if dcp_auth_substring_transformation is not None:
            pulumi.set(__self__, "dcp_auth_substring_transformation", dcp_auth_substring_transformation)
        if dcp_auth_variable_extractor is not None:
            pulumi.set(__self__, "dcp_auth_variable_extractor", dcp_auth_variable_extractor)
        if dcp_default_authz_groups is not None:
            pulumi.set(__self__, "dcp_default_authz_groups", dcp_default_authz_groups)
        if dcp_dev_relations is not None:
            pulumi.set(__self__, "dcp_dev_relations", dcp_dev_relations)
        if dcp_real_time_auth is not None:
            pulumi.set(__self__, "dcp_real_time_auth", dcp_real_time_auth)
        if delivery_receipt is not None:
            pulumi.set(__self__, "delivery_receipt", delivery_receipt)
        if deny_access is not None:
            pulumi.set(__self__, "deny_access", deny_access)
        if deny_direct_failover_access is not None:
            pulumi.set(__self__, "deny_direct_failover_access", deny_direct_failover_access)
        if device_characteristic_cache_id is not None:
            pulumi.set(__self__, "device_characteristic_cache_id", device_characteristic_cache_id)
        if device_characteristic_header is not None:
            pulumi.set(__self__, "device_characteristic_header", device_characteristic_header)
        if dns_async_refresh is not None:
            pulumi.set(__self__, "dns_async_refresh", dns_async_refresh)
        if dns_prefresh is not None:
            pulumi.set(__self__, "dns_prefresh", dns_prefresh)
        if downgrade_protocol is not None:
            pulumi.set(__self__, "downgrade_protocol", downgrade_protocol)
        if download_complete_marker is not None:
            pulumi.set(__self__, "download_complete_marker", download_complete_marker)
        if download_notification is not None:
            pulumi.set(__self__, "download_notification", download_notification)
        if downstream_cache is not None:
            pulumi.set(__self__, "downstream_cache", downstream_cache)
        if dynamic_throughtput_optimization is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization", dynamic_throughtput_optimization)
        if dynamic_throughtput_optimization_override is not None:
            pulumi.set(__self__, "dynamic_throughtput_optimization_override", dynamic_throughtput_optimization_override)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if ecms_bulk_upload is not None:
            pulumi.set(__self__, "ecms_bulk_upload", ecms_bulk_upload)
        if ecms_database is not None:
            pulumi.set(__self__, "ecms_database", ecms_database)
        if ecms_dataset is not None:
            pulumi.set(__self__, "ecms_dataset", ecms_dataset)
        if ecms_object_key is not None:
            pulumi.set(__self__, "ecms_object_key", ecms_object_key)
        if edge_connect is not None:
            pulumi.set(__self__, "edge_connect", edge_connect)
        if edge_load_balancing_advanced is not None:
            pulumi.set(__self__, "edge_load_balancing_advanced", edge_load_balancing_advanced)
        if edge_load_balancing_data_center is not None:
            pulumi.set(__self__, "edge_load_balancing_data_center", edge_load_balancing_data_center)
        if edge_load_balancing_origin is not None:
            pulumi.set(__self__, "edge_load_balancing_origin", edge_load_balancing_origin)
        if edge_origin_authorization is not None:
            pulumi.set(__self__, "edge_origin_authorization", edge_origin_authorization)
        if edge_redirector is not None:
            pulumi.set(__self__, "edge_redirector", edge_redirector)
        if edge_scape is not None:
            pulumi.set(__self__, "edge_scape", edge_scape)
        if edge_side_includes is not None:
            pulumi.set(__self__, "edge_side_includes", edge_side_includes)
        if edge_worker is not None:
            pulumi.set(__self__, "edge_worker", edge_worker)
        if enhanced_akamai_protocol is not None:
            pulumi.set(__self__, "enhanced_akamai_protocol", enhanced_akamai_protocol)
        if enhanced_proxy_detection is not None:
            pulumi.set(__self__, "enhanced_proxy_detection", enhanced_proxy_detection)
        if epd_forward_header_enrichment is not None:
            pulumi.set(__self__, "epd_forward_header_enrichment", epd_forward_header_enrichment)
        if fail_action is not None:
            pulumi.set(__self__, "fail_action", fail_action)
        if failover_bot_manager_feature_compatibility is not None:
            pulumi.set(__self__, "failover_bot_manager_feature_compatibility", failover_bot_manager_feature_compatibility)
        if fast_invalidate is not None:
            pulumi.set(__self__, "fast_invalidate", fast_invalidate)
        if first_party_marketing is not None:
            pulumi.set(__self__, "first_party_marketing", first_party_marketing)
        if first_party_marketing_plus is not None:
            pulumi.set(__self__, "first_party_marketing_plus", first_party_marketing_plus)
        if forward_rewrite is not None:
            pulumi.set(__self__, "forward_rewrite", forward_rewrite)
        if g2oheader is not None:
            pulumi.set(__self__, "g2oheader", g2oheader)
        if global_request_number is not None:
            pulumi.set(__self__, "global_request_number", global_request_number)
        if graphql_caching is not None:
            pulumi.set(__self__, "graphql_caching", graphql_caching)
        if gzip_response is not None:
            pulumi.set(__self__, "gzip_response", gzip_response)
        if hd_data_advanced is not None:
            pulumi.set(__self__, "hd_data_advanced", hd_data_advanced)
        if health_detection is not None:
            pulumi.set(__self__, "health_detection", health_detection)
        if hsaf_eip_binding is not None:
            pulumi.set(__self__, "hsaf_eip_binding", hsaf_eip_binding)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if http_strict_transport_security is not None:
            pulumi.set(__self__, "http_strict_transport_security", http_strict_transport_security)
        if http_to_https_upgrade is not None:
            pulumi.set(__self__, "http_to_https_upgrade", http_to_https_upgrade)
        if im_override is not None:
            pulumi.set(__self__, "im_override", im_override)
        if image_and_video_manager is not None:
            pulumi.set(__self__, "image_and_video_manager", image_and_video_manager)
        if image_manager is not None:
            pulumi.set(__self__, "image_manager", image_manager)
        if image_manager_video is not None:
            pulumi.set(__self__, "image_manager_video", image_manager_video)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if instant is not None:
            pulumi.set(__self__, "instant", instant)
        if instant_config is not None:
            pulumi.set(__self__, "instant_config", instant_config)
        if large_file_optimization is not None:
            pulumi.set(__self__, "large_file_optimization", large_file_optimization)
        if large_file_optimization_advanced is not None:
            pulumi.set(__self__, "large_file_optimization_advanced", large_file_optimization_advanced)
        if limit_bit_rate is not None:
            pulumi.set(__self__, "limit_bit_rate", limit_bit_rate)
        if log_custom is not None:
            pulumi.set(__self__, "log_custom", log_custom)
        if m_pulse is not None:
            pulumi.set(__self__, "m_pulse", m_pulse)
        if manifest_personalization is not None:
            pulumi.set(__self__, "manifest_personalization", manifest_personalization)
        if manifest_rerouting is not None:
            pulumi.set(__self__, "manifest_rerouting", manifest_rerouting)
        if manual_server_push is not None:
            pulumi.set(__self__, "manual_server_push", manual_server_push)
        if media_acceleration is not None:
            pulumi.set(__self__, "media_acceleration", media_acceleration)
        if media_acceleration_quic_optout is not None:
            pulumi.set(__self__, "media_acceleration_quic_optout", media_acceleration_quic_optout)
        if media_client is not None:
            pulumi.set(__self__, "media_client", media_client)
        if media_file_retrieval_optimization is not None:
            pulumi.set(__self__, "media_file_retrieval_optimization", media_file_retrieval_optimization)
        if media_origin_failover is not None:
            pulumi.set(__self__, "media_origin_failover", media_origin_failover)
        if metadata_caching is not None:
            pulumi.set(__self__, "metadata_caching", metadata_caching)
        if mobile_sdk_performance is not None:
            pulumi.set(__self__, "mobile_sdk_performance", mobile_sdk_performance)
        if modify_incoming_request_header is not None:
            pulumi.set(__self__, "modify_incoming_request_header", modify_incoming_request_header)
        if modify_incoming_response_header is not None:
            pulumi.set(__self__, "modify_incoming_response_header", modify_incoming_response_header)
        if modify_outgoing_request_header is not None:
            pulumi.set(__self__, "modify_outgoing_request_header", modify_outgoing_request_header)
        if modify_outgoing_response_header is not None:
            pulumi.set(__self__, "modify_outgoing_response_header", modify_outgoing_response_header)
        if modify_via_header is not None:
            pulumi.set(__self__, "modify_via_header", modify_via_header)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if origin_characteristics is not None:
            pulumi.set(__self__, "origin_characteristics", origin_characteristics)
        if origin_characteristics_wsd is not None:
            pulumi.set(__self__, "origin_characteristics_wsd", origin_characteristics_wsd)
        if origin_failure_recovery_method is not None:
            pulumi.set(__self__, "origin_failure_recovery_method", origin_failure_recovery_method)
        if origin_failure_recovery_policy is not None:
            pulumi.set(__self__, "origin_failure_recovery_policy", origin_failure_recovery_policy)
        if origin_ip_acl is not None:
            pulumi.set(__self__, "origin_ip_acl", origin_ip_acl)
        if persistent_client_connection is not None:
            pulumi.set(__self__, "persistent_client_connection", persistent_client_connection)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if personally_identifiable_information is not None:
            pulumi.set(__self__, "personally_identifiable_information", personally_identifiable_information)
        if phased_release is not None:
            pulumi.set(__self__, "phased_release", phased_release)
        if preconnect is not None:
            pulumi.set(__self__, "preconnect", preconnect)
        if predictive_content_delivery is not None:
            pulumi.set(__self__, "predictive_content_delivery", predictive_content_delivery)
        if predictive_prefetching is not None:
            pulumi.set(__self__, "predictive_prefetching", predictive_prefetching)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if prefetchable is not None:
            pulumi.set(__self__, "prefetchable", prefetchable)
        if prefresh_cache is not None:
            pulumi.set(__self__, "prefresh_cache", prefresh_cache)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if quic_beta is not None:
            pulumi.set(__self__, "quic_beta", quic_beta)
        if random_seek is not None:
            pulumi.set(__self__, "random_seek", random_seek)
        if rapid is not None:
            pulumi.set(__self__, "rapid", rapid)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if real_time_reporting is not None:
            pulumi.set(__self__, "real_time_reporting", real_time_reporting)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirectplus is not None:
            pulumi.set(__self__, "redirectplus", redirectplus)
        if referer_checking is not None:
            pulumi.set(__self__, "referer_checking", referer_checking)
        if remove_query_parameter is not None:
            pulumi.set(__self__, "remove_query_parameter", remove_query_parameter)
        if remove_vary is not None:
            pulumi.set(__self__, "remove_vary", remove_vary)
        if report is not None:
            pulumi.set(__self__, "report", report)
        if request_control is not None:
            pulumi.set(__self__, "request_control", request_control)
        if request_type_marker is not None:
            pulumi.set(__self__, "request_type_marker", request_type_marker)
        if resource_optimizer is not None:
            pulumi.set(__self__, "resource_optimizer", resource_optimizer)
        if resource_optimizer_extended_compatibility is not None:
            pulumi.set(__self__, "resource_optimizer_extended_compatibility", resource_optimizer_extended_compatibility)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if response_cookie is not None:
            pulumi.set(__self__, "response_cookie", response_cookie)
        if restrict_object_caching is not None:
            pulumi.set(__self__, "restrict_object_caching", restrict_object_caching)
        if return_cache_status is not None:
            pulumi.set(__self__, "return_cache_status", return_cache_status)
        if rewrite_url is not None:
            pulumi.set(__self__, "rewrite_url", rewrite_url)
        if rum_custom is not None:
            pulumi.set(__self__, "rum_custom", rum_custom)
        if saas_definitions is not None:
            pulumi.set(__self__, "saas_definitions", saas_definitions)
        if sales_force_commerce_cloud_client is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_client", sales_force_commerce_cloud_client)
        if sales_force_commerce_cloud_provider is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider", sales_force_commerce_cloud_provider)
        if sales_force_commerce_cloud_provider_host_header is not None:
            pulumi.set(__self__, "sales_force_commerce_cloud_provider_host_header", sales_force_commerce_cloud_provider_host_header)
        if save_post_dca_processing is not None:
            pulumi.set(__self__, "save_post_dca_processing", save_post_dca_processing)
        if schedule_invalidation is not None:
            pulumi.set(__self__, "schedule_invalidation", schedule_invalidation)
        if script_management is not None:
            pulumi.set(__self__, "script_management", script_management)
        if segmented_content_protection is not None:
            pulumi.set(__self__, "segmented_content_protection", segmented_content_protection)
        if segmented_media_optimization is not None:
            pulumi.set(__self__, "segmented_media_optimization", segmented_media_optimization)
        if segmented_media_streaming_prefetch is not None:
            pulumi.set(__self__, "segmented_media_streaming_prefetch", segmented_media_streaming_prefetch)
        if set_variable is not None:
            pulumi.set(__self__, "set_variable", set_variable)
        if simulate_error_code is not None:
            pulumi.set(__self__, "simulate_error_code", simulate_error_code)
        if site_shield is not None:
            pulumi.set(__self__, "site_shield", site_shield)
        if standard_tls_migration is not None:
            pulumi.set(__self__, "standard_tls_migration", standard_tls_migration)
        if standard_tls_migration_override is not None:
            pulumi.set(__self__, "standard_tls_migration_override", standard_tls_migration_override)
        if strict_header_parsing is not None:
            pulumi.set(__self__, "strict_header_parsing", strict_header_parsing)
        if sub_customer is not None:
            pulumi.set(__self__, "sub_customer", sub_customer)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if tcp_optimization is not None:
            pulumi.set(__self__, "tcp_optimization", tcp_optimization)
        if tea_leaf is not None:
            pulumi.set(__self__, "tea_leaf", tea_leaf)
        if tiered_distribution is not None:
            pulumi.set(__self__, "tiered_distribution", tiered_distribution)
        if tiered_distribution_advanced is not None:
            pulumi.set(__self__, "tiered_distribution_advanced", tiered_distribution_advanced)
        if tiered_distribution_customization is not None:
            pulumi.set(__self__, "tiered_distribution_customization", tiered_distribution_customization)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uid_configuration is not None:
            pulumi.set(__self__, "uid_configuration", uid_configuration)
        if validate_entity_tag is not None:
            pulumi.set(__self__, "validate_entity_tag", validate_entity_tag)
        if verify_json_web_token is not None:
            pulumi.set(__self__, "verify_json_web_token", verify_json_web_token)
        if verify_json_web_token_for_dcp is not None:
            pulumi.set(__self__, "verify_json_web_token_for_dcp", verify_json_web_token_for_dcp)
        if verify_token_authorization is not None:
            pulumi.set(__self__, "verify_token_authorization", verify_token_authorization)
        if virtual_waiting_room is not None:
            pulumi.set(__self__, "virtual_waiting_room", virtual_waiting_room)
        if virtual_waiting_room_with_edge_workers is not None:
            pulumi.set(__self__, "virtual_waiting_room_with_edge_workers", virtual_waiting_room_with_edge_workers)
        if visitor_prioritization is not None:
            pulumi.set(__self__, "visitor_prioritization", visitor_prioritization)
        if visitor_prioritization_fifo is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo", visitor_prioritization_fifo)
        if visitor_prioritization_fifo_standalone is not None:
            pulumi.set(__self__, "visitor_prioritization_fifo_standalone", visitor_prioritization_fifo_standalone)
        if watermarking is not None:
            pulumi.set(__self__, "watermarking", watermarking)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)
        if web_sockets is not None:
            pulumi.set(__self__, "web_sockets", web_sockets)
        if webdav is not None:
            pulumi.set(__self__, "webdav", webdav)

    @property
    @pulumi.getter(name="adScalerCircuitBreaker")
    def ad_scaler_circuit_breaker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult']:
        return pulumi.get(self, "ad_scaler_circuit_breaker")

    @property
    @pulumi.getter(name="adaptiveAcceleration")
    def adaptive_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult']:
        return pulumi.get(self, "adaptive_acceleration")

    @property
    @pulumi.getter(name="adaptiveImageCompression")
    def adaptive_image_compression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult']:
        return pulumi.get(self, "adaptive_image_compression")

    @property
    @pulumi.getter
    def advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult']:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="aggregatedReporting")
    def aggregated_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult']:
        return pulumi.get(self, "aggregated_reporting")

    @property
    @pulumi.getter
    def akamaizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult']:
        return pulumi.get(self, "akamaizer")

    @property
    @pulumi.getter(name="akamaizerTag")
    def akamaizer_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult']:
        return pulumi.get(self, "akamaizer_tag")

    @property
    @pulumi.getter(name="allHttpInCacheHierarchy")
    def all_http_in_cache_hierarchy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult']:
        return pulumi.get(self, "all_http_in_cache_hierarchy")

    @property
    @pulumi.getter(name="allowCloudletsOrigins")
    def allow_cloudlets_origins(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult']:
        return pulumi.get(self, "allow_cloudlets_origins")

    @property
    @pulumi.getter(name="allowDelete")
    def allow_delete(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult']:
        return pulumi.get(self, "allow_delete")

    @property
    @pulumi.getter(name="allowHttpsCacheKeySharing")
    def allow_https_cache_key_sharing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult']:
        return pulumi.get(self, "allow_https_cache_key_sharing")

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult']:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult']:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="allowPatch")
    def allow_patch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult']:
        return pulumi.get(self, "allow_patch")

    @property
    @pulumi.getter(name="allowPost")
    def allow_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult']:
        return pulumi.get(self, "allow_post")

    @property
    @pulumi.getter(name="allowPut")
    def allow_put(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult']:
        return pulumi.get(self, "allow_put")

    @property
    @pulumi.getter(name="allowTransferEncoding")
    def allow_transfer_encoding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult']:
        return pulumi.get(self, "allow_transfer_encoding")

    @property
    @pulumi.getter(name="altSvcHeader")
    def alt_svc_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult']:
        return pulumi.get(self, "alt_svc_header")

    @property
    @pulumi.getter(name="apiPrioritization")
    def api_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult']:
        return pulumi.get(self, "api_prioritization")

    @property
    @pulumi.getter(name="applicationLoadBalancer")
    def application_load_balancer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult']:
        return pulumi.get(self, "application_load_balancer")

    @property
    @pulumi.getter(name="audienceSegmentation")
    def audience_segmentation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult']:
        return pulumi.get(self, "audience_segmentation")

    @property
    @pulumi.getter(name="autoDomainValidation")
    def auto_domain_validation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult']:
        return pulumi.get(self, "auto_domain_validation")

    @property
    @pulumi.getter(name="baseDirectory")
    def base_directory(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult']:
        return pulumi.get(self, "base_directory")

    @property
    @pulumi.getter(name="bossBeaconing")
    def boss_beaconing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult']:
        return pulumi.get(self, "boss_beaconing")

    @property
    @pulumi.getter
    def breadcrumbs(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult']:
        return pulumi.get(self, "breadcrumbs")

    @property
    @pulumi.getter(name="breakConnection")
    def break_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult']:
        return pulumi.get(self, "break_connection")

    @property
    @pulumi.getter
    def brotli(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult']:
        return pulumi.get(self, "brotli")

    @property
    @pulumi.getter(name="cacheError")
    def cache_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult']:
        return pulumi.get(self, "cache_error")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult']:
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="cacheKeyIgnoreCase")
    def cache_key_ignore_case(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult']:
        return pulumi.get(self, "cache_key_ignore_case")

    @property
    @pulumi.getter(name="cacheKeyQueryParams")
    def cache_key_query_params(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult']:
        return pulumi.get(self, "cache_key_query_params")

    @property
    @pulumi.getter(name="cacheKeyRewrite")
    def cache_key_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult']:
        return pulumi.get(self, "cache_key_rewrite")

    @property
    @pulumi.getter(name="cachePost")
    def cache_post(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult']:
        return pulumi.get(self, "cache_post")

    @property
    @pulumi.getter(name="cacheRedirect")
    def cache_redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult']:
        return pulumi.get(self, "cache_redirect")

    @property
    @pulumi.getter(name="cacheTag")
    def cache_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult']:
        return pulumi.get(self, "cache_tag")

    @property
    @pulumi.getter(name="cacheTagVisible")
    def cache_tag_visible(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult']:
        return pulumi.get(self, "cache_tag_visible")

    @property
    @pulumi.getter
    def caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult']:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="centralAuthorization")
    def central_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult']:
        return pulumi.get(self, "central_authorization")

    @property
    @pulumi.getter(name="chaseRedirects")
    def chase_redirects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult']:
        return pulumi.get(self, "chase_redirects")

    @property
    @pulumi.getter(name="clientCharacteristics")
    def client_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult']:
        return pulumi.get(self, "client_characteristics")

    @property
    @pulumi.getter(name="cloudInterconnects")
    def cloud_interconnects(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult']:
        return pulumi.get(self, "cloud_interconnects")

    @property
    @pulumi.getter(name="cloudWrapper")
    def cloud_wrapper(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult']:
        return pulumi.get(self, "cloud_wrapper")

    @property
    @pulumi.getter(name="cloudWrapperAdvanced")
    def cloud_wrapper_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult']:
        return pulumi.get(self, "cloud_wrapper_advanced")

    @property
    @pulumi.getter(name="commonMediaClientData")
    def common_media_client_data(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult']:
        return pulumi.get(self, "common_media_client_data")

    @property
    @pulumi.getter(name="conditionalOrigin")
    def conditional_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult']:
        return pulumi.get(self, "conditional_origin")

    @property
    @pulumi.getter(name="constructResponse")
    def construct_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult']:
        return pulumi.get(self, "construct_response")

    @property
    @pulumi.getter(name="contentCharacteristics")
    def content_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult']:
        return pulumi.get(self, "content_characteristics")

    @property
    @pulumi.getter(name="contentCharacteristicsAmd")
    def content_characteristics_amd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult']:
        return pulumi.get(self, "content_characteristics_amd")

    @property
    @pulumi.getter(name="contentCharacteristicsDd")
    def content_characteristics_dd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult']:
        return pulumi.get(self, "content_characteristics_dd")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLargeFile")
    def content_characteristics_wsd_large_file(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult']:
        return pulumi.get(self, "content_characteristics_wsd_large_file")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdLive")
    def content_characteristics_wsd_live(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult']:
        return pulumi.get(self, "content_characteristics_wsd_live")

    @property
    @pulumi.getter(name="contentCharacteristicsWsdVod")
    def content_characteristics_wsd_vod(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult']:
        return pulumi.get(self, "content_characteristics_wsd_vod")

    @property
    @pulumi.getter(name="contentPrePosition")
    def content_pre_position(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult']:
        return pulumi.get(self, "content_pre_position")

    @property
    @pulumi.getter(name="contentTargetingProtection")
    def content_targeting_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult']:
        return pulumi.get(self, "content_targeting_protection")

    @property
    @pulumi.getter(name="corsSupport")
    def cors_support(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult']:
        return pulumi.get(self, "cors_support")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="customBehavior")
    def custom_behavior(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult']:
        return pulumi.get(self, "custom_behavior")

    @property
    @pulumi.getter
    def datastream(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult']:
        return pulumi.get(self, "datastream")

    @property
    @pulumi.getter
    def dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult']:
        return pulumi.get(self, "dcp")

    @property
    @pulumi.getter(name="dcpAuthHmacTransformation")
    def dcp_auth_hmac_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult']:
        return pulumi.get(self, "dcp_auth_hmac_transformation")

    @property
    @pulumi.getter(name="dcpAuthRegexTransformation")
    def dcp_auth_regex_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult']:
        return pulumi.get(self, "dcp_auth_regex_transformation")

    @property
    @pulumi.getter(name="dcpAuthSubstringTransformation")
    def dcp_auth_substring_transformation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult']:
        return pulumi.get(self, "dcp_auth_substring_transformation")

    @property
    @pulumi.getter(name="dcpAuthVariableExtractor")
    def dcp_auth_variable_extractor(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult']:
        return pulumi.get(self, "dcp_auth_variable_extractor")

    @property
    @pulumi.getter(name="dcpDefaultAuthzGroups")
    def dcp_default_authz_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult']:
        return pulumi.get(self, "dcp_default_authz_groups")

    @property
    @pulumi.getter(name="dcpDevRelations")
    def dcp_dev_relations(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult']:
        return pulumi.get(self, "dcp_dev_relations")

    @property
    @pulumi.getter(name="dcpRealTimeAuth")
    def dcp_real_time_auth(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult']:
        return pulumi.get(self, "dcp_real_time_auth")

    @property
    @pulumi.getter(name="deliveryReceipt")
    def delivery_receipt(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult']:
        return pulumi.get(self, "delivery_receipt")

    @property
    @pulumi.getter(name="denyAccess")
    def deny_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult']:
        return pulumi.get(self, "deny_access")

    @property
    @pulumi.getter(name="denyDirectFailoverAccess")
    def deny_direct_failover_access(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult']:
        return pulumi.get(self, "deny_direct_failover_access")

    @property
    @pulumi.getter(name="deviceCharacteristicCacheId")
    def device_characteristic_cache_id(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult']:
        return pulumi.get(self, "device_characteristic_cache_id")

    @property
    @pulumi.getter(name="deviceCharacteristicHeader")
    def device_characteristic_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult']:
        return pulumi.get(self, "device_characteristic_header")

    @property
    @pulumi.getter(name="dnsAsyncRefresh")
    def dns_async_refresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult']:
        return pulumi.get(self, "dns_async_refresh")

    @property
    @pulumi.getter(name="dnsPrefresh")
    def dns_prefresh(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult']:
        return pulumi.get(self, "dns_prefresh")

    @property
    @pulumi.getter(name="downgradeProtocol")
    def downgrade_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult']:
        return pulumi.get(self, "downgrade_protocol")

    @property
    @pulumi.getter(name="downloadCompleteMarker")
    def download_complete_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult']:
        return pulumi.get(self, "download_complete_marker")

    @property
    @pulumi.getter(name="downloadNotification")
    def download_notification(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult']:
        return pulumi.get(self, "download_notification")

    @property
    @pulumi.getter(name="downstreamCache")
    def downstream_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult']:
        return pulumi.get(self, "downstream_cache")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimization")
    def dynamic_throughtput_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization")

    @property
    @pulumi.getter(name="dynamicThroughtputOptimizationOverride")
    def dynamic_throughtput_optimization_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult']:
        return pulumi.get(self, "dynamic_throughtput_optimization_override")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult']:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter(name="ecmsBulkUpload")
    def ecms_bulk_upload(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult']:
        return pulumi.get(self, "ecms_bulk_upload")

    @property
    @pulumi.getter(name="ecmsDatabase")
    def ecms_database(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult']:
        return pulumi.get(self, "ecms_database")

    @property
    @pulumi.getter(name="ecmsDataset")
    def ecms_dataset(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult']:
        return pulumi.get(self, "ecms_dataset")

    @property
    @pulumi.getter(name="ecmsObjectKey")
    def ecms_object_key(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult']:
        return pulumi.get(self, "ecms_object_key")

    @property
    @pulumi.getter(name="edgeConnect")
    def edge_connect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult']:
        return pulumi.get(self, "edge_connect")

    @property
    @pulumi.getter(name="edgeLoadBalancingAdvanced")
    def edge_load_balancing_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult']:
        return pulumi.get(self, "edge_load_balancing_advanced")

    @property
    @pulumi.getter(name="edgeLoadBalancingDataCenter")
    def edge_load_balancing_data_center(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult']:
        return pulumi.get(self, "edge_load_balancing_data_center")

    @property
    @pulumi.getter(name="edgeLoadBalancingOrigin")
    def edge_load_balancing_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult']:
        return pulumi.get(self, "edge_load_balancing_origin")

    @property
    @pulumi.getter(name="edgeOriginAuthorization")
    def edge_origin_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult']:
        return pulumi.get(self, "edge_origin_authorization")

    @property
    @pulumi.getter(name="edgeRedirector")
    def edge_redirector(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult']:
        return pulumi.get(self, "edge_redirector")

    @property
    @pulumi.getter(name="edgeScape")
    def edge_scape(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult']:
        return pulumi.get(self, "edge_scape")

    @property
    @pulumi.getter(name="edgeSideIncludes")
    def edge_side_includes(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult']:
        return pulumi.get(self, "edge_side_includes")

    @property
    @pulumi.getter(name="edgeWorker")
    def edge_worker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult']:
        return pulumi.get(self, "edge_worker")

    @property
    @pulumi.getter(name="enhancedAkamaiProtocol")
    def enhanced_akamai_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult']:
        return pulumi.get(self, "enhanced_akamai_protocol")

    @property
    @pulumi.getter(name="enhancedProxyDetection")
    def enhanced_proxy_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult']:
        return pulumi.get(self, "enhanced_proxy_detection")

    @property
    @pulumi.getter(name="epdForwardHeaderEnrichment")
    def epd_forward_header_enrichment(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult']:
        return pulumi.get(self, "epd_forward_header_enrichment")

    @property
    @pulumi.getter(name="failAction")
    def fail_action(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult']:
        return pulumi.get(self, "fail_action")

    @property
    @pulumi.getter(name="failoverBotManagerFeatureCompatibility")
    def failover_bot_manager_feature_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult']:
        return pulumi.get(self, "failover_bot_manager_feature_compatibility")

    @property
    @pulumi.getter(name="fastInvalidate")
    def fast_invalidate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult']:
        return pulumi.get(self, "fast_invalidate")

    @property
    @pulumi.getter(name="firstPartyMarketing")
    def first_party_marketing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult']:
        return pulumi.get(self, "first_party_marketing")

    @property
    @pulumi.getter(name="firstPartyMarketingPlus")
    def first_party_marketing_plus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult']:
        return pulumi.get(self, "first_party_marketing_plus")

    @property
    @pulumi.getter(name="forwardRewrite")
    def forward_rewrite(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult']:
        return pulumi.get(self, "forward_rewrite")

    @property
    @pulumi.getter
    def g2oheader(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult']:
        return pulumi.get(self, "g2oheader")

    @property
    @pulumi.getter(name="globalRequestNumber")
    def global_request_number(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult']:
        return pulumi.get(self, "global_request_number")

    @property
    @pulumi.getter(name="graphqlCaching")
    def graphql_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult']:
        return pulumi.get(self, "graphql_caching")

    @property
    @pulumi.getter(name="gzipResponse")
    def gzip_response(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult']:
        return pulumi.get(self, "gzip_response")

    @property
    @pulumi.getter(name="hdDataAdvanced")
    def hd_data_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult']:
        return pulumi.get(self, "hd_data_advanced")

    @property
    @pulumi.getter(name="healthDetection")
    def health_detection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult']:
        return pulumi.get(self, "health_detection")

    @property
    @pulumi.getter(name="hsafEipBinding")
    def hsaf_eip_binding(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult']:
        return pulumi.get(self, "hsaf_eip_binding")

    @property
    @pulumi.getter
    def http2(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result']:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def http3(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result']:
        return pulumi.get(self, "http3")

    @property
    @pulumi.getter(name="httpStrictTransportSecurity")
    def http_strict_transport_security(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult']:
        return pulumi.get(self, "http_strict_transport_security")

    @property
    @pulumi.getter(name="httpToHttpsUpgrade")
    def http_to_https_upgrade(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult']:
        return pulumi.get(self, "http_to_https_upgrade")

    @property
    @pulumi.getter(name="imOverride")
    def im_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult']:
        return pulumi.get(self, "im_override")

    @property
    @pulumi.getter(name="imageAndVideoManager")
    def image_and_video_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult']:
        return pulumi.get(self, "image_and_video_manager")

    @property
    @pulumi.getter(name="imageManager")
    def image_manager(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult']:
        return pulumi.get(self, "image_manager")

    @property
    @pulumi.getter(name="imageManagerVideo")
    def image_manager_video(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult']:
        return pulumi.get(self, "image_manager_video")

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult']:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def instant(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult']:
        return pulumi.get(self, "instant")

    @property
    @pulumi.getter(name="instantConfig")
    def instant_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult']:
        return pulumi.get(self, "instant_config")

    @property
    @pulumi.getter(name="largeFileOptimization")
    def large_file_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult']:
        return pulumi.get(self, "large_file_optimization")

    @property
    @pulumi.getter(name="largeFileOptimizationAdvanced")
    def large_file_optimization_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult']:
        return pulumi.get(self, "large_file_optimization_advanced")

    @property
    @pulumi.getter(name="limitBitRate")
    def limit_bit_rate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult']:
        return pulumi.get(self, "limit_bit_rate")

    @property
    @pulumi.getter(name="logCustom")
    def log_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult']:
        return pulumi.get(self, "log_custom")

    @property
    @pulumi.getter(name="mPulse")
    def m_pulse(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult']:
        return pulumi.get(self, "m_pulse")

    @property
    @pulumi.getter(name="manifestPersonalization")
    def manifest_personalization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult']:
        return pulumi.get(self, "manifest_personalization")

    @property
    @pulumi.getter(name="manifestRerouting")
    def manifest_rerouting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult']:
        return pulumi.get(self, "manifest_rerouting")

    @property
    @pulumi.getter(name="manualServerPush")
    def manual_server_push(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult']:
        return pulumi.get(self, "manual_server_push")

    @property
    @pulumi.getter(name="mediaAcceleration")
    def media_acceleration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult']:
        return pulumi.get(self, "media_acceleration")

    @property
    @pulumi.getter(name="mediaAccelerationQuicOptout")
    def media_acceleration_quic_optout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult']:
        return pulumi.get(self, "media_acceleration_quic_optout")

    @property
    @pulumi.getter(name="mediaClient")
    def media_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult']:
        return pulumi.get(self, "media_client")

    @property
    @pulumi.getter(name="mediaFileRetrievalOptimization")
    def media_file_retrieval_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult']:
        return pulumi.get(self, "media_file_retrieval_optimization")

    @property
    @pulumi.getter(name="mediaOriginFailover")
    def media_origin_failover(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult']:
        return pulumi.get(self, "media_origin_failover")

    @property
    @pulumi.getter(name="metadataCaching")
    def metadata_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult']:
        return pulumi.get(self, "metadata_caching")

    @property
    @pulumi.getter(name="mobileSdkPerformance")
    def mobile_sdk_performance(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult']:
        return pulumi.get(self, "mobile_sdk_performance")

    @property
    @pulumi.getter(name="modifyIncomingRequestHeader")
    def modify_incoming_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult']:
        return pulumi.get(self, "modify_incoming_request_header")

    @property
    @pulumi.getter(name="modifyIncomingResponseHeader")
    def modify_incoming_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult']:
        return pulumi.get(self, "modify_incoming_response_header")

    @property
    @pulumi.getter(name="modifyOutgoingRequestHeader")
    def modify_outgoing_request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult']:
        return pulumi.get(self, "modify_outgoing_request_header")

    @property
    @pulumi.getter(name="modifyOutgoingResponseHeader")
    def modify_outgoing_response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult']:
        return pulumi.get(self, "modify_outgoing_response_header")

    @property
    @pulumi.getter(name="modifyViaHeader")
    def modify_via_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult']:
        return pulumi.get(self, "modify_via_header")

    @property
    @pulumi.getter
    def origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult']:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="originCharacteristics")
    def origin_characteristics(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult']:
        return pulumi.get(self, "origin_characteristics")

    @property
    @pulumi.getter(name="originCharacteristicsWsd")
    def origin_characteristics_wsd(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult']:
        return pulumi.get(self, "origin_characteristics_wsd")

    @property
    @pulumi.getter(name="originFailureRecoveryMethod")
    def origin_failure_recovery_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult']:
        return pulumi.get(self, "origin_failure_recovery_method")

    @property
    @pulumi.getter(name="originFailureRecoveryPolicy")
    def origin_failure_recovery_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult']:
        return pulumi.get(self, "origin_failure_recovery_policy")

    @property
    @pulumi.getter(name="originIpAcl")
    def origin_ip_acl(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult']:
        return pulumi.get(self, "origin_ip_acl")

    @property
    @pulumi.getter(name="persistentClientConnection")
    def persistent_client_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult']:
        return pulumi.get(self, "persistent_client_connection")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult']:
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter(name="personallyIdentifiableInformation")
    def personally_identifiable_information(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult']:
        return pulumi.get(self, "personally_identifiable_information")

    @property
    @pulumi.getter(name="phasedRelease")
    def phased_release(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult']:
        return pulumi.get(self, "phased_release")

    @property
    @pulumi.getter
    def preconnect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult']:
        return pulumi.get(self, "preconnect")

    @property
    @pulumi.getter(name="predictiveContentDelivery")
    def predictive_content_delivery(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult']:
        return pulumi.get(self, "predictive_content_delivery")

    @property
    @pulumi.getter(name="predictivePrefetching")
    def predictive_prefetching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult']:
        return pulumi.get(self, "predictive_prefetching")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult']:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter
    def prefetchable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult']:
        return pulumi.get(self, "prefetchable")

    @property
    @pulumi.getter(name="prefreshCache")
    def prefresh_cache(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult']:
        return pulumi.get(self, "prefresh_cache")

    @property
    @pulumi.getter
    def quality(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult']:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter(name="quicBeta")
    def quic_beta(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult']:
        return pulumi.get(self, "quic_beta")

    @property
    @pulumi.getter(name="randomSeek")
    def random_seek(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult']:
        return pulumi.get(self, "random_seek")

    @property
    @pulumi.getter
    def rapid(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult']:
        return pulumi.get(self, "rapid")

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult']:
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter(name="realTimeReporting")
    def real_time_reporting(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult']:
        return pulumi.get(self, "real_time_reporting")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult']:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter
    def redirect(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult']:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter
    def redirectplus(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult']:
        return pulumi.get(self, "redirectplus")

    @property
    @pulumi.getter(name="refererChecking")
    def referer_checking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult']:
        return pulumi.get(self, "referer_checking")

    @property
    @pulumi.getter(name="removeQueryParameter")
    def remove_query_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult']:
        return pulumi.get(self, "remove_query_parameter")

    @property
    @pulumi.getter(name="removeVary")
    def remove_vary(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult']:
        return pulumi.get(self, "remove_vary")

    @property
    @pulumi.getter
    def report(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReportResult']:
        return pulumi.get(self, "report")

    @property
    @pulumi.getter(name="requestControl")
    def request_control(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult']:
        return pulumi.get(self, "request_control")

    @property
    @pulumi.getter(name="requestTypeMarker")
    def request_type_marker(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult']:
        return pulumi.get(self, "request_type_marker")

    @property
    @pulumi.getter(name="resourceOptimizer")
    def resource_optimizer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult']:
        return pulumi.get(self, "resource_optimizer")

    @property
    @pulumi.getter(name="resourceOptimizerExtendedCompatibility")
    def resource_optimizer_extended_compatibility(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult']:
        return pulumi.get(self, "resource_optimizer_extended_compatibility")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult']:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="responseCookie")
    def response_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult']:
        return pulumi.get(self, "response_cookie")

    @property
    @pulumi.getter(name="restrictObjectCaching")
    def restrict_object_caching(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult']:
        return pulumi.get(self, "restrict_object_caching")

    @property
    @pulumi.getter(name="returnCacheStatus")
    def return_cache_status(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult']:
        return pulumi.get(self, "return_cache_status")

    @property
    @pulumi.getter(name="rewriteUrl")
    def rewrite_url(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult']:
        return pulumi.get(self, "rewrite_url")

    @property
    @pulumi.getter(name="rumCustom")
    def rum_custom(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult']:
        return pulumi.get(self, "rum_custom")

    @property
    @pulumi.getter(name="saasDefinitions")
    def saas_definitions(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult']:
        return pulumi.get(self, "saas_definitions")

    @property
    @pulumi.getter(name="salesForceCommerceCloudClient")
    def sales_force_commerce_cloud_client(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_client")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProvider")
    def sales_force_commerce_cloud_provider(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider")

    @property
    @pulumi.getter(name="salesForceCommerceCloudProviderHostHeader")
    def sales_force_commerce_cloud_provider_host_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult']:
        return pulumi.get(self, "sales_force_commerce_cloud_provider_host_header")

    @property
    @pulumi.getter(name="savePostDcaProcessing")
    def save_post_dca_processing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult']:
        return pulumi.get(self, "save_post_dca_processing")

    @property
    @pulumi.getter(name="scheduleInvalidation")
    def schedule_invalidation(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult']:
        return pulumi.get(self, "schedule_invalidation")

    @property
    @pulumi.getter(name="scriptManagement")
    def script_management(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult']:
        return pulumi.get(self, "script_management")

    @property
    @pulumi.getter(name="segmentedContentProtection")
    def segmented_content_protection(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult']:
        return pulumi.get(self, "segmented_content_protection")

    @property
    @pulumi.getter(name="segmentedMediaOptimization")
    def segmented_media_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult']:
        return pulumi.get(self, "segmented_media_optimization")

    @property
    @pulumi.getter(name="segmentedMediaStreamingPrefetch")
    def segmented_media_streaming_prefetch(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult']:
        return pulumi.get(self, "segmented_media_streaming_prefetch")

    @property
    @pulumi.getter(name="setVariable")
    def set_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult']:
        return pulumi.get(self, "set_variable")

    @property
    @pulumi.getter(name="simulateErrorCode")
    def simulate_error_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult']:
        return pulumi.get(self, "simulate_error_code")

    @property
    @pulumi.getter(name="siteShield")
    def site_shield(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult']:
        return pulumi.get(self, "site_shield")

    @property
    @pulumi.getter(name="standardTlsMigration")
    def standard_tls_migration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult']:
        return pulumi.get(self, "standard_tls_migration")

    @property
    @pulumi.getter(name="standardTlsMigrationOverride")
    def standard_tls_migration_override(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult']:
        return pulumi.get(self, "standard_tls_migration_override")

    @property
    @pulumi.getter(name="strictHeaderParsing")
    def strict_header_parsing(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult']:
        return pulumi.get(self, "strict_header_parsing")

    @property
    @pulumi.getter(name="subCustomer")
    def sub_customer(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult']:
        return pulumi.get(self, "sub_customer")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult']:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="tcpOptimization")
    def tcp_optimization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult']:
        return pulumi.get(self, "tcp_optimization")

    @property
    @pulumi.getter(name="teaLeaf")
    def tea_leaf(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult']:
        return pulumi.get(self, "tea_leaf")

    @property
    @pulumi.getter(name="tieredDistribution")
    def tiered_distribution(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult']:
        return pulumi.get(self, "tiered_distribution")

    @property
    @pulumi.getter(name="tieredDistributionAdvanced")
    def tiered_distribution_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult']:
        return pulumi.get(self, "tiered_distribution_advanced")

    @property
    @pulumi.getter(name="tieredDistributionCustomization")
    def tiered_distribution_customization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult']:
        return pulumi.get(self, "tiered_distribution_customization")

    @property
    @pulumi.getter
    def timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult']:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="uidConfiguration")
    def uid_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult']:
        return pulumi.get(self, "uid_configuration")

    @property
    @pulumi.getter(name="validateEntityTag")
    def validate_entity_tag(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult']:
        return pulumi.get(self, "validate_entity_tag")

    @property
    @pulumi.getter(name="verifyJsonWebToken")
    def verify_json_web_token(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult']:
        return pulumi.get(self, "verify_json_web_token")

    @property
    @pulumi.getter(name="verifyJsonWebTokenForDcp")
    def verify_json_web_token_for_dcp(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult']:
        return pulumi.get(self, "verify_json_web_token_for_dcp")

    @property
    @pulumi.getter(name="verifyTokenAuthorization")
    def verify_token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult']:
        return pulumi.get(self, "verify_token_authorization")

    @property
    @pulumi.getter(name="virtualWaitingRoom")
    def virtual_waiting_room(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult']:
        return pulumi.get(self, "virtual_waiting_room")

    @property
    @pulumi.getter(name="virtualWaitingRoomWithEdgeWorkers")
    def virtual_waiting_room_with_edge_workers(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult']:
        return pulumi.get(self, "virtual_waiting_room_with_edge_workers")

    @property
    @pulumi.getter(name="visitorPrioritization")
    def visitor_prioritization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult']:
        return pulumi.get(self, "visitor_prioritization")

    @property
    @pulumi.getter(name="visitorPrioritizationFifo")
    def visitor_prioritization_fifo(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult']:
        return pulumi.get(self, "visitor_prioritization_fifo")

    @property
    @pulumi.getter(name="visitorPrioritizationFifoStandalone")
    def visitor_prioritization_fifo_standalone(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult']:
        return pulumi.get(self, "visitor_prioritization_fifo_standalone")

    @property
    @pulumi.getter
    def watermarking(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult']:
        return pulumi.get(self, "watermarking")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult']:
        return pulumi.get(self, "web_application_firewall")

    @property
    @pulumi.getter(name="webSockets")
    def web_sockets(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult']:
        return pulumi.get(self, "web_sockets")

    @property
    @pulumi.getter
    def webdav(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult']:
        return pulumi.get(self, "webdav")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdScalerCircuitBreakerResult(dict):
    def __init__(__self__, *,
                 fallback_action_response_code_based: Optional[str] = None,
                 locked: Optional[bool] = None,
                 response_code_based: Optional[bool] = None,
                 response_codes: Optional[str] = None,
                 response_delay_based: Optional[bool] = None,
                 response_delay_threshold: Optional[str] = None,
                 return_error_response_code_based: Optional[str] = None,
                 specify_your_own_response_code_based: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if fallback_action_response_code_based is not None:
            pulumi.set(__self__, "fallback_action_response_code_based", fallback_action_response_code_based)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code_based is not None:
            pulumi.set(__self__, "response_code_based", response_code_based)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if response_delay_based is not None:
            pulumi.set(__self__, "response_delay_based", response_delay_based)
        if response_delay_threshold is not None:
            pulumi.set(__self__, "response_delay_threshold", response_delay_threshold)
        if return_error_response_code_based is not None:
            pulumi.set(__self__, "return_error_response_code_based", return_error_response_code_based)
        if specify_your_own_response_code_based is not None:
            pulumi.set(__self__, "specify_your_own_response_code_based", specify_your_own_response_code_based)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="fallbackActionResponseCodeBased")
    def fallback_action_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "fallback_action_response_code_based")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCodeBased")
    def response_code_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_code_based")

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[str]:
        return pulumi.get(self, "response_codes")

    @property
    @pulumi.getter(name="responseDelayBased")
    def response_delay_based(self) -> Optional[bool]:
        return pulumi.get(self, "response_delay_based")

    @property
    @pulumi.getter(name="responseDelayThreshold")
    def response_delay_threshold(self) -> Optional[str]:
        return pulumi.get(self, "response_delay_threshold")

    @property
    @pulumi.getter(name="returnErrorResponseCodeBased")
    def return_error_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "return_error_response_code_based")

    @property
    @pulumi.getter(name="specifyYourOwnResponseCodeBased")
    def specify_your_own_response_code_based(self) -> Optional[str]:
        return pulumi.get(self, "specify_your_own_response_code_based")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveAccelerationResult(dict):
    def __init__(__self__, *,
                 ab_logic: Optional[str] = None,
                 ab_testing: Optional[str] = None,
                 compression: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 enable_brotli_compression: Optional[bool] = None,
                 enable_for_noncacheable: Optional[bool] = None,
                 enable_preconnect: Optional[bool] = None,
                 enable_push: Optional[bool] = None,
                 enable_ro: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preload_enable: Optional[bool] = None,
                 source: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 title_brotli: Optional[str] = None,
                 title_http2_server_push: Optional[str] = None,
                 title_preconnect: Optional[str] = None,
                 title_preload: Optional[str] = None,
                 title_ro: Optional[str] = None,
                 uuid: Optional[str] = None):
        if ab_logic is not None:
            pulumi.set(__self__, "ab_logic", ab_logic)
        if ab_testing is not None:
            pulumi.set(__self__, "ab_testing", ab_testing)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if enable_brotli_compression is not None:
            pulumi.set(__self__, "enable_brotli_compression", enable_brotli_compression)
        if enable_for_noncacheable is not None:
            pulumi.set(__self__, "enable_for_noncacheable", enable_for_noncacheable)
        if enable_preconnect is not None:
            pulumi.set(__self__, "enable_preconnect", enable_preconnect)
        if enable_push is not None:
            pulumi.set(__self__, "enable_push", enable_push)
        if enable_ro is not None:
            pulumi.set(__self__, "enable_ro", enable_ro)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preload_enable is not None:
            pulumi.set(__self__, "preload_enable", preload_enable)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_brotli is not None:
            pulumi.set(__self__, "title_brotli", title_brotli)
        if title_http2_server_push is not None:
            pulumi.set(__self__, "title_http2_server_push", title_http2_server_push)
        if title_preconnect is not None:
            pulumi.set(__self__, "title_preconnect", title_preconnect)
        if title_preload is not None:
            pulumi.set(__self__, "title_preload", title_preload)
        if title_ro is not None:
            pulumi.set(__self__, "title_ro", title_ro)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="abLogic")
    def ab_logic(self) -> Optional[str]:
        return pulumi.get(self, "ab_logic")

    @property
    @pulumi.getter(name="abTesting")
    def ab_testing(self) -> Optional[str]:
        return pulumi.get(self, "ab_testing")

    @property
    @pulumi.getter
    def compression(self) -> Optional[str]:
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="enableBrotliCompression")
    def enable_brotli_compression(self) -> Optional[bool]:
        return pulumi.get(self, "enable_brotli_compression")

    @property
    @pulumi.getter(name="enableForNoncacheable")
    def enable_for_noncacheable(self) -> Optional[bool]:
        return pulumi.get(self, "enable_for_noncacheable")

    @property
    @pulumi.getter(name="enablePreconnect")
    def enable_preconnect(self) -> Optional[bool]:
        return pulumi.get(self, "enable_preconnect")

    @property
    @pulumi.getter(name="enablePush")
    def enable_push(self) -> Optional[bool]:
        return pulumi.get(self, "enable_push")

    @property
    @pulumi.getter(name="enableRo")
    def enable_ro(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ro")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preloadEnable")
    def preload_enable(self) -> Optional[bool]:
        return pulumi.get(self, "preload_enable")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleBrotli")
    def title_brotli(self) -> Optional[str]:
        return pulumi.get(self, "title_brotli")

    @property
    @pulumi.getter(name="titleHttp2ServerPush")
    def title_http2_server_push(self) -> Optional[str]:
        return pulumi.get(self, "title_http2_server_push")

    @property
    @pulumi.getter(name="titlePreconnect")
    def title_preconnect(self) -> Optional[str]:
        return pulumi.get(self, "title_preconnect")

    @property
    @pulumi.getter(name="titlePreload")
    def title_preload(self) -> Optional[str]:
        return pulumi.get(self, "title_preload")

    @property
    @pulumi.getter(name="titleRo")
    def title_ro(self) -> Optional[str]:
        return pulumi.get(self, "title_ro")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdaptiveImageCompressionResult(dict):
    def __init__(__self__, *,
                 compress_mobile: Optional[bool] = None,
                 compress_standard: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier1_mobile_compression_method: Optional[str] = None,
                 tier1_mobile_compression_value: Optional[int] = None,
                 tier1_standard_compression_method: Optional[str] = None,
                 tier1_standard_compression_value: Optional[int] = None,
                 tier2_mobile_compression_method: Optional[str] = None,
                 tier2_mobile_compression_value: Optional[int] = None,
                 tier2_standard_compression_method: Optional[str] = None,
                 tier2_standard_compression_value: Optional[int] = None,
                 tier3_mobile_compression_method: Optional[str] = None,
                 tier3_mobile_compression_value: Optional[int] = None,
                 tier3_standard_compression_method: Optional[str] = None,
                 tier3_standard_compression_value: Optional[int] = None,
                 title_aic_mobile: Optional[str] = None,
                 title_aic_nonmobile: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compress_mobile is not None:
            pulumi.set(__self__, "compress_mobile", compress_mobile)
        if compress_standard is not None:
            pulumi.set(__self__, "compress_standard", compress_standard)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_mobile_compression_method is not None:
            pulumi.set(__self__, "tier1_mobile_compression_method", tier1_mobile_compression_method)
        if tier1_mobile_compression_value is not None:
            pulumi.set(__self__, "tier1_mobile_compression_value", tier1_mobile_compression_value)
        if tier1_standard_compression_method is not None:
            pulumi.set(__self__, "tier1_standard_compression_method", tier1_standard_compression_method)
        if tier1_standard_compression_value is not None:
            pulumi.set(__self__, "tier1_standard_compression_value", tier1_standard_compression_value)
        if tier2_mobile_compression_method is not None:
            pulumi.set(__self__, "tier2_mobile_compression_method", tier2_mobile_compression_method)
        if tier2_mobile_compression_value is not None:
            pulumi.set(__self__, "tier2_mobile_compression_value", tier2_mobile_compression_value)
        if tier2_standard_compression_method is not None:
            pulumi.set(__self__, "tier2_standard_compression_method", tier2_standard_compression_method)
        if tier2_standard_compression_value is not None:
            pulumi.set(__self__, "tier2_standard_compression_value", tier2_standard_compression_value)
        if tier3_mobile_compression_method is not None:
            pulumi.set(__self__, "tier3_mobile_compression_method", tier3_mobile_compression_method)
        if tier3_mobile_compression_value is not None:
            pulumi.set(__self__, "tier3_mobile_compression_value", tier3_mobile_compression_value)
        if tier3_standard_compression_method is not None:
            pulumi.set(__self__, "tier3_standard_compression_method", tier3_standard_compression_method)
        if tier3_standard_compression_value is not None:
            pulumi.set(__self__, "tier3_standard_compression_value", tier3_standard_compression_value)
        if title_aic_mobile is not None:
            pulumi.set(__self__, "title_aic_mobile", title_aic_mobile)
        if title_aic_nonmobile is not None:
            pulumi.set(__self__, "title_aic_nonmobile", title_aic_nonmobile)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="compressMobile")
    def compress_mobile(self) -> Optional[bool]:
        return pulumi.get(self, "compress_mobile")

    @property
    @pulumi.getter(name="compressStandard")
    def compress_standard(self) -> Optional[bool]:
        return pulumi.get(self, "compress_standard")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1MobileCompressionMethod")
    def tier1_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_mobile_compression_method")

    @property
    @pulumi.getter(name="tier1MobileCompressionValue")
    def tier1_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_mobile_compression_value")

    @property
    @pulumi.getter(name="tier1StandardCompressionMethod")
    def tier1_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier1_standard_compression_method")

    @property
    @pulumi.getter(name="tier1StandardCompressionValue")
    def tier1_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier1_standard_compression_value")

    @property
    @pulumi.getter(name="tier2MobileCompressionMethod")
    def tier2_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_mobile_compression_method")

    @property
    @pulumi.getter(name="tier2MobileCompressionValue")
    def tier2_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_mobile_compression_value")

    @property
    @pulumi.getter(name="tier2StandardCompressionMethod")
    def tier2_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier2_standard_compression_method")

    @property
    @pulumi.getter(name="tier2StandardCompressionValue")
    def tier2_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier2_standard_compression_value")

    @property
    @pulumi.getter(name="tier3MobileCompressionMethod")
    def tier3_mobile_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_mobile_compression_method")

    @property
    @pulumi.getter(name="tier3MobileCompressionValue")
    def tier3_mobile_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_mobile_compression_value")

    @property
    @pulumi.getter(name="tier3StandardCompressionMethod")
    def tier3_standard_compression_method(self) -> Optional[str]:
        return pulumi.get(self, "tier3_standard_compression_method")

    @property
    @pulumi.getter(name="tier3StandardCompressionValue")
    def tier3_standard_compression_value(self) -> Optional[int]:
        return pulumi.get(self, "tier3_standard_compression_value")

    @property
    @pulumi.getter(name="titleAicMobile")
    def title_aic_mobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_mobile")

    @property
    @pulumi.getter(name="titleAicNonmobile")
    def title_aic_nonmobile(self) -> Optional[str]:
        return pulumi.get(self, "title_aic_nonmobile")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAggregatedReportingResult(dict):
    def __init__(__self__, *,
                 attribute1: Optional[str] = None,
                 attribute2: Optional[str] = None,
                 attribute3: Optional[str] = None,
                 attribute4: Optional[str] = None,
                 attributes_count: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 report_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if attribute1 is not None:
            pulumi.set(__self__, "attribute1", attribute1)
        if attribute2 is not None:
            pulumi.set(__self__, "attribute2", attribute2)
        if attribute3 is not None:
            pulumi.set(__self__, "attribute3", attribute3)
        if attribute4 is not None:
            pulumi.set(__self__, "attribute4", attribute4)
        if attributes_count is not None:
            pulumi.set(__self__, "attributes_count", attributes_count)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if report_name is not None:
            pulumi.set(__self__, "report_name", report_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def attribute1(self) -> Optional[str]:
        return pulumi.get(self, "attribute1")

    @property
    @pulumi.getter
    def attribute2(self) -> Optional[str]:
        return pulumi.get(self, "attribute2")

    @property
    @pulumi.getter
    def attribute3(self) -> Optional[str]:
        return pulumi.get(self, "attribute3")

    @property
    @pulumi.getter
    def attribute4(self) -> Optional[str]:
        return pulumi.get(self, "attribute4")

    @property
    @pulumi.getter(name="attributesCount")
    def attributes_count(self) -> Optional[int]:
        return pulumi.get(self, "attributes_count")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="reportName")
    def report_name(self) -> Optional[str]:
        return pulumi.get(self, "report_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAkamaizerTagResult(dict):
    def __init__(__self__, *,
                 include_tags_attribute: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_hostname: Optional[str] = None,
                 replace_all: Optional[bool] = None,
                 replacement_hostname: Optional[str] = None,
                 scope: Optional[str] = None,
                 tags_attribute: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if include_tags_attribute is not None:
            pulumi.set(__self__, "include_tags_attribute", include_tags_attribute)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_hostname is not None:
            pulumi.set(__self__, "match_hostname", match_hostname)
        if replace_all is not None:
            pulumi.set(__self__, "replace_all", replace_all)
        if replacement_hostname is not None:
            pulumi.set(__self__, "replacement_hostname", replacement_hostname)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tags_attribute is not None:
            pulumi.set(__self__, "tags_attribute", tags_attribute)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="includeTagsAttribute")
    def include_tags_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "include_tags_attribute")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchHostname")
    def match_hostname(self) -> Optional[str]:
        return pulumi.get(self, "match_hostname")

    @property
    @pulumi.getter(name="replaceAll")
    def replace_all(self) -> Optional[bool]:
        return pulumi.get(self, "replace_all")

    @property
    @pulumi.getter(name="replacementHostname")
    def replacement_hostname(self) -> Optional[str]:
        return pulumi.get(self, "replacement_hostname")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="tagsAttribute")
    def tags_attribute(self) -> Optional[str]:
        return pulumi.get(self, "tags_attribute")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllHttpInCacheHierarchyResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowCloudletsOriginsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 honor_base_directory: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 purge_origin_query_parameter: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if honor_base_directory is not None:
            pulumi.set(__self__, "honor_base_directory", honor_base_directory)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_origin_query_parameter is not None:
            pulumi.set(__self__, "purge_origin_query_parameter", purge_origin_query_parameter)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="honorBaseDirectory")
    def honor_base_directory(self) -> Optional[bool]:
        return pulumi.get(self, "honor_base_directory")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeOriginQueryParameter")
    def purge_origin_query_parameter(self) -> Optional[str]:
        return pulumi.get(self, "purge_origin_query_parameter")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowDeleteResult(dict):
    def __init__(__self__, *,
                 allow_body: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_body is not None:
            pulumi.set(__self__, "allow_body", allow_body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBody")
    def allow_body(self) -> Optional[bool]:
        return pulumi.get(self, "allow_body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsCacheKeySharingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowHttpsDowngradeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowOptionsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPatchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPostResult(dict):
    def __init__(__self__, *,
                 allow_without_content_length: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_without_content_length is not None:
            pulumi.set(__self__, "allow_without_content_length", allow_without_content_length)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowWithoutContentLength")
    def allow_without_content_length(self) -> Optional[bool]:
        return pulumi.get(self, "allow_without_content_length")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowPutResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAllowTransferEncodingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAltSvcHeaderResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 max_age: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationResult(dict):
    def __init__(__self__, *,
                 alternate_response_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult'] = None,
                 net_storage_path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 throttled_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult'] = None,
                 throttled_status_code: Optional[int] = None,
                 use_throttled_cp_code: Optional[bool] = None,
                 use_throttled_status_code: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if alternate_response_cache_ttl is not None:
            pulumi.set(__self__, "alternate_response_cache_ttl", alternate_response_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throttled_cp_code is not None:
            pulumi.set(__self__, "throttled_cp_code", throttled_cp_code)
        if throttled_status_code is not None:
            pulumi.set(__self__, "throttled_status_code", throttled_status_code)
        if use_throttled_cp_code is not None:
            pulumi.set(__self__, "use_throttled_cp_code", use_throttled_cp_code)
        if use_throttled_status_code is not None:
            pulumi.set(__self__, "use_throttled_status_code", use_throttled_status_code)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="alternateResponseCacheTtl")
    def alternate_response_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "alternate_response_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="throttledCpCode")
    def throttled_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult']:
        return pulumi.get(self, "throttled_cp_code")

    @property
    @pulumi.getter(name="throttledStatusCode")
    def throttled_status_code(self) -> Optional[int]:
        return pulumi.get(self, "throttled_status_code")

    @property
    @pulumi.getter(name="useThrottledCpCode")
    def use_throttled_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_cp_code")

    @property
    @pulumi.getter(name="useThrottledStatusCode")
    def use_throttled_status_code(self) -> Optional[bool]:
        return pulumi.get(self, "use_throttled_status_code")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApiPrioritizationThrottledCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerResult(dict):
    def __init__(__self__, *,
                 all_down_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult'] = None,
                 all_down_net_storage_file: Optional[str] = None,
                 all_down_status_code: Optional[str] = None,
                 all_down_title: Optional[str] = None,
                 allow_cache_prefresh: Optional[bool] = None,
                 cached_content_title: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 failover_attempts_threshold: Optional[int] = None,
                 failover_mode: Optional[str] = None,
                 failover_origin_maps: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult']] = None,
                 failover_status_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_cookie_name: Optional[str] = None,
                 specify_stickiness_cookie_domain: Optional[bool] = None,
                 stickiness_cookie_automatic_salt: Optional[bool] = None,
                 stickiness_cookie_domain: Optional[str] = None,
                 stickiness_cookie_salt: Optional[str] = None,
                 stickiness_cookie_set_http_only_flag: Optional[bool] = None,
                 stickiness_cookie_type: Optional[str] = None,
                 stickiness_duration: Optional[str] = None,
                 stickiness_expiration_date: Optional[str] = None,
                 stickiness_refresh: Optional[bool] = None,
                 stickiness_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if all_down_net_storage is not None:
            pulumi.set(__self__, "all_down_net_storage", all_down_net_storage)
        if all_down_net_storage_file is not None:
            pulumi.set(__self__, "all_down_net_storage_file", all_down_net_storage_file)
        if all_down_status_code is not None:
            pulumi.set(__self__, "all_down_status_code", all_down_status_code)
        if all_down_title is not None:
            pulumi.set(__self__, "all_down_title", all_down_title)
        if allow_cache_prefresh is not None:
            pulumi.set(__self__, "allow_cache_prefresh", allow_cache_prefresh)
        if cached_content_title is not None:
            pulumi.set(__self__, "cached_content_title", cached_content_title)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_attempts_threshold is not None:
            pulumi.set(__self__, "failover_attempts_threshold", failover_attempts_threshold)
        if failover_mode is not None:
            pulumi.set(__self__, "failover_mode", failover_mode)
        if failover_origin_maps is not None:
            pulumi.set(__self__, "failover_origin_maps", failover_origin_maps)
        if failover_status_codes is not None:
            pulumi.set(__self__, "failover_status_codes", failover_status_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_cookie_name is not None:
            pulumi.set(__self__, "origin_cookie_name", origin_cookie_name)
        if specify_stickiness_cookie_domain is not None:
            pulumi.set(__self__, "specify_stickiness_cookie_domain", specify_stickiness_cookie_domain)
        if stickiness_cookie_automatic_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_automatic_salt", stickiness_cookie_automatic_salt)
        if stickiness_cookie_domain is not None:
            pulumi.set(__self__, "stickiness_cookie_domain", stickiness_cookie_domain)
        if stickiness_cookie_salt is not None:
            pulumi.set(__self__, "stickiness_cookie_salt", stickiness_cookie_salt)
        if stickiness_cookie_set_http_only_flag is not None:
            pulumi.set(__self__, "stickiness_cookie_set_http_only_flag", stickiness_cookie_set_http_only_flag)
        if stickiness_cookie_type is not None:
            pulumi.set(__self__, "stickiness_cookie_type", stickiness_cookie_type)
        if stickiness_duration is not None:
            pulumi.set(__self__, "stickiness_duration", stickiness_duration)
        if stickiness_expiration_date is not None:
            pulumi.set(__self__, "stickiness_expiration_date", stickiness_expiration_date)
        if stickiness_refresh is not None:
            pulumi.set(__self__, "stickiness_refresh", stickiness_refresh)
        if stickiness_title is not None:
            pulumi.set(__self__, "stickiness_title", stickiness_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allDownNetStorage")
    def all_down_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult']:
        return pulumi.get(self, "all_down_net_storage")

    @property
    @pulumi.getter(name="allDownNetStorageFile")
    def all_down_net_storage_file(self) -> Optional[str]:
        return pulumi.get(self, "all_down_net_storage_file")

    @property
    @pulumi.getter(name="allDownStatusCode")
    def all_down_status_code(self) -> Optional[str]:
        return pulumi.get(self, "all_down_status_code")

    @property
    @pulumi.getter(name="allDownTitle")
    def all_down_title(self) -> Optional[str]:
        return pulumi.get(self, "all_down_title")

    @property
    @pulumi.getter(name="allowCachePrefresh")
    def allow_cache_prefresh(self) -> Optional[bool]:
        return pulumi.get(self, "allow_cache_prefresh")

    @property
    @pulumi.getter(name="cachedContentTitle")
    def cached_content_title(self) -> Optional[str]:
        return pulumi.get(self, "cached_content_title")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverAttemptsThreshold")
    def failover_attempts_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failover_attempts_threshold")

    @property
    @pulumi.getter(name="failoverMode")
    def failover_mode(self) -> Optional[str]:
        return pulumi.get(self, "failover_mode")

    @property
    @pulumi.getter(name="failoverOriginMaps")
    def failover_origin_maps(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult']]:
        return pulumi.get(self, "failover_origin_maps")

    @property
    @pulumi.getter(name="failoverStatusCodes")
    def failover_status_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_status_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originCookieName")
    def origin_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_cookie_name")

    @property
    @pulumi.getter(name="specifyStickinessCookieDomain")
    def specify_stickiness_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieAutomaticSalt")
    def stickiness_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_automatic_salt")

    @property
    @pulumi.getter(name="stickinessCookieDomain")
    def stickiness_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_domain")

    @property
    @pulumi.getter(name="stickinessCookieSalt")
    def stickiness_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_salt")

    @property
    @pulumi.getter(name="stickinessCookieSetHttpOnlyFlag")
    def stickiness_cookie_set_http_only_flag(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_cookie_set_http_only_flag")

    @property
    @pulumi.getter(name="stickinessCookieType")
    def stickiness_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_cookie_type")

    @property
    @pulumi.getter(name="stickinessDuration")
    def stickiness_duration(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_duration")

    @property
    @pulumi.getter(name="stickinessExpirationDate")
    def stickiness_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_expiration_date")

    @property
    @pulumi.getter(name="stickinessRefresh")
    def stickiness_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "stickiness_refresh")

    @property
    @pulumi.getter(name="stickinessTitle")
    def stickiness_title(self) -> Optional[str]:
        return pulumi.get(self, "stickiness_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerAllDownNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorApplicationLoadBalancerFailoverOriginMapResult(dict):
    def __init__(__self__, *,
                 from_origin_id: Optional[str] = None,
                 to_origin_ids: Optional[Sequence[str]] = None):
        if from_origin_id is not None:
            pulumi.set(__self__, "from_origin_id", from_origin_id)
        if to_origin_ids is not None:
            pulumi.set(__self__, "to_origin_ids", to_origin_ids)

    @property
    @pulumi.getter(name="fromOriginId")
    def from_origin_id(self) -> Optional[str]:
        return pulumi.get(self, "from_origin_id")

    @property
    @pulumi.getter(name="toOriginIds")
    def to_origin_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "to_origin_ids")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_automatic_salt: Optional[bool] = None,
                 population_cookie_domain: Optional[str] = None,
                 population_cookie_include_rule_name: Optional[bool] = None,
                 population_cookie_salt: Optional[str] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 segment_tracking_cookie_name: Optional[str] = None,
                 segment_tracking_custom_header: Optional[str] = None,
                 segment_tracking_method: Optional[str] = None,
                 segment_tracking_query_param: Optional[str] = None,
                 segment_tracking_title: Optional[str] = None,
                 specify_population_cookie_domain: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_automatic_salt is not None:
            pulumi.set(__self__, "population_cookie_automatic_salt", population_cookie_automatic_salt)
        if population_cookie_domain is not None:
            pulumi.set(__self__, "population_cookie_domain", population_cookie_domain)
        if population_cookie_include_rule_name is not None:
            pulumi.set(__self__, "population_cookie_include_rule_name", population_cookie_include_rule_name)
        if population_cookie_salt is not None:
            pulumi.set(__self__, "population_cookie_salt", population_cookie_salt)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if segment_tracking_cookie_name is not None:
            pulumi.set(__self__, "segment_tracking_cookie_name", segment_tracking_cookie_name)
        if segment_tracking_custom_header is not None:
            pulumi.set(__self__, "segment_tracking_custom_header", segment_tracking_custom_header)
        if segment_tracking_method is not None:
            pulumi.set(__self__, "segment_tracking_method", segment_tracking_method)
        if segment_tracking_query_param is not None:
            pulumi.set(__self__, "segment_tracking_query_param", segment_tracking_query_param)
        if segment_tracking_title is not None:
            pulumi.set(__self__, "segment_tracking_title", segment_tracking_title)
        if specify_population_cookie_domain is not None:
            pulumi.set(__self__, "specify_population_cookie_domain", specify_population_cookie_domain)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieAutomaticSalt")
    def population_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_automatic_salt")

    @property
    @pulumi.getter(name="populationCookieDomain")
    def population_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_domain")

    @property
    @pulumi.getter(name="populationCookieIncludeRuleName")
    def population_cookie_include_rule_name(self) -> Optional[bool]:
        return pulumi.get(self, "population_cookie_include_rule_name")

    @property
    @pulumi.getter(name="populationCookieSalt")
    def population_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_salt")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="segmentTrackingCookieName")
    def segment_tracking_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_cookie_name")

    @property
    @pulumi.getter(name="segmentTrackingCustomHeader")
    def segment_tracking_custom_header(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_custom_header")

    @property
    @pulumi.getter(name="segmentTrackingMethod")
    def segment_tracking_method(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_method")

    @property
    @pulumi.getter(name="segmentTrackingQueryParam")
    def segment_tracking_query_param(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_query_param")

    @property
    @pulumi.getter(name="segmentTrackingTitle")
    def segment_tracking_title(self) -> Optional[str]:
        return pulumi.get(self, "segment_tracking_title")

    @property
    @pulumi.getter(name="specifyPopulationCookieDomain")
    def specify_population_cookie_domain(self) -> Optional[bool]:
        return pulumi.get(self, "specify_population_cookie_domain")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAudienceSegmentationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorAutoDomainValidationResult(dict):
    def __init__(__self__, *,
                 autodv: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if autodv is not None:
            pulumi.set(__self__, "autodv", autodv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def autodv(self) -> Optional[str]:
        return pulumi.get(self, "autodv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBaseDirectoryResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBossBeaconingResult(dict):
    def __init__(__self__, *,
                 conditional_error_pattern: Optional[str] = None,
                 conditional_http_statuses: Optional[Sequence[str]] = None,
                 conditional_sampling_frequency: Optional[str] = None,
                 cpcodes: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 sampling_frequency: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if conditional_error_pattern is not None:
            pulumi.set(__self__, "conditional_error_pattern", conditional_error_pattern)
        if conditional_http_statuses is not None:
            pulumi.set(__self__, "conditional_http_statuses", conditional_http_statuses)
        if conditional_sampling_frequency is not None:
            pulumi.set(__self__, "conditional_sampling_frequency", conditional_sampling_frequency)
        if cpcodes is not None:
            pulumi.set(__self__, "cpcodes", cpcodes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_type is not None:
            pulumi.set(__self__, "forward_type", forward_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if sampling_frequency is not None:
            pulumi.set(__self__, "sampling_frequency", sampling_frequency)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="conditionalErrorPattern")
    def conditional_error_pattern(self) -> Optional[str]:
        return pulumi.get(self, "conditional_error_pattern")

    @property
    @pulumi.getter(name="conditionalHttpStatuses")
    def conditional_http_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "conditional_http_statuses")

    @property
    @pulumi.getter(name="conditionalSamplingFrequency")
    def conditional_sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "conditional_sampling_frequency")

    @property
    @pulumi.getter
    def cpcodes(self) -> Optional[str]:
        return pulumi.get(self, "cpcodes")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardType")
    def forward_type(self) -> Optional[str]:
        return pulumi.get(self, "forward_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="samplingFrequency")
    def sampling_frequency(self) -> Optional[str]:
        return pulumi.get(self, "sampling_frequency")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreadcrumbsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 logging_enabled: Optional[bool] = None,
                 opt_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if logging_enabled is not None:
            pulumi.set(__self__, "logging_enabled", logging_enabled)
        if opt_mode is not None:
            pulumi.set(__self__, "opt_mode", opt_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="loggingEnabled")
    def logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "logging_enabled")

    @property
    @pulumi.getter(name="optMode")
    def opt_mode(self) -> Optional[bool]:
        return pulumi.get(self, "opt_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBreakConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorBrotliResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheErrorResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 preserve_stale: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preserve_stale is not None:
            pulumi.set(__self__, "preserve_stale", preserve_stale)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="preserveStale")
    def preserve_stale(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_stale")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 include_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 optional: Optional[bool] = None,
                 rule: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if include_value is not None:
            pulumi.set(__self__, "include_value", include_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter(name="includeValue")
    def include_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyIgnoreCaseResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyQueryParamsResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 exact_match: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheKeyRewriteResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 purge_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if purge_key is not None:
            pulumi.set(__self__, "purge_key", purge_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="purgeKey")
    def purge_key(self) -> Optional[str]:
        return pulumi.get(self, "purge_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachePostResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_body: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_body is not None:
            pulumi.set(__self__, "use_body", use_body)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useBody")
    def use_body(self) -> Optional[str]:
        return pulumi.get(self, "use_body")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheRedirectResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 tag: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCacheTagVisibleResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCachingResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 cache_control_directives: Optional[str] = None,
                 cacheability_settings: Optional[str] = None,
                 default_ttl: Optional[str] = None,
                 enhanced_rfc_support: Optional[bool] = None,
                 expiration_settings: Optional[str] = None,
                 honor_max_age: Optional[bool] = None,
                 honor_must_revalidate: Optional[bool] = None,
                 honor_no_cache: Optional[bool] = None,
                 honor_no_store: Optional[bool] = None,
                 honor_private: Optional[bool] = None,
                 honor_proxy_revalidate: Optional[bool] = None,
                 honor_s_maxage: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 must_revalidate: Optional[bool] = None,
                 revalidation_settings: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if cache_control_directives is not None:
            pulumi.set(__self__, "cache_control_directives", cache_control_directives)
        if cacheability_settings is not None:
            pulumi.set(__self__, "cacheability_settings", cacheability_settings)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if enhanced_rfc_support is not None:
            pulumi.set(__self__, "enhanced_rfc_support", enhanced_rfc_support)
        if expiration_settings is not None:
            pulumi.set(__self__, "expiration_settings", expiration_settings)
        if honor_max_age is not None:
            pulumi.set(__self__, "honor_max_age", honor_max_age)
        if honor_must_revalidate is not None:
            pulumi.set(__self__, "honor_must_revalidate", honor_must_revalidate)
        if honor_no_cache is not None:
            pulumi.set(__self__, "honor_no_cache", honor_no_cache)
        if honor_no_store is not None:
            pulumi.set(__self__, "honor_no_store", honor_no_store)
        if honor_private is not None:
            pulumi.set(__self__, "honor_private", honor_private)
        if honor_proxy_revalidate is not None:
            pulumi.set(__self__, "honor_proxy_revalidate", honor_proxy_revalidate)
        if honor_s_maxage is not None:
            pulumi.set(__self__, "honor_s_maxage", honor_s_maxage)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if must_revalidate is not None:
            pulumi.set(__self__, "must_revalidate", must_revalidate)
        if revalidation_settings is not None:
            pulumi.set(__self__, "revalidation_settings", revalidation_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="cacheControlDirectives")
    def cache_control_directives(self) -> Optional[str]:
        return pulumi.get(self, "cache_control_directives")

    @property
    @pulumi.getter(name="cacheabilitySettings")
    def cacheability_settings(self) -> Optional[str]:
        return pulumi.get(self, "cacheability_settings")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[str]:
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter(name="enhancedRfcSupport")
    def enhanced_rfc_support(self) -> Optional[bool]:
        return pulumi.get(self, "enhanced_rfc_support")

    @property
    @pulumi.getter(name="expirationSettings")
    def expiration_settings(self) -> Optional[str]:
        return pulumi.get(self, "expiration_settings")

    @property
    @pulumi.getter(name="honorMaxAge")
    def honor_max_age(self) -> Optional[bool]:
        return pulumi.get(self, "honor_max_age")

    @property
    @pulumi.getter(name="honorMustRevalidate")
    def honor_must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_must_revalidate")

    @property
    @pulumi.getter(name="honorNoCache")
    def honor_no_cache(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_cache")

    @property
    @pulumi.getter(name="honorNoStore")
    def honor_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "honor_no_store")

    @property
    @pulumi.getter(name="honorPrivate")
    def honor_private(self) -> Optional[bool]:
        return pulumi.get(self, "honor_private")

    @property
    @pulumi.getter(name="honorProxyRevalidate")
    def honor_proxy_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "honor_proxy_revalidate")

    @property
    @pulumi.getter(name="honorSMaxage")
    def honor_s_maxage(self) -> Optional[bool]:
        return pulumi.get(self, "honor_s_maxage")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mustRevalidate")
    def must_revalidate(self) -> Optional[bool]:
        return pulumi.get(self, "must_revalidate")

    @property
    @pulumi.getter(name="revalidationSettings")
    def revalidation_settings(self) -> Optional[str]:
        return pulumi.get(self, "revalidation_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCentralAuthorizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorChaseRedirectsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 limit: Optional[str] = None,
                 locked: Optional[bool] = None,
                 serve404: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serve404 is not None:
            pulumi.set(__self__, "serve404", serve404)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def limit(self) -> Optional[str]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serve404(self) -> Optional[bool]:
        return pulumi.get(self, "serve404")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorClientCharacteristicsResult(dict):
    def __init__(__self__, *,
                 country: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if country is not None:
            pulumi.set(__self__, "country", country)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudInterconnectsResult(dict):
    def __init__(__self__, *,
                 cloud_locations: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloud_locations is not None:
            pulumi.set(__self__, "cloud_locations", cloud_locations)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudLocations")
    def cloud_locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cloud_locations")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCloudWrapperAdvancedResult(dict):
    def __init__(__self__, *,
                 custom_failover_map: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 failover_map: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_failover_map is not None:
            pulumi.set(__self__, "custom_failover_map", custom_failover_map)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_map is not None:
            pulumi.set(__self__, "failover_map", failover_map)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customFailoverMap")
    def custom_failover_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_failover_map")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverMap")
    def failover_map(self) -> Optional[str]:
        return pulumi.get(self, "failover_map")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCommonMediaClientDataResult(dict):
    def __init__(__self__, *,
                 enable_cmcd_segment_prefetch: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_cmcd_segment_prefetch is not None:
            pulumi.set(__self__, "enable_cmcd_segment_prefetch", enable_cmcd_segment_prefetch)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableCmcdSegmentPrefetch")
    def enable_cmcd_segment_prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "enable_cmcd_segment_prefetch")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConditionalOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorConstructResponseResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_eviction: Optional[bool] = None,
                 ignore_purge: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_eviction is not None:
            pulumi.set(__self__, "force_eviction", force_eviction)
        if ignore_purge is not None:
            pulumi.set(__self__, "ignore_purge", ignore_purge)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceEviction")
    def force_eviction(self) -> Optional[bool]:
        return pulumi.get(self, "force_eviction")

    @property
    @pulumi.getter(name="ignorePurge")
    def ignore_purge(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_purge")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsAmdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_dash_custom: Optional[int] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hds_custom: Optional[int] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_hls_custom: Optional[float] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_duration_smooth_custom: Optional[float] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_dash_custom is not None:
            pulumi.set(__self__, "segment_duration_dash_custom", segment_duration_dash_custom)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hds_custom is not None:
            pulumi.set(__self__, "segment_duration_hds_custom", segment_duration_hds_custom)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_hls_custom is not None:
            pulumi.set(__self__, "segment_duration_hls_custom", segment_duration_hls_custom)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_duration_smooth_custom is not None:
            pulumi.set(__self__, "segment_duration_smooth_custom", segment_duration_smooth_custom)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationDashCustom")
    def segment_duration_dash_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_dash_custom")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHdsCustom")
    def segment_duration_hds_custom(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration_hds_custom")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationHlsCustom")
    def segment_duration_hls_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_hls_custom")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentDurationSmoothCustom")
    def segment_duration_smooth_custom(self) -> Optional[float]:
        return pulumi.get(self, "segment_duration_smooth_custom")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsDdResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 optimize_option: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_option is not None:
            pulumi.set(__self__, "optimize_option", optimize_option)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeOption")
    def optimize_option(self) -> Optional[bool]:
        return pulumi.get(self, "optimize_option")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLargeFileResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdLiveResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentCharacteristicsWsdVodResult(dict):
    def __init__(__self__, *,
                 catalog_size: Optional[str] = None,
                 content_type: Optional[str] = None,
                 dash: Optional[bool] = None,
                 hds: Optional[bool] = None,
                 hls: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 popularity_distribution: Optional[str] = None,
                 segment_duration_dash: Optional[str] = None,
                 segment_duration_hds: Optional[str] = None,
                 segment_duration_hls: Optional[str] = None,
                 segment_duration_smooth: Optional[str] = None,
                 segment_size_dash: Optional[str] = None,
                 segment_size_hds: Optional[str] = None,
                 segment_size_hls: Optional[str] = None,
                 segment_size_smooth: Optional[str] = None,
                 smooth: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dash is not None:
            pulumi.set(__self__, "dash", dash)
        if hds is not None:
            pulumi.set(__self__, "hds", hds)
        if hls is not None:
            pulumi.set(__self__, "hls", hls)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if segment_duration_dash is not None:
            pulumi.set(__self__, "segment_duration_dash", segment_duration_dash)
        if segment_duration_hds is not None:
            pulumi.set(__self__, "segment_duration_hds", segment_duration_hds)
        if segment_duration_hls is not None:
            pulumi.set(__self__, "segment_duration_hls", segment_duration_hls)
        if segment_duration_smooth is not None:
            pulumi.set(__self__, "segment_duration_smooth", segment_duration_smooth)
        if segment_size_dash is not None:
            pulumi.set(__self__, "segment_size_dash", segment_size_dash)
        if segment_size_hds is not None:
            pulumi.set(__self__, "segment_size_hds", segment_size_hds)
        if segment_size_hls is not None:
            pulumi.set(__self__, "segment_size_hls", segment_size_hls)
        if segment_size_smooth is not None:
            pulumi.set(__self__, "segment_size_smooth", segment_size_smooth)
        if smooth is not None:
            pulumi.set(__self__, "smooth", smooth)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def dash(self) -> Optional[bool]:
        return pulumi.get(self, "dash")

    @property
    @pulumi.getter
    def hds(self) -> Optional[bool]:
        return pulumi.get(self, "hds")

    @property
    @pulumi.getter
    def hls(self) -> Optional[bool]:
        return pulumi.get(self, "hls")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="segmentDurationDash")
    def segment_duration_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_dash")

    @property
    @pulumi.getter(name="segmentDurationHds")
    def segment_duration_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hds")

    @property
    @pulumi.getter(name="segmentDurationHls")
    def segment_duration_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_hls")

    @property
    @pulumi.getter(name="segmentDurationSmooth")
    def segment_duration_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_duration_smooth")

    @property
    @pulumi.getter(name="segmentSizeDash")
    def segment_size_dash(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_dash")

    @property
    @pulumi.getter(name="segmentSizeHds")
    def segment_size_hds(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hds")

    @property
    @pulumi.getter(name="segmentSizeHls")
    def segment_size_hls(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_hls")

    @property
    @pulumi.getter(name="segmentSizeSmooth")
    def segment_size_smooth(self) -> Optional[str]:
        return pulumi.get(self, "segment_size_smooth")

    @property
    @pulumi.getter
    def smooth(self) -> Optional[bool]:
        return pulumi.get(self, "smooth")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentPrePositionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 first_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 second_location: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if first_location is not None:
            pulumi.set(__self__, "first_location", first_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if second_location is not None:
            pulumi.set(__self__, "second_location", second_location)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="firstLocation")
    def first_location(self) -> Optional[str]:
        return pulumi.get(self, "first_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondLocation")
    def second_location(self) -> Optional[str]:
        return pulumi.get(self, "second_location")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[str]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorContentTargetingProtectionResult(dict):
    def __init__(__self__, *,
                 countries: Optional[Sequence[str]] = None,
                 dmas: Optional[Sequence[str]] = None,
                 enable_geo_protection: Optional[bool] = None,
                 enable_geo_redirect_on_deny: Optional[bool] = None,
                 enable_ip_protection: Optional[bool] = None,
                 enable_ip_redirect_on_deny: Optional[bool] = None,
                 enable_referrer_protection: Optional[bool] = None,
                 enable_referrer_redirect_on_deny: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_protection_mode: Optional[str] = None,
                 geo_protection_title: Optional[str] = None,
                 geo_redirect_url: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 ip_protection_mode: Optional[str] = None,
                 ip_protection_title: Optional[str] = None,
                 ip_redirect_url: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override_ip_addresses: Optional[Sequence[str]] = None,
                 referrer_domains: Optional[Sequence[str]] = None,
                 referrer_protection_mode: Optional[str] = None,
                 referrer_protection_title: Optional[str] = None,
                 referrer_redirect_url: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if dmas is not None:
            pulumi.set(__self__, "dmas", dmas)
        if enable_geo_protection is not None:
            pulumi.set(__self__, "enable_geo_protection", enable_geo_protection)
        if enable_geo_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_geo_redirect_on_deny", enable_geo_redirect_on_deny)
        if enable_ip_protection is not None:
            pulumi.set(__self__, "enable_ip_protection", enable_ip_protection)
        if enable_ip_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_ip_redirect_on_deny", enable_ip_redirect_on_deny)
        if enable_referrer_protection is not None:
            pulumi.set(__self__, "enable_referrer_protection", enable_referrer_protection)
        if enable_referrer_redirect_on_deny is not None:
            pulumi.set(__self__, "enable_referrer_redirect_on_deny", enable_referrer_redirect_on_deny)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_protection_mode is not None:
            pulumi.set(__self__, "geo_protection_mode", geo_protection_mode)
        if geo_protection_title is not None:
            pulumi.set(__self__, "geo_protection_title", geo_protection_title)
        if geo_redirect_url is not None:
            pulumi.set(__self__, "geo_redirect_url", geo_redirect_url)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ip_protection_mode is not None:
            pulumi.set(__self__, "ip_protection_mode", ip_protection_mode)
        if ip_protection_title is not None:
            pulumi.set(__self__, "ip_protection_title", ip_protection_title)
        if ip_redirect_url is not None:
            pulumi.set(__self__, "ip_redirect_url", ip_redirect_url)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_ip_addresses is not None:
            pulumi.set(__self__, "override_ip_addresses", override_ip_addresses)
        if referrer_domains is not None:
            pulumi.set(__self__, "referrer_domains", referrer_domains)
        if referrer_protection_mode is not None:
            pulumi.set(__self__, "referrer_protection_mode", referrer_protection_mode)
        if referrer_protection_title is not None:
            pulumi.set(__self__, "referrer_protection_title", referrer_protection_title)
        if referrer_redirect_url is not None:
            pulumi.set(__self__, "referrer_redirect_url", referrer_redirect_url)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def dmas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dmas")

    @property
    @pulumi.getter(name="enableGeoProtection")
    def enable_geo_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_protection")

    @property
    @pulumi.getter(name="enableGeoRedirectOnDeny")
    def enable_geo_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_geo_redirect_on_deny")

    @property
    @pulumi.getter(name="enableIpProtection")
    def enable_ip_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_protection")

    @property
    @pulumi.getter(name="enableIpRedirectOnDeny")
    def enable_ip_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_redirect_on_deny")

    @property
    @pulumi.getter(name="enableReferrerProtection")
    def enable_referrer_protection(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_protection")

    @property
    @pulumi.getter(name="enableReferrerRedirectOnDeny")
    def enable_referrer_redirect_on_deny(self) -> Optional[bool]:
        return pulumi.get(self, "enable_referrer_redirect_on_deny")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoProtectionMode")
    def geo_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_mode")

    @property
    @pulumi.getter(name="geoProtectionTitle")
    def geo_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "geo_protection_title")

    @property
    @pulumi.getter(name="geoRedirectUrl")
    def geo_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "geo_redirect_url")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipProtectionMode")
    def ip_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_mode")

    @property
    @pulumi.getter(name="ipProtectionTitle")
    def ip_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "ip_protection_title")

    @property
    @pulumi.getter(name="ipRedirectUrl")
    def ip_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "ip_redirect_url")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideIpAddresses")
    def override_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "override_ip_addresses")

    @property
    @pulumi.getter(name="referrerDomains")
    def referrer_domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "referrer_domains")

    @property
    @pulumi.getter(name="referrerProtectionMode")
    def referrer_protection_mode(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_mode")

    @property
    @pulumi.getter(name="referrerProtectionTitle")
    def referrer_protection_title(self) -> Optional[str]:
        return pulumi.get(self, "referrer_protection_title")

    @property
    @pulumi.getter(name="referrerRedirectUrl")
    def referrer_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "referrer_redirect_url")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCorsSupportResult(dict):
    def __init__(__self__, *,
                 allow_credentials: Optional[bool] = None,
                 allow_headers: Optional[str] = None,
                 allow_origins: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 headers: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 methods: Optional[Sequence[str]] = None,
                 origins: Optional[Sequence[str]] = None,
                 preflight_max_age: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allow_headers is not None:
            pulumi.set(__self__, "allow_headers", allow_headers)
        if allow_origins is not None:
            pulumi.set(__self__, "allow_origins", allow_origins)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if preflight_max_age is not None:
            pulumi.set(__self__, "preflight_max_age", preflight_max_age)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[bool]:
        return pulumi.get(self, "allow_credentials")

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[str]:
        return pulumi.get(self, "allow_headers")

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[str]:
        return pulumi.get(self, "allow_origins")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter(name="preflightMaxAge")
    def preflight_max_age(self) -> Optional[str]:
        return pulumi.get(self, "preflight_max_age")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorCustomBehaviorResult(dict):
    def __init__(__self__, *,
                 behavior_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior_id is not None:
            pulumi.set(__self__, "behavior_id", behavior_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="behaviorId")
    def behavior_id(self) -> Optional[str]:
        return pulumi.get(self, "behavior_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDatastreamResult(dict):
    def __init__(__self__, *,
                 beacon_stream_title: Optional[str] = None,
                 collect_midgress_traffic: Optional[bool] = None,
                 datastream_ids: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 log_enabled: Optional[bool] = None,
                 log_stream_names: Optional[Sequence[str]] = None,
                 log_stream_title: Optional[str] = None,
                 sampling_percentage: Optional[int] = None,
                 stream_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if beacon_stream_title is not None:
            pulumi.set(__self__, "beacon_stream_title", beacon_stream_title)
        if collect_midgress_traffic is not None:
            pulumi.set(__self__, "collect_midgress_traffic", collect_midgress_traffic)
        if datastream_ids is not None:
            pulumi.set(__self__, "datastream_ids", datastream_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_enabled is not None:
            pulumi.set(__self__, "log_enabled", log_enabled)
        if log_stream_names is not None:
            pulumi.set(__self__, "log_stream_names", log_stream_names)
        if log_stream_title is not None:
            pulumi.set(__self__, "log_stream_title", log_stream_title)
        if sampling_percentage is not None:
            pulumi.set(__self__, "sampling_percentage", sampling_percentage)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconStreamTitle")
    def beacon_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "beacon_stream_title")

    @property
    @pulumi.getter(name="collectMidgressTraffic")
    def collect_midgress_traffic(self) -> Optional[bool]:
        return pulumi.get(self, "collect_midgress_traffic")

    @property
    @pulumi.getter(name="datastreamIds")
    def datastream_ids(self) -> Optional[str]:
        return pulumi.get(self, "datastream_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logEnabled")
    def log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "log_enabled")

    @property
    @pulumi.getter(name="logStreamNames")
    def log_stream_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "log_stream_names")

    @property
    @pulumi.getter(name="logStreamTitle")
    def log_stream_title(self) -> Optional[str]:
        return pulumi.get(self, "log_stream_title")

    @property
    @pulumi.getter(name="samplingPercentage")
    def sampling_percentage(self) -> Optional[int]:
        return pulumi.get(self, "sampling_percentage")

    @property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[str]:
        return pulumi.get(self, "stream_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpResult(dict):
    def __init__(__self__, *,
                 anonymous: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 gwenabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 namespace_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tlsenabled: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 wsenabled: Optional[bool] = None):
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gwenabled is not None:
            pulumi.set(__self__, "gwenabled", gwenabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tlsenabled is not None:
            pulumi.set(__self__, "tlsenabled", tlsenabled)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if wsenabled is not None:
            pulumi.set(__self__, "wsenabled", wsenabled)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[bool]:
        return pulumi.get(self, "anonymous")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def gwenabled(self) -> Optional[bool]:
        return pulumi.get(self, "gwenabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tlsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "tlsenabled")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def wsenabled(self) -> Optional[bool]:
        return pulumi.get(self, "wsenabled")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthHmacTransformationResult(dict):
    def __init__(__self__, *,
                 hash_conversion_algorithm: Optional[str] = None,
                 hash_conversion_key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if hash_conversion_algorithm is not None:
            pulumi.set(__self__, "hash_conversion_algorithm", hash_conversion_algorithm)
        if hash_conversion_key is not None:
            pulumi.set(__self__, "hash_conversion_key", hash_conversion_key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hashConversionAlgorithm")
    def hash_conversion_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_algorithm")

    @property
    @pulumi.getter(name="hashConversionKey")
    def hash_conversion_key(self) -> Optional[str]:
        return pulumi.get(self, "hash_conversion_key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthRegexTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthSubstringTransformationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 substring_end: Optional[str] = None,
                 substring_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if substring_end is not None:
            pulumi.set(__self__, "substring_end", substring_end)
        if substring_start is not None:
            pulumi.set(__self__, "substring_start", substring_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="substringEnd")
    def substring_end(self) -> Optional[str]:
        return pulumi.get(self, "substring_end")

    @property
    @pulumi.getter(name="substringStart")
    def substring_start(self) -> Optional[str]:
        return pulumi.get(self, "substring_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpAuthVariableExtractorResult(dict):
    def __init__(__self__, *,
                 certificate_field: Optional[str] = None,
                 dcp_mutual_auth_processing_variable_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if certificate_field is not None:
            pulumi.set(__self__, "certificate_field", certificate_field)
        if dcp_mutual_auth_processing_variable_id is not None:
            pulumi.set(__self__, "dcp_mutual_auth_processing_variable_id", dcp_mutual_auth_processing_variable_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="certificateField")
    def certificate_field(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field")

    @property
    @pulumi.getter(name="dcpMutualAuthProcessingVariableId")
    def dcp_mutual_auth_processing_variable_id(self) -> Optional[str]:
        return pulumi.get(self, "dcp_mutual_auth_processing_variable_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDefaultAuthzGroupsResult(dict):
    def __init__(__self__, *,
                 group_names: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if group_names is not None:
            pulumi.set(__self__, "group_names", group_names)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="groupNames")
    def group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_names")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpDevRelationsResult(dict):
    def __init__(__self__, *,
                 custom_values: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_values is not None:
            pulumi.set(__self__, "custom_values", custom_values)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> Optional[bool]:
        return pulumi.get(self, "custom_values")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDcpRealTimeAuthResult(dict):
    def __init__(__self__, *,
                 extract_hostname: Optional[bool] = None,
                 extract_jurisdiction: Optional[bool] = None,
                 extract_namespace: Optional[bool] = None,
                 hostname_claim: Optional[str] = None,
                 jurisdiction_claim: Optional[str] = None,
                 locked: Optional[bool] = None,
                 namespace_claim: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if extract_hostname is not None:
            pulumi.set(__self__, "extract_hostname", extract_hostname)
        if extract_jurisdiction is not None:
            pulumi.set(__self__, "extract_jurisdiction", extract_jurisdiction)
        if extract_namespace is not None:
            pulumi.set(__self__, "extract_namespace", extract_namespace)
        if hostname_claim is not None:
            pulumi.set(__self__, "hostname_claim", hostname_claim)
        if jurisdiction_claim is not None:
            pulumi.set(__self__, "jurisdiction_claim", jurisdiction_claim)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if namespace_claim is not None:
            pulumi.set(__self__, "namespace_claim", namespace_claim)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="extractHostname")
    def extract_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "extract_hostname")

    @property
    @pulumi.getter(name="extractJurisdiction")
    def extract_jurisdiction(self) -> Optional[bool]:
        return pulumi.get(self, "extract_jurisdiction")

    @property
    @pulumi.getter(name="extractNamespace")
    def extract_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "extract_namespace")

    @property
    @pulumi.getter(name="hostnameClaim")
    def hostname_claim(self) -> Optional[str]:
        return pulumi.get(self, "hostname_claim")

    @property
    @pulumi.getter(name="jurisdictionClaim")
    def jurisdiction_claim(self) -> Optional[str]:
        return pulumi.get(self, "jurisdiction_claim")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="namespaceClaim")
    def namespace_claim(self) -> Optional[str]:
        return pulumi.get(self, "namespace_claim")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeliveryReceiptResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 reason: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDenyDirectFailoverAccessResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicCacheIdResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDeviceCharacteristicHeaderResult(dict):
    def __init__(__self__, *,
                 elements: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "elements")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsAsyncRefreshResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDnsPrefreshResult(dict):
    def __init__(__self__, *,
                 delay: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def delay(self) -> Optional[str]:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDowngradeProtocolResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadCompleteMarkerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownloadNotificationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDownstreamCacheResult(dict):
    def __init__(__self__, *,
                 allow_behavior: Optional[str] = None,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 send_headers: Optional[str] = None,
                 send_private: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 ttl: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_behavior is not None:
            pulumi.set(__self__, "allow_behavior", allow_behavior)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if send_headers is not None:
            pulumi.set(__self__, "send_headers", send_headers)
        if send_private is not None:
            pulumi.set(__self__, "send_private", send_private)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowBehavior")
    def allow_behavior(self) -> Optional[str]:
        return pulumi.get(self, "allow_behavior")

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sendHeaders")
    def send_headers(self) -> Optional[str]:
        return pulumi.get(self, "send_headers")

    @property
    @pulumi.getter(name="sendPrivate")
    def send_private(self) -> Optional[bool]:
        return pulumi.get(self, "send_private")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicThroughtputOptimizationOverrideResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 throughput: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def throughput(self) -> Optional[str]:
        return pulumi.get(self, "throughput")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorDynamicWebContentResult(dict):
    def __init__(__self__, *,
                 image_compression: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefetch: Optional[bool] = None,
                 real_user_monitoring: Optional[bool] = None,
                 sure_route: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if image_compression is not None:
            pulumi.set(__self__, "image_compression", image_compression)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch is not None:
            pulumi.set(__self__, "prefetch", prefetch)
        if real_user_monitoring is not None:
            pulumi.set(__self__, "real_user_monitoring", real_user_monitoring)
        if sure_route is not None:
            pulumi.set(__self__, "sure_route", sure_route)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[bool]:
        return pulumi.get(self, "image_compression")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefetch(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch")

    @property
    @pulumi.getter(name="realUserMonitoring")
    def real_user_monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "real_user_monitoring")

    @property
    @pulumi.getter(name="sureRoute")
    def sure_route(self) -> Optional[bool]:
        return pulumi.get(self, "sure_route")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsBulkUploadResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatabaseResult(dict):
    def __init__(__self__, *,
                 database: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsDatasetResult(dict):
    def __init__(__self__, *,
                 dataset: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex_pattern: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex_pattern is not None:
            pulumi.set(__self__, "regex_pattern", regex_pattern)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="regexPattern")
    def regex_pattern(self) -> Optional[str]:
        return pulumi.get(self, "regex_pattern")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEcmsObjectKeyResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeConnectResult(dict):
    def __init__(__self__, *,
                 aggregate_lines: Optional[str] = None,
                 aggregate_size: Optional[str] = None,
                 aggregate_time: Optional[str] = None,
                 api_connector: Optional[str] = None,
                 api_data_elements: Optional[Sequence[str]] = None,
                 destination_hostname: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 override_aggregate_settings: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if aggregate_lines is not None:
            pulumi.set(__self__, "aggregate_lines", aggregate_lines)
        if aggregate_size is not None:
            pulumi.set(__self__, "aggregate_size", aggregate_size)
        if aggregate_time is not None:
            pulumi.set(__self__, "aggregate_time", aggregate_time)
        if api_connector is not None:
            pulumi.set(__self__, "api_connector", api_connector)
        if api_data_elements is not None:
            pulumi.set(__self__, "api_data_elements", api_data_elements)
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override_aggregate_settings is not None:
            pulumi.set(__self__, "override_aggregate_settings", override_aggregate_settings)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="aggregateLines")
    def aggregate_lines(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_lines")

    @property
    @pulumi.getter(name="aggregateSize")
    def aggregate_size(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_size")

    @property
    @pulumi.getter(name="aggregateTime")
    def aggregate_time(self) -> Optional[str]:
        return pulumi.get(self, "aggregate_time")

    @property
    @pulumi.getter(name="apiConnector")
    def api_connector(self) -> Optional[str]:
        return pulumi.get(self, "api_connector")

    @property
    @pulumi.getter(name="apiDataElements")
    def api_data_elements(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "api_data_elements")

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="overrideAggregateSettings")
    def override_aggregate_settings(self) -> Optional[bool]:
        return pulumi.get(self, "override_aggregate_settings")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_failover: Optional[bool] = None,
                 failover_rules: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']] = None,
                 failover_title: Optional[str] = None,
                 hostname: Optional[str] = None,
                 ip: Optional[str] = None,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_failover is not None:
            pulumi.set(__self__, "enable_failover", enable_failover)
        if failover_rules is not None:
            pulumi.set(__self__, "failover_rules", failover_rules)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableFailover")
    def enable_failover(self) -> Optional[bool]:
        return pulumi.get(self, "enable_failover")

    @property
    @pulumi.getter(name="failoverRules")
    def failover_rules(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult']]:
        return pulumi.get(self, "failover_rules")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingDataCenterFailoverRuleResult(dict):
    def __init__(__self__, *,
                 absolute_path: Optional[bool] = None,
                 context_root: Optional[str] = None,
                 failover_hostname: Optional[str] = None,
                 modify_request: Optional[bool] = None,
                 override_hostname: Optional[bool] = None):
        if absolute_path is not None:
            pulumi.set(__self__, "absolute_path", absolute_path)
        if context_root is not None:
            pulumi.set(__self__, "context_root", context_root)
        if failover_hostname is not None:
            pulumi.set(__self__, "failover_hostname", failover_hostname)
        if modify_request is not None:
            pulumi.set(__self__, "modify_request", modify_request)
        if override_hostname is not None:
            pulumi.set(__self__, "override_hostname", override_hostname)

    @property
    @pulumi.getter(name="absolutePath")
    def absolute_path(self) -> Optional[bool]:
        return pulumi.get(self, "absolute_path")

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[str]:
        return pulumi.get(self, "context_root")

    @property
    @pulumi.getter(name="failoverHostname")
    def failover_hostname(self) -> Optional[str]:
        return pulumi.get(self, "failover_hostname")

    @property
    @pulumi.getter(name="modifyRequest")
    def modify_request(self) -> Optional[bool]:
        return pulumi.get(self, "modify_request")

    @property
    @pulumi.getter(name="overrideHostname")
    def override_hostname(self) -> Optional[bool]:
        return pulumi.get(self, "override_hostname")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeLoadBalancingOriginResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 description: Optional[str] = None,
                 enable_session_persistence: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_persistence_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_session_persistence is not None:
            pulumi.set(__self__, "enable_session_persistence", enable_session_persistence)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_persistence_title is not None:
            pulumi.set(__self__, "session_persistence_title", session_persistence_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableSessionPersistence")
    def enable_session_persistence(self) -> Optional[bool]:
        return pulumi.get(self, "enable_session_persistence")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionPersistenceTitle")
    def session_persistence_title(self) -> Optional[str]:
        return pulumi.get(self, "session_persistence_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeOriginAuthorizationResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeRedirectorCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeScapeResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeSideIncludesResult(dict):
    def __init__(__self__, *,
                 detect_injection: Optional[bool] = None,
                 enable_via_http: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 i18n_charsets: Optional[Sequence[str]] = None,
                 i18n_status: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 pass_client_ip: Optional[bool] = None,
                 pass_set_cookie: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if detect_injection is not None:
            pulumi.set(__self__, "detect_injection", detect_injection)
        if enable_via_http is not None:
            pulumi.set(__self__, "enable_via_http", enable_via_http)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if i18n_charsets is not None:
            pulumi.set(__self__, "i18n_charsets", i18n_charsets)
        if i18n_status is not None:
            pulumi.set(__self__, "i18n_status", i18n_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if pass_client_ip is not None:
            pulumi.set(__self__, "pass_client_ip", pass_client_ip)
        if pass_set_cookie is not None:
            pulumi.set(__self__, "pass_set_cookie", pass_set_cookie)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="detectInjection")
    def detect_injection(self) -> Optional[bool]:
        return pulumi.get(self, "detect_injection")

    @property
    @pulumi.getter(name="enableViaHttp")
    def enable_via_http(self) -> Optional[bool]:
        return pulumi.get(self, "enable_via_http")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="i18nCharsets")
    def i18n_charsets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "i18n_charsets")

    @property
    @pulumi.getter(name="i18nStatus")
    def i18n_status(self) -> Optional[bool]:
        return pulumi.get(self, "i18n_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="passClientIp")
    def pass_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "pass_client_ip")

    @property
    @pulumi.getter(name="passSetCookie")
    def pass_set_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "pass_set_cookie")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEdgeWorkerResult(dict):
    def __init__(__self__, *,
                 create_edge_worker: Optional[str] = None,
                 edge_worker_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 resource_tier: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if create_edge_worker is not None:
            pulumi.set(__self__, "create_edge_worker", create_edge_worker)
        if edge_worker_id is not None:
            pulumi.set(__self__, "edge_worker_id", edge_worker_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if resource_tier is not None:
            pulumi.set(__self__, "resource_tier", resource_tier)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="createEdgeWorker")
    def create_edge_worker(self) -> Optional[str]:
        return pulumi.get(self, "create_edge_worker")

    @property
    @pulumi.getter(name="edgeWorkerId")
    def edge_worker_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_worker_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="resourceTier")
    def resource_tier(self) -> Optional[str]:
        return pulumi.get(self, "resource_tier")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedAkamaiProtocolResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEnhancedProxyDetectionResult(dict):
    def __init__(__self__, *,
                 anonymous_vpn: Optional[str] = None,
                 best_practice_action: Optional[str] = None,
                 best_practice_redirecturl: Optional[str] = None,
                 detect_anonymous_vpn: Optional[bool] = None,
                 detect_anonymous_vpn_action: Optional[str] = None,
                 detect_anonymous_vpn_redirecturl: Optional[str] = None,
                 detect_hosting_provider: Optional[bool] = None,
                 detect_hosting_provider_action: Optional[str] = None,
                 detect_hosting_provider_redirecturl: Optional[str] = None,
                 detect_public_proxy: Optional[bool] = None,
                 detect_public_proxy_action: Optional[str] = None,
                 detect_public_proxy_redirecturl: Optional[str] = None,
                 detect_residential_proxy: Optional[bool] = None,
                 detect_residential_proxy_action: Optional[str] = None,
                 detect_residential_proxy_redirecturl: Optional[str] = None,
                 detect_smart_dns_proxy: Optional[bool] = None,
                 detect_smart_dns_proxy_action: Optional[str] = None,
                 detect_smart_dns_proxy_redirecturl: Optional[str] = None,
                 detect_tor_exit_node: Optional[bool] = None,
                 detect_tor_exit_node_action: Optional[str] = None,
                 detect_tor_exit_node_redirecturl: Optional[str] = None,
                 detect_vpn_data_center: Optional[bool] = None,
                 detect_vpn_data_center_action: Optional[str] = None,
                 detect_vpn_data_center_redirecturl: Optional[str] = None,
                 enable_configuration_mode: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 forward_header_enrichment: Optional[bool] = None,
                 hosting_provider: Optional[str] = None,
                 locked: Optional[bool] = None,
                 public_proxy: Optional[str] = None,
                 residential_proxy: Optional[str] = None,
                 smart_dns_proxy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tor_exit_node: Optional[str] = None,
                 uuid: Optional[str] = None,
                 vpn_data_center: Optional[str] = None):
        if anonymous_vpn is not None:
            pulumi.set(__self__, "anonymous_vpn", anonymous_vpn)
        if best_practice_action is not None:
            pulumi.set(__self__, "best_practice_action", best_practice_action)
        if best_practice_redirecturl is not None:
            pulumi.set(__self__, "best_practice_redirecturl", best_practice_redirecturl)
        if detect_anonymous_vpn is not None:
            pulumi.set(__self__, "detect_anonymous_vpn", detect_anonymous_vpn)
        if detect_anonymous_vpn_action is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_action", detect_anonymous_vpn_action)
        if detect_anonymous_vpn_redirecturl is not None:
            pulumi.set(__self__, "detect_anonymous_vpn_redirecturl", detect_anonymous_vpn_redirecturl)
        if detect_hosting_provider is not None:
            pulumi.set(__self__, "detect_hosting_provider", detect_hosting_provider)
        if detect_hosting_provider_action is not None:
            pulumi.set(__self__, "detect_hosting_provider_action", detect_hosting_provider_action)
        if detect_hosting_provider_redirecturl is not None:
            pulumi.set(__self__, "detect_hosting_provider_redirecturl", detect_hosting_provider_redirecturl)
        if detect_public_proxy is not None:
            pulumi.set(__self__, "detect_public_proxy", detect_public_proxy)
        if detect_public_proxy_action is not None:
            pulumi.set(__self__, "detect_public_proxy_action", detect_public_proxy_action)
        if detect_public_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_public_proxy_redirecturl", detect_public_proxy_redirecturl)
        if detect_residential_proxy is not None:
            pulumi.set(__self__, "detect_residential_proxy", detect_residential_proxy)
        if detect_residential_proxy_action is not None:
            pulumi.set(__self__, "detect_residential_proxy_action", detect_residential_proxy_action)
        if detect_residential_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_residential_proxy_redirecturl", detect_residential_proxy_redirecturl)
        if detect_smart_dns_proxy is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy", detect_smart_dns_proxy)
        if detect_smart_dns_proxy_action is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_action", detect_smart_dns_proxy_action)
        if detect_smart_dns_proxy_redirecturl is not None:
            pulumi.set(__self__, "detect_smart_dns_proxy_redirecturl", detect_smart_dns_proxy_redirecturl)
        if detect_tor_exit_node is not None:
            pulumi.set(__self__, "detect_tor_exit_node", detect_tor_exit_node)
        if detect_tor_exit_node_action is not None:
            pulumi.set(__self__, "detect_tor_exit_node_action", detect_tor_exit_node_action)
        if detect_tor_exit_node_redirecturl is not None:
            pulumi.set(__self__, "detect_tor_exit_node_redirecturl", detect_tor_exit_node_redirecturl)
        if detect_vpn_data_center is not None:
            pulumi.set(__self__, "detect_vpn_data_center", detect_vpn_data_center)
        if detect_vpn_data_center_action is not None:
            pulumi.set(__self__, "detect_vpn_data_center_action", detect_vpn_data_center_action)
        if detect_vpn_data_center_redirecturl is not None:
            pulumi.set(__self__, "detect_vpn_data_center_redirecturl", detect_vpn_data_center_redirecturl)
        if enable_configuration_mode is not None:
            pulumi.set(__self__, "enable_configuration_mode", enable_configuration_mode)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if forward_header_enrichment is not None:
            pulumi.set(__self__, "forward_header_enrichment", forward_header_enrichment)
        if hosting_provider is not None:
            pulumi.set(__self__, "hosting_provider", hosting_provider)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if public_proxy is not None:
            pulumi.set(__self__, "public_proxy", public_proxy)
        if residential_proxy is not None:
            pulumi.set(__self__, "residential_proxy", residential_proxy)
        if smart_dns_proxy is not None:
            pulumi.set(__self__, "smart_dns_proxy", smart_dns_proxy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tor_exit_node is not None:
            pulumi.set(__self__, "tor_exit_node", tor_exit_node)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if vpn_data_center is not None:
            pulumi.set(__self__, "vpn_data_center", vpn_data_center)

    @property
    @pulumi.getter(name="anonymousVpn")
    def anonymous_vpn(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_vpn")

    @property
    @pulumi.getter(name="bestPracticeAction")
    def best_practice_action(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_action")

    @property
    @pulumi.getter(name="bestPracticeRedirecturl")
    def best_practice_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "best_practice_redirecturl")

    @property
    @pulumi.getter(name="detectAnonymousVpn")
    def detect_anonymous_vpn(self) -> Optional[bool]:
        return pulumi.get(self, "detect_anonymous_vpn")

    @property
    @pulumi.getter(name="detectAnonymousVpnAction")
    def detect_anonymous_vpn_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_action")

    @property
    @pulumi.getter(name="detectAnonymousVpnRedirecturl")
    def detect_anonymous_vpn_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_anonymous_vpn_redirecturl")

    @property
    @pulumi.getter(name="detectHostingProvider")
    def detect_hosting_provider(self) -> Optional[bool]:
        return pulumi.get(self, "detect_hosting_provider")

    @property
    @pulumi.getter(name="detectHostingProviderAction")
    def detect_hosting_provider_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_action")

    @property
    @pulumi.getter(name="detectHostingProviderRedirecturl")
    def detect_hosting_provider_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_hosting_provider_redirecturl")

    @property
    @pulumi.getter(name="detectPublicProxy")
    def detect_public_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_public_proxy")

    @property
    @pulumi.getter(name="detectPublicProxyAction")
    def detect_public_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_action")

    @property
    @pulumi.getter(name="detectPublicProxyRedirecturl")
    def detect_public_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_public_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectResidentialProxy")
    def detect_residential_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_residential_proxy")

    @property
    @pulumi.getter(name="detectResidentialProxyAction")
    def detect_residential_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_action")

    @property
    @pulumi.getter(name="detectResidentialProxyRedirecturl")
    def detect_residential_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_residential_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectSmartDnsProxy")
    def detect_smart_dns_proxy(self) -> Optional[bool]:
        return pulumi.get(self, "detect_smart_dns_proxy")

    @property
    @pulumi.getter(name="detectSmartDnsProxyAction")
    def detect_smart_dns_proxy_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_action")

    @property
    @pulumi.getter(name="detectSmartDnsProxyRedirecturl")
    def detect_smart_dns_proxy_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_smart_dns_proxy_redirecturl")

    @property
    @pulumi.getter(name="detectTorExitNode")
    def detect_tor_exit_node(self) -> Optional[bool]:
        return pulumi.get(self, "detect_tor_exit_node")

    @property
    @pulumi.getter(name="detectTorExitNodeAction")
    def detect_tor_exit_node_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_action")

    @property
    @pulumi.getter(name="detectTorExitNodeRedirecturl")
    def detect_tor_exit_node_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_tor_exit_node_redirecturl")

    @property
    @pulumi.getter(name="detectVpnDataCenter")
    def detect_vpn_data_center(self) -> Optional[bool]:
        return pulumi.get(self, "detect_vpn_data_center")

    @property
    @pulumi.getter(name="detectVpnDataCenterAction")
    def detect_vpn_data_center_action(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_action")

    @property
    @pulumi.getter(name="detectVpnDataCenterRedirecturl")
    def detect_vpn_data_center_redirecturl(self) -> Optional[str]:
        return pulumi.get(self, "detect_vpn_data_center_redirecturl")

    @property
    @pulumi.getter(name="enableConfigurationMode")
    def enable_configuration_mode(self) -> Optional[str]:
        return pulumi.get(self, "enable_configuration_mode")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forwardHeaderEnrichment")
    def forward_header_enrichment(self) -> Optional[bool]:
        return pulumi.get(self, "forward_header_enrichment")

    @property
    @pulumi.getter(name="hostingProvider")
    def hosting_provider(self) -> Optional[str]:
        return pulumi.get(self, "hosting_provider")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="publicProxy")
    def public_proxy(self) -> Optional[str]:
        return pulumi.get(self, "public_proxy")

    @property
    @pulumi.getter(name="residentialProxy")
    def residential_proxy(self) -> Optional[str]:
        return pulumi.get(self, "residential_proxy")

    @property
    @pulumi.getter(name="smartDnsProxy")
    def smart_dns_proxy(self) -> Optional[str]:
        return pulumi.get(self, "smart_dns_proxy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="torExitNode")
    def tor_exit_node(self) -> Optional[str]:
        return pulumi.get(self, "tor_exit_node")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="vpnDataCenter")
    def vpn_data_center(self) -> Optional[str]:
        return pulumi.get(self, "vpn_data_center")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorEpdForwardHeaderEnrichmentResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionResult(dict):
    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 allow_fcm_parent_override: Optional[bool] = None,
                 cex_custom_path: Optional[bool] = None,
                 cex_hostname: Optional[str] = None,
                 cex_path: Optional[str] = None,
                 content_custom_path: Optional[bool] = None,
                 content_hostname: Optional[str] = None,
                 content_path: Optional[str] = None,
                 cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult'] = None,
                 dynamic_custom_path: Optional[bool] = None,
                 dynamic_method: Optional[str] = None,
                 dynamic_path: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_protocol: Optional[bool] = None,
                 net_storage_hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult'] = None,
                 net_storage_path: Optional[str] = None,
                 preserve_query_string: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 redirect_custom_path: Optional[bool] = None,
                 redirect_hostname: Optional[str] = None,
                 redirect_hostname_type: Optional[str] = None,
                 redirect_method: Optional[int] = None,
                 redirect_path: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if cex_custom_path is not None:
            pulumi.set(__self__, "cex_custom_path", cex_custom_path)
        if cex_hostname is not None:
            pulumi.set(__self__, "cex_hostname", cex_hostname)
        if cex_path is not None:
            pulumi.set(__self__, "cex_path", cex_path)
        if content_custom_path is not None:
            pulumi.set(__self__, "content_custom_path", content_custom_path)
        if content_hostname is not None:
            pulumi.set(__self__, "content_hostname", content_hostname)
        if content_path is not None:
            pulumi.set(__self__, "content_path", content_path)
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if dynamic_custom_path is not None:
            pulumi.set(__self__, "dynamic_custom_path", dynamic_custom_path)
        if dynamic_method is not None:
            pulumi.set(__self__, "dynamic_method", dynamic_method)
        if dynamic_path is not None:
            pulumi.set(__self__, "dynamic_path", dynamic_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_protocol is not None:
            pulumi.set(__self__, "modify_protocol", modify_protocol)
        if net_storage_hostname is not None:
            pulumi.set(__self__, "net_storage_hostname", net_storage_hostname)
        if net_storage_path is not None:
            pulumi.set(__self__, "net_storage_path", net_storage_path)
        if preserve_query_string is not None:
            pulumi.set(__self__, "preserve_query_string", preserve_query_string)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_custom_path is not None:
            pulumi.set(__self__, "redirect_custom_path", redirect_custom_path)
        if redirect_hostname is not None:
            pulumi.set(__self__, "redirect_hostname", redirect_hostname)
        if redirect_hostname_type is not None:
            pulumi.set(__self__, "redirect_hostname_type", redirect_hostname_type)
        if redirect_method is not None:
            pulumi.set(__self__, "redirect_method", redirect_method)
        if redirect_path is not None:
            pulumi.set(__self__, "redirect_path", redirect_path)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="cexCustomPath")
    def cex_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "cex_custom_path")

    @property
    @pulumi.getter(name="cexHostname")
    def cex_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cex_hostname")

    @property
    @pulumi.getter(name="cexPath")
    def cex_path(self) -> Optional[str]:
        return pulumi.get(self, "cex_path")

    @property
    @pulumi.getter(name="contentCustomPath")
    def content_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "content_custom_path")

    @property
    @pulumi.getter(name="contentHostname")
    def content_hostname(self) -> Optional[str]:
        return pulumi.get(self, "content_hostname")

    @property
    @pulumi.getter(name="contentPath")
    def content_path(self) -> Optional[str]:
        return pulumi.get(self, "content_path")

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult']:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="dynamicCustomPath")
    def dynamic_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_custom_path")

    @property
    @pulumi.getter(name="dynamicMethod")
    def dynamic_method(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_method")

    @property
    @pulumi.getter(name="dynamicPath")
    def dynamic_path(self) -> Optional[str]:
        return pulumi.get(self, "dynamic_path")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyProtocol")
    def modify_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "modify_protocol")

    @property
    @pulumi.getter(name="netStorageHostname")
    def net_storage_hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult']:
        return pulumi.get(self, "net_storage_hostname")

    @property
    @pulumi.getter(name="netStoragePath")
    def net_storage_path(self) -> Optional[str]:
        return pulumi.get(self, "net_storage_path")

    @property
    @pulumi.getter(name="preserveQueryString")
    def preserve_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_query_string")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectCustomPath")
    def redirect_custom_path(self) -> Optional[bool]:
        return pulumi.get(self, "redirect_custom_path")

    @property
    @pulumi.getter(name="redirectHostname")
    def redirect_hostname(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname")

    @property
    @pulumi.getter(name="redirectHostnameType")
    def redirect_hostname_type(self) -> Optional[str]:
        return pulumi.get(self, "redirect_hostname_type")

    @property
    @pulumi.getter(name="redirectMethod")
    def redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "redirect_method")

    @property
    @pulumi.getter(name="redirectPath")
    def redirect_path(self) -> Optional[str]:
        return pulumi.get(self, "redirect_path")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailActionNetStorageHostnameResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFailoverBotManagerFeatureCompatibilityResult(dict):
    def __init__(__self__, *,
                 compatibility: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[bool]:
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFastInvalidateResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 java_script_insertion_rule: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_math_prefix: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if java_script_insertion_rule is not None:
            pulumi.set(__self__, "java_script_insertion_rule", java_script_insertion_rule)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_math_prefix is not None:
            pulumi.set(__self__, "media_math_prefix", media_math_prefix)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="javaScriptInsertionRule")
    def java_script_insertion_rule(self) -> Optional[str]:
        return pulumi.get(self, "java_script_insertion_rule")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaMathPrefix")
    def media_math_prefix(self) -> Optional[str]:
        return pulumi.get(self, "media_math_prefix")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorFirstPartyMarketingPlusCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorForwardRewriteCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorG2oheaderResult(dict):
    def __init__(__self__, *,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 data_header: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 encoding_version: Optional[int] = None,
                 locked: Optional[bool] = None,
                 nonce: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 signed_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if data_header is not None:
            pulumi.set(__self__, "data_header", data_header)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if signed_header is not None:
            pulumi.set(__self__, "signed_header", signed_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="dataHeader")
    def data_header(self) -> Optional[str]:
        return pulumi.get(self, "data_header")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="signedHeader")
    def signed_header(self) -> Optional[str]:
        return pulumi.get(self, "signed_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGlobalRequestNumberResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 output_option: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if output_option is not None:
            pulumi.set(__self__, "output_option", output_option)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="outputOption")
    def output_option(self) -> Optional[str]:
        return pulumi.get(self, "output_option")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGraphqlCachingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[str] = None,
                 cache_responses_with_errors: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 operations_json_body_parameter_name: Optional[str] = None,
                 operations_url_query_parameter_name: Optional[str] = None,
                 post_request_processing_error_handling: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if cache_responses_with_errors is not None:
            pulumi.set(__self__, "cache_responses_with_errors", cache_responses_with_errors)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if operations_json_body_parameter_name is not None:
            pulumi.set(__self__, "operations_json_body_parameter_name", operations_json_body_parameter_name)
        if operations_url_query_parameter_name is not None:
            pulumi.set(__self__, "operations_url_query_parameter_name", operations_url_query_parameter_name)
        if post_request_processing_error_handling is not None:
            pulumi.set(__self__, "post_request_processing_error_handling", post_request_processing_error_handling)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[str]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="cacheResponsesWithErrors")
    def cache_responses_with_errors(self) -> Optional[bool]:
        return pulumi.get(self, "cache_responses_with_errors")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="operationsJsonBodyParameterName")
    def operations_json_body_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_json_body_parameter_name")

    @property
    @pulumi.getter(name="operationsUrlQueryParameterName")
    def operations_url_query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "operations_url_query_parameter_name")

    @property
    @pulumi.getter(name="postRequestProcessingErrorHandling")
    def post_request_processing_error_handling(self) -> Optional[str]:
        return pulumi.get(self, "post_request_processing_error_handling")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorGzipResponseResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHdDataAdvancedResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 xml: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if xml is not None:
            pulumi.set(__self__, "xml", xml)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def xml(self) -> Optional[str]:
        return pulumi.get(self, "xml")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHealthDetectionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_reconnects: Optional[int] = None,
                 retry_count: Optional[int] = None,
                 retry_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_reconnects is not None:
            pulumi.set(__self__, "maximum_reconnects", maximum_reconnects)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumReconnects")
    def maximum_reconnects(self) -> Optional[int]:
        return pulumi.get(self, "maximum_reconnects")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[int]:
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHsafEipBindingResult(dict):
    def __init__(__self__, *,
                 custom_extracted_serial: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 hash_max_value: Optional[int] = None,
                 hash_min_value: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tier: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_extracted_serial is not None:
            pulumi.set(__self__, "custom_extracted_serial", custom_extracted_serial)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hash_max_value is not None:
            pulumi.set(__self__, "hash_max_value", hash_max_value)
        if hash_min_value is not None:
            pulumi.set(__self__, "hash_min_value", hash_min_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customExtractedSerial")
    def custom_extracted_serial(self) -> Optional[bool]:
        return pulumi.get(self, "custom_extracted_serial")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hashMaxValue")
    def hash_max_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_max_value")

    @property
    @pulumi.getter(name="hashMinValue")
    def hash_min_value(self) -> Optional[int]:
        return pulumi.get(self, "hash_min_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp2Result(dict):
    def __init__(__self__, *,
                 enabled: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[str]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttp3Result(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpStrictTransportSecurityResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 include_sub_domains: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 max_age: Optional[str] = None,
                 preload: Optional[bool] = None,
                 redirect: Optional[bool] = None,
                 redirect_status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)
        if redirect is not None:
            pulumi.set(__self__, "redirect", redirect)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[bool]:
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[bool]:
        return pulumi.get(self, "preload")

    @property
    @pulumi.getter
    def redirect(self) -> Optional[bool]:
        return pulumi.get(self, "redirect")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorHttpToHttpsUpgradeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upgrade: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upgrade is not None:
            pulumi.set(__self__, "upgrade", upgrade)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def upgrade(self) -> Optional[str]:
        return pulumi.get(self, "upgrade")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImOverrideResult(dict):
    def __init__(__self__, *,
                 dpr: Optional[float] = None,
                 dprvar: Optional[str] = None,
                 exclude_all_query_parameters: Optional[bool] = None,
                 excluded_query_parameters: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 formatvar: Optional[str] = None,
                 locked: Optional[bool] = None,
                 override: Optional[str] = None,
                 policy: Optional[str] = None,
                 policyvar: Optional[str] = None,
                 policyvar_i_mvar: Optional[str] = None,
                 policyvar_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 typesel: Optional[str] = None,
                 uuid: Optional[str] = None,
                 width: Optional[float] = None,
                 widthvar: Optional[str] = None):
        if dpr is not None:
            pulumi.set(__self__, "dpr", dpr)
        if dprvar is not None:
            pulumi.set(__self__, "dprvar", dprvar)
        if exclude_all_query_parameters is not None:
            pulumi.set(__self__, "exclude_all_query_parameters", exclude_all_query_parameters)
        if excluded_query_parameters is not None:
            pulumi.set(__self__, "excluded_query_parameters", excluded_query_parameters)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if formatvar is not None:
            pulumi.set(__self__, "formatvar", formatvar)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policyvar is not None:
            pulumi.set(__self__, "policyvar", policyvar)
        if policyvar_i_mvar is not None:
            pulumi.set(__self__, "policyvar_i_mvar", policyvar_i_mvar)
        if policyvar_name is not None:
            pulumi.set(__self__, "policyvar_name", policyvar_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if typesel is not None:
            pulumi.set(__self__, "typesel", typesel)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if widthvar is not None:
            pulumi.set(__self__, "widthvar", widthvar)

    @property
    @pulumi.getter
    def dpr(self) -> Optional[float]:
        return pulumi.get(self, "dpr")

    @property
    @pulumi.getter
    def dprvar(self) -> Optional[str]:
        return pulumi.get(self, "dprvar")

    @property
    @pulumi.getter(name="excludeAllQueryParameters")
    def exclude_all_query_parameters(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_all_query_parameters")

    @property
    @pulumi.getter(name="excludedQueryParameters")
    def excluded_query_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_query_parameters")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def formatvar(self) -> Optional[str]:
        return pulumi.get(self, "formatvar")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def policyvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar")

    @property
    @pulumi.getter(name="policyvarIMvar")
    def policyvar_i_mvar(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_i_mvar")

    @property
    @pulumi.getter(name="policyvarName")
    def policyvar_name(self) -> Optional[str]:
        return pulumi.get(self, "policyvar_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def typesel(self) -> Optional[str]:
        return pulumi.get(self, "typesel")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def width(self) -> Optional[float]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter
    def widthvar(self) -> Optional[str]:
        return pulumi.get(self, "widthvar")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerResult(dict):
    def __init__(__self__, *,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 image_set: Optional[str] = None,
                 locked: Optional[bool] = None,
                 policy_set_type: Optional[str] = None,
                 resize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 video_set: Optional[str] = None):
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image_set is not None:
            pulumi.set(__self__, "image_set", image_set)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set_type is not None:
            pulumi.set(__self__, "policy_set_type", policy_set_type)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if video_set is not None:
            pulumi.set(__self__, "video_set", video_set)

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="imageSet")
    def image_set(self) -> Optional[str]:
        return pulumi.get(self, "image_set")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySetType")
    def policy_set_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_type")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="videoSet")
    def video_set(self) -> Optional[str]:
        return pulumi.get(self, "video_set")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 api_reference_title: Optional[str] = None,
                 apply_best_file_type: Optional[bool] = None,
                 cp_code_original: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult'] = None,
                 cp_code_transformed: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 policy_set: Optional[str] = None,
                 policy_token: Optional[str] = None,
                 policy_token_default: Optional[str] = None,
                 resize: Optional[bool] = None,
                 settings_title: Optional[str] = None,
                 super_cache_region: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 traffic_title: Optional[str] = None,
                 use_existing_policy_set: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if api_reference_title is not None:
            pulumi.set(__self__, "api_reference_title", api_reference_title)
        if apply_best_file_type is not None:
            pulumi.set(__self__, "apply_best_file_type", apply_best_file_type)
        if cp_code_original is not None:
            pulumi.set(__self__, "cp_code_original", cp_code_original)
        if cp_code_transformed is not None:
            pulumi.set(__self__, "cp_code_transformed", cp_code_transformed)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if policy_set is not None:
            pulumi.set(__self__, "policy_set", policy_set)
        if policy_token is not None:
            pulumi.set(__self__, "policy_token", policy_token)
        if policy_token_default is not None:
            pulumi.set(__self__, "policy_token_default", policy_token_default)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if settings_title is not None:
            pulumi.set(__self__, "settings_title", settings_title)
        if super_cache_region is not None:
            pulumi.set(__self__, "super_cache_region", super_cache_region)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if traffic_title is not None:
            pulumi.set(__self__, "traffic_title", traffic_title)
        if use_existing_policy_set is not None:
            pulumi.set(__self__, "use_existing_policy_set", use_existing_policy_set)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="apiReferenceTitle")
    def api_reference_title(self) -> Optional[str]:
        return pulumi.get(self, "api_reference_title")

    @property
    @pulumi.getter(name="applyBestFileType")
    def apply_best_file_type(self) -> Optional[bool]:
        return pulumi.get(self, "apply_best_file_type")

    @property
    @pulumi.getter(name="cpCodeOriginal")
    def cp_code_original(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult']:
        return pulumi.get(self, "cp_code_original")

    @property
    @pulumi.getter(name="cpCodeTransformed")
    def cp_code_transformed(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult']:
        return pulumi.get(self, "cp_code_transformed")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="policySet")
    def policy_set(self) -> Optional[str]:
        return pulumi.get(self, "policy_set")

    @property
    @pulumi.getter(name="policyToken")
    def policy_token(self) -> Optional[str]:
        return pulumi.get(self, "policy_token")

    @property
    @pulumi.getter(name="policyTokenDefault")
    def policy_token_default(self) -> Optional[str]:
        return pulumi.get(self, "policy_token_default")

    @property
    @pulumi.getter
    def resize(self) -> Optional[bool]:
        return pulumi.get(self, "resize")

    @property
    @pulumi.getter(name="settingsTitle")
    def settings_title(self) -> Optional[str]:
        return pulumi.get(self, "settings_title")

    @property
    @pulumi.getter(name="superCacheRegion")
    def super_cache_region(self) -> Optional[str]:
        return pulumi.get(self, "super_cache_region")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trafficTitle")
    def traffic_title(self) -> Optional[str]:
        return pulumi.get(self, "traffic_title")

    @property
    @pulumi.getter(name="useExistingPolicySet")
    def use_existing_policy_set(self) -> Optional[bool]:
        return pulumi.get(self, "use_existing_policy_set")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeOriginalCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorImageManagerVideoCpCodeTransformedCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorIncludeResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantResult(dict):
    def __init__(__self__, *,
                 custom_link_relations: Optional[Sequence[str]] = None,
                 locked: Optional[bool] = None,
                 prefetch_cacheable: Optional[bool] = None,
                 prefetch_html: Optional[bool] = None,
                 prefetch_no_store: Optional[bool] = None,
                 prefetch_no_store_extensions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_link_relations is not None:
            pulumi.set(__self__, "custom_link_relations", custom_link_relations)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefetch_cacheable is not None:
            pulumi.set(__self__, "prefetch_cacheable", prefetch_cacheable)
        if prefetch_html is not None:
            pulumi.set(__self__, "prefetch_html", prefetch_html)
        if prefetch_no_store is not None:
            pulumi.set(__self__, "prefetch_no_store", prefetch_no_store)
        if prefetch_no_store_extensions is not None:
            pulumi.set(__self__, "prefetch_no_store_extensions", prefetch_no_store_extensions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLinkRelations")
    def custom_link_relations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_link_relations")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="prefetchCacheable")
    def prefetch_cacheable(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_cacheable")

    @property
    @pulumi.getter(name="prefetchHtml")
    def prefetch_html(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_html")

    @property
    @pulumi.getter(name="prefetchNoStore")
    def prefetch_no_store(self) -> Optional[bool]:
        return pulumi.get(self, "prefetch_no_store")

    @property
    @pulumi.getter(name="prefetchNoStoreExtensions")
    def prefetch_no_store_extensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefetch_no_store_extensions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorInstantConfigResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationResult(dict):
    def __init__(__self__, *,
                 enable_partial_object_caching: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 minimum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_versioning: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if enable_partial_object_caching is not None:
            pulumi.set(__self__, "enable_partial_object_caching", enable_partial_object_caching)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if minimum_size is not None:
            pulumi.set(__self__, "minimum_size", minimum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_versioning is not None:
            pulumi.set(__self__, "use_versioning", use_versioning)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enablePartialObjectCaching")
    def enable_partial_object_caching(self) -> Optional[str]:
        return pulumi.get(self, "enable_partial_object_caching")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[str]:
        return pulumi.get(self, "minimum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useVersioning")
    def use_versioning(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioning")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLargeFileOptimizationAdvancedResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 fragment_size: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_size: Optional[str] = None,
                 prefetch_after_request: Optional[int] = None,
                 prefetch_during_request: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fragment_size is not None:
            pulumi.set(__self__, "fragment_size", fragment_size)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if prefetch_after_request is not None:
            pulumi.set(__self__, "prefetch_after_request", prefetch_after_request)
        if prefetch_during_request is not None:
            pulumi.set(__self__, "prefetch_during_request", prefetch_during_request)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fragmentSize")
    def fragment_size(self) -> Optional[str]:
        return pulumi.get(self, "fragment_size")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="prefetchAfterRequest")
    def prefetch_after_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_after_request")

    @property
    @pulumi.getter(name="prefetchDuringRequest")
    def prefetch_during_request(self) -> Optional[int]:
        return pulumi.get(self, "prefetch_during_request")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateResult(dict):
    def __init__(__self__, *,
                 bitrate_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult']] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 threshold_tables: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult']] = None,
                 uuid: Optional[str] = None):
        if bitrate_tables is not None:
            pulumi.set(__self__, "bitrate_tables", bitrate_tables)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if threshold_tables is not None:
            pulumi.set(__self__, "threshold_tables", threshold_tables)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bitrateTables")
    def bitrate_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult']]:
        return pulumi.get(self, "bitrate_tables")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="thresholdTables")
    def threshold_tables(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult']]:
        return pulumi.get(self, "threshold_tables")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateBitrateTableResult(dict):
    def __init__(__self__, *,
                 bitrate_unit: Optional[str] = None,
                 bitrate_value: Optional[float] = None):
        if bitrate_unit is not None:
            pulumi.set(__self__, "bitrate_unit", bitrate_unit)
        if bitrate_value is not None:
            pulumi.set(__self__, "bitrate_value", bitrate_value)

    @property
    @pulumi.getter(name="bitrateUnit")
    def bitrate_unit(self) -> Optional[str]:
        return pulumi.get(self, "bitrate_unit")

    @property
    @pulumi.getter(name="bitrateValue")
    def bitrate_value(self) -> Optional[float]:
        return pulumi.get(self, "bitrate_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLimitBitRateThresholdTableResult(dict):
    def __init__(__self__, *,
                 threshold_unit: Optional[str] = None,
                 threshold_value: Optional[int] = None):
        if threshold_unit is not None:
            pulumi.set(__self__, "threshold_unit", threshold_unit)
        if threshold_value is not None:
            pulumi.set(__self__, "threshold_value", threshold_value)

    @property
    @pulumi.getter(name="thresholdUnit")
    def threshold_unit(self) -> Optional[str]:
        return pulumi.get(self, "threshold_unit")

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> Optional[int]:
        return pulumi.get(self, "threshold_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorLogCustomResult(dict):
    def __init__(__self__, *,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_custom_log_field: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMPulseResult(dict):
    def __init__(__self__, *,
                 api_key: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 config_override: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 loader_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 require_pci: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 title_optional: Optional[str] = None,
                 uuid: Optional[str] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if config_override is not None:
            pulumi.set(__self__, "config_override", config_override)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if loader_version is not None:
            pulumi.set(__self__, "loader_version", loader_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if require_pci is not None:
            pulumi.set(__self__, "require_pci", require_pci)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if title_optional is not None:
            pulumi.set(__self__, "title_optional", title_optional)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[str]:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="configOverride")
    def config_override(self) -> Optional[str]:
        return pulumi.get(self, "config_override")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="loaderVersion")
    def loader_version(self) -> Optional[str]:
        return pulumi.get(self, "loader_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requirePci")
    def require_pci(self) -> Optional[bool]:
        return pulumi.get(self, "require_pci")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="titleOptional")
    def title_optional(self) -> Optional[str]:
        return pulumi.get(self, "title_optional")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestPersonalizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hls_enable_debug_headers: Optional[bool] = None,
                 hls_enabled: Optional[bool] = None,
                 hls_filter_in_bitrate_ranges: Optional[str] = None,
                 hls_filter_in_bitrates: Optional[str] = None,
                 hls_mode: Optional[str] = None,
                 hls_preferred_bitrate: Optional[str] = None,
                 hls_query_param_enabled: Optional[bool] = None,
                 hls_query_param_secret_key: Optional[str] = None,
                 hls_query_param_transition_key: Optional[str] = None,
                 hls_show_advanced: Optional[bool] = None,
                 hls_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hls_enable_debug_headers is not None:
            pulumi.set(__self__, "hls_enable_debug_headers", hls_enable_debug_headers)
        if hls_enabled is not None:
            pulumi.set(__self__, "hls_enabled", hls_enabled)
        if hls_filter_in_bitrate_ranges is not None:
            pulumi.set(__self__, "hls_filter_in_bitrate_ranges", hls_filter_in_bitrate_ranges)
        if hls_filter_in_bitrates is not None:
            pulumi.set(__self__, "hls_filter_in_bitrates", hls_filter_in_bitrates)
        if hls_mode is not None:
            pulumi.set(__self__, "hls_mode", hls_mode)
        if hls_preferred_bitrate is not None:
            pulumi.set(__self__, "hls_preferred_bitrate", hls_preferred_bitrate)
        if hls_query_param_enabled is not None:
            pulumi.set(__self__, "hls_query_param_enabled", hls_query_param_enabled)
        if hls_query_param_secret_key is not None:
            pulumi.set(__self__, "hls_query_param_secret_key", hls_query_param_secret_key)
        if hls_query_param_transition_key is not None:
            pulumi.set(__self__, "hls_query_param_transition_key", hls_query_param_transition_key)
        if hls_show_advanced is not None:
            pulumi.set(__self__, "hls_show_advanced", hls_show_advanced)
        if hls_title is not None:
            pulumi.set(__self__, "hls_title", hls_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hlsEnableDebugHeaders")
    def hls_enable_debug_headers(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enable_debug_headers")

    @property
    @pulumi.getter(name="hlsEnabled")
    def hls_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_enabled")

    @property
    @pulumi.getter(name="hlsFilterInBitrateRanges")
    def hls_filter_in_bitrate_ranges(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrate_ranges")

    @property
    @pulumi.getter(name="hlsFilterInBitrates")
    def hls_filter_in_bitrates(self) -> Optional[str]:
        return pulumi.get(self, "hls_filter_in_bitrates")

    @property
    @pulumi.getter(name="hlsMode")
    def hls_mode(self) -> Optional[str]:
        return pulumi.get(self, "hls_mode")

    @property
    @pulumi.getter(name="hlsPreferredBitrate")
    def hls_preferred_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "hls_preferred_bitrate")

    @property
    @pulumi.getter(name="hlsQueryParamEnabled")
    def hls_query_param_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "hls_query_param_enabled")

    @property
    @pulumi.getter(name="hlsQueryParamSecretKey")
    def hls_query_param_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_secret_key")

    @property
    @pulumi.getter(name="hlsQueryParamTransitionKey")
    def hls_query_param_transition_key(self) -> Optional[str]:
        return pulumi.get(self, "hls_query_param_transition_key")

    @property
    @pulumi.getter(name="hlsShowAdvanced")
    def hls_show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "hls_show_advanced")

    @property
    @pulumi.getter(name="hlsTitle")
    def hls_title(self) -> Optional[str]:
        return pulumi.get(self, "hls_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManifestReroutingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 partner: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 username: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if partner is not None:
            pulumi.set(__self__, "partner", partner)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def partner(self) -> Optional[str]:
        return pulumi.get(self, "partner")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorManualServerPushResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 serverpushlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serverpushlists is not None:
            pulumi.set(__self__, "serverpushlists", serverpushlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serverpushlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "serverpushlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaAccelerationQuicOptoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 optout: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def optout(self) -> Optional[str]:
        return pulumi.get(self, "optout")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaClientResult(dict):
    def __init__(__self__, *,
                 beacon_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_hybrid_http_udp: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if beacon_id is not None:
            pulumi.set(__self__, "beacon_id", beacon_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_hybrid_http_udp is not None:
            pulumi.set(__self__, "use_hybrid_http_udp", use_hybrid_http_udp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconId")
    def beacon_id(self) -> Optional[str]:
        return pulumi.get(self, "beacon_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHybridHttpUdp")
    def use_hybrid_http_udp(self) -> Optional[bool]:
        return pulumi.get(self, "use_hybrid_http_udp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaFileRetrievalOptimizationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMediaOriginFailoverResult(dict):
    def __init__(__self__, *,
                 cache_error_response: Optional[bool] = None,
                 cache_window: Optional[str] = None,
                 client_response_code: Optional[str] = None,
                 detect_object_unavailable: Optional[bool] = None,
                 detect_object_unavailable_title: Optional[str] = None,
                 detect_origin_unavailable: Optional[bool] = None,
                 detect_origin_unavailable_title: Optional[str] = None,
                 detect_origin_unresponsive: Optional[bool] = None,
                 detect_origin_unresponsive_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 object_unavailable_alternate_host: Optional[str] = None,
                 object_unavailable_backup_host: Optional[str] = None,
                 object_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 object_unavailable_blacklist_window: Optional[str] = None,
                 object_unavailable_change_protocol: Optional[bool] = None,
                 object_unavailable_detection_level: Optional[str] = None,
                 object_unavailable_include_query_string: Optional[bool] = None,
                 object_unavailable_modified_path: Optional[str] = None,
                 object_unavailable_modify_request_path: Optional[bool] = None,
                 object_unavailable_protocol: Optional[str] = None,
                 object_unavailable_recovery: Optional[str] = None,
                 object_unavailable_redirect_method: Optional[int] = None,
                 object_unavailable_response_codes: Optional[Sequence[str]] = None,
                 object_unavailable_retry_limit: Optional[str] = None,
                 origin_unavailable_alternate_host: Optional[str] = None,
                 origin_unavailable_backup_host: Optional[str] = None,
                 origin_unavailable_blacklist_origin_ip: Optional[bool] = None,
                 origin_unavailable_blacklist_window: Optional[str] = None,
                 origin_unavailable_change_protocol: Optional[bool] = None,
                 origin_unavailable_detection_level: Optional[str] = None,
                 origin_unavailable_include_query_string: Optional[bool] = None,
                 origin_unavailable_modified_path: Optional[str] = None,
                 origin_unavailable_modify_request_path: Optional[bool] = None,
                 origin_unavailable_protocol: Optional[str] = None,
                 origin_unavailable_recovery: Optional[str] = None,
                 origin_unavailable_redirect_method: Optional[int] = None,
                 origin_unavailable_response_codes: Optional[Sequence[str]] = None,
                 origin_unavailable_retry_limit: Optional[str] = None,
                 origin_unresponsive_alternate_host: Optional[str] = None,
                 origin_unresponsive_backup_host: Optional[str] = None,
                 origin_unresponsive_blacklist_origin_ip: Optional[bool] = None,
                 origin_unresponsive_blacklist_window: Optional[str] = None,
                 origin_unresponsive_change_protocol: Optional[bool] = None,
                 origin_unresponsive_detection_level: Optional[str] = None,
                 origin_unresponsive_include_query_string: Optional[bool] = None,
                 origin_unresponsive_modified_path: Optional[str] = None,
                 origin_unresponsive_modify_request_path: Optional[bool] = None,
                 origin_unresponsive_protocol: Optional[str] = None,
                 origin_unresponsive_recovery: Optional[str] = None,
                 origin_unresponsive_redirect_method: Optional[int] = None,
                 origin_unresponsive_retry_limit: Optional[str] = None,
                 other_options: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cache_error_response is not None:
            pulumi.set(__self__, "cache_error_response", cache_error_response)
        if cache_window is not None:
            pulumi.set(__self__, "cache_window", cache_window)
        if client_response_code is not None:
            pulumi.set(__self__, "client_response_code", client_response_code)
        if detect_object_unavailable is not None:
            pulumi.set(__self__, "detect_object_unavailable", detect_object_unavailable)
        if detect_object_unavailable_title is not None:
            pulumi.set(__self__, "detect_object_unavailable_title", detect_object_unavailable_title)
        if detect_origin_unavailable is not None:
            pulumi.set(__self__, "detect_origin_unavailable", detect_origin_unavailable)
        if detect_origin_unavailable_title is not None:
            pulumi.set(__self__, "detect_origin_unavailable_title", detect_origin_unavailable_title)
        if detect_origin_unresponsive is not None:
            pulumi.set(__self__, "detect_origin_unresponsive", detect_origin_unresponsive)
        if detect_origin_unresponsive_title is not None:
            pulumi.set(__self__, "detect_origin_unresponsive_title", detect_origin_unresponsive_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if object_unavailable_alternate_host is not None:
            pulumi.set(__self__, "object_unavailable_alternate_host", object_unavailable_alternate_host)
        if object_unavailable_backup_host is not None:
            pulumi.set(__self__, "object_unavailable_backup_host", object_unavailable_backup_host)
        if object_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_origin_ip", object_unavailable_blacklist_origin_ip)
        if object_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "object_unavailable_blacklist_window", object_unavailable_blacklist_window)
        if object_unavailable_change_protocol is not None:
            pulumi.set(__self__, "object_unavailable_change_protocol", object_unavailable_change_protocol)
        if object_unavailable_detection_level is not None:
            pulumi.set(__self__, "object_unavailable_detection_level", object_unavailable_detection_level)
        if object_unavailable_include_query_string is not None:
            pulumi.set(__self__, "object_unavailable_include_query_string", object_unavailable_include_query_string)
        if object_unavailable_modified_path is not None:
            pulumi.set(__self__, "object_unavailable_modified_path", object_unavailable_modified_path)
        if object_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "object_unavailable_modify_request_path", object_unavailable_modify_request_path)
        if object_unavailable_protocol is not None:
            pulumi.set(__self__, "object_unavailable_protocol", object_unavailable_protocol)
        if object_unavailable_recovery is not None:
            pulumi.set(__self__, "object_unavailable_recovery", object_unavailable_recovery)
        if object_unavailable_redirect_method is not None:
            pulumi.set(__self__, "object_unavailable_redirect_method", object_unavailable_redirect_method)
        if object_unavailable_response_codes is not None:
            pulumi.set(__self__, "object_unavailable_response_codes", object_unavailable_response_codes)
        if object_unavailable_retry_limit is not None:
            pulumi.set(__self__, "object_unavailable_retry_limit", object_unavailable_retry_limit)
        if origin_unavailable_alternate_host is not None:
            pulumi.set(__self__, "origin_unavailable_alternate_host", origin_unavailable_alternate_host)
        if origin_unavailable_backup_host is not None:
            pulumi.set(__self__, "origin_unavailable_backup_host", origin_unavailable_backup_host)
        if origin_unavailable_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_origin_ip", origin_unavailable_blacklist_origin_ip)
        if origin_unavailable_blacklist_window is not None:
            pulumi.set(__self__, "origin_unavailable_blacklist_window", origin_unavailable_blacklist_window)
        if origin_unavailable_change_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_change_protocol", origin_unavailable_change_protocol)
        if origin_unavailable_detection_level is not None:
            pulumi.set(__self__, "origin_unavailable_detection_level", origin_unavailable_detection_level)
        if origin_unavailable_include_query_string is not None:
            pulumi.set(__self__, "origin_unavailable_include_query_string", origin_unavailable_include_query_string)
        if origin_unavailable_modified_path is not None:
            pulumi.set(__self__, "origin_unavailable_modified_path", origin_unavailable_modified_path)
        if origin_unavailable_modify_request_path is not None:
            pulumi.set(__self__, "origin_unavailable_modify_request_path", origin_unavailable_modify_request_path)
        if origin_unavailable_protocol is not None:
            pulumi.set(__self__, "origin_unavailable_protocol", origin_unavailable_protocol)
        if origin_unavailable_recovery is not None:
            pulumi.set(__self__, "origin_unavailable_recovery", origin_unavailable_recovery)
        if origin_unavailable_redirect_method is not None:
            pulumi.set(__self__, "origin_unavailable_redirect_method", origin_unavailable_redirect_method)
        if origin_unavailable_response_codes is not None:
            pulumi.set(__self__, "origin_unavailable_response_codes", origin_unavailable_response_codes)
        if origin_unavailable_retry_limit is not None:
            pulumi.set(__self__, "origin_unavailable_retry_limit", origin_unavailable_retry_limit)
        if origin_unresponsive_alternate_host is not None:
            pulumi.set(__self__, "origin_unresponsive_alternate_host", origin_unresponsive_alternate_host)
        if origin_unresponsive_backup_host is not None:
            pulumi.set(__self__, "origin_unresponsive_backup_host", origin_unresponsive_backup_host)
        if origin_unresponsive_blacklist_origin_ip is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_origin_ip", origin_unresponsive_blacklist_origin_ip)
        if origin_unresponsive_blacklist_window is not None:
            pulumi.set(__self__, "origin_unresponsive_blacklist_window", origin_unresponsive_blacklist_window)
        if origin_unresponsive_change_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_change_protocol", origin_unresponsive_change_protocol)
        if origin_unresponsive_detection_level is not None:
            pulumi.set(__self__, "origin_unresponsive_detection_level", origin_unresponsive_detection_level)
        if origin_unresponsive_include_query_string is not None:
            pulumi.set(__self__, "origin_unresponsive_include_query_string", origin_unresponsive_include_query_string)
        if origin_unresponsive_modified_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modified_path", origin_unresponsive_modified_path)
        if origin_unresponsive_modify_request_path is not None:
            pulumi.set(__self__, "origin_unresponsive_modify_request_path", origin_unresponsive_modify_request_path)
        if origin_unresponsive_protocol is not None:
            pulumi.set(__self__, "origin_unresponsive_protocol", origin_unresponsive_protocol)
        if origin_unresponsive_recovery is not None:
            pulumi.set(__self__, "origin_unresponsive_recovery", origin_unresponsive_recovery)
        if origin_unresponsive_redirect_method is not None:
            pulumi.set(__self__, "origin_unresponsive_redirect_method", origin_unresponsive_redirect_method)
        if origin_unresponsive_retry_limit is not None:
            pulumi.set(__self__, "origin_unresponsive_retry_limit", origin_unresponsive_retry_limit)
        if other_options is not None:
            pulumi.set(__self__, "other_options", other_options)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cacheErrorResponse")
    def cache_error_response(self) -> Optional[bool]:
        return pulumi.get(self, "cache_error_response")

    @property
    @pulumi.getter(name="cacheWindow")
    def cache_window(self) -> Optional[str]:
        return pulumi.get(self, "cache_window")

    @property
    @pulumi.getter(name="clientResponseCode")
    def client_response_code(self) -> Optional[str]:
        return pulumi.get(self, "client_response_code")

    @property
    @pulumi.getter(name="detectObjectUnavailable")
    def detect_object_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_object_unavailable")

    @property
    @pulumi.getter(name="detectObjectUnavailableTitle")
    def detect_object_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_object_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnavailable")
    def detect_origin_unavailable(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unavailable")

    @property
    @pulumi.getter(name="detectOriginUnavailableTitle")
    def detect_origin_unavailable_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unavailable_title")

    @property
    @pulumi.getter(name="detectOriginUnresponsive")
    def detect_origin_unresponsive(self) -> Optional[bool]:
        return pulumi.get(self, "detect_origin_unresponsive")

    @property
    @pulumi.getter(name="detectOriginUnresponsiveTitle")
    def detect_origin_unresponsive_title(self) -> Optional[str]:
        return pulumi.get(self, "detect_origin_unresponsive_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="objectUnavailableAlternateHost")
    def object_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_alternate_host")

    @property
    @pulumi.getter(name="objectUnavailableBackupHost")
    def object_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_backup_host")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistOriginIp")
    def object_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="objectUnavailableBlacklistWindow")
    def object_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="objectUnavailableChangeProtocol")
    def object_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_change_protocol")

    @property
    @pulumi.getter(name="objectUnavailableDetectionLevel")
    def object_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_detection_level")

    @property
    @pulumi.getter(name="objectUnavailableIncludeQueryString")
    def object_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_include_query_string")

    @property
    @pulumi.getter(name="objectUnavailableModifiedPath")
    def object_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_modified_path")

    @property
    @pulumi.getter(name="objectUnavailableModifyRequestPath")
    def object_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "object_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="objectUnavailableProtocol")
    def object_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_protocol")

    @property
    @pulumi.getter(name="objectUnavailableRecovery")
    def object_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_recovery")

    @property
    @pulumi.getter(name="objectUnavailableRedirectMethod")
    def object_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "object_unavailable_redirect_method")

    @property
    @pulumi.getter(name="objectUnavailableResponseCodes")
    def object_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_unavailable_response_codes")

    @property
    @pulumi.getter(name="objectUnavailableRetryLimit")
    def object_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "object_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnavailableAlternateHost")
    def origin_unavailable_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_alternate_host")

    @property
    @pulumi.getter(name="originUnavailableBackupHost")
    def origin_unavailable_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_backup_host")

    @property
    @pulumi.getter(name="originUnavailableBlacklistOriginIp")
    def origin_unavailable_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnavailableBlacklistWindow")
    def origin_unavailable_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_blacklist_window")

    @property
    @pulumi.getter(name="originUnavailableChangeProtocol")
    def origin_unavailable_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_change_protocol")

    @property
    @pulumi.getter(name="originUnavailableDetectionLevel")
    def origin_unavailable_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_detection_level")

    @property
    @pulumi.getter(name="originUnavailableIncludeQueryString")
    def origin_unavailable_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_include_query_string")

    @property
    @pulumi.getter(name="originUnavailableModifiedPath")
    def origin_unavailable_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_modified_path")

    @property
    @pulumi.getter(name="originUnavailableModifyRequestPath")
    def origin_unavailable_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unavailable_modify_request_path")

    @property
    @pulumi.getter(name="originUnavailableProtocol")
    def origin_unavailable_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_protocol")

    @property
    @pulumi.getter(name="originUnavailableRecovery")
    def origin_unavailable_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_recovery")

    @property
    @pulumi.getter(name="originUnavailableRedirectMethod")
    def origin_unavailable_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unavailable_redirect_method")

    @property
    @pulumi.getter(name="originUnavailableResponseCodes")
    def origin_unavailable_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origin_unavailable_response_codes")

    @property
    @pulumi.getter(name="originUnavailableRetryLimit")
    def origin_unavailable_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unavailable_retry_limit")

    @property
    @pulumi.getter(name="originUnresponsiveAlternateHost")
    def origin_unresponsive_alternate_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_alternate_host")

    @property
    @pulumi.getter(name="originUnresponsiveBackupHost")
    def origin_unresponsive_backup_host(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_backup_host")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistOriginIp")
    def origin_unresponsive_blacklist_origin_ip(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_blacklist_origin_ip")

    @property
    @pulumi.getter(name="originUnresponsiveBlacklistWindow")
    def origin_unresponsive_blacklist_window(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_blacklist_window")

    @property
    @pulumi.getter(name="originUnresponsiveChangeProtocol")
    def origin_unresponsive_change_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_change_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveDetectionLevel")
    def origin_unresponsive_detection_level(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_detection_level")

    @property
    @pulumi.getter(name="originUnresponsiveIncludeQueryString")
    def origin_unresponsive_include_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_include_query_string")

    @property
    @pulumi.getter(name="originUnresponsiveModifiedPath")
    def origin_unresponsive_modified_path(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_modified_path")

    @property
    @pulumi.getter(name="originUnresponsiveModifyRequestPath")
    def origin_unresponsive_modify_request_path(self) -> Optional[bool]:
        return pulumi.get(self, "origin_unresponsive_modify_request_path")

    @property
    @pulumi.getter(name="originUnresponsiveProtocol")
    def origin_unresponsive_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_protocol")

    @property
    @pulumi.getter(name="originUnresponsiveRecovery")
    def origin_unresponsive_recovery(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_recovery")

    @property
    @pulumi.getter(name="originUnresponsiveRedirectMethod")
    def origin_unresponsive_redirect_method(self) -> Optional[int]:
        return pulumi.get(self, "origin_unresponsive_redirect_method")

    @property
    @pulumi.getter(name="originUnresponsiveRetryLimit")
    def origin_unresponsive_retry_limit(self) -> Optional[str]:
        return pulumi.get(self, "origin_unresponsive_retry_limit")

    @property
    @pulumi.getter(name="otherOptions")
    def other_options(self) -> Optional[str]:
        return pulumi.get(self, "other_options")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMetadataCachingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorMobileSdkPerformanceResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 secondary_multipath_to_origin: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if secondary_multipath_to_origin is not None:
            pulumi.set(__self__, "secondary_multipath_to_origin", secondary_multipath_to_origin)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="secondaryMultipathToOrigin")
    def secondary_multipath_to_origin(self) -> Optional[bool]:
        return pulumi.get(self, "secondary_multipath_to_origin")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyIncomingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 standard_pass_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if standard_pass_header_name is not None:
            pulumi.set(__self__, "standard_pass_header_name", standard_pass_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="standardPassHeaderName")
    def standard_pass_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_pass_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingRequestHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyOutgoingResponseHeaderResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 avoid_duplicate_headers: Optional[bool] = None,
                 custom_header_name: Optional[str] = None,
                 header_value: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_multiple: Optional[bool] = None,
                 new_header_value: Optional[str] = None,
                 regex_header_match: Optional[str] = None,
                 regex_header_replace: Optional[str] = None,
                 standard_add_header_name: Optional[str] = None,
                 standard_delete_header_name: Optional[str] = None,
                 standard_modify_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if avoid_duplicate_headers is not None:
            pulumi.set(__self__, "avoid_duplicate_headers", avoid_duplicate_headers)
        if custom_header_name is not None:
            pulumi.set(__self__, "custom_header_name", custom_header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if new_header_value is not None:
            pulumi.set(__self__, "new_header_value", new_header_value)
        if regex_header_match is not None:
            pulumi.set(__self__, "regex_header_match", regex_header_match)
        if regex_header_replace is not None:
            pulumi.set(__self__, "regex_header_replace", regex_header_replace)
        if standard_add_header_name is not None:
            pulumi.set(__self__, "standard_add_header_name", standard_add_header_name)
        if standard_delete_header_name is not None:
            pulumi.set(__self__, "standard_delete_header_name", standard_delete_header_name)
        if standard_modify_header_name is not None:
            pulumi.set(__self__, "standard_modify_header_name", standard_modify_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="avoidDuplicateHeaders")
    def avoid_duplicate_headers(self) -> Optional[bool]:
        return pulumi.get(self, "avoid_duplicate_headers")

    @property
    @pulumi.getter(name="customHeaderName")
    def custom_header_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_header_name")

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[str]:
        return pulumi.get(self, "header_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="newHeaderValue")
    def new_header_value(self) -> Optional[str]:
        return pulumi.get(self, "new_header_value")

    @property
    @pulumi.getter(name="regexHeaderMatch")
    def regex_header_match(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_match")

    @property
    @pulumi.getter(name="regexHeaderReplace")
    def regex_header_replace(self) -> Optional[str]:
        return pulumi.get(self, "regex_header_replace")

    @property
    @pulumi.getter(name="standardAddHeaderName")
    def standard_add_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_add_header_name")

    @property
    @pulumi.getter(name="standardDeleteHeaderName")
    def standard_delete_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_delete_header_name")

    @property
    @pulumi.getter(name="standardModifyHeaderName")
    def standard_modify_header_name(self) -> Optional[str]:
        return pulumi.get(self, "standard_modify_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorModifyViaHeaderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modification_option: Optional[str] = None,
                 rename_header_to: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modification_option is not None:
            pulumi.set(__self__, "modification_option", modification_option)
        if rename_header_to is not None:
            pulumi.set(__self__, "rename_header_to", rename_header_to)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modificationOption")
    def modification_option(self) -> Optional[str]:
        return pulumi.get(self, "modification_option")

    @property
    @pulumi.getter(name="renameHeaderTo")
    def rename_header_to(self) -> Optional[str]:
        return pulumi.get(self, "rename_header_to")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginResult(dict):
    def __init__(__self__, *,
                 cache_key_hostname: Optional[str] = None,
                 compress: Optional[bool] = None,
                 custom_certificate_authorities: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult']] = None,
                 custom_certificates: Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult']] = None,
                 custom_forward_host_header: Optional[str] = None,
                 custom_valid_cn_values: Optional[Sequence[str]] = None,
                 enable_true_client_ip: Optional[bool] = None,
                 forward_host_header: Optional[str] = None,
                 hostname: Optional[str] = None,
                 http_port: Optional[int] = None,
                 https_port: Optional[int] = None,
                 ip_version: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mslorigin: Optional[str] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult'] = None,
                 origin_certificate: Optional[str] = None,
                 origin_certs_to_honor: Optional[str] = None,
                 origin_id: Optional[str] = None,
                 origin_sni: Optional[bool] = None,
                 origin_type: Optional[str] = None,
                 ports: Optional[str] = None,
                 saas_cname_enabled: Optional[bool] = None,
                 saas_cname_level: Optional[int] = None,
                 saas_cookie: Optional[str] = None,
                 saas_query_string: Optional[str] = None,
                 saas_regex: Optional[str] = None,
                 saas_replace: Optional[str] = None,
                 saas_suffix: Optional[str] = None,
                 saas_type: Optional[str] = None,
                 second_hostname: Optional[str] = None,
                 second_hostname_enabled: Optional[bool] = None,
                 standard_certificate_authorities: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 true_client_ip_client_setting: Optional[bool] = None,
                 true_client_ip_header: Optional[str] = None,
                 use_unique_cache_key: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_mode: Optional[str] = None):
        if cache_key_hostname is not None:
            pulumi.set(__self__, "cache_key_hostname", cache_key_hostname)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if custom_certificate_authorities is not None:
            pulumi.set(__self__, "custom_certificate_authorities", custom_certificate_authorities)
        if custom_certificates is not None:
            pulumi.set(__self__, "custom_certificates", custom_certificates)
        if custom_forward_host_header is not None:
            pulumi.set(__self__, "custom_forward_host_header", custom_forward_host_header)
        if custom_valid_cn_values is not None:
            pulumi.set(__self__, "custom_valid_cn_values", custom_valid_cn_values)
        if enable_true_client_ip is not None:
            pulumi.set(__self__, "enable_true_client_ip", enable_true_client_ip)
        if forward_host_header is not None:
            pulumi.set(__self__, "forward_host_header", forward_host_header)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslorigin is not None:
            pulumi.set(__self__, "mslorigin", mslorigin)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if origin_certificate is not None:
            pulumi.set(__self__, "origin_certificate", origin_certificate)
        if origin_certs_to_honor is not None:
            pulumi.set(__self__, "origin_certs_to_honor", origin_certs_to_honor)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if origin_sni is not None:
            pulumi.set(__self__, "origin_sni", origin_sni)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if saas_cname_enabled is not None:
            pulumi.set(__self__, "saas_cname_enabled", saas_cname_enabled)
        if saas_cname_level is not None:
            pulumi.set(__self__, "saas_cname_level", saas_cname_level)
        if saas_cookie is not None:
            pulumi.set(__self__, "saas_cookie", saas_cookie)
        if saas_query_string is not None:
            pulumi.set(__self__, "saas_query_string", saas_query_string)
        if saas_regex is not None:
            pulumi.set(__self__, "saas_regex", saas_regex)
        if saas_replace is not None:
            pulumi.set(__self__, "saas_replace", saas_replace)
        if saas_suffix is not None:
            pulumi.set(__self__, "saas_suffix", saas_suffix)
        if saas_type is not None:
            pulumi.set(__self__, "saas_type", saas_type)
        if second_hostname is not None:
            pulumi.set(__self__, "second_hostname", second_hostname)
        if second_hostname_enabled is not None:
            pulumi.set(__self__, "second_hostname_enabled", second_hostname_enabled)
        if standard_certificate_authorities is not None:
            pulumi.set(__self__, "standard_certificate_authorities", standard_certificate_authorities)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if true_client_ip_client_setting is not None:
            pulumi.set(__self__, "true_client_ip_client_setting", true_client_ip_client_setting)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if use_unique_cache_key is not None:
            pulumi.set(__self__, "use_unique_cache_key", use_unique_cache_key)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_mode is not None:
            pulumi.set(__self__, "verification_mode", verification_mode)

    @property
    @pulumi.getter(name="cacheKeyHostname")
    def cache_key_hostname(self) -> Optional[str]:
        return pulumi.get(self, "cache_key_hostname")

    @property
    @pulumi.getter
    def compress(self) -> Optional[bool]:
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="customCertificateAuthorities")
    def custom_certificate_authorities(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult']]:
        return pulumi.get(self, "custom_certificate_authorities")

    @property
    @pulumi.getter(name="customCertificates")
    def custom_certificates(self) -> Optional[Sequence['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult']]:
        return pulumi.get(self, "custom_certificates")

    @property
    @pulumi.getter(name="customForwardHostHeader")
    def custom_forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "custom_forward_host_header")

    @property
    @pulumi.getter(name="customValidCnValues")
    def custom_valid_cn_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_valid_cn_values")

    @property
    @pulumi.getter(name="enableTrueClientIp")
    def enable_true_client_ip(self) -> Optional[bool]:
        return pulumi.get(self, "enable_true_client_ip")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[str]:
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslorigin(self) -> Optional[str]:
        return pulumi.get(self, "mslorigin")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="originCertificate")
    def origin_certificate(self) -> Optional[str]:
        return pulumi.get(self, "origin_certificate")

    @property
    @pulumi.getter(name="originCertsToHonor")
    def origin_certs_to_honor(self) -> Optional[str]:
        return pulumi.get(self, "origin_certs_to_honor")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="originSni")
    def origin_sni(self) -> Optional[bool]:
        return pulumi.get(self, "origin_sni")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="saasCnameEnabled")
    def saas_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "saas_cname_enabled")

    @property
    @pulumi.getter(name="saasCnameLevel")
    def saas_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "saas_cname_level")

    @property
    @pulumi.getter(name="saasCookie")
    def saas_cookie(self) -> Optional[str]:
        return pulumi.get(self, "saas_cookie")

    @property
    @pulumi.getter(name="saasQueryString")
    def saas_query_string(self) -> Optional[str]:
        return pulumi.get(self, "saas_query_string")

    @property
    @pulumi.getter(name="saasRegex")
    def saas_regex(self) -> Optional[str]:
        return pulumi.get(self, "saas_regex")

    @property
    @pulumi.getter(name="saasReplace")
    def saas_replace(self) -> Optional[str]:
        return pulumi.get(self, "saas_replace")

    @property
    @pulumi.getter(name="saasSuffix")
    def saas_suffix(self) -> Optional[str]:
        return pulumi.get(self, "saas_suffix")

    @property
    @pulumi.getter(name="saasType")
    def saas_type(self) -> Optional[str]:
        return pulumi.get(self, "saas_type")

    @property
    @pulumi.getter(name="secondHostname")
    def second_hostname(self) -> Optional[str]:
        return pulumi.get(self, "second_hostname")

    @property
    @pulumi.getter(name="secondHostnameEnabled")
    def second_hostname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "second_hostname_enabled")

    @property
    @pulumi.getter(name="standardCertificateAuthorities")
    def standard_certificate_authorities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "standard_certificate_authorities")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="trueClientIpClientSetting")
    def true_client_ip_client_setting(self) -> Optional[bool]:
        return pulumi.get(self, "true_client_ip_client_setting")

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[str]:
        return pulumi.get(self, "true_client_ip_header")

    @property
    @pulumi.getter(name="useUniqueCacheKey")
    def use_unique_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "use_unique_cache_key")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationMode")
    def verification_mode(self) -> Optional[str]:
        return pulumi.get(self, "verification_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsResult(dict):
    def __init__(__self__, *,
                 access_key_encrypted_storage: Optional[bool] = None,
                 adc_title: Optional[str] = None,
                 authentication_method: Optional[str] = None,
                 authentication_method_title: Optional[str] = None,
                 aws_access_key_id: Optional[str] = None,
                 aws_access_key_version_guid: Optional[str] = None,
                 aws_ar_region: Optional[str] = None,
                 aws_host: Optional[str] = None,
                 aws_region: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_service: Optional[str] = None,
                 country: Optional[str] = None,
                 custom_sign_strings: Optional[Sequence[str]] = None,
                 direct_connect_geo: Optional[str] = None,
                 encoding_version: Optional[int] = None,
                 end_point_service: Optional[str] = None,
                 gcs_access_key_version_guid: Optional[str] = None,
                 gcs_hmac_key_access_id: Optional[str] = None,
                 gcs_hmac_key_secret: Optional[str] = None,
                 hostname_tag: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 mslkey: Optional[str] = None,
                 mslname: Optional[str] = None,
                 nonce: Optional[str] = None,
                 origin_location_title: Optional[str] = None,
                 property_id_tag: Optional[bool] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_custom_sign_string: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if access_key_encrypted_storage is not None:
            pulumi.set(__self__, "access_key_encrypted_storage", access_key_encrypted_storage)
        if adc_title is not None:
            pulumi.set(__self__, "adc_title", adc_title)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if authentication_method_title is not None:
            pulumi.set(__self__, "authentication_method_title", authentication_method_title)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_access_key_version_guid is not None:
            pulumi.set(__self__, "aws_access_key_version_guid", aws_access_key_version_guid)
        if aws_ar_region is not None:
            pulumi.set(__self__, "aws_ar_region", aws_ar_region)
        if aws_host is not None:
            pulumi.set(__self__, "aws_host", aws_host)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if aws_service is not None:
            pulumi.set(__self__, "aws_service", aws_service)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if custom_sign_strings is not None:
            pulumi.set(__self__, "custom_sign_strings", custom_sign_strings)
        if direct_connect_geo is not None:
            pulumi.set(__self__, "direct_connect_geo", direct_connect_geo)
        if encoding_version is not None:
            pulumi.set(__self__, "encoding_version", encoding_version)
        if end_point_service is not None:
            pulumi.set(__self__, "end_point_service", end_point_service)
        if gcs_access_key_version_guid is not None:
            pulumi.set(__self__, "gcs_access_key_version_guid", gcs_access_key_version_guid)
        if gcs_hmac_key_access_id is not None:
            pulumi.set(__self__, "gcs_hmac_key_access_id", gcs_hmac_key_access_id)
        if gcs_hmac_key_secret is not None:
            pulumi.set(__self__, "gcs_hmac_key_secret", gcs_hmac_key_secret)
        if hostname_tag is not None:
            pulumi.set(__self__, "hostname_tag", hostname_tag)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mslkey is not None:
            pulumi.set(__self__, "mslkey", mslkey)
        if mslname is not None:
            pulumi.set(__self__, "mslname", mslname)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if origin_location_title is not None:
            pulumi.set(__self__, "origin_location_title", origin_location_title)
        if property_id_tag is not None:
            pulumi.set(__self__, "property_id_tag", property_id_tag)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_custom_sign_string is not None:
            pulumi.set(__self__, "use_custom_sign_string", use_custom_sign_string)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessKeyEncryptedStorage")
    def access_key_encrypted_storage(self) -> Optional[bool]:
        return pulumi.get(self, "access_key_encrypted_storage")

    @property
    @pulumi.getter(name="adcTitle")
    def adc_title(self) -> Optional[str]:
        return pulumi.get(self, "adc_title")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="authenticationMethodTitle")
    def authentication_method_title(self) -> Optional[str]:
        return pulumi.get(self, "authentication_method_title")

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsAccessKeyVersionGuid")
    def aws_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "aws_access_key_version_guid")

    @property
    @pulumi.getter(name="awsArRegion")
    def aws_ar_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_ar_region")

    @property
    @pulumi.getter(name="awsHost")
    def aws_host(self) -> Optional[str]:
        return pulumi.get(self, "aws_host")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[str]:
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="awsService")
    def aws_service(self) -> Optional[str]:
        return pulumi.get(self, "aws_service")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customSignStrings")
    def custom_sign_strings(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_sign_strings")

    @property
    @pulumi.getter(name="directConnectGeo")
    def direct_connect_geo(self) -> Optional[str]:
        return pulumi.get(self, "direct_connect_geo")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> Optional[int]:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter(name="endPointService")
    def end_point_service(self) -> Optional[str]:
        return pulumi.get(self, "end_point_service")

    @property
    @pulumi.getter(name="gcsAccessKeyVersionGuid")
    def gcs_access_key_version_guid(self) -> Optional[str]:
        return pulumi.get(self, "gcs_access_key_version_guid")

    @property
    @pulumi.getter(name="gcsHmacKeyAccessId")
    def gcs_hmac_key_access_id(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_access_id")

    @property
    @pulumi.getter(name="gcsHmacKeySecret")
    def gcs_hmac_key_secret(self) -> Optional[str]:
        return pulumi.get(self, "gcs_hmac_key_secret")

    @property
    @pulumi.getter(name="hostnameTag")
    def hostname_tag(self) -> Optional[bool]:
        return pulumi.get(self, "hostname_tag")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mslkey(self) -> Optional[str]:
        return pulumi.get(self, "mslkey")

    @property
    @pulumi.getter
    def mslname(self) -> Optional[str]:
        return pulumi.get(self, "mslname")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="originLocationTitle")
    def origin_location_title(self) -> Optional[str]:
        return pulumi.get(self, "origin_location_title")

    @property
    @pulumi.getter(name="propertyIdTag")
    def property_id_tag(self) -> Optional[bool]:
        return pulumi.get(self, "property_id_tag")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useCustomSignString")
    def use_custom_sign_string(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_sign_string")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCharacteristicsWsdResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origintype: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origintype is not None:
            pulumi.set(__self__, "origintype", origintype)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def origintype(self) -> Optional[str]:
        return pulumi.get(self, "origintype")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        if can_be_ca is not None:
            pulumi.set(__self__, "can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            pulumi.set(__self__, "can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            pulumi.set(__self__, "issuer_rdns", issuer_rdns)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if public_key_algorithm is not None:
            pulumi.set(__self__, "public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            pulumi.set(__self__, "public_key_format", public_key_format)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            pulumi.set(__self__, "sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            pulumi.set(__self__, "subject_cn", subject_cn)
        if subject_rdns is not None:
            pulumi.set(__self__, "subject_rdns", subject_rdns)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityResult(dict):
    def __init__(__self__, *,
                 can_be_ca: Optional[bool] = None,
                 can_be_leaf: Optional[bool] = None,
                 issuer_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult'] = None,
                 not_after: Optional[int] = None,
                 not_before: Optional[int] = None,
                 pem_encoded_cert: Optional[str] = None,
                 public_key: Optional[str] = None,
                 public_key_algorithm: Optional[str] = None,
                 public_key_format: Optional[str] = None,
                 self_signed: Optional[bool] = None,
                 serial_number: Optional[str] = None,
                 sha1_fingerprint: Optional[str] = None,
                 sig_alg_name: Optional[str] = None,
                 subject_alternative_names: Optional[Sequence[str]] = None,
                 subject_cn: Optional[str] = None,
                 subject_rdns: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult'] = None,
                 version: Optional[int] = None):
        if can_be_ca is not None:
            pulumi.set(__self__, "can_be_ca", can_be_ca)
        if can_be_leaf is not None:
            pulumi.set(__self__, "can_be_leaf", can_be_leaf)
        if issuer_rdns is not None:
            pulumi.set(__self__, "issuer_rdns", issuer_rdns)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if pem_encoded_cert is not None:
            pulumi.set(__self__, "pem_encoded_cert", pem_encoded_cert)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if public_key_algorithm is not None:
            pulumi.set(__self__, "public_key_algorithm", public_key_algorithm)
        if public_key_format is not None:
            pulumi.set(__self__, "public_key_format", public_key_format)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sha1_fingerprint is not None:
            pulumi.set(__self__, "sha1_fingerprint", sha1_fingerprint)
        if sig_alg_name is not None:
            pulumi.set(__self__, "sig_alg_name", sig_alg_name)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if subject_cn is not None:
            pulumi.set(__self__, "subject_cn", subject_cn)
        if subject_rdns is not None:
            pulumi.set(__self__, "subject_rdns", subject_rdns)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="canBeCa")
    def can_be_ca(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_ca")

    @property
    @pulumi.getter(name="canBeLeaf")
    def can_be_leaf(self) -> Optional[bool]:
        return pulumi.get(self, "can_be_leaf")

    @property
    @pulumi.getter(name="issuerRdns")
    def issuer_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult']:
        return pulumi.get(self, "issuer_rdns")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[int]:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[int]:
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="pemEncodedCert")
    def pem_encoded_cert(self) -> Optional[str]:
        return pulumi.get(self, "pem_encoded_cert")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyAlgorithm")
    def public_key_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "public_key_algorithm")

    @property
    @pulumi.getter(name="publicKeyFormat")
    def public_key_format(self) -> Optional[str]:
        return pulumi.get(self, "public_key_format")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[bool]:
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha1Fingerprint")
    def sha1_fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "sha1_fingerprint")

    @property
    @pulumi.getter(name="sigAlgName")
    def sig_alg_name(self) -> Optional[str]:
        return pulumi.get(self, "sig_alg_name")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="subjectCn")
    def subject_cn(self) -> Optional[str]:
        return pulumi.get(self, "subject_cn")

    @property
    @pulumi.getter(name="subjectRdns")
    def subject_rdns(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult']:
        return pulumi.get(self, "subject_rdns")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthorityIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateAuthoritySubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateIssuerRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginCustomCertificateSubjectRdnsResult(dict):
    def __init__(__self__, *,
                 c: Optional[str] = None,
                 cn: Optional[str] = None,
                 o: Optional[str] = None,
                 ou: Optional[str] = None):
        if c is not None:
            pulumi.set(__self__, "c", c)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if o is not None:
            pulumi.set(__self__, "o", o)
        if ou is not None:
            pulumi.set(__self__, "ou", ou)

    @property
    @pulumi.getter
    def c(self) -> Optional[str]:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def cn(self) -> Optional[str]:
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter
    def o(self) -> Optional[str]:
        return pulumi.get(self, "o")

    @property
    @pulumi.getter
    def ou(self) -> Optional[str]:
        return pulumi.get(self, "ou")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryMethodResult(dict):
    def __init__(__self__, *,
                 custom_status_code: Optional[str] = None,
                 locked: Optional[bool] = None,
                 recovery_method: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if custom_status_code is not None:
            pulumi.set(__self__, "custom_status_code", custom_status_code)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if recovery_method is not None:
            pulumi.set(__self__, "recovery_method", recovery_method)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="customStatusCode")
    def custom_status_code(self) -> Optional[str]:
        return pulumi.get(self, "custom_status_code")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="recoveryMethod")
    def recovery_method(self) -> Optional[str]:
        return pulumi.get(self, "recovery_method")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginFailureRecoveryPolicyResult(dict):
    def __init__(__self__, *,
                 binary_equivalent_content: Optional[bool] = None,
                 enable_ip_avoidance: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 ip_avoidance_error_threshold: Optional[int] = None,
                 ip_avoidance_retry_interval: Optional[int] = None,
                 locked: Optional[bool] = None,
                 monitor_origin_responsiveness: Optional[bool] = None,
                 monitor_response_codes1s: Optional[Sequence[str]] = None,
                 monitor_response_codes2s: Optional[Sequence[str]] = None,
                 monitor_response_codes3s: Optional[Sequence[str]] = None,
                 monitor_status_codes1: Optional[bool] = None,
                 monitor_status_codes1_enable_recovery: Optional[bool] = None,
                 monitor_status_codes1_enable_retry: Optional[bool] = None,
                 monitor_status_codes1_recovery_config_name: Optional[str] = None,
                 monitor_status_codes2: Optional[bool] = None,
                 monitor_status_codes2_enable_recovery: Optional[bool] = None,
                 monitor_status_codes2_enable_retry: Optional[bool] = None,
                 monitor_status_codes2_recovery_config_name: Optional[str] = None,
                 monitor_status_codes3: Optional[bool] = None,
                 monitor_status_codes3_enable_recovery: Optional[bool] = None,
                 monitor_status_codes3_enable_retry: Optional[bool] = None,
                 monitor_status_codes3_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_custom_timeout: Optional[int] = None,
                 origin_responsiveness_enable_recovery: Optional[bool] = None,
                 origin_responsiveness_enable_retry: Optional[bool] = None,
                 origin_responsiveness_monitoring: Optional[str] = None,
                 origin_responsiveness_recovery_config_name: Optional[str] = None,
                 origin_responsiveness_timeout: Optional[str] = None,
                 status_code_monitoring1: Optional[str] = None,
                 status_code_monitoring2: Optional[str] = None,
                 status_code_monitoring3: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tuning_parameters: Optional[str] = None,
                 uuid: Optional[str] = None):
        if binary_equivalent_content is not None:
            pulumi.set(__self__, "binary_equivalent_content", binary_equivalent_content)
        if enable_ip_avoidance is not None:
            pulumi.set(__self__, "enable_ip_avoidance", enable_ip_avoidance)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ip_avoidance_error_threshold is not None:
            pulumi.set(__self__, "ip_avoidance_error_threshold", ip_avoidance_error_threshold)
        if ip_avoidance_retry_interval is not None:
            pulumi.set(__self__, "ip_avoidance_retry_interval", ip_avoidance_retry_interval)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if monitor_origin_responsiveness is not None:
            pulumi.set(__self__, "monitor_origin_responsiveness", monitor_origin_responsiveness)
        if monitor_response_codes1s is not None:
            pulumi.set(__self__, "monitor_response_codes1s", monitor_response_codes1s)
        if monitor_response_codes2s is not None:
            pulumi.set(__self__, "monitor_response_codes2s", monitor_response_codes2s)
        if monitor_response_codes3s is not None:
            pulumi.set(__self__, "monitor_response_codes3s", monitor_response_codes3s)
        if monitor_status_codes1 is not None:
            pulumi.set(__self__, "monitor_status_codes1", monitor_status_codes1)
        if monitor_status_codes1_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_recovery", monitor_status_codes1_enable_recovery)
        if monitor_status_codes1_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes1_enable_retry", monitor_status_codes1_enable_retry)
        if monitor_status_codes1_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes1_recovery_config_name", monitor_status_codes1_recovery_config_name)
        if monitor_status_codes2 is not None:
            pulumi.set(__self__, "monitor_status_codes2", monitor_status_codes2)
        if monitor_status_codes2_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_recovery", monitor_status_codes2_enable_recovery)
        if monitor_status_codes2_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes2_enable_retry", monitor_status_codes2_enable_retry)
        if monitor_status_codes2_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes2_recovery_config_name", monitor_status_codes2_recovery_config_name)
        if monitor_status_codes3 is not None:
            pulumi.set(__self__, "monitor_status_codes3", monitor_status_codes3)
        if monitor_status_codes3_enable_recovery is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_recovery", monitor_status_codes3_enable_recovery)
        if monitor_status_codes3_enable_retry is not None:
            pulumi.set(__self__, "monitor_status_codes3_enable_retry", monitor_status_codes3_enable_retry)
        if monitor_status_codes3_recovery_config_name is not None:
            pulumi.set(__self__, "monitor_status_codes3_recovery_config_name", monitor_status_codes3_recovery_config_name)
        if origin_responsiveness_custom_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_custom_timeout", origin_responsiveness_custom_timeout)
        if origin_responsiveness_enable_recovery is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_recovery", origin_responsiveness_enable_recovery)
        if origin_responsiveness_enable_retry is not None:
            pulumi.set(__self__, "origin_responsiveness_enable_retry", origin_responsiveness_enable_retry)
        if origin_responsiveness_monitoring is not None:
            pulumi.set(__self__, "origin_responsiveness_monitoring", origin_responsiveness_monitoring)
        if origin_responsiveness_recovery_config_name is not None:
            pulumi.set(__self__, "origin_responsiveness_recovery_config_name", origin_responsiveness_recovery_config_name)
        if origin_responsiveness_timeout is not None:
            pulumi.set(__self__, "origin_responsiveness_timeout", origin_responsiveness_timeout)
        if status_code_monitoring1 is not None:
            pulumi.set(__self__, "status_code_monitoring1", status_code_monitoring1)
        if status_code_monitoring2 is not None:
            pulumi.set(__self__, "status_code_monitoring2", status_code_monitoring2)
        if status_code_monitoring3 is not None:
            pulumi.set(__self__, "status_code_monitoring3", status_code_monitoring3)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tuning_parameters is not None:
            pulumi.set(__self__, "tuning_parameters", tuning_parameters)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="binaryEquivalentContent")
    def binary_equivalent_content(self) -> Optional[bool]:
        return pulumi.get(self, "binary_equivalent_content")

    @property
    @pulumi.getter(name="enableIpAvoidance")
    def enable_ip_avoidance(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ip_avoidance")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipAvoidanceErrorThreshold")
    def ip_avoidance_error_threshold(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_error_threshold")

    @property
    @pulumi.getter(name="ipAvoidanceRetryInterval")
    def ip_avoidance_retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "ip_avoidance_retry_interval")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="monitorOriginResponsiveness")
    def monitor_origin_responsiveness(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_origin_responsiveness")

    @property
    @pulumi.getter(name="monitorResponseCodes1s")
    def monitor_response_codes1s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes1s")

    @property
    @pulumi.getter(name="monitorResponseCodes2s")
    def monitor_response_codes2s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes2s")

    @property
    @pulumi.getter(name="monitorResponseCodes3s")
    def monitor_response_codes3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_response_codes3s")

    @property
    @pulumi.getter(name="monitorStatusCodes1")
    def monitor_status_codes1(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRecovery")
    def monitor_status_codes1_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes1EnableRetry")
    def monitor_status_codes1_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes1_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes1RecoveryConfigName")
    def monitor_status_codes1_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes1_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes2")
    def monitor_status_codes2(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRecovery")
    def monitor_status_codes2_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes2EnableRetry")
    def monitor_status_codes2_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes2_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes2RecoveryConfigName")
    def monitor_status_codes2_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes2_recovery_config_name")

    @property
    @pulumi.getter(name="monitorStatusCodes3")
    def monitor_status_codes3(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRecovery")
    def monitor_status_codes3_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_recovery")

    @property
    @pulumi.getter(name="monitorStatusCodes3EnableRetry")
    def monitor_status_codes3_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "monitor_status_codes3_enable_retry")

    @property
    @pulumi.getter(name="monitorStatusCodes3RecoveryConfigName")
    def monitor_status_codes3_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "monitor_status_codes3_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessCustomTimeout")
    def origin_responsiveness_custom_timeout(self) -> Optional[int]:
        return pulumi.get(self, "origin_responsiveness_custom_timeout")

    @property
    @pulumi.getter(name="originResponsivenessEnableRecovery")
    def origin_responsiveness_enable_recovery(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_recovery")

    @property
    @pulumi.getter(name="originResponsivenessEnableRetry")
    def origin_responsiveness_enable_retry(self) -> Optional[bool]:
        return pulumi.get(self, "origin_responsiveness_enable_retry")

    @property
    @pulumi.getter(name="originResponsivenessMonitoring")
    def origin_responsiveness_monitoring(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_monitoring")

    @property
    @pulumi.getter(name="originResponsivenessRecoveryConfigName")
    def origin_responsiveness_recovery_config_name(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_recovery_config_name")

    @property
    @pulumi.getter(name="originResponsivenessTimeout")
    def origin_responsiveness_timeout(self) -> Optional[str]:
        return pulumi.get(self, "origin_responsiveness_timeout")

    @property
    @pulumi.getter(name="statusCodeMonitoring1")
    def status_code_monitoring1(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring1")

    @property
    @pulumi.getter(name="statusCodeMonitoring2")
    def status_code_monitoring2(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring2")

    @property
    @pulumi.getter(name="statusCodeMonitoring3")
    def status_code_monitoring3(self) -> Optional[str]:
        return pulumi.get(self, "status_code_monitoring3")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tuningParameters")
    def tuning_parameters(self) -> Optional[str]:
        return pulumi.get(self, "tuning_parameters")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginIpAclResult(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorOriginNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentClientConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersistentConnectionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPersonallyIdentifiableInformationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseResult(dict):
    def __init__(__self__, *,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 failover_duration: Optional[int] = None,
                 failover_enabled: Optional[bool] = None,
                 failover_response_codes: Optional[Sequence[str]] = None,
                 failover_title: Optional[str] = None,
                 is_shared_policy: Optional[bool] = None,
                 label: Optional[str] = None,
                 locked: Optional[bool] = None,
                 population_cookie_type: Optional[str] = None,
                 population_duration: Optional[str] = None,
                 population_expiration_date: Optional[str] = None,
                 population_refresh: Optional[bool] = None,
                 population_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failover_duration is not None:
            pulumi.set(__self__, "failover_duration", failover_duration)
        if failover_enabled is not None:
            pulumi.set(__self__, "failover_enabled", failover_enabled)
        if failover_response_codes is not None:
            pulumi.set(__self__, "failover_response_codes", failover_response_codes)
        if failover_title is not None:
            pulumi.set(__self__, "failover_title", failover_title)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if population_cookie_type is not None:
            pulumi.set(__self__, "population_cookie_type", population_cookie_type)
        if population_duration is not None:
            pulumi.set(__self__, "population_duration", population_duration)
        if population_expiration_date is not None:
            pulumi.set(__self__, "population_expiration_date", population_expiration_date)
        if population_refresh is not None:
            pulumi.set(__self__, "population_refresh", population_refresh)
        if population_title is not None:
            pulumi.set(__self__, "population_title", population_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failoverDuration")
    def failover_duration(self) -> Optional[int]:
        return pulumi.get(self, "failover_duration")

    @property
    @pulumi.getter(name="failoverEnabled")
    def failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "failover_enabled")

    @property
    @pulumi.getter(name="failoverResponseCodes")
    def failover_response_codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "failover_response_codes")

    @property
    @pulumi.getter(name="failoverTitle")
    def failover_title(self) -> Optional[str]:
        return pulumi.get(self, "failover_title")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="populationCookieType")
    def population_cookie_type(self) -> Optional[str]:
        return pulumi.get(self, "population_cookie_type")

    @property
    @pulumi.getter(name="populationDuration")
    def population_duration(self) -> Optional[str]:
        return pulumi.get(self, "population_duration")

    @property
    @pulumi.getter(name="populationExpirationDate")
    def population_expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "population_expiration_date")

    @property
    @pulumi.getter(name="populationRefresh")
    def population_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "population_refresh")

    @property
    @pulumi.getter(name="populationTitle")
    def population_title(self) -> Optional[str]:
        return pulumi.get(self, "population_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPhasedReleaseCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPreconnectResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 preconnectlists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if preconnectlists is not None:
            pulumi.set(__self__, "preconnectlists", preconnectlists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def preconnectlists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preconnectlists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictiveContentDeliveryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPredictivePrefetchingResult(dict):
    def __init__(__self__, *,
                 accuracy_target: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if accuracy_target is not None:
            pulumi.set(__self__, "accuracy_target", accuracy_target)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accuracyTarget")
    def accuracy_target(self) -> Optional[str]:
        return pulumi.get(self, "accuracy_target")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefetchableResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorPrefreshCacheResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 prefreshval: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if prefreshval is not None:
            pulumi.set(__self__, "prefreshval", prefreshval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def prefreshval(self) -> Optional[int]:
        return pulumi.get(self, "prefreshval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQualityResult(dict):
    def __init__(__self__, *,
                 audience_settings: Optional[str] = None,
                 catalog_size: Optional[str] = None,
                 content_settings: Optional[str] = None,
                 content_type: Optional[str] = None,
                 country: Optional[str] = None,
                 delivery_format: Optional[str] = None,
                 delivery_type: Optional[str] = None,
                 download_type: Optional[str] = None,
                 end_user_location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 maximum_concurrent_users: Optional[str] = None,
                 object_size: Optional[str] = None,
                 optimize_for: Optional[str] = None,
                 origin_settings: Optional[str] = None,
                 popularity_distribution: Optional[str] = None,
                 refresh_rate: Optional[str] = None,
                 segment_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if audience_settings is not None:
            pulumi.set(__self__, "audience_settings", audience_settings)
        if catalog_size is not None:
            pulumi.set(__self__, "catalog_size", catalog_size)
        if content_settings is not None:
            pulumi.set(__self__, "content_settings", content_settings)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if delivery_format is not None:
            pulumi.set(__self__, "delivery_format", delivery_format)
        if delivery_type is not None:
            pulumi.set(__self__, "delivery_type", delivery_type)
        if download_type is not None:
            pulumi.set(__self__, "download_type", download_type)
        if end_user_location is not None:
            pulumi.set(__self__, "end_user_location", end_user_location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_concurrent_users is not None:
            pulumi.set(__self__, "maximum_concurrent_users", maximum_concurrent_users)
        if object_size is not None:
            pulumi.set(__self__, "object_size", object_size)
        if optimize_for is not None:
            pulumi.set(__self__, "optimize_for", optimize_for)
        if origin_settings is not None:
            pulumi.set(__self__, "origin_settings", origin_settings)
        if popularity_distribution is not None:
            pulumi.set(__self__, "popularity_distribution", popularity_distribution)
        if refresh_rate is not None:
            pulumi.set(__self__, "refresh_rate", refresh_rate)
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="audienceSettings")
    def audience_settings(self) -> Optional[str]:
        return pulumi.get(self, "audience_settings")

    @property
    @pulumi.getter(name="catalogSize")
    def catalog_size(self) -> Optional[str]:
        return pulumi.get(self, "catalog_size")

    @property
    @pulumi.getter(name="contentSettings")
    def content_settings(self) -> Optional[str]:
        return pulumi.get(self, "content_settings")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="deliveryFormat")
    def delivery_format(self) -> Optional[str]:
        return pulumi.get(self, "delivery_format")

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[str]:
        return pulumi.get(self, "delivery_type")

    @property
    @pulumi.getter(name="downloadType")
    def download_type(self) -> Optional[str]:
        return pulumi.get(self, "download_type")

    @property
    @pulumi.getter(name="endUserLocation")
    def end_user_location(self) -> Optional[str]:
        return pulumi.get(self, "end_user_location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumConcurrentUsers")
    def maximum_concurrent_users(self) -> Optional[str]:
        return pulumi.get(self, "maximum_concurrent_users")

    @property
    @pulumi.getter(name="objectSize")
    def object_size(self) -> Optional[str]:
        return pulumi.get(self, "object_size")

    @property
    @pulumi.getter(name="optimizeFor")
    def optimize_for(self) -> Optional[str]:
        return pulumi.get(self, "optimize_for")

    @property
    @pulumi.getter(name="originSettings")
    def origin_settings(self) -> Optional[str]:
        return pulumi.get(self, "origin_settings")

    @property
    @pulumi.getter(name="popularityDistribution")
    def popularity_distribution(self) -> Optional[str]:
        return pulumi.get(self, "popularity_distribution")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> Optional[str]:
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[int]:
        return pulumi.get(self, "segment_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorQuicBetaResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 quic_offer_percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if quic_offer_percentage is not None:
            pulumi.set(__self__, "quic_offer_percentage", quic_offer_percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="quicOfferPercentage")
    def quic_offer_percentage(self) -> Optional[int]:
        return pulumi.get(self, "quic_offer_percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRandomSeekResult(dict):
    def __init__(__self__, *,
                 flv: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 mp4: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if flv is not None:
            pulumi.set(__self__, "flv", flv)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if mp4 is not None:
            pulumi.set(__self__, "mp4", mp4)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def flv(self) -> Optional[bool]:
        return pulumi.get(self, "flv")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter
    def mp4(self) -> Optional[bool]:
        return pulumi.get(self, "mp4")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRapidResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReadTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealTimeReportingResult(dict):
    def __init__(__self__, *,
                 advanced: Optional[bool] = None,
                 beacon_sampling_percentage: Optional[float] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if advanced is not None:
            pulumi.set(__self__, "advanced", advanced)
        if beacon_sampling_percentage is not None:
            pulumi.set(__self__, "beacon_sampling_percentage", beacon_sampling_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def advanced(self) -> Optional[bool]:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="beaconSamplingPercentage")
    def beacon_sampling_percentage(self) -> Optional[float]:
        return pulumi.get(self, "beacon_sampling_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRealUserMonitoringResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectResult(dict):
    def __init__(__self__, *,
                 destination_hostname: Optional[str] = None,
                 destination_hostname_other: Optional[str] = None,
                 destination_hostname_sibling: Optional[str] = None,
                 destination_hostname_subdomain: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 destination_path_other: Optional[str] = None,
                 destination_path_prefix: Optional[str] = None,
                 destination_path_suffix: Optional[str] = None,
                 destination_path_suffix_status: Optional[str] = None,
                 destination_protocol: Optional[str] = None,
                 locked: Optional[bool] = None,
                 mobile_default_choice: Optional[str] = None,
                 query_string: Optional[str] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination_hostname is not None:
            pulumi.set(__self__, "destination_hostname", destination_hostname)
        if destination_hostname_other is not None:
            pulumi.set(__self__, "destination_hostname_other", destination_hostname_other)
        if destination_hostname_sibling is not None:
            pulumi.set(__self__, "destination_hostname_sibling", destination_hostname_sibling)
        if destination_hostname_subdomain is not None:
            pulumi.set(__self__, "destination_hostname_subdomain", destination_hostname_subdomain)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if destination_path_other is not None:
            pulumi.set(__self__, "destination_path_other", destination_path_other)
        if destination_path_prefix is not None:
            pulumi.set(__self__, "destination_path_prefix", destination_path_prefix)
        if destination_path_suffix is not None:
            pulumi.set(__self__, "destination_path_suffix", destination_path_suffix)
        if destination_path_suffix_status is not None:
            pulumi.set(__self__, "destination_path_suffix_status", destination_path_suffix_status)
        if destination_protocol is not None:
            pulumi.set(__self__, "destination_protocol", destination_protocol)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mobile_default_choice is not None:
            pulumi.set(__self__, "mobile_default_choice", mobile_default_choice)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="destinationHostname")
    def destination_hostname(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname")

    @property
    @pulumi.getter(name="destinationHostnameOther")
    def destination_hostname_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_other")

    @property
    @pulumi.getter(name="destinationHostnameSibling")
    def destination_hostname_sibling(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_sibling")

    @property
    @pulumi.getter(name="destinationHostnameSubdomain")
    def destination_hostname_subdomain(self) -> Optional[str]:
        return pulumi.get(self, "destination_hostname_subdomain")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="destinationPathOther")
    def destination_path_other(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_other")

    @property
    @pulumi.getter(name="destinationPathPrefix")
    def destination_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_prefix")

    @property
    @pulumi.getter(name="destinationPathSuffix")
    def destination_path_suffix(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix")

    @property
    @pulumi.getter(name="destinationPathSuffixStatus")
    def destination_path_suffix_status(self) -> Optional[str]:
        return pulumi.get(self, "destination_path_suffix_status")

    @property
    @pulumi.getter(name="destinationProtocol")
    def destination_protocol(self) -> Optional[str]:
        return pulumi.get(self, "destination_protocol")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mobileDefaultChoice")
    def mobile_default_choice(self) -> Optional[str]:
        return pulumi.get(self, "mobile_default_choice")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[str]:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRedirectplusResult(dict):
    def __init__(__self__, *,
                 destination: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 response_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def destination(self) -> Optional[str]:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[int]:
        return pulumi.get(self, "response_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRefererCheckingResult(dict):
    def __init__(__self__, *,
                 allow_children: Optional[bool] = None,
                 domains: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 strict: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_children is not None:
            pulumi.set(__self__, "allow_children", allow_children)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict is not None:
            pulumi.set(__self__, "strict", strict)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowChildren")
    def allow_children(self) -> Optional[bool]:
        return pulumi.get(self, "allow_children")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def strict(self) -> Optional[bool]:
        return pulumi.get(self, "strict")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveQueryParameterResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 parameters: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRemoveVaryResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReportResult(dict):
    def __init__(__self__, *,
                 cookies: Optional[Sequence[str]] = None,
                 custom_log_field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 log_accept_language: Optional[bool] = None,
                 log_cookies: Optional[str] = None,
                 log_custom_log_field: Optional[bool] = None,
                 log_edge_ip: Optional[bool] = None,
                 log_host: Optional[bool] = None,
                 log_referer: Optional[bool] = None,
                 log_user_agent: Optional[bool] = None,
                 log_x_forwarded_for: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if custom_log_field is not None:
            pulumi.set(__self__, "custom_log_field", custom_log_field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if log_accept_language is not None:
            pulumi.set(__self__, "log_accept_language", log_accept_language)
        if log_cookies is not None:
            pulumi.set(__self__, "log_cookies", log_cookies)
        if log_custom_log_field is not None:
            pulumi.set(__self__, "log_custom_log_field", log_custom_log_field)
        if log_edge_ip is not None:
            pulumi.set(__self__, "log_edge_ip", log_edge_ip)
        if log_host is not None:
            pulumi.set(__self__, "log_host", log_host)
        if log_referer is not None:
            pulumi.set(__self__, "log_referer", log_referer)
        if log_user_agent is not None:
            pulumi.set(__self__, "log_user_agent", log_user_agent)
        if log_x_forwarded_for is not None:
            pulumi.set(__self__, "log_x_forwarded_for", log_x_forwarded_for)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="customLogField")
    def custom_log_field(self) -> Optional[str]:
        return pulumi.get(self, "custom_log_field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="logAcceptLanguage")
    def log_accept_language(self) -> Optional[bool]:
        return pulumi.get(self, "log_accept_language")

    @property
    @pulumi.getter(name="logCookies")
    def log_cookies(self) -> Optional[str]:
        return pulumi.get(self, "log_cookies")

    @property
    @pulumi.getter(name="logCustomLogField")
    def log_custom_log_field(self) -> Optional[bool]:
        return pulumi.get(self, "log_custom_log_field")

    @property
    @pulumi.getter(name="logEdgeIp")
    def log_edge_ip(self) -> Optional[bool]:
        return pulumi.get(self, "log_edge_ip")

    @property
    @pulumi.getter(name="logHost")
    def log_host(self) -> Optional[bool]:
        return pulumi.get(self, "log_host")

    @property
    @pulumi.getter(name="logReferer")
    def log_referer(self) -> Optional[bool]:
        return pulumi.get(self, "log_referer")

    @property
    @pulumi.getter(name="logUserAgent")
    def log_user_agent(self) -> Optional[bool]:
        return pulumi.get(self, "log_user_agent")

    @property
    @pulumi.getter(name="logXForwardedFor")
    def log_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "log_x_forwarded_for")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlResult(dict):
    def __init__(__self__, *,
                 branded403_file: Optional[str] = None,
                 branded403_status_code: Optional[int] = None,
                 branded403_url: Optional[str] = None,
                 branded_deny_cache_ttl: Optional[int] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult'] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 enable_branded403: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 is_shared_policy: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if branded403_file is not None:
            pulumi.set(__self__, "branded403_file", branded403_file)
        if branded403_status_code is not None:
            pulumi.set(__self__, "branded403_status_code", branded403_status_code)
        if branded403_url is not None:
            pulumi.set(__self__, "branded403_url", branded403_url)
        if branded_deny_cache_ttl is not None:
            pulumi.set(__self__, "branded_deny_cache_ttl", branded_deny_cache_ttl)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if enable_branded403 is not None:
            pulumi.set(__self__, "enable_branded403", enable_branded403)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_shared_policy is not None:
            pulumi.set(__self__, "is_shared_policy", is_shared_policy)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if net_storage is not None:
            pulumi.set(__self__, "net_storage", net_storage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="branded403File")
    def branded403_file(self) -> Optional[str]:
        return pulumi.get(self, "branded403_file")

    @property
    @pulumi.getter(name="branded403StatusCode")
    def branded403_status_code(self) -> Optional[int]:
        return pulumi.get(self, "branded403_status_code")

    @property
    @pulumi.getter(name="branded403Url")
    def branded403_url(self) -> Optional[str]:
        return pulumi.get(self, "branded403_url")

    @property
    @pulumi.getter(name="brandedDenyCacheTtl")
    def branded_deny_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "branded_deny_cache_ttl")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="enableBranded403")
    def enable_branded403(self) -> Optional[bool]:
        return pulumi.get(self, "enable_branded403")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isSharedPolicy")
    def is_shared_policy(self) -> Optional[bool]:
        return pulumi.get(self, "is_shared_policy")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="netStorage")
    def net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult']:
        return pulumi.get(self, "net_storage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestControlNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRequestTypeMarkerResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 request_type: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[str]:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResourceOptimizerExtendedCompatibilityResult(dict):
    def __init__(__self__, *,
                 enable_all_features: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_all_features is not None:
            pulumi.set(__self__, "enable_all_features", enable_all_features)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableAllFeatures")
    def enable_all_features(self) -> Optional[bool]:
        return pulumi.get(self, "enable_all_features")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 override206: Optional[bool] = None,
                 status_code: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if override206 is not None:
            pulumi.set(__self__, "override206", override206)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def override206(self) -> Optional[bool]:
        return pulumi.get(self, "override206")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorResponseCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 default_domain: Optional[bool] = None,
                 default_path: Optional[bool] = None,
                 domain: Optional[str] = None,
                 duration: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 expiration_date: Optional[str] = None,
                 expires: Optional[str] = None,
                 format: Optional[str] = None,
                 http_only: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 path: Optional[str] = None,
                 same_site: Optional[str] = None,
                 secure: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if expires is not None:
            pulumi.set(__self__, "expires", expires)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if http_only is not None:
            pulumi.set(__self__, "http_only", http_only)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if same_site is not None:
            pulumi.set(__self__, "same_site", same_site)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[bool]:
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[bool]:
        return pulumi.get(self, "default_path")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[str]:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def expires(self) -> Optional[str]:
        return pulumi.get(self, "expires")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="httpOnly")
    def http_only(self) -> Optional[bool]:
        return pulumi.get(self, "http_only")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sameSite")
    def same_site(self) -> Optional[str]:
        return pulumi.get(self, "same_site")

    @property
    @pulumi.getter
    def secure(self) -> Optional[bool]:
        return pulumi.get(self, "secure")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRestrictObjectCachingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 maximum_size: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[str]:
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorReturnCacheStatusResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 response_header_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRewriteUrlResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 keep_query_string: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match: Optional[str] = None,
                 match_multiple: Optional[bool] = None,
                 match_regex: Optional[str] = None,
                 target_path: Optional[str] = None,
                 target_path_prepend: Optional[str] = None,
                 target_regex: Optional[str] = None,
                 target_url: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if keep_query_string is not None:
            pulumi.set(__self__, "keep_query_string", keep_query_string)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if match_multiple is not None:
            pulumi.set(__self__, "match_multiple", match_multiple)
        if match_regex is not None:
            pulumi.set(__self__, "match_regex", match_regex)
        if target_path is not None:
            pulumi.set(__self__, "target_path", target_path)
        if target_path_prepend is not None:
            pulumi.set(__self__, "target_path_prepend", target_path_prepend)
        if target_regex is not None:
            pulumi.set(__self__, "target_regex", target_regex)
        if target_url is not None:
            pulumi.set(__self__, "target_url", target_url)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="keepQueryString")
    def keep_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "keep_query_string")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="matchMultiple")
    def match_multiple(self) -> Optional[bool]:
        return pulumi.get(self, "match_multiple")

    @property
    @pulumi.getter(name="matchRegex")
    def match_regex(self) -> Optional[str]:
        return pulumi.get(self, "match_regex")

    @property
    @pulumi.getter(name="targetPath")
    def target_path(self) -> Optional[str]:
        return pulumi.get(self, "target_path")

    @property
    @pulumi.getter(name="targetPathPrepend")
    def target_path_prepend(self) -> Optional[str]:
        return pulumi.get(self, "target_path_prepend")

    @property
    @pulumi.getter(name="targetRegex")
    def target_regex(self) -> Optional[str]:
        return pulumi.get(self, "target_regex")

    @property
    @pulumi.getter(name="targetUrl")
    def target_url(self) -> Optional[str]:
        return pulumi.get(self, "target_url")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorRumCustomResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 rum_group_name: Optional[str] = None,
                 rum_sample_rate: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if rum_group_name is not None:
            pulumi.set(__self__, "rum_group_name", rum_group_name)
        if rum_sample_rate is not None:
            pulumi.set(__self__, "rum_sample_rate", rum_sample_rate)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="rumGroupName")
    def rum_group_name(self) -> Optional[str]:
        return pulumi.get(self, "rum_group_name")

    @property
    @pulumi.getter(name="rumSampleRate")
    def rum_sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "rum_sample_rate")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSaasDefinitionsResult(dict):
    def __init__(__self__, *,
                 application_action: Optional[str] = None,
                 application_cname_enabled: Optional[bool] = None,
                 application_cname_level: Optional[int] = None,
                 application_cookie: Optional[str] = None,
                 application_query_string: Optional[str] = None,
                 application_regex: Optional[str] = None,
                 application_replace: Optional[str] = None,
                 application_title: Optional[str] = None,
                 customer_action: Optional[str] = None,
                 customer_cname_enabled: Optional[bool] = None,
                 customer_cname_level: Optional[int] = None,
                 customer_cookie: Optional[str] = None,
                 customer_query_string: Optional[str] = None,
                 customer_regex: Optional[str] = None,
                 customer_replace: Optional[str] = None,
                 customer_title: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 users_action: Optional[str] = None,
                 users_cname_enabled: Optional[bool] = None,
                 users_cname_level: Optional[int] = None,
                 users_cookie: Optional[str] = None,
                 users_query_string: Optional[str] = None,
                 users_regex: Optional[str] = None,
                 users_replace: Optional[str] = None,
                 users_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if application_action is not None:
            pulumi.set(__self__, "application_action", application_action)
        if application_cname_enabled is not None:
            pulumi.set(__self__, "application_cname_enabled", application_cname_enabled)
        if application_cname_level is not None:
            pulumi.set(__self__, "application_cname_level", application_cname_level)
        if application_cookie is not None:
            pulumi.set(__self__, "application_cookie", application_cookie)
        if application_query_string is not None:
            pulumi.set(__self__, "application_query_string", application_query_string)
        if application_regex is not None:
            pulumi.set(__self__, "application_regex", application_regex)
        if application_replace is not None:
            pulumi.set(__self__, "application_replace", application_replace)
        if application_title is not None:
            pulumi.set(__self__, "application_title", application_title)
        if customer_action is not None:
            pulumi.set(__self__, "customer_action", customer_action)
        if customer_cname_enabled is not None:
            pulumi.set(__self__, "customer_cname_enabled", customer_cname_enabled)
        if customer_cname_level is not None:
            pulumi.set(__self__, "customer_cname_level", customer_cname_level)
        if customer_cookie is not None:
            pulumi.set(__self__, "customer_cookie", customer_cookie)
        if customer_query_string is not None:
            pulumi.set(__self__, "customer_query_string", customer_query_string)
        if customer_regex is not None:
            pulumi.set(__self__, "customer_regex", customer_regex)
        if customer_replace is not None:
            pulumi.set(__self__, "customer_replace", customer_replace)
        if customer_title is not None:
            pulumi.set(__self__, "customer_title", customer_title)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if users_action is not None:
            pulumi.set(__self__, "users_action", users_action)
        if users_cname_enabled is not None:
            pulumi.set(__self__, "users_cname_enabled", users_cname_enabled)
        if users_cname_level is not None:
            pulumi.set(__self__, "users_cname_level", users_cname_level)
        if users_cookie is not None:
            pulumi.set(__self__, "users_cookie", users_cookie)
        if users_query_string is not None:
            pulumi.set(__self__, "users_query_string", users_query_string)
        if users_regex is not None:
            pulumi.set(__self__, "users_regex", users_regex)
        if users_replace is not None:
            pulumi.set(__self__, "users_replace", users_replace)
        if users_title is not None:
            pulumi.set(__self__, "users_title", users_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applicationAction")
    def application_action(self) -> Optional[str]:
        return pulumi.get(self, "application_action")

    @property
    @pulumi.getter(name="applicationCnameEnabled")
    def application_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "application_cname_enabled")

    @property
    @pulumi.getter(name="applicationCnameLevel")
    def application_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "application_cname_level")

    @property
    @pulumi.getter(name="applicationCookie")
    def application_cookie(self) -> Optional[str]:
        return pulumi.get(self, "application_cookie")

    @property
    @pulumi.getter(name="applicationQueryString")
    def application_query_string(self) -> Optional[str]:
        return pulumi.get(self, "application_query_string")

    @property
    @pulumi.getter(name="applicationRegex")
    def application_regex(self) -> Optional[str]:
        return pulumi.get(self, "application_regex")

    @property
    @pulumi.getter(name="applicationReplace")
    def application_replace(self) -> Optional[str]:
        return pulumi.get(self, "application_replace")

    @property
    @pulumi.getter(name="applicationTitle")
    def application_title(self) -> Optional[str]:
        return pulumi.get(self, "application_title")

    @property
    @pulumi.getter(name="customerAction")
    def customer_action(self) -> Optional[str]:
        return pulumi.get(self, "customer_action")

    @property
    @pulumi.getter(name="customerCnameEnabled")
    def customer_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "customer_cname_enabled")

    @property
    @pulumi.getter(name="customerCnameLevel")
    def customer_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "customer_cname_level")

    @property
    @pulumi.getter(name="customerCookie")
    def customer_cookie(self) -> Optional[str]:
        return pulumi.get(self, "customer_cookie")

    @property
    @pulumi.getter(name="customerQueryString")
    def customer_query_string(self) -> Optional[str]:
        return pulumi.get(self, "customer_query_string")

    @property
    @pulumi.getter(name="customerRegex")
    def customer_regex(self) -> Optional[str]:
        return pulumi.get(self, "customer_regex")

    @property
    @pulumi.getter(name="customerReplace")
    def customer_replace(self) -> Optional[str]:
        return pulumi.get(self, "customer_replace")

    @property
    @pulumi.getter(name="customerTitle")
    def customer_title(self) -> Optional[str]:
        return pulumi.get(self, "customer_title")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="usersAction")
    def users_action(self) -> Optional[str]:
        return pulumi.get(self, "users_action")

    @property
    @pulumi.getter(name="usersCnameEnabled")
    def users_cname_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "users_cname_enabled")

    @property
    @pulumi.getter(name="usersCnameLevel")
    def users_cname_level(self) -> Optional[int]:
        return pulumi.get(self, "users_cname_level")

    @property
    @pulumi.getter(name="usersCookie")
    def users_cookie(self) -> Optional[str]:
        return pulumi.get(self, "users_cookie")

    @property
    @pulumi.getter(name="usersQueryString")
    def users_query_string(self) -> Optional[str]:
        return pulumi.get(self, "users_query_string")

    @property
    @pulumi.getter(name="usersRegex")
    def users_regex(self) -> Optional[str]:
        return pulumi.get(self, "users_regex")

    @property
    @pulumi.getter(name="usersReplace")
    def users_replace(self) -> Optional[str]:
        return pulumi.get(self, "users_replace")

    @property
    @pulumi.getter(name="usersTitle")
    def users_title(self) -> Optional[str]:
        return pulumi.get(self, "users_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudClientResult(dict):
    def __init__(__self__, *,
                 allow_override_origin_cache_key: Optional[bool] = None,
                 connector_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 origin_host_header: Optional[str] = None,
                 origin_type: Optional[str] = None,
                 sf3c_origin_host: Optional[str] = None,
                 sf3c_origin_host_header: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_override_origin_cache_key is not None:
            pulumi.set(__self__, "allow_override_origin_cache_key", allow_override_origin_cache_key)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_host_header is not None:
            pulumi.set(__self__, "origin_host_header", origin_host_header)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if sf3c_origin_host is not None:
            pulumi.set(__self__, "sf3c_origin_host", sf3c_origin_host)
        if sf3c_origin_host_header is not None:
            pulumi.set(__self__, "sf3c_origin_host_header", sf3c_origin_host_header)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowOverrideOriginCacheKey")
    def allow_override_origin_cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "allow_override_origin_cache_key")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originHostHeader")
    def origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "origin_host_header")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[str]:
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="sf3cOriginHost")
    def sf3c_origin_host(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host")

    @property
    @pulumi.getter(name="sf3cOriginHostHeader")
    def sf3c_origin_host_header(self) -> Optional[str]:
        return pulumi.get(self, "sf3c_origin_host_header")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSalesForceCommerceCloudProviderHostHeaderResult(dict):
    def __init__(__self__, *,
                 host_header_source: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if host_header_source is not None:
            pulumi.set(__self__, "host_header_source", host_header_source)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="hostHeaderSource")
    def host_header_source(self) -> Optional[str]:
        return pulumi.get(self, "host_header_source")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSavePostDcaProcessingResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScheduleInvalidationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 refresh_method: Optional[str] = None,
                 repeat: Optional[bool] = None,
                 repeat_interval: Optional[str] = None,
                 start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if refresh_method is not None:
            pulumi.set(__self__, "refresh_method", refresh_method)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="refreshMethod")
    def refresh_method(self) -> Optional[str]:
        return pulumi.get(self, "refresh_method")

    @property
    @pulumi.getter
    def repeat(self) -> Optional[bool]:
        return pulumi.get(self, "repeat")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorScriptManagementResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 serviceworker: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 timestamp: Optional[int] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if serviceworker is not None:
            pulumi.set(__self__, "serviceworker", serviceworker)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def serviceworker(self) -> Optional[str]:
        return pulumi.get(self, "serviceworker")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[int]:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedContentProtectionResult(dict):
    def __init__(__self__, *,
                 acl: Optional[bool] = None,
                 dash_media_encryption: Optional[bool] = None,
                 data_payload: Optional[bool] = None,
                 enable_token_in_uri: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 field_carry_over: Optional[str] = None,
                 header_for_salts: Optional[Sequence[str]] = None,
                 hls_master_manifest_files: Optional[Sequence[str]] = None,
                 hls_media_encryption: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 key: Optional[str] = None,
                 locked: Optional[bool] = None,
                 media_encryption_title: Optional[str] = None,
                 revoked_list_id: Optional[int] = None,
                 salt: Optional[str] = None,
                 session_id: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_auth_hls_title: Optional[str] = None,
                 token_authentication_title: Optional[str] = None,
                 token_revocation_enabled: Optional[bool] = None,
                 token_revocation_title: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if dash_media_encryption is not None:
            pulumi.set(__self__, "dash_media_encryption", dash_media_encryption)
        if data_payload is not None:
            pulumi.set(__self__, "data_payload", data_payload)
        if enable_token_in_uri is not None:
            pulumi.set(__self__, "enable_token_in_uri", enable_token_in_uri)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if field_carry_over is not None:
            pulumi.set(__self__, "field_carry_over", field_carry_over)
        if header_for_salts is not None:
            pulumi.set(__self__, "header_for_salts", header_for_salts)
        if hls_master_manifest_files is not None:
            pulumi.set(__self__, "hls_master_manifest_files", hls_master_manifest_files)
        if hls_media_encryption is not None:
            pulumi.set(__self__, "hls_media_encryption", hls_media_encryption)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if media_encryption_title is not None:
            pulumi.set(__self__, "media_encryption_title", media_encryption_title)
        if revoked_list_id is not None:
            pulumi.set(__self__, "revoked_list_id", revoked_list_id)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_auth_hls_title is not None:
            pulumi.set(__self__, "token_auth_hls_title", token_auth_hls_title)
        if token_authentication_title is not None:
            pulumi.set(__self__, "token_authentication_title", token_authentication_title)
        if token_revocation_enabled is not None:
            pulumi.set(__self__, "token_revocation_enabled", token_revocation_enabled)
        if token_revocation_title is not None:
            pulumi.set(__self__, "token_revocation_title", token_revocation_title)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def acl(self) -> Optional[bool]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="dashMediaEncryption")
    def dash_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "dash_media_encryption")

    @property
    @pulumi.getter(name="dataPayload")
    def data_payload(self) -> Optional[bool]:
        return pulumi.get(self, "data_payload")

    @property
    @pulumi.getter(name="enableTokenInUri")
    def enable_token_in_uri(self) -> Optional[bool]:
        return pulumi.get(self, "enable_token_in_uri")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fieldCarryOver")
    def field_carry_over(self) -> Optional[str]:
        return pulumi.get(self, "field_carry_over")

    @property
    @pulumi.getter(name="headerForSalts")
    def header_for_salts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_for_salts")

    @property
    @pulumi.getter(name="hlsMasterManifestFiles")
    def hls_master_manifest_files(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hls_master_manifest_files")

    @property
    @pulumi.getter(name="hlsMediaEncryption")
    def hls_media_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "hls_media_encryption")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mediaEncryptionTitle")
    def media_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "media_encryption_title")

    @property
    @pulumi.getter(name="revokedListId")
    def revoked_list_id(self) -> Optional[int]:
        return pulumi.get(self, "revoked_list_id")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[bool]:
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthHlsTitle")
    def token_auth_hls_title(self) -> Optional[str]:
        return pulumi.get(self, "token_auth_hls_title")

    @property
    @pulumi.getter(name="tokenAuthenticationTitle")
    def token_authentication_title(self) -> Optional[str]:
        return pulumi.get(self, "token_authentication_title")

    @property
    @pulumi.getter(name="tokenRevocationEnabled")
    def token_revocation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "token_revocation_enabled")

    @property
    @pulumi.getter(name="tokenRevocationTitle")
    def token_revocation_title(self) -> Optional[str]:
        return pulumi.get(self, "token_revocation_title")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaOptimizationResult(dict):
    def __init__(__self__, *,
                 behavior: Optional[str] = None,
                 dvr_type: Optional[str] = None,
                 dvr_window: Optional[str] = None,
                 enable_ull_streaming: Optional[bool] = None,
                 end_time: Optional[str] = None,
                 live_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 show_advanced: Optional[bool] = None,
                 start_time: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if dvr_type is not None:
            pulumi.set(__self__, "dvr_type", dvr_type)
        if dvr_window is not None:
            pulumi.set(__self__, "dvr_window", dvr_window)
        if enable_ull_streaming is not None:
            pulumi.set(__self__, "enable_ull_streaming", enable_ull_streaming)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if live_type is not None:
            pulumi.set(__self__, "live_type", live_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if show_advanced is not None:
            pulumi.set(__self__, "show_advanced", show_advanced)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[str]:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="dvrType")
    def dvr_type(self) -> Optional[str]:
        return pulumi.get(self, "dvr_type")

    @property
    @pulumi.getter(name="dvrWindow")
    def dvr_window(self) -> Optional[str]:
        return pulumi.get(self, "dvr_window")

    @property
    @pulumi.getter(name="enableUllStreaming")
    def enable_ull_streaming(self) -> Optional[bool]:
        return pulumi.get(self, "enable_ull_streaming")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="liveType")
    def live_type(self) -> Optional[str]:
        return pulumi.get(self, "live_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="showAdvanced")
    def show_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "show_advanced")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSegmentedMediaStreamingPrefetchResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 case_sensitive: Optional[bool] = None,
                 certificate_field_name: Optional[str] = None,
                 cookie_name: Optional[str] = None,
                 device_profile: Optional[str] = None,
                 encryption_key: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 end_index: Optional[str] = None,
                 except_chars: Optional[str] = None,
                 extract_location: Optional[str] = None,
                 force_chars: Optional[str] = None,
                 format_string: Optional[str] = None,
                 generator: Optional[str] = None,
                 global_substitution: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 hmac_algorithm: Optional[str] = None,
                 hmac_key: Optional[str] = None,
                 initialization_vector: Optional[str] = None,
                 ip_version: Optional[str] = None,
                 ipv4_prefix: Optional[int] = None,
                 ipv6_prefix: Optional[int] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 max: Optional[int] = None,
                 max_random_number: Optional[str] = None,
                 min: Optional[int] = None,
                 min_random_number: Optional[str] = None,
                 nonce: Optional[str] = None,
                 number_of_bytes: Optional[int] = None,
                 operand_one: Optional[str] = None,
                 param_name: Optional[str] = None,
                 path_component_offset: Optional[str] = None,
                 prepend_bytes: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 regex: Optional[str] = None,
                 replacement: Optional[str] = None,
                 response_header_name: Optional[str] = None,
                 separator: Optional[str] = None,
                 set_cookie_name: Optional[str] = None,
                 start_index: Optional[str] = None,
                 sub_string: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transform: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value_source: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_value: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if certificate_field_name is not None:
            pulumi.set(__self__, "certificate_field_name", certificate_field_name)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if device_profile is not None:
            pulumi.set(__self__, "device_profile", device_profile)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_mode is not None:
            pulumi.set(__self__, "encryption_mode", encryption_mode)
        if end_index is not None:
            pulumi.set(__self__, "end_index", end_index)
        if except_chars is not None:
            pulumi.set(__self__, "except_chars", except_chars)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if force_chars is not None:
            pulumi.set(__self__, "force_chars", force_chars)
        if format_string is not None:
            pulumi.set(__self__, "format_string", format_string)
        if generator is not None:
            pulumi.set(__self__, "generator", generator)
        if global_substitution is not None:
            pulumi.set(__self__, "global_substitution", global_substitution)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if hmac_key is not None:
            pulumi.set(__self__, "hmac_key", hmac_key)
        if initialization_vector is not None:
            pulumi.set(__self__, "initialization_vector", initialization_vector)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_prefix is not None:
            pulumi.set(__self__, "ipv4_prefix", ipv4_prefix)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if max_random_number is not None:
            pulumi.set(__self__, "max_random_number", max_random_number)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if min_random_number is not None:
            pulumi.set(__self__, "min_random_number", min_random_number)
        if nonce is not None:
            pulumi.set(__self__, "nonce", nonce)
        if number_of_bytes is not None:
            pulumi.set(__self__, "number_of_bytes", number_of_bytes)
        if operand_one is not None:
            pulumi.set(__self__, "operand_one", operand_one)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if path_component_offset is not None:
            pulumi.set(__self__, "path_component_offset", path_component_offset)
        if prepend_bytes is not None:
            pulumi.set(__self__, "prepend_bytes", prepend_bytes)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if response_header_name is not None:
            pulumi.set(__self__, "response_header_name", response_header_name)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)
        if set_cookie_name is not None:
            pulumi.set(__self__, "set_cookie_name", set_cookie_name)
        if start_index is not None:
            pulumi.set(__self__, "start_index", start_index)
        if sub_string is not None:
            pulumi.set(__self__, "sub_string", sub_string)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value_source is not None:
            pulumi.set(__self__, "value_source", value_source)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_value is not None:
            pulumi.set(__self__, "variable_value", variable_value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="certificateFieldName")
    def certificate_field_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_field_name")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="deviceProfile")
    def device_profile(self) -> Optional[str]:
        return pulumi.get(self, "device_profile")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="endIndex")
    def end_index(self) -> Optional[str]:
        return pulumi.get(self, "end_index")

    @property
    @pulumi.getter(name="exceptChars")
    def except_chars(self) -> Optional[str]:
        return pulumi.get(self, "except_chars")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="forceChars")
    def force_chars(self) -> Optional[str]:
        return pulumi.get(self, "force_chars")

    @property
    @pulumi.getter(name="formatString")
    def format_string(self) -> Optional[str]:
        return pulumi.get(self, "format_string")

    @property
    @pulumi.getter
    def generator(self) -> Optional[str]:
        return pulumi.get(self, "generator")

    @property
    @pulumi.getter(name="globalSubstitution")
    def global_substitution(self) -> Optional[bool]:
        return pulumi.get(self, "global_substitution")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hmac_algorithm")

    @property
    @pulumi.getter(name="hmacKey")
    def hmac_key(self) -> Optional[str]:
        return pulumi.get(self, "hmac_key")

    @property
    @pulumi.getter(name="initializationVector")
    def initialization_vector(self) -> Optional[str]:
        return pulumi.get(self, "initialization_vector")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="ipv4Prefix")
    def ipv4_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv4_prefix")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter(name="maxRandomNumber")
    def max_random_number(self) -> Optional[str]:
        return pulumi.get(self, "max_random_number")

    @property
    @pulumi.getter
    def min(self) -> Optional[int]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="minRandomNumber")
    def min_random_number(self) -> Optional[str]:
        return pulumi.get(self, "min_random_number")

    @property
    @pulumi.getter
    def nonce(self) -> Optional[str]:
        return pulumi.get(self, "nonce")

    @property
    @pulumi.getter(name="numberOfBytes")
    def number_of_bytes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_bytes")

    @property
    @pulumi.getter(name="operandOne")
    def operand_one(self) -> Optional[str]:
        return pulumi.get(self, "operand_one")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="pathComponentOffset")
    def path_component_offset(self) -> Optional[str]:
        return pulumi.get(self, "path_component_offset")

    @property
    @pulumi.getter(name="prependBytes")
    def prepend_bytes(self) -> Optional[bool]:
        return pulumi.get(self, "prepend_bytes")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def replacement(self) -> Optional[str]:
        return pulumi.get(self, "replacement")

    @property
    @pulumi.getter(name="responseHeaderName")
    def response_header_name(self) -> Optional[str]:
        return pulumi.get(self, "response_header_name")

    @property
    @pulumi.getter
    def separator(self) -> Optional[str]:
        return pulumi.get(self, "separator")

    @property
    @pulumi.getter(name="setCookieName")
    def set_cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "set_cookie_name")

    @property
    @pulumi.getter(name="startIndex")
    def start_index(self) -> Optional[str]:
        return pulumi.get(self, "start_index")

    @property
    @pulumi.getter(name="subString")
    def sub_string(self) -> Optional[str]:
        return pulumi.get(self, "sub_string")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def transform(self) -> Optional[str]:
        return pulumi.get(self, "transform")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="valueSource")
    def value_source(self) -> Optional[str]:
        return pulumi.get(self, "value_source")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValue")
    def variable_value(self) -> Optional[str]:
        return pulumi.get(self, "variable_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSimulateErrorCodeResult(dict):
    def __init__(__self__, *,
                 error_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 timeout: Optional[str] = None,
                 uuid: Optional[str] = None):
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[str]:
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 nossmap: Optional[str] = None,
                 ssmap: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult'] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if nossmap is not None:
            pulumi.set(__self__, "nossmap", nossmap)
        if ssmap is not None:
            pulumi.set(__self__, "ssmap", ssmap)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def nossmap(self) -> Optional[str]:
        return pulumi.get(self, "nossmap")

    @property
    @pulumi.getter
    def ssmap(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult']:
        return pulumi.get(self, "ssmap")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSiteShieldSsmapResult(dict):
    def __init__(__self__, *,
                 china_cdn_map: Optional[str] = None,
                 has_mixed_hosts: Optional[bool] = None,
                 name: Optional[str] = None,
                 src: Optional[str] = None,
                 srmap: Optional[str] = None,
                 value: Optional[str] = None):
        if china_cdn_map is not None:
            pulumi.set(__self__, "china_cdn_map", china_cdn_map)
        if has_mixed_hosts is not None:
            pulumi.set(__self__, "has_mixed_hosts", has_mixed_hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if srmap is not None:
            pulumi.set(__self__, "srmap", srmap)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="chinaCdnMap")
    def china_cdn_map(self) -> Optional[str]:
        return pulumi.get(self, "china_cdn_map")

    @property
    @pulumi.getter(name="hasMixedHosts")
    def has_mixed_hosts(self) -> Optional[bool]:
        return pulumi.get(self, "has_mixed_hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def srmap(self) -> Optional[str]:
        return pulumi.get(self, "srmap")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationResult(dict):
    def __init__(__self__, *,
                 allow_https_downgrade: Optional[bool] = None,
                 allow_https_upgrade: Optional[bool] = None,
                 cache_sharing_duration: Optional[int] = None,
                 cache_sharing_start_time: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 is_certificate_sni_only: Optional[bool] = None,
                 is_tiered_distribution_used: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 migration_duration: Optional[int] = None,
                 migration_from: Optional[str] = None,
                 migration_start_time: Optional[str] = None,
                 td_location: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_https_downgrade is not None:
            pulumi.set(__self__, "allow_https_downgrade", allow_https_downgrade)
        if allow_https_upgrade is not None:
            pulumi.set(__self__, "allow_https_upgrade", allow_https_upgrade)
        if cache_sharing_duration is not None:
            pulumi.set(__self__, "cache_sharing_duration", cache_sharing_duration)
        if cache_sharing_start_time is not None:
            pulumi.set(__self__, "cache_sharing_start_time", cache_sharing_start_time)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_certificate_sni_only is not None:
            pulumi.set(__self__, "is_certificate_sni_only", is_certificate_sni_only)
        if is_tiered_distribution_used is not None:
            pulumi.set(__self__, "is_tiered_distribution_used", is_tiered_distribution_used)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if migration_duration is not None:
            pulumi.set(__self__, "migration_duration", migration_duration)
        if migration_from is not None:
            pulumi.set(__self__, "migration_from", migration_from)
        if migration_start_time is not None:
            pulumi.set(__self__, "migration_start_time", migration_start_time)
        if td_location is not None:
            pulumi.set(__self__, "td_location", td_location)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowHttpsDowngrade")
    def allow_https_downgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_downgrade")

    @property
    @pulumi.getter(name="allowHttpsUpgrade")
    def allow_https_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_https_upgrade")

    @property
    @pulumi.getter(name="cacheSharingDuration")
    def cache_sharing_duration(self) -> Optional[int]:
        return pulumi.get(self, "cache_sharing_duration")

    @property
    @pulumi.getter(name="cacheSharingStartTime")
    def cache_sharing_start_time(self) -> Optional[str]:
        return pulumi.get(self, "cache_sharing_start_time")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="isCertificateSniOnly")
    def is_certificate_sni_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_sni_only")

    @property
    @pulumi.getter(name="isTieredDistributionUsed")
    def is_tiered_distribution_used(self) -> Optional[bool]:
        return pulumi.get(self, "is_tiered_distribution_used")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="migrationDuration")
    def migration_duration(self) -> Optional[int]:
        return pulumi.get(self, "migration_duration")

    @property
    @pulumi.getter(name="migrationFrom")
    def migration_from(self) -> Optional[str]:
        return pulumi.get(self, "migration_from")

    @property
    @pulumi.getter(name="migrationStartTime")
    def migration_start_time(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_time")

    @property
    @pulumi.getter(name="tdLocation")
    def td_location(self) -> Optional[str]:
        return pulumi.get(self, "td_location")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStandardTlsMigrationOverrideResult(dict):
    def __init__(__self__, *,
                 info: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if info is not None:
            pulumi.set(__self__, "info", info)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorStrictHeaderParsingResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 strict_mode: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 valid_mode: Optional[bool] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if strict_mode is not None:
            pulumi.set(__self__, "strict_mode", strict_mode)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if valid_mode is not None:
            pulumi.set(__self__, "valid_mode", valid_mode)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="strictMode")
    def strict_mode(self) -> Optional[bool]:
        return pulumi.get(self, "strict_mode")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="validMode")
    def valid_mode(self) -> Optional[bool]:
        return pulumi.get(self, "valid_mode")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSubCustomerResult(dict):
    def __init__(__self__, *,
                 access_control: Optional[bool] = None,
                 cache_key: Optional[bool] = None,
                 caching: Optional[bool] = None,
                 content_compressor: Optional[bool] = None,
                 dynamic_web_content: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 geo_location: Optional[bool] = None,
                 ip: Optional[bool] = None,
                 large_file_delivery: Optional[bool] = None,
                 live_video_delivery: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 modify_path: Optional[bool] = None,
                 on_demand_video_delivery: Optional[bool] = None,
                 origin: Optional[bool] = None,
                 partner_domain_suffix: Optional[str] = None,
                 referrer: Optional[bool] = None,
                 refresh_content: Optional[bool] = None,
                 site_failover: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_authorization: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 web_application_firewall: Optional[bool] = None):
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if caching is not None:
            pulumi.set(__self__, "caching", caching)
        if content_compressor is not None:
            pulumi.set(__self__, "content_compressor", content_compressor)
        if dynamic_web_content is not None:
            pulumi.set(__self__, "dynamic_web_content", dynamic_web_content)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if geo_location is not None:
            pulumi.set(__self__, "geo_location", geo_location)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if large_file_delivery is not None:
            pulumi.set(__self__, "large_file_delivery", large_file_delivery)
        if live_video_delivery is not None:
            pulumi.set(__self__, "live_video_delivery", live_video_delivery)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if modify_path is not None:
            pulumi.set(__self__, "modify_path", modify_path)
        if on_demand_video_delivery is not None:
            pulumi.set(__self__, "on_demand_video_delivery", on_demand_video_delivery)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if partner_domain_suffix is not None:
            pulumi.set(__self__, "partner_domain_suffix", partner_domain_suffix)
        if referrer is not None:
            pulumi.set(__self__, "referrer", referrer)
        if refresh_content is not None:
            pulumi.set(__self__, "refresh_content", refresh_content)
        if site_failover is not None:
            pulumi.set(__self__, "site_failover", site_failover)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if web_application_firewall is not None:
            pulumi.set(__self__, "web_application_firewall", web_application_firewall)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[bool]:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[bool]:
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter
    def caching(self) -> Optional[bool]:
        return pulumi.get(self, "caching")

    @property
    @pulumi.getter(name="contentCompressor")
    def content_compressor(self) -> Optional[bool]:
        return pulumi.get(self, "content_compressor")

    @property
    @pulumi.getter(name="dynamicWebContent")
    def dynamic_web_content(self) -> Optional[bool]:
        return pulumi.get(self, "dynamic_web_content")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[bool]:
        return pulumi.get(self, "geo_location")

    @property
    @pulumi.getter
    def ip(self) -> Optional[bool]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="largeFileDelivery")
    def large_file_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "large_file_delivery")

    @property
    @pulumi.getter(name="liveVideoDelivery")
    def live_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "live_video_delivery")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="modifyPath")
    def modify_path(self) -> Optional[bool]:
        return pulumi.get(self, "modify_path")

    @property
    @pulumi.getter(name="onDemandVideoDelivery")
    def on_demand_video_delivery(self) -> Optional[bool]:
        return pulumi.get(self, "on_demand_video_delivery")

    @property
    @pulumi.getter
    def origin(self) -> Optional[bool]:
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="partnerDomainSuffix")
    def partner_domain_suffix(self) -> Optional[str]:
        return pulumi.get(self, "partner_domain_suffix")

    @property
    @pulumi.getter
    def referrer(self) -> Optional[bool]:
        return pulumi.get(self, "referrer")

    @property
    @pulumi.getter(name="refreshContent")
    def refresh_content(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_content")

    @property
    @pulumi.getter(name="siteFailover")
    def site_failover(self) -> Optional[bool]:
        return pulumi.get(self, "site_failover")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional[bool]:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="webApplicationFirewall")
    def web_application_firewall(self) -> Optional[bool]:
        return pulumi.get(self, "web_application_firewall")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorSureRouteResult(dict):
    def __init__(__self__, *,
                 allow_fcm_parent_override: Optional[bool] = None,
                 custom_map: Optional[str] = None,
                 custom_stat_key: Optional[str] = None,
                 enable_custom_key: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 force_ssl_forward: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 race_stat_ttl: Optional[str] = None,
                 sr_download_link_title: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 test_object_url: Optional[str] = None,
                 to_host: Optional[str] = None,
                 to_host_status: Optional[str] = None,
                 type: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allow_fcm_parent_override is not None:
            pulumi.set(__self__, "allow_fcm_parent_override", allow_fcm_parent_override)
        if custom_map is not None:
            pulumi.set(__self__, "custom_map", custom_map)
        if custom_stat_key is not None:
            pulumi.set(__self__, "custom_stat_key", custom_stat_key)
        if enable_custom_key is not None:
            pulumi.set(__self__, "enable_custom_key", enable_custom_key)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_ssl_forward is not None:
            pulumi.set(__self__, "force_ssl_forward", force_ssl_forward)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if race_stat_ttl is not None:
            pulumi.set(__self__, "race_stat_ttl", race_stat_ttl)
        if sr_download_link_title is not None:
            pulumi.set(__self__, "sr_download_link_title", sr_download_link_title)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if test_object_url is not None:
            pulumi.set(__self__, "test_object_url", test_object_url)
        if to_host is not None:
            pulumi.set(__self__, "to_host", to_host)
        if to_host_status is not None:
            pulumi.set(__self__, "to_host_status", to_host_status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="allowFcmParentOverride")
    def allow_fcm_parent_override(self) -> Optional[bool]:
        return pulumi.get(self, "allow_fcm_parent_override")

    @property
    @pulumi.getter(name="customMap")
    def custom_map(self) -> Optional[str]:
        return pulumi.get(self, "custom_map")

    @property
    @pulumi.getter(name="customStatKey")
    def custom_stat_key(self) -> Optional[str]:
        return pulumi.get(self, "custom_stat_key")

    @property
    @pulumi.getter(name="enableCustomKey")
    def enable_custom_key(self) -> Optional[bool]:
        return pulumi.get(self, "enable_custom_key")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceSslForward")
    def force_ssl_forward(self) -> Optional[bool]:
        return pulumi.get(self, "force_ssl_forward")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="raceStatTtl")
    def race_stat_ttl(self) -> Optional[str]:
        return pulumi.get(self, "race_stat_ttl")

    @property
    @pulumi.getter(name="srDownloadLinkTitle")
    def sr_download_link_title(self) -> Optional[str]:
        return pulumi.get(self, "sr_download_link_title")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="testObjectUrl")
    def test_object_url(self) -> Optional[str]:
        return pulumi.get(self, "test_object_url")

    @property
    @pulumi.getter(name="toHost")
    def to_host(self) -> Optional[str]:
        return pulumi.get(self, "to_host")

    @property
    @pulumi.getter(name="toHostStatus")
    def to_host_status(self) -> Optional[str]:
        return pulumi.get(self, "to_host_status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTcpOptimizationResult(dict):
    def __init__(__self__, *,
                 display: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if display is not None:
            pulumi.set(__self__, "display", display)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTeaLeafResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 ibm_customer_id: Optional[int] = None,
                 limit_to_dynamic: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ibm_customer_id is not None:
            pulumi.set(__self__, "ibm_customer_id", ibm_customer_id)
        if limit_to_dynamic is not None:
            pulumi.set(__self__, "limit_to_dynamic", limit_to_dynamic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ibmCustomerId")
    def ibm_customer_id(self) -> Optional[int]:
        return pulumi.get(self, "ibm_customer_id")

    @property
    @pulumi.getter(name="limitToDynamic")
    def limit_to_dynamic(self) -> Optional[bool]:
        return pulumi.get(self, "limit_to_dynamic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionAdvancedResult(dict):
    def __init__(__self__, *,
                 allowall: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 method: Optional[str] = None,
                 policy: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tiered_distribution_map: Optional[str] = None,
                 uuid: Optional[str] = None):
        if allowall is not None:
            pulumi.set(__self__, "allowall", allowall)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tiered_distribution_map is not None:
            pulumi.set(__self__, "tiered_distribution_map", tiered_distribution_map)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def allowall(self) -> Optional[bool]:
        return pulumi.get(self, "allowall")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tieredDistributionMap")
    def tiered_distribution_map(self) -> Optional[str]:
        return pulumi.get(self, "tiered_distribution_map")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTieredDistributionCustomizationResult(dict):
    def __init__(__self__, *,
                 cloudwrapper_map_migration_title: Optional[str] = None,
                 custom_map_enabled: Optional[bool] = None,
                 custom_map_name: Optional[str] = None,
                 hash_algorithm: Optional[str] = None,
                 location: Optional[str] = None,
                 locked: Optional[bool] = None,
                 map_migration_enabled: Optional[bool] = None,
                 migration_end_date: Optional[str] = None,
                 migration_start_date: Optional[str] = None,
                 migration_within_cw_maps_enabled: Optional[bool] = None,
                 serial_end: Optional[str] = None,
                 serial_start: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 tier1_title: Optional[str] = None,
                 uuid: Optional[str] = None):
        if cloudwrapper_map_migration_title is not None:
            pulumi.set(__self__, "cloudwrapper_map_migration_title", cloudwrapper_map_migration_title)
        if custom_map_enabled is not None:
            pulumi.set(__self__, "custom_map_enabled", custom_map_enabled)
        if custom_map_name is not None:
            pulumi.set(__self__, "custom_map_name", custom_map_name)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if map_migration_enabled is not None:
            pulumi.set(__self__, "map_migration_enabled", map_migration_enabled)
        if migration_end_date is not None:
            pulumi.set(__self__, "migration_end_date", migration_end_date)
        if migration_start_date is not None:
            pulumi.set(__self__, "migration_start_date", migration_start_date)
        if migration_within_cw_maps_enabled is not None:
            pulumi.set(__self__, "migration_within_cw_maps_enabled", migration_within_cw_maps_enabled)
        if serial_end is not None:
            pulumi.set(__self__, "serial_end", serial_end)
        if serial_start is not None:
            pulumi.set(__self__, "serial_start", serial_start)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if tier1_title is not None:
            pulumi.set(__self__, "tier1_title", tier1_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudwrapperMapMigrationTitle")
    def cloudwrapper_map_migration_title(self) -> Optional[str]:
        return pulumi.get(self, "cloudwrapper_map_migration_title")

    @property
    @pulumi.getter(name="customMapEnabled")
    def custom_map_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "custom_map_enabled")

    @property
    @pulumi.getter(name="customMapName")
    def custom_map_name(self) -> Optional[str]:
        return pulumi.get(self, "custom_map_name")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="mapMigrationEnabled")
    def map_migration_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "map_migration_enabled")

    @property
    @pulumi.getter(name="migrationEndDate")
    def migration_end_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_end_date")

    @property
    @pulumi.getter(name="migrationStartDate")
    def migration_start_date(self) -> Optional[str]:
        return pulumi.get(self, "migration_start_date")

    @property
    @pulumi.getter(name="migrationWithinCwMapsEnabled")
    def migration_within_cw_maps_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "migration_within_cw_maps_enabled")

    @property
    @pulumi.getter(name="serialEnd")
    def serial_end(self) -> Optional[str]:
        return pulumi.get(self, "serial_end")

    @property
    @pulumi.getter(name="serialStart")
    def serial_start(self) -> Optional[str]:
        return pulumi.get(self, "serial_start")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tier1Title")
    def tier1_title(self) -> Optional[str]:
        return pulumi.get(self, "tier1_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorUidConfigurationResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 legal_text: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_name: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if legal_text is not None:
            pulumi.set(__self__, "legal_text", legal_text)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="legalText")
    def legal_text(self) -> Optional[str]:
        return pulumi.get(self, "legal_text")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorValidateEntityTagResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenResult(dict):
    def __init__(__self__, *,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyJsonWebTokenForDcpResult(dict):
    def __init__(__self__, *,
                 authorizations: Optional[str] = None,
                 client_id: Optional[str] = None,
                 custom_header: Optional[bool] = None,
                 enable_es256: Optional[bool] = None,
                 enable_rs256: Optional[bool] = None,
                 extract_authorizations: Optional[bool] = None,
                 extract_client_id: Optional[bool] = None,
                 extract_location: Optional[str] = None,
                 extract_user_name: Optional[bool] = None,
                 header_name: Optional[str] = None,
                 jwt: Optional[str] = None,
                 locked: Optional[bool] = None,
                 primary_location: Optional[str] = None,
                 query_parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 user_name: Optional[str] = None,
                 uuid: Optional[str] = None):
        if authorizations is not None:
            pulumi.set(__self__, "authorizations", authorizations)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if custom_header is not None:
            pulumi.set(__self__, "custom_header", custom_header)
        if enable_es256 is not None:
            pulumi.set(__self__, "enable_es256", enable_es256)
        if enable_rs256 is not None:
            pulumi.set(__self__, "enable_rs256", enable_rs256)
        if extract_authorizations is not None:
            pulumi.set(__self__, "extract_authorizations", extract_authorizations)
        if extract_client_id is not None:
            pulumi.set(__self__, "extract_client_id", extract_client_id)
        if extract_location is not None:
            pulumi.set(__self__, "extract_location", extract_location)
        if extract_user_name is not None:
            pulumi.set(__self__, "extract_user_name", extract_user_name)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if jwt is not None:
            pulumi.set(__self__, "jwt", jwt)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if primary_location is not None:
            pulumi.set(__self__, "primary_location", primary_location)
        if query_parameter_name is not None:
            pulumi.set(__self__, "query_parameter_name", query_parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def authorizations(self) -> Optional[str]:
        return pulumi.get(self, "authorizations")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="customHeader")
    def custom_header(self) -> Optional[bool]:
        return pulumi.get(self, "custom_header")

    @property
    @pulumi.getter(name="enableEs256")
    def enable_es256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_es256")

    @property
    @pulumi.getter(name="enableRs256")
    def enable_rs256(self) -> Optional[bool]:
        return pulumi.get(self, "enable_rs256")

    @property
    @pulumi.getter(name="extractAuthorizations")
    def extract_authorizations(self) -> Optional[bool]:
        return pulumi.get(self, "extract_authorizations")

    @property
    @pulumi.getter(name="extractClientId")
    def extract_client_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_client_id")

    @property
    @pulumi.getter(name="extractLocation")
    def extract_location(self) -> Optional[str]:
        return pulumi.get(self, "extract_location")

    @property
    @pulumi.getter(name="extractUserName")
    def extract_user_name(self) -> Optional[bool]:
        return pulumi.get(self, "extract_user_name")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def jwt(self) -> Optional[str]:
        return pulumi.get(self, "jwt")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="primaryLocation")
    def primary_location(self) -> Optional[str]:
        return pulumi.get(self, "primary_location")

    @property
    @pulumi.getter(name="queryParameterName")
    def query_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "query_parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVerifyTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 escape_hmac_inputs: Optional[bool] = None,
                 failure_response: Optional[bool] = None,
                 ignore_query_string: Optional[bool] = None,
                 key: Optional[str] = None,
                 location: Optional[str] = None,
                 location_id: Optional[str] = None,
                 locked: Optional[bool] = None,
                 salt: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 transition_key: Optional[str] = None,
                 use_advanced: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if escape_hmac_inputs is not None:
            pulumi.set(__self__, "escape_hmac_inputs", escape_hmac_inputs)
        if failure_response is not None:
            pulumi.set(__self__, "failure_response", failure_response)
        if ignore_query_string is not None:
            pulumi.set(__self__, "ignore_query_string", ignore_query_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if salt is not None:
            pulumi.set(__self__, "salt", salt)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if transition_key is not None:
            pulumi.set(__self__, "transition_key", transition_key)
        if use_advanced is not None:
            pulumi.set(__self__, "use_advanced", use_advanced)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="escapeHmacInputs")
    def escape_hmac_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "escape_hmac_inputs")

    @property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> Optional[bool]:
        return pulumi.get(self, "failure_response")

    @property
    @pulumi.getter(name="ignoreQueryString")
    def ignore_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_query_string")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def salt(self) -> Optional[str]:
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="transitionKey")
    def transition_key(self) -> Optional[str]:
        return pulumi.get(self, "transition_key")

    @property
    @pulumi.getter(name="useAdvanced")
    def use_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "use_advanced")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVirtualWaitingRoomWithEdgeWorkersResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationResult(dict):
    def __init__(__self__, *,
                 allowed_user_cookie_advanced: Optional[bool] = None,
                 allowed_user_cookie_automatic_salt: Optional[bool] = None,
                 allowed_user_cookie_domain: Optional[str] = None,
                 allowed_user_cookie_domain_type: Optional[str] = None,
                 allowed_user_cookie_duration: Optional[int] = None,
                 allowed_user_cookie_enabled: Optional[bool] = None,
                 allowed_user_cookie_http_only: Optional[bool] = None,
                 allowed_user_cookie_label: Optional[str] = None,
                 allowed_user_cookie_management_title: Optional[str] = None,
                 allowed_user_cookie_refresh: Optional[bool] = None,
                 allowed_user_cookie_salt: Optional[str] = None,
                 cloudlet_policy: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult'] = None,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 user_identification_by_cookie: Optional[bool] = None,
                 user_identification_by_headers: Optional[bool] = None,
                 user_identification_by_ip: Optional[bool] = None,
                 user_identification_by_params: Optional[bool] = None,
                 user_identification_key_cookie: Optional[str] = None,
                 user_identification_key_headers: Optional[Sequence[str]] = None,
                 user_identification_key_params: Optional[Sequence[str]] = None,
                 user_identification_title: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_cache_ttl: Optional[int] = None,
                 waiting_room_cookie_advanced: Optional[bool] = None,
                 waiting_room_cookie_automatic_salt: Optional[bool] = None,
                 waiting_room_cookie_domain: Optional[str] = None,
                 waiting_room_cookie_domain_type: Optional[str] = None,
                 waiting_room_cookie_duration: Optional[int] = None,
                 waiting_room_cookie_enabled: Optional[bool] = None,
                 waiting_room_cookie_http_only: Optional[bool] = None,
                 waiting_room_cookie_label: Optional[str] = None,
                 waiting_room_cookie_management_title: Optional[str] = None,
                 waiting_room_cookie_salt: Optional[str] = None,
                 waiting_room_cookie_share_label: Optional[bool] = None,
                 waiting_room_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult'] = None,
                 waiting_room_directory: Optional[str] = None,
                 waiting_room_management_title: Optional[str] = None,
                 waiting_room_net_storage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult'] = None,
                 waiting_room_status_code: Optional[int] = None,
                 waiting_room_use_cp_code: Optional[bool] = None):
        if allowed_user_cookie_advanced is not None:
            pulumi.set(__self__, "allowed_user_cookie_advanced", allowed_user_cookie_advanced)
        if allowed_user_cookie_automatic_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_automatic_salt", allowed_user_cookie_automatic_salt)
        if allowed_user_cookie_domain is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain", allowed_user_cookie_domain)
        if allowed_user_cookie_domain_type is not None:
            pulumi.set(__self__, "allowed_user_cookie_domain_type", allowed_user_cookie_domain_type)
        if allowed_user_cookie_duration is not None:
            pulumi.set(__self__, "allowed_user_cookie_duration", allowed_user_cookie_duration)
        if allowed_user_cookie_enabled is not None:
            pulumi.set(__self__, "allowed_user_cookie_enabled", allowed_user_cookie_enabled)
        if allowed_user_cookie_http_only is not None:
            pulumi.set(__self__, "allowed_user_cookie_http_only", allowed_user_cookie_http_only)
        if allowed_user_cookie_label is not None:
            pulumi.set(__self__, "allowed_user_cookie_label", allowed_user_cookie_label)
        if allowed_user_cookie_management_title is not None:
            pulumi.set(__self__, "allowed_user_cookie_management_title", allowed_user_cookie_management_title)
        if allowed_user_cookie_refresh is not None:
            pulumi.set(__self__, "allowed_user_cookie_refresh", allowed_user_cookie_refresh)
        if allowed_user_cookie_salt is not None:
            pulumi.set(__self__, "allowed_user_cookie_salt", allowed_user_cookie_salt)
        if cloudlet_policy is not None:
            pulumi.set(__self__, "cloudlet_policy", cloudlet_policy)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if user_identification_by_cookie is not None:
            pulumi.set(__self__, "user_identification_by_cookie", user_identification_by_cookie)
        if user_identification_by_headers is not None:
            pulumi.set(__self__, "user_identification_by_headers", user_identification_by_headers)
        if user_identification_by_ip is not None:
            pulumi.set(__self__, "user_identification_by_ip", user_identification_by_ip)
        if user_identification_by_params is not None:
            pulumi.set(__self__, "user_identification_by_params", user_identification_by_params)
        if user_identification_key_cookie is not None:
            pulumi.set(__self__, "user_identification_key_cookie", user_identification_key_cookie)
        if user_identification_key_headers is not None:
            pulumi.set(__self__, "user_identification_key_headers", user_identification_key_headers)
        if user_identification_key_params is not None:
            pulumi.set(__self__, "user_identification_key_params", user_identification_key_params)
        if user_identification_title is not None:
            pulumi.set(__self__, "user_identification_title", user_identification_title)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_cache_ttl is not None:
            pulumi.set(__self__, "waiting_room_cache_ttl", waiting_room_cache_ttl)
        if waiting_room_cookie_advanced is not None:
            pulumi.set(__self__, "waiting_room_cookie_advanced", waiting_room_cookie_advanced)
        if waiting_room_cookie_automatic_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_automatic_salt", waiting_room_cookie_automatic_salt)
        if waiting_room_cookie_domain is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain", waiting_room_cookie_domain)
        if waiting_room_cookie_domain_type is not None:
            pulumi.set(__self__, "waiting_room_cookie_domain_type", waiting_room_cookie_domain_type)
        if waiting_room_cookie_duration is not None:
            pulumi.set(__self__, "waiting_room_cookie_duration", waiting_room_cookie_duration)
        if waiting_room_cookie_enabled is not None:
            pulumi.set(__self__, "waiting_room_cookie_enabled", waiting_room_cookie_enabled)
        if waiting_room_cookie_http_only is not None:
            pulumi.set(__self__, "waiting_room_cookie_http_only", waiting_room_cookie_http_only)
        if waiting_room_cookie_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_label", waiting_room_cookie_label)
        if waiting_room_cookie_management_title is not None:
            pulumi.set(__self__, "waiting_room_cookie_management_title", waiting_room_cookie_management_title)
        if waiting_room_cookie_salt is not None:
            pulumi.set(__self__, "waiting_room_cookie_salt", waiting_room_cookie_salt)
        if waiting_room_cookie_share_label is not None:
            pulumi.set(__self__, "waiting_room_cookie_share_label", waiting_room_cookie_share_label)
        if waiting_room_cp_code is not None:
            pulumi.set(__self__, "waiting_room_cp_code", waiting_room_cp_code)
        if waiting_room_directory is not None:
            pulumi.set(__self__, "waiting_room_directory", waiting_room_directory)
        if waiting_room_management_title is not None:
            pulumi.set(__self__, "waiting_room_management_title", waiting_room_management_title)
        if waiting_room_net_storage is not None:
            pulumi.set(__self__, "waiting_room_net_storage", waiting_room_net_storage)
        if waiting_room_status_code is not None:
            pulumi.set(__self__, "waiting_room_status_code", waiting_room_status_code)
        if waiting_room_use_cp_code is not None:
            pulumi.set(__self__, "waiting_room_use_cp_code", waiting_room_use_cp_code)

    @property
    @pulumi.getter(name="allowedUserCookieAdvanced")
    def allowed_user_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_advanced")

    @property
    @pulumi.getter(name="allowedUserCookieAutomaticSalt")
    def allowed_user_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_automatic_salt")

    @property
    @pulumi.getter(name="allowedUserCookieDomain")
    def allowed_user_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain")

    @property
    @pulumi.getter(name="allowedUserCookieDomainType")
    def allowed_user_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_domain_type")

    @property
    @pulumi.getter(name="allowedUserCookieDuration")
    def allowed_user_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "allowed_user_cookie_duration")

    @property
    @pulumi.getter(name="allowedUserCookieEnabled")
    def allowed_user_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_enabled")

    @property
    @pulumi.getter(name="allowedUserCookieHttpOnly")
    def allowed_user_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_http_only")

    @property
    @pulumi.getter(name="allowedUserCookieLabel")
    def allowed_user_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_label")

    @property
    @pulumi.getter(name="allowedUserCookieManagementTitle")
    def allowed_user_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_management_title")

    @property
    @pulumi.getter(name="allowedUserCookieRefresh")
    def allowed_user_cookie_refresh(self) -> Optional[bool]:
        return pulumi.get(self, "allowed_user_cookie_refresh")

    @property
    @pulumi.getter(name="allowedUserCookieSalt")
    def allowed_user_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "allowed_user_cookie_salt")

    @property
    @pulumi.getter(name="cloudletPolicy")
    def cloudlet_policy(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult']:
        return pulumi.get(self, "cloudlet_policy")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="userIdentificationByCookie")
    def user_identification_by_cookie(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_cookie")

    @property
    @pulumi.getter(name="userIdentificationByHeaders")
    def user_identification_by_headers(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_headers")

    @property
    @pulumi.getter(name="userIdentificationByIp")
    def user_identification_by_ip(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_ip")

    @property
    @pulumi.getter(name="userIdentificationByParams")
    def user_identification_by_params(self) -> Optional[bool]:
        return pulumi.get(self, "user_identification_by_params")

    @property
    @pulumi.getter(name="userIdentificationKeyCookie")
    def user_identification_key_cookie(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_key_cookie")

    @property
    @pulumi.getter(name="userIdentificationKeyHeaders")
    def user_identification_key_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_headers")

    @property
    @pulumi.getter(name="userIdentificationKeyParams")
    def user_identification_key_params(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_identification_key_params")

    @property
    @pulumi.getter(name="userIdentificationTitle")
    def user_identification_title(self) -> Optional[str]:
        return pulumi.get(self, "user_identification_title")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomCacheTtl")
    def waiting_room_cache_ttl(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cache_ttl")

    @property
    @pulumi.getter(name="waitingRoomCookieAdvanced")
    def waiting_room_cookie_advanced(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_advanced")

    @property
    @pulumi.getter(name="waitingRoomCookieAutomaticSalt")
    def waiting_room_cookie_automatic_salt(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_automatic_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieDomain")
    def waiting_room_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain")

    @property
    @pulumi.getter(name="waitingRoomCookieDomainType")
    def waiting_room_cookie_domain_type(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_domain_type")

    @property
    @pulumi.getter(name="waitingRoomCookieDuration")
    def waiting_room_cookie_duration(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_cookie_duration")

    @property
    @pulumi.getter(name="waitingRoomCookieEnabled")
    def waiting_room_cookie_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_enabled")

    @property
    @pulumi.getter(name="waitingRoomCookieHttpOnly")
    def waiting_room_cookie_http_only(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_http_only")

    @property
    @pulumi.getter(name="waitingRoomCookieLabel")
    def waiting_room_cookie_label(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_label")

    @property
    @pulumi.getter(name="waitingRoomCookieManagementTitle")
    def waiting_room_cookie_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_management_title")

    @property
    @pulumi.getter(name="waitingRoomCookieSalt")
    def waiting_room_cookie_salt(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_cookie_salt")

    @property
    @pulumi.getter(name="waitingRoomCookieShareLabel")
    def waiting_room_cookie_share_label(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_cookie_share_label")

    @property
    @pulumi.getter(name="waitingRoomCpCode")
    def waiting_room_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult']:
        return pulumi.get(self, "waiting_room_cp_code")

    @property
    @pulumi.getter(name="waitingRoomDirectory")
    def waiting_room_directory(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_directory")

    @property
    @pulumi.getter(name="waitingRoomManagementTitle")
    def waiting_room_management_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_management_title")

    @property
    @pulumi.getter(name="waitingRoomNetStorage")
    def waiting_room_net_storage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult']:
        return pulumi.get(self, "waiting_room_net_storage")

    @property
    @pulumi.getter(name="waitingRoomStatusCode")
    def waiting_room_status_code(self) -> Optional[int]:
        return pulumi.get(self, "waiting_room_status_code")

    @property
    @pulumi.getter(name="waitingRoomUseCpCode")
    def waiting_room_use_cp_code(self) -> Optional[bool]:
        return pulumi.get(self, "waiting_room_use_cp_code")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicyResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoResult(dict):
    def __init__(__self__, *,
                 access_title: Optional[str] = None,
                 cloudlet_shared_policy: Optional[int] = None,
                 custom_cookie_domain: Optional[str] = None,
                 domain_config: Optional[str] = None,
                 locked: Optional[bool] = None,
                 session_auto_prolong: Optional[bool] = None,
                 session_duration: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 waiting_room_assets_paths: Optional[Sequence[str]] = None,
                 waiting_room_path: Optional[str] = None,
                 waiting_room_title: Optional[str] = None):
        if access_title is not None:
            pulumi.set(__self__, "access_title", access_title)
        if cloudlet_shared_policy is not None:
            pulumi.set(__self__, "cloudlet_shared_policy", cloudlet_shared_policy)
        if custom_cookie_domain is not None:
            pulumi.set(__self__, "custom_cookie_domain", custom_cookie_domain)
        if domain_config is not None:
            pulumi.set(__self__, "domain_config", domain_config)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if session_auto_prolong is not None:
            pulumi.set(__self__, "session_auto_prolong", session_auto_prolong)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if waiting_room_assets_paths is not None:
            pulumi.set(__self__, "waiting_room_assets_paths", waiting_room_assets_paths)
        if waiting_room_path is not None:
            pulumi.set(__self__, "waiting_room_path", waiting_room_path)
        if waiting_room_title is not None:
            pulumi.set(__self__, "waiting_room_title", waiting_room_title)

    @property
    @pulumi.getter(name="accessTitle")
    def access_title(self) -> Optional[str]:
        return pulumi.get(self, "access_title")

    @property
    @pulumi.getter(name="cloudletSharedPolicy")
    def cloudlet_shared_policy(self) -> Optional[int]:
        return pulumi.get(self, "cloudlet_shared_policy")

    @property
    @pulumi.getter(name="customCookieDomain")
    def custom_cookie_domain(self) -> Optional[str]:
        return pulumi.get(self, "custom_cookie_domain")

    @property
    @pulumi.getter(name="domainConfig")
    def domain_config(self) -> Optional[str]:
        return pulumi.get(self, "domain_config")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="sessionAutoProlong")
    def session_auto_prolong(self) -> Optional[bool]:
        return pulumi.get(self, "session_auto_prolong")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[int]:
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="waitingRoomAssetsPaths")
    def waiting_room_assets_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "waiting_room_assets_paths")

    @property
    @pulumi.getter(name="waitingRoomPath")
    def waiting_room_path(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_path")

    @property
    @pulumi.getter(name="waitingRoomTitle")
    def waiting_room_title(self) -> Optional[str]:
        return pulumi.get(self, "waiting_room_title")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationFifoStandaloneResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorageResult(dict):
    def __init__(__self__, *,
                 cp_code: Optional[int] = None,
                 download_domain_name: Optional[str] = None,
                 g2o_token: Optional[str] = None):
        if cp_code is not None:
            pulumi.set(__self__, "cp_code", cp_code)
        if download_domain_name is not None:
            pulumi.set(__self__, "download_domain_name", download_domain_name)
        if g2o_token is not None:
            pulumi.set(__self__, "g2o_token", g2o_token)

    @property
    @pulumi.getter(name="cpCode")
    def cp_code(self) -> Optional[int]:
        return pulumi.get(self, "cp_code")

    @property
    @pulumi.getter(name="downloadDomainName")
    def download_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "download_domain_name")

    @property
    @pulumi.getter(name="g2oToken")
    def g2o_token(self) -> Optional[str]:
        return pulumi.get(self, "g2o_token")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWatermarkingResult(dict):
    def __init__(__self__, *,
                 ab_variant_location: Optional[str] = None,
                 decryption_password1: Optional[str] = None,
                 decryption_password2: Optional[str] = None,
                 decryption_password_id1: Optional[str] = None,
                 decryption_password_id2: Optional[str] = None,
                 enable: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 miscellaneous_settings_title: Optional[str] = None,
                 pattern_decryption_enable: Optional[bool] = None,
                 pattern_encryption_title: Optional[str] = None,
                 signature_verification_enable: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 token_signing_title: Optional[str] = None,
                 use_original_as_a: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 verification_key_id1: Optional[str] = None,
                 verification_key_id2: Optional[str] = None,
                 verification_public_key1: Optional[str] = None,
                 verification_public_key2: Optional[str] = None):
        if ab_variant_location is not None:
            pulumi.set(__self__, "ab_variant_location", ab_variant_location)
        if decryption_password1 is not None:
            pulumi.set(__self__, "decryption_password1", decryption_password1)
        if decryption_password2 is not None:
            pulumi.set(__self__, "decryption_password2", decryption_password2)
        if decryption_password_id1 is not None:
            pulumi.set(__self__, "decryption_password_id1", decryption_password_id1)
        if decryption_password_id2 is not None:
            pulumi.set(__self__, "decryption_password_id2", decryption_password_id2)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if miscellaneous_settings_title is not None:
            pulumi.set(__self__, "miscellaneous_settings_title", miscellaneous_settings_title)
        if pattern_decryption_enable is not None:
            pulumi.set(__self__, "pattern_decryption_enable", pattern_decryption_enable)
        if pattern_encryption_title is not None:
            pulumi.set(__self__, "pattern_encryption_title", pattern_encryption_title)
        if signature_verification_enable is not None:
            pulumi.set(__self__, "signature_verification_enable", signature_verification_enable)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if token_signing_title is not None:
            pulumi.set(__self__, "token_signing_title", token_signing_title)
        if use_original_as_a is not None:
            pulumi.set(__self__, "use_original_as_a", use_original_as_a)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if verification_key_id1 is not None:
            pulumi.set(__self__, "verification_key_id1", verification_key_id1)
        if verification_key_id2 is not None:
            pulumi.set(__self__, "verification_key_id2", verification_key_id2)
        if verification_public_key1 is not None:
            pulumi.set(__self__, "verification_public_key1", verification_public_key1)
        if verification_public_key2 is not None:
            pulumi.set(__self__, "verification_public_key2", verification_public_key2)

    @property
    @pulumi.getter(name="abVariantLocation")
    def ab_variant_location(self) -> Optional[str]:
        return pulumi.get(self, "ab_variant_location")

    @property
    @pulumi.getter(name="decryptionPassword1")
    def decryption_password1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password1")

    @property
    @pulumi.getter(name="decryptionPassword2")
    def decryption_password2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password2")

    @property
    @pulumi.getter(name="decryptionPasswordId1")
    def decryption_password_id1(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id1")

    @property
    @pulumi.getter(name="decryptionPasswordId2")
    def decryption_password_id2(self) -> Optional[str]:
        return pulumi.get(self, "decryption_password_id2")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="miscellaneousSettingsTitle")
    def miscellaneous_settings_title(self) -> Optional[str]:
        return pulumi.get(self, "miscellaneous_settings_title")

    @property
    @pulumi.getter(name="patternDecryptionEnable")
    def pattern_decryption_enable(self) -> Optional[bool]:
        return pulumi.get(self, "pattern_decryption_enable")

    @property
    @pulumi.getter(name="patternEncryptionTitle")
    def pattern_encryption_title(self) -> Optional[str]:
        return pulumi.get(self, "pattern_encryption_title")

    @property
    @pulumi.getter(name="signatureVerificationEnable")
    def signature_verification_enable(self) -> Optional[bool]:
        return pulumi.get(self, "signature_verification_enable")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="tokenSigningTitle")
    def token_signing_title(self) -> Optional[str]:
        return pulumi.get(self, "token_signing_title")

    @property
    @pulumi.getter(name="useOriginalAsA")
    def use_original_as_a(self) -> Optional[bool]:
        return pulumi.get(self, "use_original_as_a")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="verificationKeyId1")
    def verification_key_id1(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id1")

    @property
    @pulumi.getter(name="verificationKeyId2")
    def verification_key_id2(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_id2")

    @property
    @pulumi.getter(name="verificationPublicKey1")
    def verification_public_key1(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key1")

    @property
    @pulumi.getter(name="verificationPublicKey2")
    def verification_public_key2(self) -> Optional[str]:
        return pulumi.get(self, "verification_public_key2")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallResult(dict):
    def __init__(__self__, *,
                 firewall_configuration: Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult'] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if firewall_configuration is not None:
            pulumi.set(__self__, "firewall_configuration", firewall_configuration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="firewallConfiguration")
    def firewall_configuration(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult']:
        return pulumi.get(self, "firewall_configuration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebApplicationFirewallFirewallConfigurationResult(dict):
    def __init__(__self__, *,
                 config_id: Optional[int] = None,
                 file_name: Optional[str] = None,
                 production_status: Optional[str] = None,
                 production_version: Optional[int] = None,
                 staging_status: Optional[str] = None,
                 staging_version: Optional[int] = None):
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if production_version is not None:
            pulumi.set(__self__, "production_version", production_version)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if staging_version is not None:
            pulumi.set(__self__, "staging_version", staging_version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> Optional[int]:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> Optional[int]:
        return pulumi.get(self, "staging_version")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebSocketsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530BehaviorWebdavResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionResult(dict):
    def __init__(__self__, *,
                 advanced_im_match: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult'] = None,
                 bucket: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionBucketResult'] = None,
                 cacheability: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult'] = None,
                 china_cdn_region: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult'] = None,
                 client_certificate: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult'] = None,
                 client_ip: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult'] = None,
                 client_ip_version: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult'] = None,
                 cloudlets_origin: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult'] = None,
                 content_delivery_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult'] = None,
                 content_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult'] = None,
                 device_characteristic: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult'] = None,
                 ecmd_auth_groups: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult'] = None,
                 ecmd_auth_scheme: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult'] = None,
                 ecmd_is_authenticated: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult'] = None,
                 ecmd_username: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult'] = None,
                 edge_workers_failure: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult'] = None,
                 file_extension: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult'] = None,
                 filename: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult'] = None,
                 hostname: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult'] = None,
                 match_advanced: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult'] = None,
                 match_cp_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult'] = None,
                 match_response_code: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult'] = None,
                 match_variable: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult'] = None,
                 metadata_stage: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult'] = None,
                 origin_timeout: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult'] = None,
                 path: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionPathResult'] = None,
                 query_string_parameter: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult'] = None,
                 random: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRandomResult'] = None,
                 recovery_config: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult'] = None,
                 regular_expression: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult'] = None,
                 request_cookie: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult'] = None,
                 request_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult'] = None,
                 request_method: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult'] = None,
                 request_protocol: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult'] = None,
                 request_type: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult'] = None,
                 response_header: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult'] = None,
                 server_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult'] = None,
                 time: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTimeResult'] = None,
                 token_authorization: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult'] = None,
                 user_agent: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult'] = None,
                 user_location: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult'] = None,
                 user_network: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult'] = None,
                 variable_error: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult'] = None,
                 virtual_waiting_room_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult'] = None,
                 visitor_prioritization_request: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult'] = None):
        if advanced_im_match is not None:
            pulumi.set(__self__, "advanced_im_match", advanced_im_match)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cacheability is not None:
            pulumi.set(__self__, "cacheability", cacheability)
        if china_cdn_region is not None:
            pulumi.set(__self__, "china_cdn_region", china_cdn_region)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_ip_version is not None:
            pulumi.set(__self__, "client_ip_version", client_ip_version)
        if cloudlets_origin is not None:
            pulumi.set(__self__, "cloudlets_origin", cloudlets_origin)
        if content_delivery_network is not None:
            pulumi.set(__self__, "content_delivery_network", content_delivery_network)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if device_characteristic is not None:
            pulumi.set(__self__, "device_characteristic", device_characteristic)
        if ecmd_auth_groups is not None:
            pulumi.set(__self__, "ecmd_auth_groups", ecmd_auth_groups)
        if ecmd_auth_scheme is not None:
            pulumi.set(__self__, "ecmd_auth_scheme", ecmd_auth_scheme)
        if ecmd_is_authenticated is not None:
            pulumi.set(__self__, "ecmd_is_authenticated", ecmd_is_authenticated)
        if ecmd_username is not None:
            pulumi.set(__self__, "ecmd_username", ecmd_username)
        if edge_workers_failure is not None:
            pulumi.set(__self__, "edge_workers_failure", edge_workers_failure)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if match_advanced is not None:
            pulumi.set(__self__, "match_advanced", match_advanced)
        if match_cp_code is not None:
            pulumi.set(__self__, "match_cp_code", match_cp_code)
        if match_response_code is not None:
            pulumi.set(__self__, "match_response_code", match_response_code)
        if match_variable is not None:
            pulumi.set(__self__, "match_variable", match_variable)
        if metadata_stage is not None:
            pulumi.set(__self__, "metadata_stage", metadata_stage)
        if origin_timeout is not None:
            pulumi.set(__self__, "origin_timeout", origin_timeout)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query_string_parameter is not None:
            pulumi.set(__self__, "query_string_parameter", query_string_parameter)
        if random is not None:
            pulumi.set(__self__, "random", random)
        if recovery_config is not None:
            pulumi.set(__self__, "recovery_config", recovery_config)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if request_cookie is not None:
            pulumi.set(__self__, "request_cookie", request_cookie)
        if request_header is not None:
            pulumi.set(__self__, "request_header", request_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if response_header is not None:
            pulumi.set(__self__, "response_header", response_header)
        if server_location is not None:
            pulumi.set(__self__, "server_location", server_location)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if token_authorization is not None:
            pulumi.set(__self__, "token_authorization", token_authorization)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if user_location is not None:
            pulumi.set(__self__, "user_location", user_location)
        if user_network is not None:
            pulumi.set(__self__, "user_network", user_network)
        if variable_error is not None:
            pulumi.set(__self__, "variable_error", variable_error)
        if virtual_waiting_room_request is not None:
            pulumi.set(__self__, "virtual_waiting_room_request", virtual_waiting_room_request)
        if visitor_prioritization_request is not None:
            pulumi.set(__self__, "visitor_prioritization_request", visitor_prioritization_request)

    @property
    @pulumi.getter(name="advancedImMatch")
    def advanced_im_match(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult']:
        return pulumi.get(self, "advanced_im_match")

    @property
    @pulumi.getter
    def bucket(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionBucketResult']:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def cacheability(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult']:
        return pulumi.get(self, "cacheability")

    @property
    @pulumi.getter(name="chinaCdnRegion")
    def china_cdn_region(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult']:
        return pulumi.get(self, "china_cdn_region")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult']:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult']:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientIpVersion")
    def client_ip_version(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult']:
        return pulumi.get(self, "client_ip_version")

    @property
    @pulumi.getter(name="cloudletsOrigin")
    def cloudlets_origin(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult']:
        return pulumi.get(self, "cloudlets_origin")

    @property
    @pulumi.getter(name="contentDeliveryNetwork")
    def content_delivery_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult']:
        return pulumi.get(self, "content_delivery_network")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult']:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deviceCharacteristic")
    def device_characteristic(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult']:
        return pulumi.get(self, "device_characteristic")

    @property
    @pulumi.getter(name="ecmdAuthGroups")
    def ecmd_auth_groups(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult']:
        return pulumi.get(self, "ecmd_auth_groups")

    @property
    @pulumi.getter(name="ecmdAuthScheme")
    def ecmd_auth_scheme(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult']:
        return pulumi.get(self, "ecmd_auth_scheme")

    @property
    @pulumi.getter(name="ecmdIsAuthenticated")
    def ecmd_is_authenticated(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult']:
        return pulumi.get(self, "ecmd_is_authenticated")

    @property
    @pulumi.getter(name="ecmdUsername")
    def ecmd_username(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult']:
        return pulumi.get(self, "ecmd_username")

    @property
    @pulumi.getter(name="edgeWorkersFailure")
    def edge_workers_failure(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult']:
        return pulumi.get(self, "edge_workers_failure")

    @property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult']:
        return pulumi.get(self, "file_extension")

    @property
    @pulumi.getter
    def filename(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult']:
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def hostname(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult']:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="matchAdvanced")
    def match_advanced(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult']:
        return pulumi.get(self, "match_advanced")

    @property
    @pulumi.getter(name="matchCpCode")
    def match_cp_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult']:
        return pulumi.get(self, "match_cp_code")

    @property
    @pulumi.getter(name="matchResponseCode")
    def match_response_code(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult']:
        return pulumi.get(self, "match_response_code")

    @property
    @pulumi.getter(name="matchVariable")
    def match_variable(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult']:
        return pulumi.get(self, "match_variable")

    @property
    @pulumi.getter(name="metadataStage")
    def metadata_stage(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult']:
        return pulumi.get(self, "metadata_stage")

    @property
    @pulumi.getter(name="originTimeout")
    def origin_timeout(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult']:
        return pulumi.get(self, "origin_timeout")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionPathResult']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="queryStringParameter")
    def query_string_parameter(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult']:
        return pulumi.get(self, "query_string_parameter")

    @property
    @pulumi.getter
    def random(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRandomResult']:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="recoveryConfig")
    def recovery_config(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult']:
        return pulumi.get(self, "recovery_config")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult']:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="requestCookie")
    def request_cookie(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult']:
        return pulumi.get(self, "request_cookie")

    @property
    @pulumi.getter(name="requestHeader")
    def request_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult']:
        return pulumi.get(self, "request_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult']:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult']:
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult']:
        return pulumi.get(self, "request_type")

    @property
    @pulumi.getter(name="responseHeader")
    def response_header(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult']:
        return pulumi.get(self, "response_header")

    @property
    @pulumi.getter(name="serverLocation")
    def server_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult']:
        return pulumi.get(self, "server_location")

    @property
    @pulumi.getter
    def time(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTimeResult']:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tokenAuthorization")
    def token_authorization(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult']:
        return pulumi.get(self, "token_authorization")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult']:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="userLocation")
    def user_location(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult']:
        return pulumi.get(self, "user_location")

    @property
    @pulumi.getter(name="userNetwork")
    def user_network(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult']:
        return pulumi.get(self, "user_network")

    @property
    @pulumi.getter(name="variableError")
    def variable_error(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult']:
        return pulumi.get(self, "variable_error")

    @property
    @pulumi.getter(name="virtualWaitingRoomRequest")
    def virtual_waiting_room_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult']:
        return pulumi.get(self, "virtual_waiting_room_request")

    @property
    @pulumi.getter(name="visitorPrioritizationRequest")
    def visitor_prioritization_request(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult']:
        return pulumi.get(self, "visitor_prioritization_request")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionAdvancedImMatchResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionBucketResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 percentage: Optional[int] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionCacheabilityResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionChinaCdnRegionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientCertificateResult(dict):
    def __init__(__self__, *,
                 is_certificate_present: Optional[bool] = None,
                 is_certificate_valid: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if is_certificate_present is not None:
            pulumi.set(__self__, "is_certificate_present", is_certificate_present)
        if is_certificate_valid is not None:
            pulumi.set(__self__, "is_certificate_valid", is_certificate_valid)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="isCertificatePresent")
    def is_certificate_present(self) -> Optional[bool]:
        return pulumi.get(self, "is_certificate_present")

    @property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> Optional[str]:
        return pulumi.get(self, "is_certificate_valid")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 use_headers: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_headers is not None:
            pulumi.set(__self__, "use_headers", use_headers)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useHeaders")
    def use_headers(self) -> Optional[bool]:
        return pulumi.get(self, "use_headers")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionClientIpVersionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 use_x_forwarded_for: Optional[bool] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_x_forwarded_for is not None:
            pulumi.set(__self__, "use_x_forwarded_for", use_x_forwarded_for)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useXForwardedFor")
    def use_x_forwarded_for(self) -> Optional[bool]:
        return pulumi.get(self, "use_x_forwarded_for")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionCloudletsOriginResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 origin_id: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if origin_id is not None:
            pulumi.set(__self__, "origin_id", origin_id)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> Optional[str]:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentDeliveryNetworkResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionContentTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionDeviceCharacteristicResult(dict):
    def __init__(__self__, *,
                 boolean_value: Optional[bool] = None,
                 characteristic: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_wildcard: Optional[bool] = None,
                 numeric_match_operator: Optional[str] = None,
                 numeric_value: Optional[int] = None,
                 string_match_operator: Optional[str] = None,
                 string_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 version_match_operator: Optional[str] = None,
                 version_value: Optional[str] = None):
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if characteristic is not None:
            pulumi.set(__self__, "characteristic", characteristic)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if numeric_match_operator is not None:
            pulumi.set(__self__, "numeric_match_operator", numeric_match_operator)
        if numeric_value is not None:
            pulumi.set(__self__, "numeric_value", numeric_value)
        if string_match_operator is not None:
            pulumi.set(__self__, "string_match_operator", string_match_operator)
        if string_values is not None:
            pulumi.set(__self__, "string_values", string_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version_match_operator is not None:
            pulumi.set(__self__, "version_match_operator", version_match_operator)
        if version_value is not None:
            pulumi.set(__self__, "version_value", version_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[bool]:
        return pulumi.get(self, "boolean_value")

    @property
    @pulumi.getter
    def characteristic(self) -> Optional[str]:
        return pulumi.get(self, "characteristic")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="numericMatchOperator")
    def numeric_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "numeric_match_operator")

    @property
    @pulumi.getter(name="numericValue")
    def numeric_value(self) -> Optional[int]:
        return pulumi.get(self, "numeric_value")

    @property
    @pulumi.getter(name="stringMatchOperator")
    def string_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "string_match_operator")

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "string_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="versionMatchOperator")
    def version_match_operator(self) -> Optional[str]:
        return pulumi.get(self, "version_match_operator")

    @property
    @pulumi.getter(name="versionValue")
    def version_value(self) -> Optional[str]:
        return pulumi.get(self, "version_value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthGroupsResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdAuthSchemeResult(dict):
    def __init__(__self__, *,
                 auth_scheme: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if auth_scheme is not None:
            pulumi.set(__self__, "auth_scheme", auth_scheme)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[str]:
        return pulumi.get(self, "auth_scheme")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdIsAuthenticatedResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEcmdUsernameResult(dict):
    def __init__(__self__, *,
                 length: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionEdgeWorkersFailureResult(dict):
    def __init__(__self__, *,
                 exec_status: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if exec_status is not None:
            pulumi.set(__self__, "exec_status", exec_status)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="execStatus")
    def exec_status(self) -> Optional[str]:
        return pulumi.get(self, "exec_status")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionFileExtensionResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionFilenameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionHostnameResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchAdvancedResult(dict):
    def __init__(__self__, *,
                 close_xml: Optional[str] = None,
                 description: Optional[str] = None,
                 locked: Optional[bool] = None,
                 open_xml: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if close_xml is not None:
            pulumi.set(__self__, "close_xml", close_xml)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if open_xml is not None:
            pulumi.set(__self__, "open_xml", open_xml)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="closeXml")
    def close_xml(self) -> Optional[str]:
        return pulumi.get(self, "close_xml")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="openXml")
    def open_xml(self) -> Optional[str]:
        return pulumi.get(self, "open_xml")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult'] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult']:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueResult(dict):
    def __init__(__self__, *,
                 cp_code_limits: Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult'] = None,
                 created_date: Optional[int] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 products: Optional[Sequence[str]] = None):
        if cp_code_limits is not None:
            pulumi.set(__self__, "cp_code_limits", cp_code_limits)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if products is not None:
            pulumi.set(__self__, "products", products)

    @property
    @pulumi.getter(name="cpCodeLimits")
    def cp_code_limits(self) -> Optional['outputs.GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult']:
        return pulumi.get(self, "cp_code_limits")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[int]:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchCpCodeValueCpCodeLimitsResult(dict):
    def __init__(__self__, *,
                 current_capacity: Optional[int] = None,
                 limit: Optional[int] = None,
                 limit_type: Optional[str] = None):
        if current_capacity is not None:
            pulumi.set(__self__, "current_capacity", current_capacity)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if limit_type is not None:
            pulumi.set(__self__, "limit_type", limit_type)

    @property
    @pulumi.getter(name="currentCapacity")
    def current_capacity(self) -> Optional[int]:
        return pulumi.get(self, "current_capacity")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchResponseCodeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMatchVariableResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[str] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_expression: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 variable_values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_expression is not None:
            pulumi.set(__self__, "variable_expression", variable_expression)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if variable_values is not None:
            pulumi.set(__self__, "variable_values", variable_values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[str]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[str]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableExpression")
    def variable_expression(self) -> Optional[str]:
        return pulumi.get(self, "variable_expression")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="variableValues")
    def variable_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionMetadataStageResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionOriginTimeoutResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionPathResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if normalize is not None:
            pulumi.set(__self__, "normalize", normalize)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionQueryStringParameterResult(dict):
    def __init__(__self__, *,
                 escape_value: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 parameter_name: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if escape_value is not None:
            pulumi.set(__self__, "escape_value", escape_value)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="escapeValue")
    def escape_value(self) -> Optional[bool]:
        return pulumi.get(self, "escape_value")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRandomResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[int] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[int]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRecoveryConfigResult(dict):
    def __init__(__self__, *,
                 config_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[str]:
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRegularExpressionResult(dict):
    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None,
                 locked: Optional[bool] = None,
                 match_string: Optional[str] = None,
                 regex: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestCookieResult(dict):
    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_name: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_name is not None:
            pulumi.set(__self__, "match_case_sensitive_name", match_case_sensitive_name)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveName")
    def match_case_sensitive_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_name")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestMethodResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestProtocolResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionRequestTypeResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 value: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionResponseHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 locked: Optional[bool] = None,
                 lower_bound: Optional[int] = None,
                 match_case_sensitive_value: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard_name: Optional[bool] = None,
                 match_wildcard_value: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 upper_bound: Optional[int] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if lower_bound is not None:
            pulumi.set(__self__, "lower_bound", lower_bound)
        if match_case_sensitive_value is not None:
            pulumi.set(__self__, "match_case_sensitive_value", match_case_sensitive_value)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard_name is not None:
            pulumi.set(__self__, "match_wildcard_name", match_wildcard_name)
        if match_wildcard_value is not None:
            pulumi.set(__self__, "match_wildcard_value", match_wildcard_value)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if upper_bound is not None:
            pulumi.set(__self__, "upper_bound", upper_bound)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[int]:
        return pulumi.get(self, "lower_bound")

    @property
    @pulumi.getter(name="matchCaseSensitiveValue")
    def match_case_sensitive_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive_value")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcardName")
    def match_wildcard_name(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_name")

    @property
    @pulumi.getter(name="matchWildcardValue")
    def match_wildcard_value(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard_value")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[int]:
        return pulumi.get(self, "upper_bound")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionServerLocationResult(dict):
    def __init__(__self__, *,
                 continents: Optional[Sequence[str]] = None,
                 countries: Optional[Sequence[str]] = None,
                 location_type: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 regions: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if continents is not None:
            pulumi.set(__self__, "continents", continents)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if location_type is not None:
            pulumi.set(__self__, "location_type", location_type)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def continents(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continents")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter(name="locationType")
    def location_type(self) -> Optional[str]:
        return pulumi.get(self, "location_type")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionTimeResult(dict):
    def __init__(__self__, *,
                 apply_daylight_savings_time: Optional[bool] = None,
                 begin_date: Optional[str] = None,
                 end_date: Optional[str] = None,
                 lasting_date: Optional[str] = None,
                 lasting_duration: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 repeat_begin_date: Optional[str] = None,
                 repeat_duration: Optional[str] = None,
                 repeat_interval: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if apply_daylight_savings_time is not None:
            pulumi.set(__self__, "apply_daylight_savings_time", apply_daylight_savings_time)
        if begin_date is not None:
            pulumi.set(__self__, "begin_date", begin_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if lasting_date is not None:
            pulumi.set(__self__, "lasting_date", lasting_date)
        if lasting_duration is not None:
            pulumi.set(__self__, "lasting_duration", lasting_duration)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if repeat_begin_date is not None:
            pulumi.set(__self__, "repeat_begin_date", repeat_begin_date)
        if repeat_duration is not None:
            pulumi.set(__self__, "repeat_duration", repeat_duration)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="applyDaylightSavingsTime")
    def apply_daylight_savings_time(self) -> Optional[bool]:
        return pulumi.get(self, "apply_daylight_savings_time")

    @property
    @pulumi.getter(name="beginDate")
    def begin_date(self) -> Optional[str]:
        return pulumi.get(self, "begin_date")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="lastingDate")
    def lasting_date(self) -> Optional[str]:
        return pulumi.get(self, "lasting_date")

    @property
    @pulumi.getter(name="lastingDuration")
    def lasting_duration(self) -> Optional[str]:
        return pulumi.get(self, "lasting_duration")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="repeatBeginDate")
    def repeat_begin_date(self) -> Optional[str]:
        return pulumi.get(self, "repeat_begin_date")

    @property
    @pulumi.getter(name="repeatDuration")
    def repeat_duration(self) -> Optional[str]:
        return pulumi.get(self, "repeat_duration")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[str]:
        return pulumi.get(self, "repeat_interval")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionTokenAuthorizationResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 status_lists: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if status_lists is not None:
            pulumi.set(__self__, "status_lists", status_lists)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="statusLists")
    def status_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "status_lists")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserAgentResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_case_sensitive: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 match_wildcard: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_case_sensitive is not None:
            pulumi.set(__self__, "match_case_sensitive", match_case_sensitive)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if match_wildcard is not None:
            pulumi.set(__self__, "match_wildcard", match_wildcard)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchCaseSensitive")
    def match_case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "match_case_sensitive")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="matchWildcard")
    def match_wildcard(self) -> Optional[bool]:
        return pulumi.get(self, "match_wildcard")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserLocationResult(dict):
    def __init__(__self__, *,
                 check_ips: Optional[str] = None,
                 continent_values: Optional[Sequence[str]] = None,
                 country_values: Optional[Sequence[str]] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 region_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if continent_values is not None:
            pulumi.set(__self__, "continent_values", continent_values)
        if country_values is not None:
            pulumi.set(__self__, "country_values", country_values)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if region_values is not None:
            pulumi.set(__self__, "region_values", region_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter(name="continentValues")
    def continent_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "continent_values")

    @property
    @pulumi.getter(name="countryValues")
    def country_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "country_values")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="regionValues")
    def region_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "region_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionUserNetworkResult(dict):
    def __init__(__self__, *,
                 bandwidth_values: Optional[Sequence[str]] = None,
                 check_ips: Optional[str] = None,
                 field: Optional[str] = None,
                 locked: Optional[bool] = None,
                 match_operator: Optional[str] = None,
                 network_type_values: Optional[Sequence[str]] = None,
                 network_values: Optional[Sequence[str]] = None,
                 template_uuid: Optional[str] = None,
                 use_only_first_x_forwarded_for_ip: Optional[bool] = None,
                 uuid: Optional[str] = None):
        if bandwidth_values is not None:
            pulumi.set(__self__, "bandwidth_values", bandwidth_values)
        if check_ips is not None:
            pulumi.set(__self__, "check_ips", check_ips)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if network_type_values is not None:
            pulumi.set(__self__, "network_type_values", network_type_values)
        if network_values is not None:
            pulumi.set(__self__, "network_values", network_values)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if use_only_first_x_forwarded_for_ip is not None:
            pulumi.set(__self__, "use_only_first_x_forwarded_for_ip", use_only_first_x_forwarded_for_ip)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="bandwidthValues")
    def bandwidth_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bandwidth_values")

    @property
    @pulumi.getter(name="checkIps")
    def check_ips(self) -> Optional[str]:
        return pulumi.get(self, "check_ips")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="networkTypeValues")
    def network_type_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_type_values")

    @property
    @pulumi.getter(name="networkValues")
    def network_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "network_values")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter(name="useOnlyFirstXForwardedForIp")
    def use_only_first_x_forwarded_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "use_only_first_x_forwarded_for_ip")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVariableErrorResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 result: Optional[bool] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None,
                 variable_names: Optional[Sequence[str]] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if variable_names is not None:
            pulumi.set(__self__, "variable_names", variable_names)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def result(self) -> Optional[bool]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter(name="variableNames")
    def variable_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "variable_names")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVirtualWaitingRoomRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CriterionVisitorPrioritizationRequestResult(dict):
    def __init__(__self__, *,
                 locked: Optional[bool] = None,
                 match_on: Optional[str] = None,
                 match_operator: Optional[str] = None,
                 template_uuid: Optional[str] = None,
                 uuid: Optional[str] = None):
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if match_on is not None:
            pulumi.set(__self__, "match_on", match_on)
        if match_operator is not None:
            pulumi.set(__self__, "match_operator", match_operator)
        if template_uuid is not None:
            pulumi.set(__self__, "template_uuid", template_uuid)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter(name="matchOn")
    def match_on(self) -> Optional[str]:
        return pulumi.get(self, "match_on")

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> Optional[str]:
        return pulumi.get(self, "match_operator")

    @property
    @pulumi.getter(name="templateUuid")
    def template_uuid(self) -> Optional[str]:
        return pulumi.get(self, "template_uuid")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530CustomOverrideResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 override_id: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_id is not None:
            pulumi.set(__self__, "override_id", override_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideId")
    def override_id(self) -> Optional[str]:
        return pulumi.get(self, "override_id")


@pulumi.output_type
class GetPropertyRulesBuilderRulesV20230530VariableResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hidden: bool,
                 name: str,
                 sensitive: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitive", sensitive)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sensitive(self) -> bool:
        return pulumi.get(self, "sensitive")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPropertyRulesTemplateTemplateResult(dict):
    def __init__(__self__, *,
                 template_data: str,
                 template_dir: str):
        pulumi.set(__self__, "template_data", template_data)
        pulumi.set(__self__, "template_dir", template_dir)

    @property
    @pulumi.getter(name="templateData")
    def template_data(self) -> str:
        return pulumi.get(self, "template_data")

    @property
    @pulumi.getter(name="templateDir")
    def template_dir(self) -> str:
        return pulumi.get(self, "template_dir")


@pulumi.output_type
class GetPropertyRulesTemplateVariableResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


