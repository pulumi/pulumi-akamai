# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudaccessKeyResult',
    'AwaitableGetCloudaccessKeyResult',
    'get_cloudaccess_key',
    'get_cloudaccess_key_output',
]

@pulumi.output_type
class GetCloudaccessKeyResult:
    """
    A collection of values returned by getCloudaccessKey.
    """
    def __init__(__self__, access_key_name=None, access_key_uid=None, authentication_method=None, created_by=None, created_time=None, groups=None, id=None, latest_version=None, network_configuration=None):
        if access_key_name and not isinstance(access_key_name, str):
            raise TypeError("Expected argument 'access_key_name' to be a str")
        pulumi.set(__self__, "access_key_name", access_key_name)
        if access_key_uid and not isinstance(access_key_uid, int):
            raise TypeError("Expected argument 'access_key_uid' to be a int")
        pulumi.set(__self__, "access_key_uid", access_key_uid)
        if authentication_method and not isinstance(authentication_method, str):
            raise TypeError("Expected argument 'authentication_method' to be a str")
        pulumi.set(__self__, "authentication_method", authentication_method)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latest_version and not isinstance(latest_version, int):
            raise TypeError("Expected argument 'latest_version' to be a int")
        pulumi.set(__self__, "latest_version", latest_version)
        if network_configuration and not isinstance(network_configuration, dict):
            raise TypeError("Expected argument 'network_configuration' to be a dict")
        pulumi.set(__self__, "network_configuration", network_configuration)

    @property
    @pulumi.getter(name="accessKeyName")
    def access_key_name(self) -> str:
        return pulumi.get(self, "access_key_name")

    @property
    @pulumi.getter(name="accessKeyUid")
    def access_key_uid(self) -> int:
        return pulumi.get(self, "access_key_uid")

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> str:
        return pulumi.get(self, "authentication_method")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetCloudaccessKeyGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> 'outputs.GetCloudaccessKeyNetworkConfigurationResult':
        return pulumi.get(self, "network_configuration")


class AwaitableGetCloudaccessKeyResult(GetCloudaccessKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudaccessKeyResult(
            access_key_name=self.access_key_name,
            access_key_uid=self.access_key_uid,
            authentication_method=self.authentication_method,
            created_by=self.created_by,
            created_time=self.created_time,
            groups=self.groups,
            id=self.id,
            latest_version=self.latest_version,
            network_configuration=self.network_configuration)


def get_cloudaccess_key(access_key_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudaccessKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessKeyName'] = access_key_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudaccessKey:getCloudaccessKey', __args__, opts=opts, typ=GetCloudaccessKeyResult).value

    return AwaitableGetCloudaccessKeyResult(
        access_key_name=pulumi.get(__ret__, 'access_key_name'),
        access_key_uid=pulumi.get(__ret__, 'access_key_uid'),
        authentication_method=pulumi.get(__ret__, 'authentication_method'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_time=pulumi.get(__ret__, 'created_time'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        latest_version=pulumi.get(__ret__, 'latest_version'),
        network_configuration=pulumi.get(__ret__, 'network_configuration'))
def get_cloudaccess_key_output(access_key_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudaccessKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessKeyName'] = access_key_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getCloudaccessKey:getCloudaccessKey', __args__, opts=opts, typ=GetCloudaccessKeyResult)
    return __ret__.apply(lambda __response__: GetCloudaccessKeyResult(
        access_key_name=pulumi.get(__response__, 'access_key_name'),
        access_key_uid=pulumi.get(__response__, 'access_key_uid'),
        authentication_method=pulumi.get(__response__, 'authentication_method'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_time=pulumi.get(__response__, 'created_time'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        latest_version=pulumi.get(__response__, 'latest_version'),
        network_configuration=pulumi.get(__response__, 'network_configuration')))
