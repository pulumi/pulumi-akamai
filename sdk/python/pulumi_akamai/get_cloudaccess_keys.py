# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudaccessKeysResult',
    'AwaitableGetCloudaccessKeysResult',
    'get_cloudaccess_keys',
    'get_cloudaccess_keys_output',
]

@pulumi.output_type
class GetCloudaccessKeysResult:
    """
    A collection of values returned by getCloudaccessKeys.
    """
    def __init__(__self__, access_keys=None, id=None):
        if access_keys and not isinstance(access_keys, list):
            raise TypeError("Expected argument 'access_keys' to be a list")
        pulumi.set(__self__, "access_keys", access_keys)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="accessKeys")
    def access_keys(self) -> Sequence['outputs.GetCloudaccessKeysAccessKeyResult']:
        return pulumi.get(self, "access_keys")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetCloudaccessKeysResult(GetCloudaccessKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudaccessKeysResult(
            access_keys=self.access_keys,
            id=self.id)


def get_cloudaccess_keys(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudaccessKeysResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudaccessKeys:getCloudaccessKeys', __args__, opts=opts, typ=GetCloudaccessKeysResult).value

    return AwaitableGetCloudaccessKeysResult(
        access_keys=pulumi.get(__ret__, 'access_keys'),
        id=pulumi.get(__ret__, 'id'))
def get_cloudaccess_keys_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudaccessKeysResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getCloudaccessKeys:getCloudaccessKeys', __args__, opts=opts, typ=GetCloudaccessKeysResult)
    return __ret__.apply(lambda __response__: GetCloudaccessKeysResult(
        access_keys=pulumi.get(__response__, 'access_keys'),
        id=pulumi.get(__response__, 'id')))
