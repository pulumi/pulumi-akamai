# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecVersionNodesArgs', 'AppSecVersionNodes']

@pulumi.input_type
class AppSecVersionNodesArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 version_notes: pulumi.Input[str]):
        """
        The set of arguments for constructing a AppSecVersionNodes resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] version_notes: Brief description of the security configuration version
        """
        AppSecVersionNodesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            version_notes=version_notes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: pulumi.Input[int],
             version_notes: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("config_id", config_id)
        _setter("version_notes", version_notes)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="versionNotes")
    def version_notes(self) -> pulumi.Input[str]:
        """
        Brief description of the security configuration version
        """
        return pulumi.get(self, "version_notes")

    @version_notes.setter
    def version_notes(self, value: pulumi.Input[str]):
        pulumi.set(self, "version_notes", value)


@pulumi.input_type
class _AppSecVersionNodesState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[int]] = None,
                 output_text: Optional[pulumi.Input[str]] = None,
                 version_notes: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppSecVersionNodes resources.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] output_text: Text representation
        :param pulumi.Input[str] version_notes: Brief description of the security configuration version
        """
        _AppSecVersionNodesState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            output_text=output_text,
            version_notes=version_notes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: Optional[pulumi.Input[int]] = None,
             output_text: Optional[pulumi.Input[str]] = None,
             version_notes: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if config_id is not None:
            _setter("config_id", config_id)
        if output_text is not None:
            _setter("output_text", output_text)
        if version_notes is not None:
            _setter("version_notes", version_notes)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text representation
        """
        return pulumi.get(self, "output_text")

    @output_text.setter
    def output_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_text", value)

    @property
    @pulumi.getter(name="versionNotes")
    def version_notes(self) -> Optional[pulumi.Input[str]]:
        """
        Brief description of the security configuration version
        """
        return pulumi.get(self, "version_notes")

    @version_notes.setter
    def version_notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_notes", value)


class AppSecVersionNodes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 version_notes: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AppSecVersionNodes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] version_notes: Brief description of the security configuration version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecVersionNodesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppSecVersionNodes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppSecVersionNodesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecVersionNodesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AppSecVersionNodesArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 version_notes: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecVersionNodesArgs.__new__(AppSecVersionNodesArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            if version_notes is None and not opts.urn:
                raise TypeError("Missing required property 'version_notes'")
            __props__.__dict__["version_notes"] = version_notes
            __props__.__dict__["output_text"] = None
        super(AppSecVersionNodes, __self__).__init__(
            'akamai:index/appSecVersionNodes:AppSecVersionNodes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            output_text: Optional[pulumi.Input[str]] = None,
            version_notes: Optional[pulumi.Input[str]] = None) -> 'AppSecVersionNodes':
        """
        Get an existing AppSecVersionNodes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] output_text: Text representation
        :param pulumi.Input[str] version_notes: Brief description of the security configuration version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecVersionNodesState.__new__(_AppSecVersionNodesState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["output_text"] = output_text
        __props__.__dict__["version_notes"] = version_notes
        return AppSecVersionNodes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> pulumi.Output[str]:
        """
        Text representation
        """
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter(name="versionNotes")
    def version_notes(self) -> pulumi.Output[str]:
        """
        Brief description of the security configuration version
        """
        return pulumi.get(self, "version_notes")

