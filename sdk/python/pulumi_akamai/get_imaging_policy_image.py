# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetImagingPolicyImageResult',
    'AwaitableGetImagingPolicyImageResult',
    'get_imaging_policy_image',
    'get_imaging_policy_image_output',
]

@pulumi.output_type
class GetImagingPolicyImageResult:
    """
    A collection of values returned by getImagingPolicyImage.
    """
    def __init__(__self__, id=None, json=None, policy=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter
    def policy(self) -> 'outputs.GetImagingPolicyImagePolicyResult':
        return pulumi.get(self, "policy")


class AwaitableGetImagingPolicyImageResult(GetImagingPolicyImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImagingPolicyImageResult(
            id=self.id,
            json=self.json,
            policy=self.policy)


def get_imaging_policy_image(policy: Optional[Union['GetImagingPolicyImagePolicyArgs', 'GetImagingPolicyImagePolicyArgsDict']] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImagingPolicyImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policy'] = policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getImagingPolicyImage:getImagingPolicyImage', __args__, opts=opts, typ=GetImagingPolicyImageResult).value

    return AwaitableGetImagingPolicyImageResult(
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        policy=pulumi.get(__ret__, 'policy'))
def get_imaging_policy_image_output(policy: Optional[pulumi.Input[Union['GetImagingPolicyImagePolicyArgs', 'GetImagingPolicyImagePolicyArgsDict']]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImagingPolicyImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policy'] = policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getImagingPolicyImage:getImagingPolicyImage', __args__, opts=opts, typ=GetImagingPolicyImageResult)
    return __ret__.apply(lambda __response__: GetImagingPolicyImageResult(
        id=pulumi.get(__response__, 'id'),
        json=pulumi.get(__response__, 'json'),
        policy=pulumi.get(__response__, 'policy')))
