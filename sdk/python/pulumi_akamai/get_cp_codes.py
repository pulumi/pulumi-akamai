# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCpCodesResult',
    'AwaitableGetCpCodesResult',
    'get_cp_codes',
    'get_cp_codes_output',
]

@pulumi.output_type
class GetCpCodesResult:
    """
    A collection of values returned by getCpCodes.
    """
    def __init__(__self__, account_id=None, contract_id=None, cp_codes=None, filter_by_name=None, filter_by_product_id=None, group_id=None, id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if cp_codes and not isinstance(cp_codes, list):
            raise TypeError("Expected argument 'cp_codes' to be a list")
        pulumi.set(__self__, "cp_codes", cp_codes)
        if filter_by_name and not isinstance(filter_by_name, str):
            raise TypeError("Expected argument 'filter_by_name' to be a str")
        pulumi.set(__self__, "filter_by_name", filter_by_name)
        if filter_by_product_id and not isinstance(filter_by_product_id, str):
            raise TypeError("Expected argument 'filter_by_product_id' to be a str")
        pulumi.set(__self__, "filter_by_product_id", filter_by_product_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> builtins.str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="cpCodes")
    def cp_codes(self) -> Sequence['outputs.GetCpCodesCpCodeResult']:
        return pulumi.get(self, "cp_codes")

    @property
    @pulumi.getter(name="filterByName")
    def filter_by_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filter_by_name")

    @property
    @pulumi.getter(name="filterByProductId")
    def filter_by_product_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "filter_by_product_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetCpCodesResult(GetCpCodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCpCodesResult(
            account_id=self.account_id,
            contract_id=self.contract_id,
            cp_codes=self.cp_codes,
            filter_by_name=self.filter_by_name,
            filter_by_product_id=self.filter_by_product_id,
            group_id=self.group_id,
            id=self.id)


def get_cp_codes(contract_id: Optional[builtins.str] = None,
                 filter_by_name: Optional[builtins.str] = None,
                 filter_by_product_id: Optional[builtins.str] = None,
                 group_id: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCpCodesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['filterByName'] = filter_by_name
    __args__['filterByProductId'] = filter_by_product_id
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCpCodes:getCpCodes', __args__, opts=opts, typ=GetCpCodesResult).value

    return AwaitableGetCpCodesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        contract_id=pulumi.get(__ret__, 'contract_id'),
        cp_codes=pulumi.get(__ret__, 'cp_codes'),
        filter_by_name=pulumi.get(__ret__, 'filter_by_name'),
        filter_by_product_id=pulumi.get(__ret__, 'filter_by_product_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'))
def get_cp_codes_output(contract_id: Optional[pulumi.Input[builtins.str]] = None,
                        filter_by_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        filter_by_product_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                        group_id: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCpCodesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['filterByName'] = filter_by_name
    __args__['filterByProductId'] = filter_by_product_id
    __args__['groupId'] = group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getCpCodes:getCpCodes', __args__, opts=opts, typ=GetCpCodesResult)
    return __ret__.apply(lambda __response__: GetCpCodesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        contract_id=pulumi.get(__response__, 'contract_id'),
        cp_codes=pulumi.get(__response__, 'cp_codes'),
        filter_by_name=pulumi.get(__response__, 'filter_by_name'),
        filter_by_product_id=pulumi.get(__response__, 'filter_by_product_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id')))
