# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamUsersAffectedByMovingGroupResult',
    'AwaitableGetIamUsersAffectedByMovingGroupResult',
    'get_iam_users_affected_by_moving_group',
    'get_iam_users_affected_by_moving_group_output',
]

@pulumi.output_type
class GetIamUsersAffectedByMovingGroupResult:
    """
    A collection of values returned by getIamUsersAffectedByMovingGroup.
    """
    def __init__(__self__, destination_group_id=None, id=None, source_group_id=None, user_type=None, users=None):
        if destination_group_id and not isinstance(destination_group_id, int):
            raise TypeError("Expected argument 'destination_group_id' to be a int")
        pulumi.set(__self__, "destination_group_id", destination_group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if source_group_id and not isinstance(source_group_id, int):
            raise TypeError("Expected argument 'source_group_id' to be a int")
        pulumi.set(__self__, "source_group_id", source_group_id)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="destinationGroupId")
    def destination_group_id(self) -> int:
        return pulumi.get(self, "destination_group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceGroupId")
    def source_group_id(self) -> int:
        return pulumi.get(self, "source_group_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[str]:
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetIamUsersAffectedByMovingGroupUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetIamUsersAffectedByMovingGroupResult(GetIamUsersAffectedByMovingGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamUsersAffectedByMovingGroupResult(
            destination_group_id=self.destination_group_id,
            id=self.id,
            source_group_id=self.source_group_id,
            user_type=self.user_type,
            users=self.users)


def get_iam_users_affected_by_moving_group(destination_group_id: Optional[int] = None,
                                           source_group_id: Optional[int] = None,
                                           user_type: Optional[str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamUsersAffectedByMovingGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationGroupId'] = destination_group_id
    __args__['sourceGroupId'] = source_group_id
    __args__['userType'] = user_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamUsersAffectedByMovingGroup:getIamUsersAffectedByMovingGroup', __args__, opts=opts, typ=GetIamUsersAffectedByMovingGroupResult).value

    return AwaitableGetIamUsersAffectedByMovingGroupResult(
        destination_group_id=pulumi.get(__ret__, 'destination_group_id'),
        id=pulumi.get(__ret__, 'id'),
        source_group_id=pulumi.get(__ret__, 'source_group_id'),
        user_type=pulumi.get(__ret__, 'user_type'),
        users=pulumi.get(__ret__, 'users'))
def get_iam_users_affected_by_moving_group_output(destination_group_id: Optional[pulumi.Input[int]] = None,
                                                  source_group_id: Optional[pulumi.Input[int]] = None,
                                                  user_type: Optional[pulumi.Input[Optional[str]]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamUsersAffectedByMovingGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationGroupId'] = destination_group_id
    __args__['sourceGroupId'] = source_group_id
    __args__['userType'] = user_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamUsersAffectedByMovingGroup:getIamUsersAffectedByMovingGroup', __args__, opts=opts, typ=GetIamUsersAffectedByMovingGroupResult)
    return __ret__.apply(lambda __response__: GetIamUsersAffectedByMovingGroupResult(
        destination_group_id=pulumi.get(__response__, 'destination_group_id'),
        id=pulumi.get(__response__, 'id'),
        source_group_id=pulumi.get(__response__, 'source_group_id'),
        user_type=pulumi.get(__response__, 'user_type'),
        users=pulumi.get(__response__, 'users')))
