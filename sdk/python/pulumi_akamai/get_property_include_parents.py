# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPropertyIncludeParentsResult',
    'AwaitableGetPropertyIncludeParentsResult',
    'get_property_include_parents',
    'get_property_include_parents_output',
]

@pulumi.output_type
class GetPropertyIncludeParentsResult:
    """
    A collection of values returned by getPropertyIncludeParents.
    """
    def __init__(__self__, contract_id=None, group_id=None, id=None, include_id=None, parents=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_id and not isinstance(include_id, str):
            raise TypeError("Expected argument 'include_id' to be a str")
        pulumi.set(__self__, "include_id", include_id)
        if parents and not isinstance(parents, list):
            raise TypeError("Expected argument 'parents' to be a list")
        pulumi.set(__self__, "parents", parents)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeId")
    def include_id(self) -> str:
        return pulumi.get(self, "include_id")

    @property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.GetPropertyIncludeParentsParentResult']:
        return pulumi.get(self, "parents")


class AwaitableGetPropertyIncludeParentsResult(GetPropertyIncludeParentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyIncludeParentsResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            include_id=self.include_id,
            parents=self.parents)


def get_property_include_parents(contract_id: Optional[str] = None,
                                 group_id: Optional[str] = None,
                                 include_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyIncludeParentsResult:
    """
    Use the `get_property_include_parents` data source to return a list of parent properties that use the given include. In your property's rule tree, you can reference an include by adding the `include` behavior and specifying the `include_id`.

    ## Basic usage

    This example returns all active properties a specific include is referenced in, based on the contract, group, and include IDs.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include_parents = akamai.get_property_include_parents(contract_id="ctr_1-AB123",
        group_id="grp_12345",
        include_id="inc_123456")
    pulumi.export("myExample", my_example_property_include_parents)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `parents` - The list of include's parent properties.
     * `id` - The property's unique identifier.
     * `name` - The descriptive name for the property.
     * `staging_version` - The property version currently activated on the staging network.
     * `production_version` - The property version currently activated on the production network.
     * `is_include_used_in_staging_version` - Whether the specified include is active on the staging network and is referenced in parent's `staging_version`.
     * `is_include_used_in_production_version` - Whether the specified include is active on the production network and is referenced in parent's `production_version`.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['includeId'] = include_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyIncludeParents:getPropertyIncludeParents', __args__, opts=opts, typ=GetPropertyIncludeParentsResult).value

    return AwaitableGetPropertyIncludeParentsResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        id=__ret__.id,
        include_id=__ret__.include_id,
        parents=__ret__.parents)


@_utilities.lift_output_func(get_property_include_parents)
def get_property_include_parents_output(contract_id: Optional[pulumi.Input[str]] = None,
                                        group_id: Optional[pulumi.Input[str]] = None,
                                        include_id: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyIncludeParentsResult]:
    """
    Use the `get_property_include_parents` data source to return a list of parent properties that use the given include. In your property's rule tree, you can reference an include by adding the `include` behavior and specifying the `include_id`.

    ## Basic usage

    This example returns all active properties a specific include is referenced in, based on the contract, group, and include IDs.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include_parents = akamai.get_property_include_parents(contract_id="ctr_1-AB123",
        group_id="grp_12345",
        include_id="inc_123456")
    pulumi.export("myExample", my_example_property_include_parents)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `parents` - The list of include's parent properties.
     * `id` - The property's unique identifier.
     * `name` - The descriptive name for the property.
     * `staging_version` - The property version currently activated on the staging network.
     * `production_version` - The property version currently activated on the production network.
     * `is_include_used_in_staging_version` - Whether the specified include is active on the staging network and is referenced in parent's `staging_version`.
     * `is_include_used_in_production_version` - Whether the specified include is active on the production network and is referenced in parent's `production_version`.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    """
    ...
