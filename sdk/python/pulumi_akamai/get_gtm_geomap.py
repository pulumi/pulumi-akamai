# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGtmGeomapResult',
    'AwaitableGetGtmGeomapResult',
    'get_gtm_geomap',
    'get_gtm_geomap_output',
]

@pulumi.output_type
class GetGtmGeomapResult:
    """
    A collection of values returned by getGtmGeomap.
    """
    def __init__(__self__, assignments=None, default_datacenter=None, domain=None, id=None, links=None, map_name=None):
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if default_datacenter and not isinstance(default_datacenter, dict):
            raise TypeError("Expected argument 'default_datacenter' to be a dict")
        pulumi.set(__self__, "default_datacenter", default_datacenter)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if map_name and not isinstance(map_name, str):
            raise TypeError("Expected argument 'map_name' to be a str")
        pulumi.set(__self__, "map_name", map_name)

    @property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetGtmGeomapAssignmentResult']:
        return pulumi.get(self, "assignments")

    @property
    @pulumi.getter(name="defaultDatacenter")
    def default_datacenter(self) -> 'outputs.GetGtmGeomapDefaultDatacenterResult':
        return pulumi.get(self, "default_datacenter")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetGtmGeomapLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")


class AwaitableGetGtmGeomapResult(GetGtmGeomapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmGeomapResult(
            assignments=self.assignments,
            default_datacenter=self.default_datacenter,
            domain=self.domain,
            id=self.id,
            links=self.links,
            map_name=self.map_name)


def get_gtm_geomap(domain: Optional[str] = None,
                   map_name: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmGeomapResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['mapName'] = map_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmGeomap:getGtmGeomap', __args__, opts=opts, typ=GetGtmGeomapResult).value

    return AwaitableGetGtmGeomapResult(
        assignments=pulumi.get(__ret__, 'assignments'),
        default_datacenter=pulumi.get(__ret__, 'default_datacenter'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        links=pulumi.get(__ret__, 'links'),
        map_name=pulumi.get(__ret__, 'map_name'))
def get_gtm_geomap_output(domain: Optional[pulumi.Input[str]] = None,
                          map_name: Optional[pulumi.Input[str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGtmGeomapResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['mapName'] = map_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getGtmGeomap:getGtmGeomap', __args__, opts=opts, typ=GetGtmGeomapResult)
    return __ret__.apply(lambda __response__: GetGtmGeomapResult(
        assignments=pulumi.get(__response__, 'assignments'),
        default_datacenter=pulumi.get(__response__, 'default_datacenter'),
        domain=pulumi.get(__response__, 'domain'),
        id=pulumi.get(__response__, 'id'),
        links=pulumi.get(__response__, 'links'),
        map_name=pulumi.get(__response__, 'map_name')))
