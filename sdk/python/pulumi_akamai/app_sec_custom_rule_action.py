# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities, _tables

__all__ = ['AppSecCustomRuleActionArgs', 'AppSecCustomRuleAction']

@pulumi.input_type
class AppSecCustomRuleActionArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 custom_rule_action: pulumi.Input[str],
                 custom_rule_id: pulumi.Input[int],
                 policy_id: pulumi.Input[str],
                 version: pulumi.Input[int]):
        """
        The set of arguments for constructing a AppSecCustomRuleAction resource.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] custom_rule_action: The action to be taken when the custom rule is invoked. Must be one of the following:
               * alert
               * deny
               * none
        :param pulumi.Input[int] custom_rule_id: The ID of the custom rule.
        :param pulumi.Input[str] policy_id: The
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "custom_rule_action", custom_rule_action)
        pulumi.set(__self__, "custom_rule_id", custom_rule_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="customRuleAction")
    def custom_rule_action(self) -> pulumi.Input[str]:
        """
        The action to be taken when the custom rule is invoked. Must be one of the following:
        * alert
        * deny
        * none
        """
        return pulumi.get(self, "custom_rule_action")

    @custom_rule_action.setter
    def custom_rule_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_rule_action", value)

    @property
    @pulumi.getter(name="customRuleId")
    def custom_rule_id(self) -> pulumi.Input[int]:
        """
        The ID of the custom rule.
        """
        return pulumi.get(self, "custom_rule_id")

    @custom_rule_id.setter
    def custom_rule_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "custom_rule_id", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[str]:
        """
        The
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[int]:
        """
        The version number of the security configuration to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[int]):
        pulumi.set(self, "version", value)


class AppSecCustomRuleAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 custom_rule_action: Optional[pulumi.Input[str]] = None,
                 custom_rule_id: Optional[pulumi.Input[int]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The `AppSecCustomRuleAction` resource allows you to associate an action to a custom rule.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Akamai Tools")
        create_custom_rule_action = akamai.AppSecCustomRuleAction("createCustomRuleAction",
            config_id=configuration.config_id,
            version=configuration.latest_version,
            policy_id="crAP_75829",
            custom_rule_id=12345,
            custom_rule_action="alert")
        pulumi.export("customRuleId", create_custom_rule_action.custom_rule_id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] custom_rule_action: The action to be taken when the custom rule is invoked. Must be one of the following:
               * alert
               * deny
               * none
        :param pulumi.Input[int] custom_rule_id: The ID of the custom rule.
        :param pulumi.Input[str] policy_id: The
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecCustomRuleActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The `AppSecCustomRuleAction` resource allows you to associate an action to a custom rule.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Akamai Tools")
        create_custom_rule_action = akamai.AppSecCustomRuleAction("createCustomRuleAction",
            config_id=configuration.config_id,
            version=configuration.latest_version,
            policy_id="crAP_75829",
            custom_rule_id=12345,
            custom_rule_action="alert")
        pulumi.export("customRuleId", create_custom_rule_action.custom_rule_id)
        ```

        :param str resource_name: The name of the resource.
        :param AppSecCustomRuleActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecCustomRuleActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 custom_rule_action: Optional[pulumi.Input[str]] = None,
                 custom_rule_id: Optional[pulumi.Input[int]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__['config_id'] = config_id
            if custom_rule_action is None and not opts.urn:
                raise TypeError("Missing required property 'custom_rule_action'")
            __props__['custom_rule_action'] = custom_rule_action
            if custom_rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_rule_id'")
            __props__['custom_rule_id'] = custom_rule_id
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__['policy_id'] = policy_id
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__['version'] = version
        super(AppSecCustomRuleAction, __self__).__init__(
            'akamai:index/appSecCustomRuleAction:AppSecCustomRuleAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            custom_rule_action: Optional[pulumi.Input[str]] = None,
            custom_rule_id: Optional[pulumi.Input[int]] = None,
            policy_id: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'AppSecCustomRuleAction':
        """
        Get an existing AppSecCustomRuleAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] custom_rule_action: The action to be taken when the custom rule is invoked. Must be one of the following:
               * alert
               * deny
               * none
        :param pulumi.Input[int] custom_rule_id: The ID of the custom rule.
        :param pulumi.Input[str] policy_id: The
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config_id"] = config_id
        __props__["custom_rule_action"] = custom_rule_action
        __props__["custom_rule_id"] = custom_rule_id
        __props__["policy_id"] = policy_id
        __props__["version"] = version
        return AppSecCustomRuleAction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="customRuleAction")
    def custom_rule_action(self) -> pulumi.Output[str]:
        """
        The action to be taken when the custom rule is invoked. Must be one of the following:
        * alert
        * deny
        * none
        """
        return pulumi.get(self, "custom_rule_action")

    @property
    @pulumi.getter(name="customRuleId")
    def custom_rule_id(self) -> pulumi.Output[int]:
        """
        The ID of the custom rule.
        """
        return pulumi.get(self, "custom_rule_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        The
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        The version number of the security configuration to use.
        """
        return pulumi.get(self, "version")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

