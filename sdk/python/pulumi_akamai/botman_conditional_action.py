# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BotmanConditionalActionArgs', 'BotmanConditionalAction']

@pulumi.input_type
class BotmanConditionalActionArgs:
    def __init__(__self__, *,
                 conditional_action: pulumi.Input[str],
                 config_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a BotmanConditionalAction resource.
        """
        BotmanConditionalActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_action=conditional_action,
            config_id=config_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_action: pulumi.Input[str],
             config_id: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'conditionalAction' in kwargs:
            conditional_action = kwargs['conditionalAction']
        if 'configId' in kwargs:
            config_id = kwargs['configId']

        _setter("conditional_action", conditional_action)
        _setter("config_id", config_id)

    @property
    @pulumi.getter(name="conditionalAction")
    def conditional_action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "conditional_action")

    @conditional_action.setter
    def conditional_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "conditional_action", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)


@pulumi.input_type
class _BotmanConditionalActionState:
    def __init__(__self__, *,
                 action_id: Optional[pulumi.Input[str]] = None,
                 conditional_action: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BotmanConditionalAction resources.
        """
        _BotmanConditionalActionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_id=action_id,
            conditional_action=conditional_action,
            config_id=config_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_id: Optional[pulumi.Input[str]] = None,
             conditional_action: Optional[pulumi.Input[str]] = None,
             config_id: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'actionId' in kwargs:
            action_id = kwargs['actionId']
        if 'conditionalAction' in kwargs:
            conditional_action = kwargs['conditionalAction']
        if 'configId' in kwargs:
            config_id = kwargs['configId']

        if action_id is not None:
            _setter("action_id", action_id)
        if conditional_action is not None:
            _setter("conditional_action", conditional_action)
        if config_id is not None:
            _setter("config_id", config_id)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="conditionalAction")
    def conditional_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "conditional_action")

    @conditional_action.setter
    def conditional_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conditional_action", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)


class BotmanConditionalAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_action: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a BotmanConditionalAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BotmanConditionalActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BotmanConditionalAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BotmanConditionalActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BotmanConditionalActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            BotmanConditionalActionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditional_action: Optional[pulumi.Input[str]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BotmanConditionalActionArgs.__new__(BotmanConditionalActionArgs)

            if conditional_action is None and not opts.urn:
                raise TypeError("Missing required property 'conditional_action'")
            __props__.__dict__["conditional_action"] = conditional_action
            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["action_id"] = None
        super(BotmanConditionalAction, __self__).__init__(
            'akamai:index/botmanConditionalAction:BotmanConditionalAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_id: Optional[pulumi.Input[str]] = None,
            conditional_action: Optional[pulumi.Input[str]] = None,
            config_id: Optional[pulumi.Input[int]] = None) -> 'BotmanConditionalAction':
        """
        Get an existing BotmanConditionalAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BotmanConditionalActionState.__new__(_BotmanConditionalActionState)

        __props__.__dict__["action_id"] = action_id
        __props__.__dict__["conditional_action"] = conditional_action
        __props__.__dict__["config_id"] = config_id
        return BotmanConditionalAction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="conditionalAction")
    def conditional_action(self) -> pulumi.Output[str]:
        return pulumi.get(self, "conditional_action")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "config_id")

