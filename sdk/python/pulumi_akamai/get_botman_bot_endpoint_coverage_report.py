# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBotmanBotEndpointCoverageReportResult',
    'AwaitableGetBotmanBotEndpointCoverageReportResult',
    'get_botman_bot_endpoint_coverage_report',
    'get_botman_bot_endpoint_coverage_report_output',
]

@pulumi.output_type
class GetBotmanBotEndpointCoverageReportResult:
    """
    A collection of values returned by getBotmanBotEndpointCoverageReport.
    """
    def __init__(__self__, config_id=None, id=None, json=None, operation_id=None):
        if config_id and not isinstance(config_id, int):
            raise TypeError("Expected argument 'config_id' to be a int")
        pulumi.set(__self__, "config_id", config_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if operation_id and not isinstance(operation_id, str):
            raise TypeError("Expected argument 'operation_id' to be a str")
        pulumi.set(__self__, "operation_id", operation_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[int]:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="operationId")
    def operation_id(self) -> Optional[str]:
        return pulumi.get(self, "operation_id")


class AwaitableGetBotmanBotEndpointCoverageReportResult(GetBotmanBotEndpointCoverageReportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBotmanBotEndpointCoverageReportResult(
            config_id=self.config_id,
            id=self.id,
            json=self.json,
            operation_id=self.operation_id)


def get_botman_bot_endpoint_coverage_report(config_id: Optional[int] = None,
                                            operation_id: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBotmanBotEndpointCoverageReportResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['configId'] = config_id
    __args__['operationId'] = operation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getBotmanBotEndpointCoverageReport:getBotmanBotEndpointCoverageReport', __args__, opts=opts, typ=GetBotmanBotEndpointCoverageReportResult).value

    return AwaitableGetBotmanBotEndpointCoverageReportResult(
        config_id=pulumi.get(__ret__, 'config_id'),
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        operation_id=pulumi.get(__ret__, 'operation_id'))


@_utilities.lift_output_func(get_botman_bot_endpoint_coverage_report)
def get_botman_bot_endpoint_coverage_report_output(config_id: Optional[pulumi.Input[Optional[int]]] = None,
                                                   operation_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBotmanBotEndpointCoverageReportResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
