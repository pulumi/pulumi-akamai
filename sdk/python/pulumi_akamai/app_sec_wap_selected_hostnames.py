# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecWapSelectedHostnamesArgs', 'AppSecWapSelectedHostnames']

@pulumi.input_type
class AppSecWapSelectedHostnamesArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 security_policy_id: pulumi.Input[str],
                 evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a AppSecWapSelectedHostnames resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[str] security_policy_id: Unique identifier of the security policy
        :param pulumi.Input[Sequence[pulumi.Input[str]]] evaluated_hosts: List of hostnames to be evaluated
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_hosts: List of hostnames to be protected
        """
        AppSecWapSelectedHostnamesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            security_policy_id=security_policy_id,
            evaluated_hosts=evaluated_hosts,
            protected_hosts=protected_hosts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: pulumi.Input[int],
             security_policy_id: pulumi.Input[str],
             evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configId' in kwargs:
            config_id = kwargs['configId']
        if 'securityPolicyId' in kwargs:
            security_policy_id = kwargs['securityPolicyId']
        if 'evaluatedHosts' in kwargs:
            evaluated_hosts = kwargs['evaluatedHosts']
        if 'protectedHosts' in kwargs:
            protected_hosts = kwargs['protectedHosts']

        _setter("config_id", config_id)
        _setter("security_policy_id", security_policy_id)
        if evaluated_hosts is not None:
            _setter("evaluated_hosts", evaluated_hosts)
        if protected_hosts is not None:
            _setter("protected_hosts", protected_hosts)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of the security policy
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter(name="evaluatedHosts")
    def evaluated_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of hostnames to be evaluated
        """
        return pulumi.get(self, "evaluated_hosts")

    @evaluated_hosts.setter
    def evaluated_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "evaluated_hosts", value)

    @property
    @pulumi.getter(name="protectedHosts")
    def protected_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of hostnames to be protected
        """
        return pulumi.get(self, "protected_hosts")

    @protected_hosts.setter
    def protected_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_hosts", value)


@pulumi.input_type
class _AppSecWapSelectedHostnamesState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[int]] = None,
                 evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppSecWapSelectedHostnames resources.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] evaluated_hosts: List of hostnames to be evaluated
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_hosts: List of hostnames to be protected
        :param pulumi.Input[str] security_policy_id: Unique identifier of the security policy
        """
        _AppSecWapSelectedHostnamesState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_id=config_id,
            evaluated_hosts=evaluated_hosts,
            protected_hosts=protected_hosts,
            security_policy_id=security_policy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_id: Optional[pulumi.Input[int]] = None,
             evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             security_policy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configId' in kwargs:
            config_id = kwargs['configId']
        if 'evaluatedHosts' in kwargs:
            evaluated_hosts = kwargs['evaluatedHosts']
        if 'protectedHosts' in kwargs:
            protected_hosts = kwargs['protectedHosts']
        if 'securityPolicyId' in kwargs:
            security_policy_id = kwargs['securityPolicyId']

        if config_id is not None:
            _setter("config_id", config_id)
        if evaluated_hosts is not None:
            _setter("evaluated_hosts", evaluated_hosts)
        if protected_hosts is not None:
            _setter("protected_hosts", protected_hosts)
        if security_policy_id is not None:
            _setter("security_policy_id", security_policy_id)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="evaluatedHosts")
    def evaluated_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of hostnames to be evaluated
        """
        return pulumi.get(self, "evaluated_hosts")

    @evaluated_hosts.setter
    def evaluated_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "evaluated_hosts", value)

    @property
    @pulumi.getter(name="protectedHosts")
    def protected_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of hostnames to be protected
        """
        return pulumi.get(self, "protected_hosts")

    @protected_hosts.setter
    def protected_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_hosts", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the security policy
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_id", value)


class AppSecWapSelectedHostnames(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AppSecWapSelectedHostnames resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] evaluated_hosts: List of hostnames to be evaluated
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_hosts: List of hostnames to be protected
        :param pulumi.Input[str] security_policy_id: Unique identifier of the security policy
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecWapSelectedHostnamesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppSecWapSelectedHostnames resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppSecWapSelectedHostnamesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecWapSelectedHostnamesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AppSecWapSelectedHostnamesArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecWapSelectedHostnamesArgs.__new__(AppSecWapSelectedHostnamesArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["evaluated_hosts"] = evaluated_hosts
            __props__.__dict__["protected_hosts"] = protected_hosts
            if security_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy_id'")
            __props__.__dict__["security_policy_id"] = security_policy_id
        super(AppSecWapSelectedHostnames, __self__).__init__(
            'akamai:index/appSecWapSelectedHostnames:AppSecWapSelectedHostnames',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            evaluated_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            protected_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_policy_id: Optional[pulumi.Input[str]] = None) -> 'AppSecWapSelectedHostnames':
        """
        Get an existing AppSecWapSelectedHostnames resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] config_id: Unique identifier of the security configuration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] evaluated_hosts: List of hostnames to be evaluated
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_hosts: List of hostnames to be protected
        :param pulumi.Input[str] security_policy_id: Unique identifier of the security policy
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecWapSelectedHostnamesState.__new__(_AppSecWapSelectedHostnamesState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["evaluated_hosts"] = evaluated_hosts
        __props__.__dict__["protected_hosts"] = protected_hosts
        __props__.__dict__["security_policy_id"] = security_policy_id
        return AppSecWapSelectedHostnames(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        Unique identifier of the security configuration
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="evaluatedHosts")
    def evaluated_hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of hostnames to be evaluated
        """
        return pulumi.get(self, "evaluated_hosts")

    @property
    @pulumi.getter(name="protectedHosts")
    def protected_hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of hostnames to be protected
        """
        return pulumi.get(self, "protected_hosts")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of the security policy
        """
        return pulumi.get(self, "security_policy_id")

