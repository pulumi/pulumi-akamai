# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudletsApplicationLoadBalancerResult',
    'AwaitableGetCloudletsApplicationLoadBalancerResult',
    'get_cloudlets_application_load_balancer',
    'get_cloudlets_application_load_balancer_output',
]

@pulumi.output_type
class GetCloudletsApplicationLoadBalancerResult:
    """
    A collection of values returned by getCloudletsApplicationLoadBalancer.
    """
    def __init__(__self__, balancing_type=None, created_by=None, created_date=None, data_centers=None, deleted=None, description=None, id=None, immutable=None, last_modified_by=None, last_modified_date=None, liveness_settings=None, origin_id=None, type=None, version=None, warnings=None):
        if balancing_type and not isinstance(balancing_type, str):
            raise TypeError("Expected argument 'balancing_type' to be a str")
        pulumi.set(__self__, "balancing_type", balancing_type)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if data_centers and not isinstance(data_centers, list):
            raise TypeError("Expected argument 'data_centers' to be a list")
        pulumi.set(__self__, "data_centers", data_centers)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if immutable and not isinstance(immutable, bool):
            raise TypeError("Expected argument 'immutable' to be a bool")
        pulumi.set(__self__, "immutable", immutable)
        if last_modified_by and not isinstance(last_modified_by, str):
            raise TypeError("Expected argument 'last_modified_by' to be a str")
        pulumi.set(__self__, "last_modified_by", last_modified_by)
        if last_modified_date and not isinstance(last_modified_date, str):
            raise TypeError("Expected argument 'last_modified_date' to be a str")
        pulumi.set(__self__, "last_modified_date", last_modified_date)
        if liveness_settings and not isinstance(liveness_settings, list):
            raise TypeError("Expected argument 'liveness_settings' to be a list")
        pulumi.set(__self__, "liveness_settings", liveness_settings)
        if origin_id and not isinstance(origin_id, str):
            raise TypeError("Expected argument 'origin_id' to be a str")
        pulumi.set(__self__, "origin_id", origin_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if warnings and not isinstance(warnings, str):
            raise TypeError("Expected argument 'warnings' to be a str")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="balancingType")
    def balancing_type(self) -> str:
        return pulumi.get(self, "balancing_type")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="dataCenters")
    def data_centers(self) -> Sequence['outputs.GetCloudletsApplicationLoadBalancerDataCenterResult']:
        return pulumi.get(self, "data_centers")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def immutable(self) -> bool:
        return pulumi.get(self, "immutable")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> str:
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="lastModifiedDate")
    def last_modified_date(self) -> str:
        return pulumi.get(self, "last_modified_date")

    @property
    @pulumi.getter(name="livenessSettings")
    def liveness_settings(self) -> Sequence['outputs.GetCloudletsApplicationLoadBalancerLivenessSettingResult']:
        return pulumi.get(self, "liveness_settings")

    @property
    @pulumi.getter(name="originId")
    def origin_id(self) -> str:
        return pulumi.get(self, "origin_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def warnings(self) -> str:
        return pulumi.get(self, "warnings")


class AwaitableGetCloudletsApplicationLoadBalancerResult(GetCloudletsApplicationLoadBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudletsApplicationLoadBalancerResult(
            balancing_type=self.balancing_type,
            created_by=self.created_by,
            created_date=self.created_date,
            data_centers=self.data_centers,
            deleted=self.deleted,
            description=self.description,
            id=self.id,
            immutable=self.immutable,
            last_modified_by=self.last_modified_by,
            last_modified_date=self.last_modified_date,
            liveness_settings=self.liveness_settings,
            origin_id=self.origin_id,
            type=self.type,
            version=self.version,
            warnings=self.warnings)


def get_cloudlets_application_load_balancer(origin_id: Optional[str] = None,
                                            version: Optional[int] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudletsApplicationLoadBalancerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['originId'] = origin_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudletsApplicationLoadBalancer:getCloudletsApplicationLoadBalancer', __args__, opts=opts, typ=GetCloudletsApplicationLoadBalancerResult).value

    return AwaitableGetCloudletsApplicationLoadBalancerResult(
        balancing_type=pulumi.get(__ret__, 'balancing_type'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        data_centers=pulumi.get(__ret__, 'data_centers'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        immutable=pulumi.get(__ret__, 'immutable'),
        last_modified_by=pulumi.get(__ret__, 'last_modified_by'),
        last_modified_date=pulumi.get(__ret__, 'last_modified_date'),
        liveness_settings=pulumi.get(__ret__, 'liveness_settings'),
        origin_id=pulumi.get(__ret__, 'origin_id'),
        type=pulumi.get(__ret__, 'type'),
        version=pulumi.get(__ret__, 'version'),
        warnings=pulumi.get(__ret__, 'warnings'))


@_utilities.lift_output_func(get_cloudlets_application_load_balancer)
def get_cloudlets_application_load_balancer_output(origin_id: Optional[pulumi.Input[str]] = None,
                                                   version: Optional[pulumi.Input[Optional[int]]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudletsApplicationLoadBalancerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
