# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCpsCsrResult',
    'AwaitableGetCpsCsrResult',
    'get_cps_csr',
    'get_cps_csr_output',
]

@pulumi.output_type
class GetCpsCsrResult:
    """
    A collection of values returned by getCpsCsr.
    """
    def __init__(__self__, csr_ecdsa=None, csr_rsa=None, enrollment_id=None, id=None):
        if csr_ecdsa and not isinstance(csr_ecdsa, str):
            raise TypeError("Expected argument 'csr_ecdsa' to be a str")
        pulumi.set(__self__, "csr_ecdsa", csr_ecdsa)
        if csr_rsa and not isinstance(csr_rsa, str):
            raise TypeError("Expected argument 'csr_rsa' to be a str")
        pulumi.set(__self__, "csr_rsa", csr_rsa)
        if enrollment_id and not isinstance(enrollment_id, int):
            raise TypeError("Expected argument 'enrollment_id' to be a int")
        pulumi.set(__self__, "enrollment_id", enrollment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="csrEcdsa")
    def csr_ecdsa(self) -> str:
        return pulumi.get(self, "csr_ecdsa")

    @property
    @pulumi.getter(name="csrRsa")
    def csr_rsa(self) -> str:
        return pulumi.get(self, "csr_rsa")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> int:
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetCpsCsrResult(GetCpsCsrResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCpsCsrResult(
            csr_ecdsa=self.csr_ecdsa,
            csr_rsa=self.csr_rsa,
            enrollment_id=self.enrollment_id,
            id=self.id)


def get_cps_csr(enrollment_id: Optional[int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCpsCsrResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enrollmentId'] = enrollment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCpsCsr:getCpsCsr', __args__, opts=opts, typ=GetCpsCsrResult).value

    return AwaitableGetCpsCsrResult(
        csr_ecdsa=pulumi.get(__ret__, 'csr_ecdsa'),
        csr_rsa=pulumi.get(__ret__, 'csr_rsa'),
        enrollment_id=pulumi.get(__ret__, 'enrollment_id'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_cps_csr)
def get_cps_csr_output(enrollment_id: Optional[pulumi.Input[int]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCpsCsrResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
