# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['PropertyActivation']


class PropertyActivation(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 contacts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The `properties.PropertyActivation` provides the resource for activating a property in the appropriate environment. Once you are satisfied with any version of a property, an activation deploys it, either to the Akamai staging or production network. You activate a specific version, but the same version can be activated separately more than once.

        ## Example Usage
        ### Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        example = akamai.properties.PropertyActivation("example",
            activate=var["akamai_property_activate"],
            contacts=["user@example.org"],
            network="STAGING",
            property=akamai_property["example"]["id"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: — (Optional, boolean) Whether to activate the property on the network. (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts: — (Required) One or more email addresses to inform about activation changes.
        :param pulumi.Input[str] network: — (Optional) Akamai network to activate on. Allowed values `staging` or `production` (Default: `staging`).
        :param pulumi.Input[str] property: — (Required) The property ID.
        :param pulumi.Input[int] version: — (Optional) The version to activate. When unset it will activate the latest version of the property.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['activate'] = activate
            if contacts is None:
                raise TypeError("Missing required property 'contacts'")
            __props__['contacts'] = contacts
            __props__['network'] = network
            if property is None:
                raise TypeError("Missing required property 'property'")
            __props__['property'] = property
            __props__['version'] = version
            __props__['status'] = None
        super(PropertyActivation, __self__).__init__(
            'akamai:properties/propertyActivation:PropertyActivation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            contacts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            network: Optional[pulumi.Input[str]] = None,
            property: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'PropertyActivation':
        """
        Get an existing PropertyActivation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: — (Optional, boolean) Whether to activate the property on the network. (Default: `true`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] contacts: — (Required) One or more email addresses to inform about activation changes.
        :param pulumi.Input[str] network: — (Optional) Akamai network to activate on. Allowed values `staging` or `production` (Default: `staging`).
        :param pulumi.Input[str] property: — (Required) The property ID.
        :param pulumi.Input[int] version: — (Optional) The version to activate. When unset it will activate the latest version of the property.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["activate"] = activate
        __props__["contacts"] = contacts
        __props__["network"] = network
        __props__["property"] = property
        __props__["status"] = status
        __props__["version"] = version
        return PropertyActivation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        — (Optional, boolean) Whether to activate the property on the network. (Default: `true`).
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def contacts(self) -> pulumi.Output[Sequence[str]]:
        """
        — (Required) One or more email addresses to inform about activation changes.
        """
        return pulumi.get(self, "contacts")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional[str]]:
        """
        — (Optional) Akamai network to activate on. Allowed values `staging` or `production` (Default: `staging`).
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[int]]:
        """
        — (Optional) The version to activate. When unset it will activate the latest version of the property.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def property(self) -> pulumi.Output[str]:
        """
        — (Required) The property ID.
        """
        return pulumi.get(self, "property")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

