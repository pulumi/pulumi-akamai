# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'PropertyActivationComplianceRecord',
    'PropertyActivationComplianceRecordNoncomplianceReasonEmergency',
    'PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic',
    'PropertyActivationComplianceRecordNoncomplianceReasonNone',
    'PropertyActivationComplianceRecordNoncomplianceReasonOther',
    'PropertyActivationRuleError',
    'PropertyHostname',
    'PropertyHostnameCertStatus',
    'PropertyRuleError',
]

@pulumi.output_type
class PropertyActivationComplianceRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noncomplianceReasonEmergency":
            suggest = "noncompliance_reason_emergency"
        elif key == "noncomplianceReasonNoProductionTraffic":
            suggest = "noncompliance_reason_no_production_traffic"
        elif key == "noncomplianceReasonNone":
            suggest = "noncompliance_reason_none"
        elif key == "noncomplianceReasonOther":
            suggest = "noncompliance_reason_other"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 noncompliance_reason_emergency: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency'] = None,
                 noncompliance_reason_no_production_traffic: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic'] = None,
                 noncompliance_reason_none: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone'] = None,
                 noncompliance_reason_other: Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther'] = None):
        if noncompliance_reason_emergency is not None:
            pulumi.set(__self__, "noncompliance_reason_emergency", noncompliance_reason_emergency)
        if noncompliance_reason_no_production_traffic is not None:
            pulumi.set(__self__, "noncompliance_reason_no_production_traffic", noncompliance_reason_no_production_traffic)
        if noncompliance_reason_none is not None:
            pulumi.set(__self__, "noncompliance_reason_none", noncompliance_reason_none)
        if noncompliance_reason_other is not None:
            pulumi.set(__self__, "noncompliance_reason_other", noncompliance_reason_other)

    @property
    @pulumi.getter(name="noncomplianceReasonEmergency")
    def noncompliance_reason_emergency(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency']:
        return pulumi.get(self, "noncompliance_reason_emergency")

    @property
    @pulumi.getter(name="noncomplianceReasonNoProductionTraffic")
    def noncompliance_reason_no_production_traffic(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic']:
        return pulumi.get(self, "noncompliance_reason_no_production_traffic")

    @property
    @pulumi.getter(name="noncomplianceReasonNone")
    def noncompliance_reason_none(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone']:
        return pulumi.get(self, "noncompliance_reason_none")

    @property
    @pulumi.getter(name="noncomplianceReasonOther")
    def noncompliance_reason_other(self) -> Optional['outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther']:
        return pulumi.get(self, "noncompliance_reason_other")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonEmergency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonEmergency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonEmergency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ticket_id: Optional[str] = None):
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonNone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerEmail":
            suggest = "customer_email"
        elif key == "peerReviewedBy":
            suggest = "peer_reviewed_by"
        elif key == "ticketId":
            suggest = "ticket_id"
        elif key == "unitTested":
            suggest = "unit_tested"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonNone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonNone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_email: Optional[str] = None,
                 peer_reviewed_by: Optional[str] = None,
                 ticket_id: Optional[str] = None,
                 unit_tested: Optional[bool] = None):
        if customer_email is not None:
            pulumi.set(__self__, "customer_email", customer_email)
        if peer_reviewed_by is not None:
            pulumi.set(__self__, "peer_reviewed_by", peer_reviewed_by)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)
        if unit_tested is not None:
            pulumi.set(__self__, "unit_tested", unit_tested)

    @property
    @pulumi.getter(name="customerEmail")
    def customer_email(self) -> Optional[str]:
        return pulumi.get(self, "customer_email")

    @property
    @pulumi.getter(name="peerReviewedBy")
    def peer_reviewed_by(self) -> Optional[str]:
        return pulumi.get(self, "peer_reviewed_by")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")

    @property
    @pulumi.getter(name="unitTested")
    def unit_tested(self) -> Optional[bool]:
        return pulumi.get(self, "unit_tested")


@pulumi.output_type
class PropertyActivationComplianceRecordNoncomplianceReasonOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "otherNoncomplianceReason":
            suggest = "other_noncompliance_reason"
        elif key == "ticketId":
            suggest = "ticket_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationComplianceRecordNoncomplianceReasonOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationComplianceRecordNoncomplianceReasonOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 other_noncompliance_reason: Optional[str] = None,
                 ticket_id: Optional[str] = None):
        if other_noncompliance_reason is not None:
            pulumi.set(__self__, "other_noncompliance_reason", other_noncompliance_reason)
        if ticket_id is not None:
            pulumi.set(__self__, "ticket_id", ticket_id)

    @property
    @pulumi.getter(name="otherNoncomplianceReason")
    def other_noncompliance_reason(self) -> Optional[str]:
        return pulumi.get(self, "other_noncompliance_reason")

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> Optional[str]:
        return pulumi.get(self, "ticket_id")


@pulumi.output_type
class PropertyActivationRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyActivationRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyActivationRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class PropertyHostname(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certProvisioningType":
            suggest = "cert_provisioning_type"
        elif key == "cnameFrom":
            suggest = "cname_from"
        elif key == "cnameTo":
            suggest = "cname_to"
        elif key == "certStatuses":
            suggest = "cert_statuses"
        elif key == "cnameType":
            suggest = "cname_type"
        elif key == "edgeHostnameId":
            suggest = "edge_hostname_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostname. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostname.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostname.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_provisioning_type: str,
                 cname_from: str,
                 cname_to: str,
                 cert_statuses: Optional[Sequence['outputs.PropertyHostnameCertStatus']] = None,
                 cname_type: Optional[str] = None,
                 edge_hostname_id: Optional[str] = None):
        pulumi.set(__self__, "cert_provisioning_type", cert_provisioning_type)
        pulumi.set(__self__, "cname_from", cname_from)
        pulumi.set(__self__, "cname_to", cname_to)
        if cert_statuses is not None:
            pulumi.set(__self__, "cert_statuses", cert_statuses)
        if cname_type is not None:
            pulumi.set(__self__, "cname_type", cname_type)
        if edge_hostname_id is not None:
            pulumi.set(__self__, "edge_hostname_id", edge_hostname_id)

    @property
    @pulumi.getter(name="certProvisioningType")
    def cert_provisioning_type(self) -> str:
        return pulumi.get(self, "cert_provisioning_type")

    @property
    @pulumi.getter(name="cnameFrom")
    def cname_from(self) -> str:
        return pulumi.get(self, "cname_from")

    @property
    @pulumi.getter(name="cnameTo")
    def cname_to(self) -> str:
        return pulumi.get(self, "cname_to")

    @property
    @pulumi.getter(name="certStatuses")
    def cert_statuses(self) -> Optional[Sequence['outputs.PropertyHostnameCertStatus']]:
        return pulumi.get(self, "cert_statuses")

    @property
    @pulumi.getter(name="cnameType")
    def cname_type(self) -> Optional[str]:
        return pulumi.get(self, "cname_type")

    @property
    @pulumi.getter(name="edgeHostnameId")
    def edge_hostname_id(self) -> Optional[str]:
        return pulumi.get(self, "edge_hostname_id")


@pulumi.output_type
class PropertyHostnameCertStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productionStatus":
            suggest = "production_status"
        elif key == "stagingStatus":
            suggest = "staging_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyHostnameCertStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyHostnameCertStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 production_status: Optional[str] = None,
                 staging_status: Optional[str] = None,
                 target: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if production_status is not None:
            pulumi.set(__self__, "production_status", production_status)
        if staging_status is not None:
            pulumi.set(__self__, "staging_status", staging_status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="productionStatus")
    def production_status(self) -> Optional[str]:
        return pulumi.get(self, "production_status")

    @property
    @pulumi.getter(name="stagingStatus")
    def staging_status(self) -> Optional[str]:
        return pulumi.get(self, "staging_status")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class PropertyRuleError(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorName":
            suggest = "behavior_name"
        elif key == "errorLocation":
            suggest = "error_location"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PropertyRuleError. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PropertyRuleError.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_name: Optional[str] = None,
                 detail: Optional[str] = None,
                 error_location: Optional[str] = None,
                 instance: Optional[str] = None,
                 status_code: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None):
        if behavior_name is not None:
            pulumi.set(__self__, "behavior_name", behavior_name)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if error_location is not None:
            pulumi.set(__self__, "error_location", error_location)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="behaviorName")
    def behavior_name(self) -> Optional[str]:
        return pulumi.get(self, "behavior_name")

    @property
    @pulumi.getter
    def detail(self) -> Optional[str]:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="errorLocation")
    def error_location(self) -> Optional[str]:
        return pulumi.get(self, "error_location")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


