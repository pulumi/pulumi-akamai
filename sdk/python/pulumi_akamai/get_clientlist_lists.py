# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetClientlistListsResult',
    'AwaitableGetClientlistListsResult',
    'get_clientlist_lists',
    'get_clientlist_lists_output',
]

@pulumi.output_type
class GetClientlistListsResult:
    """
    A collection of values returned by getClientlistLists.
    """
    def __init__(__self__, id=None, json=None, list_ids=None, lists=None, name=None, output_text=None, types=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if list_ids and not isinstance(list_ids, list):
            raise TypeError("Expected argument 'list_ids' to be a list")
        pulumi.set(__self__, "list_ids", list_ids)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_text and not isinstance(output_text, str):
            raise TypeError("Expected argument 'output_text' to be a str")
        pulumi.set(__self__, "output_text", output_text)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="listIds")
    def list_ids(self) -> Sequence[str]:
        return pulumi.get(self, "list_ids")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetClientlistListsListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputText")
    def output_text(self) -> str:
        return pulumi.get(self, "output_text")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "types")


class AwaitableGetClientlistListsResult(GetClientlistListsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClientlistListsResult(
            id=self.id,
            json=self.json,
            list_ids=self.list_ids,
            lists=self.lists,
            name=self.name,
            output_text=self.output_text,
            types=self.types)


def get_clientlist_lists(name: Optional[str] = None,
                         types: Optional[Sequence[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClientlistListsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['types'] = types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getClientlistLists:getClientlistLists', __args__, opts=opts, typ=GetClientlistListsResult).value

    return AwaitableGetClientlistListsResult(
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        list_ids=pulumi.get(__ret__, 'list_ids'),
        lists=pulumi.get(__ret__, 'lists'),
        name=pulumi.get(__ret__, 'name'),
        output_text=pulumi.get(__ret__, 'output_text'),
        types=pulumi.get(__ret__, 'types'))


@_utilities.lift_output_func(get_clientlist_lists)
def get_clientlist_lists_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClientlistListsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
