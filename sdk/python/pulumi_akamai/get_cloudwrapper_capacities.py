# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCloudwrapperCapacitiesResult',
    'AwaitableGetCloudwrapperCapacitiesResult',
    'get_cloudwrapper_capacities',
    'get_cloudwrapper_capacities_output',
]

@pulumi.output_type
class GetCloudwrapperCapacitiesResult:
    """
    A collection of values returned by getCloudwrapperCapacities.
    """
    def __init__(__self__, capacities=None, contract_ids=None, id=None):
        if capacities and not isinstance(capacities, list):
            raise TypeError("Expected argument 'capacities' to be a list")
        pulumi.set(__self__, "capacities", capacities)
        if contract_ids and not isinstance(contract_ids, list):
            raise TypeError("Expected argument 'contract_ids' to be a list")
        pulumi.set(__self__, "contract_ids", contract_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def capacities(self) -> Optional[Sequence['outputs.GetCloudwrapperCapacitiesCapacityResult']]:
        return pulumi.get(self, "capacities")

    @property
    @pulumi.getter(name="contractIds")
    def contract_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "contract_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_capacities`.""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_capacities`.""")

        return pulumi.get(self, "id")


class AwaitableGetCloudwrapperCapacitiesResult(GetCloudwrapperCapacitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudwrapperCapacitiesResult(
            capacities=self.capacities,
            contract_ids=self.contract_ids,
            id=self.id)


def get_cloudwrapper_capacities(capacities: Optional[Sequence[pulumi.InputType['GetCloudwrapperCapacitiesCapacityArgs']]] = None,
                                contract_ids: Optional[Sequence[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudwrapperCapacitiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['capacities'] = capacities
    __args__['contractIds'] = contract_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCloudwrapperCapacities:getCloudwrapperCapacities', __args__, opts=opts, typ=GetCloudwrapperCapacitiesResult).value

    return AwaitableGetCloudwrapperCapacitiesResult(
        capacities=pulumi.get(__ret__, 'capacities'),
        contract_ids=pulumi.get(__ret__, 'contract_ids'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_cloudwrapper_capacities)
def get_cloudwrapper_capacities_output(capacities: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCloudwrapperCapacitiesCapacityArgs']]]]] = None,
                                       contract_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudwrapperCapacitiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
