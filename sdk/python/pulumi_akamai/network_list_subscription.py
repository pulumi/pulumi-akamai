# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NetworkListSubscriptionArgs', 'NetworkListSubscription']

@pulumi.input_type
class NetworkListSubscriptionArgs:
    def __init__(__self__, *,
                 network_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 recipients: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a NetworkListSubscription resource.
        """
        NetworkListSubscriptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_lists=network_lists,
            recipients=recipients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
             recipients: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("network_lists", network_lists)
        _setter("recipients", recipients)

    @property
    @pulumi.getter(name="networkLists")
    def network_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "network_lists")

    @network_lists.setter
    def network_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "network_lists", value)

    @property
    @pulumi.getter
    def recipients(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "recipients", value)


@pulumi.input_type
class _NetworkListSubscriptionState:
    def __init__(__self__, *,
                 network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering NetworkListSubscription resources.
        """
        _NetworkListSubscriptionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_lists=network_lists,
            recipients=recipients,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if network_lists is not None:
            _setter("network_lists", network_lists)
        if recipients is not None:
            _setter("recipients", recipients)

    @property
    @pulumi.getter(name="networkLists")
    def network_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "network_lists")

    @network_lists.setter
    def network_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_lists", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)


class NetworkListSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a NetworkListSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkListSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkListSubscription resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkListSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkListSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NetworkListSubscriptionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkListSubscriptionArgs.__new__(NetworkListSubscriptionArgs)

            if network_lists is None and not opts.urn:
                raise TypeError("Missing required property 'network_lists'")
            __props__.__dict__["network_lists"] = network_lists
            if recipients is None and not opts.urn:
                raise TypeError("Missing required property 'recipients'")
            __props__.__dict__["recipients"] = recipients
        super(NetworkListSubscription, __self__).__init__(
            'akamai:index/networkListSubscription:NetworkListSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            network_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'NetworkListSubscription':
        """
        Get an existing NetworkListSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkListSubscriptionState.__new__(_NetworkListSubscriptionState)

        __props__.__dict__["network_lists"] = network_lists
        __props__.__dict__["recipients"] = recipients
        return NetworkListSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="networkLists")
    def network_lists(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "network_lists")

    @property
    @pulumi.getter
    def recipients(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "recipients")

