# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTimezonesResult',
    'AwaitableGetIamTimezonesResult',
    'get_iam_timezones',
    'get_iam_timezones_output',
]

@pulumi.output_type
class GetIamTimezonesResult:
    """
    A collection of values returned by getIamTimezones.
    """
    def __init__(__self__, id=None, timezones=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if timezones and not isinstance(timezones, list):
            raise TypeError("Expected argument 'timezones' to be a list")
        pulumi.set(__self__, "timezones", timezones)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def timezones(self) -> Sequence['outputs.GetIamTimezonesTimezoneResult']:
        return pulumi.get(self, "timezones")


class AwaitableGetIamTimezonesResult(GetIamTimezonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTimezonesResult(
            id=self.id,
            timezones=self.timezones)


def get_iam_timezones(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTimezonesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamTimezones:getIamTimezones', __args__, opts=opts, typ=GetIamTimezonesResult).value

    return AwaitableGetIamTimezonesResult(
        id=pulumi.get(__ret__, 'id'),
        timezones=pulumi.get(__ret__, 'timezones'))


@_utilities.lift_output_func(get_iam_timezones)
def get_iam_timezones_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIamTimezonesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
