# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGtmDatacenterResult',
    'AwaitableGetGtmDatacenterResult',
    'get_gtm_datacenter',
    'get_gtm_datacenter_output',
]

@pulumi.output_type
class GetGtmDatacenterResult:
    """
    A collection of values returned by getGtmDatacenter.
    """
    def __init__(__self__, city=None, clone_of=None, cloud_server_host_header_override=None, cloud_server_targeting=None, continent=None, country=None, datacenter_id=None, default_load_objects=None, domain=None, id=None, latitude=None, links=None, longitude=None, nickname=None, score_penalty=None, servermonitor_pool=None, state_or_province=None, virtual=None):
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if clone_of and not isinstance(clone_of, int):
            raise TypeError("Expected argument 'clone_of' to be a int")
        pulumi.set(__self__, "clone_of", clone_of)
        if cloud_server_host_header_override and not isinstance(cloud_server_host_header_override, bool):
            raise TypeError("Expected argument 'cloud_server_host_header_override' to be a bool")
        pulumi.set(__self__, "cloud_server_host_header_override", cloud_server_host_header_override)
        if cloud_server_targeting and not isinstance(cloud_server_targeting, bool):
            raise TypeError("Expected argument 'cloud_server_targeting' to be a bool")
        pulumi.set(__self__, "cloud_server_targeting", cloud_server_targeting)
        if continent and not isinstance(continent, str):
            raise TypeError("Expected argument 'continent' to be a str")
        pulumi.set(__self__, "continent", continent)
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if datacenter_id and not isinstance(datacenter_id, int):
            raise TypeError("Expected argument 'datacenter_id' to be a int")
        pulumi.set(__self__, "datacenter_id", datacenter_id)
        if default_load_objects and not isinstance(default_load_objects, list):
            raise TypeError("Expected argument 'default_load_objects' to be a list")
        pulumi.set(__self__, "default_load_objects", default_load_objects)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latitude and not isinstance(latitude, float):
            raise TypeError("Expected argument 'latitude' to be a float")
        pulumi.set(__self__, "latitude", latitude)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if longitude and not isinstance(longitude, float):
            raise TypeError("Expected argument 'longitude' to be a float")
        pulumi.set(__self__, "longitude", longitude)
        if nickname and not isinstance(nickname, str):
            raise TypeError("Expected argument 'nickname' to be a str")
        pulumi.set(__self__, "nickname", nickname)
        if score_penalty and not isinstance(score_penalty, int):
            raise TypeError("Expected argument 'score_penalty' to be a int")
        pulumi.set(__self__, "score_penalty", score_penalty)
        if servermonitor_pool and not isinstance(servermonitor_pool, str):
            raise TypeError("Expected argument 'servermonitor_pool' to be a str")
        pulumi.set(__self__, "servermonitor_pool", servermonitor_pool)
        if state_or_province and not isinstance(state_or_province, str):
            raise TypeError("Expected argument 'state_or_province' to be a str")
        pulumi.set(__self__, "state_or_province", state_or_province)
        if virtual and not isinstance(virtual, bool):
            raise TypeError("Expected argument 'virtual' to be a bool")
        pulumi.set(__self__, "virtual", virtual)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloneOf")
    def clone_of(self) -> int:
        return pulumi.get(self, "clone_of")

    @property
    @pulumi.getter(name="cloudServerHostHeaderOverride")
    def cloud_server_host_header_override(self) -> bool:
        return pulumi.get(self, "cloud_server_host_header_override")

    @property
    @pulumi.getter(name="cloudServerTargeting")
    def cloud_server_targeting(self) -> bool:
        return pulumi.get(self, "cloud_server_targeting")

    @property
    @pulumi.getter
    def continent(self) -> str:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> int:
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="defaultLoadObjects")
    def default_load_objects(self) -> Sequence['outputs.GetGtmDatacenterDefaultLoadObjectResult']:
        return pulumi.get(self, "default_load_objects")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetGtmDatacenterLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def nickname(self) -> str:
        return pulumi.get(self, "nickname")

    @property
    @pulumi.getter(name="scorePenalty")
    def score_penalty(self) -> int:
        return pulumi.get(self, "score_penalty")

    @property
    @pulumi.getter(name="servermonitorPool")
    def servermonitor_pool(self) -> str:
        return pulumi.get(self, "servermonitor_pool")

    @property
    @pulumi.getter(name="stateOrProvince")
    def state_or_province(self) -> str:
        return pulumi.get(self, "state_or_province")

    @property
    @pulumi.getter
    def virtual(self) -> bool:
        return pulumi.get(self, "virtual")


class AwaitableGetGtmDatacenterResult(GetGtmDatacenterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmDatacenterResult(
            city=self.city,
            clone_of=self.clone_of,
            cloud_server_host_header_override=self.cloud_server_host_header_override,
            cloud_server_targeting=self.cloud_server_targeting,
            continent=self.continent,
            country=self.country,
            datacenter_id=self.datacenter_id,
            default_load_objects=self.default_load_objects,
            domain=self.domain,
            id=self.id,
            latitude=self.latitude,
            links=self.links,
            longitude=self.longitude,
            nickname=self.nickname,
            score_penalty=self.score_penalty,
            servermonitor_pool=self.servermonitor_pool,
            state_or_province=self.state_or_province,
            virtual=self.virtual)


def get_gtm_datacenter(datacenter_id: Optional[int] = None,
                       domain: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmDatacenterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['datacenterId'] = datacenter_id
    __args__['domain'] = domain
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmDatacenter:getGtmDatacenter', __args__, opts=opts, typ=GetGtmDatacenterResult).value

    return AwaitableGetGtmDatacenterResult(
        city=pulumi.get(__ret__, 'city'),
        clone_of=pulumi.get(__ret__, 'clone_of'),
        cloud_server_host_header_override=pulumi.get(__ret__, 'cloud_server_host_header_override'),
        cloud_server_targeting=pulumi.get(__ret__, 'cloud_server_targeting'),
        continent=pulumi.get(__ret__, 'continent'),
        country=pulumi.get(__ret__, 'country'),
        datacenter_id=pulumi.get(__ret__, 'datacenter_id'),
        default_load_objects=pulumi.get(__ret__, 'default_load_objects'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        latitude=pulumi.get(__ret__, 'latitude'),
        links=pulumi.get(__ret__, 'links'),
        longitude=pulumi.get(__ret__, 'longitude'),
        nickname=pulumi.get(__ret__, 'nickname'),
        score_penalty=pulumi.get(__ret__, 'score_penalty'),
        servermonitor_pool=pulumi.get(__ret__, 'servermonitor_pool'),
        state_or_province=pulumi.get(__ret__, 'state_or_province'),
        virtual=pulumi.get(__ret__, 'virtual'))


@_utilities.lift_output_func(get_gtm_datacenter)
def get_gtm_datacenter_output(datacenter_id: Optional[pulumi.Input[int]] = None,
                              domain: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGtmDatacenterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
