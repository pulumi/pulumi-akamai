# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGtmAsmapResult',
    'AwaitableGetGtmAsmapResult',
    'get_gtm_asmap',
    'get_gtm_asmap_output',
]

@pulumi.output_type
class GetGtmAsmapResult:
    """
    A collection of values returned by getGtmAsmap.
    """
    def __init__(__self__, assignments=None, default_datacenter=None, domain=None, id=None, links=None, map_name=None):
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if default_datacenter and not isinstance(default_datacenter, dict):
            raise TypeError("Expected argument 'default_datacenter' to be a dict")
        pulumi.set(__self__, "default_datacenter", default_datacenter)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if map_name and not isinstance(map_name, str):
            raise TypeError("Expected argument 'map_name' to be a str")
        pulumi.set(__self__, "map_name", map_name)

    @property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['outputs.GetGtmAsmapAssignmentResult']]:
        return pulumi.get(self, "assignments")

    @property
    @pulumi.getter(name="defaultDatacenter")
    def default_datacenter(self) -> Optional['outputs.GetGtmAsmapDefaultDatacenterResult']:
        return pulumi.get(self, "default_datacenter")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        warnings.warn("""Required by the terraform plugin testing framework, always set to `gtm_asmap`.""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Required by the terraform plugin testing framework, always set to `gtm_asmap`.""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.GetGtmAsmapLinkResult']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="mapName")
    def map_name(self) -> str:
        return pulumi.get(self, "map_name")


class AwaitableGetGtmAsmapResult(GetGtmAsmapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmAsmapResult(
            assignments=self.assignments,
            default_datacenter=self.default_datacenter,
            domain=self.domain,
            id=self.id,
            links=self.links,
            map_name=self.map_name)


def get_gtm_asmap(assignments: Optional[Sequence[pulumi.InputType['GetGtmAsmapAssignmentArgs']]] = None,
                  default_datacenter: Optional[pulumi.InputType['GetGtmAsmapDefaultDatacenterArgs']] = None,
                  domain: Optional[str] = None,
                  links: Optional[Sequence[pulumi.InputType['GetGtmAsmapLinkArgs']]] = None,
                  map_name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmAsmapResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assignments'] = assignments
    __args__['defaultDatacenter'] = default_datacenter
    __args__['domain'] = domain
    __args__['links'] = links
    __args__['mapName'] = map_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmAsmap:getGtmAsmap', __args__, opts=opts, typ=GetGtmAsmapResult).value

    return AwaitableGetGtmAsmapResult(
        assignments=pulumi.get(__ret__, 'assignments'),
        default_datacenter=pulumi.get(__ret__, 'default_datacenter'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        links=pulumi.get(__ret__, 'links'),
        map_name=pulumi.get(__ret__, 'map_name'))


@_utilities.lift_output_func(get_gtm_asmap)
def get_gtm_asmap_output(assignments: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmAsmapAssignmentArgs']]]]] = None,
                         default_datacenter: Optional[pulumi.Input[Optional[pulumi.InputType['GetGtmAsmapDefaultDatacenterArgs']]]] = None,
                         domain: Optional[pulumi.Input[str]] = None,
                         links: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmAsmapLinkArgs']]]]] = None,
                         map_name: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGtmAsmapResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
