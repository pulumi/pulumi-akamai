# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPropertyIncludeResult',
    'AwaitableGetPropertyIncludeResult',
    'get_property_include',
    'get_property_include_output',
]

@pulumi.output_type
class GetPropertyIncludeResult:
    """
    A collection of values returned by getPropertyInclude.
    """
    def __init__(__self__, contract_id=None, group_id=None, id=None, include_id=None, latest_version=None, name=None, production_version=None, staging_version=None, type=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_id and not isinstance(include_id, str):
            raise TypeError("Expected argument 'include_id' to be a str")
        pulumi.set(__self__, "include_id", include_id)
        if latest_version and not isinstance(latest_version, int):
            raise TypeError("Expected argument 'latest_version' to be a int")
        pulumi.set(__self__, "latest_version", latest_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if production_version and not isinstance(production_version, int):
            raise TypeError("Expected argument 'production_version' to be a int")
        pulumi.set(__self__, "production_version", production_version)
        if staging_version and not isinstance(staging_version, int):
            raise TypeError("Expected argument 'staging_version' to be a int")
        pulumi.set(__self__, "staging_version", staging_version)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeId")
    def include_id(self) -> str:
        return pulumi.get(self, "include_id")

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> int:
        return pulumi.get(self, "latest_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productionVersion")
    def production_version(self) -> int:
        return pulumi.get(self, "production_version")

    @property
    @pulumi.getter(name="stagingVersion")
    def staging_version(self) -> int:
        return pulumi.get(self, "staging_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetPropertyIncludeResult(GetPropertyIncludeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyIncludeResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            include_id=self.include_id,
            latest_version=self.latest_version,
            name=self.name,
            production_version=self.production_version,
            staging_version=self.staging_version,
            type=self.type)


def get_property_include(contract_id: Optional[str] = None,
                         group_id: Optional[str] = None,
                         include_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyIncludeResult:
    """
    Use the `PropertyInclude` data source to get details about a specific include.

    ## Basic usage

    This example returns details for an include based on contract, group, and include IDs.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include = akamai.get_property_include(contract_id="ctr_1234",
        group_id="grp_5678",
        include_id="inc_9012")
    pulumi.export("myExample", my_example_property_include)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `name` - The descriptive name for the include.
    * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
    * `latest_version` - Returns the most recent version of the include.
    * `staging_version` - The include version currently activated on the staging network.
    * `production_version` - The include version currently activated on the production network.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['includeId'] = include_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyInclude:getPropertyInclude', __args__, opts=opts, typ=GetPropertyIncludeResult).value

    return AwaitableGetPropertyIncludeResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        id=__ret__.id,
        include_id=__ret__.include_id,
        latest_version=__ret__.latest_version,
        name=__ret__.name,
        production_version=__ret__.production_version,
        staging_version=__ret__.staging_version,
        type=__ret__.type)


@_utilities.lift_output_func(get_property_include)
def get_property_include_output(contract_id: Optional[pulumi.Input[str]] = None,
                                group_id: Optional[pulumi.Input[str]] = None,
                                include_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyIncludeResult]:
    """
    Use the `PropertyInclude` data source to get details about a specific include.

    ## Basic usage

    This example returns details for an include based on contract, group, and include IDs.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include = akamai.get_property_include(contract_id="ctr_1234",
        group_id="grp_5678",
        include_id="inc_9012")
    pulumi.export("myExample", my_example_property_include)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `name` - The descriptive name for the include.
    * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
    * `latest_version` - Returns the most recent version of the include.
    * `staging_version` - The include version currently activated on the staging network.
    * `production_version` - The include version currently activated on the production network.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    """
    ...
