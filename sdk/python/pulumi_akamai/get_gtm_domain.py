# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGtmDomainResult',
    'AwaitableGetGtmDomainResult',
    'get_gtm_domain',
    'get_gtm_domain_output',
]

@pulumi.output_type
class GetGtmDomainResult:
    """
    A collection of values returned by getGtmDomain.
    """
    def __init__(__self__, as_maps=None, cidr_maps=None, cname_coalescing_enabled=None, datacenters=None, default_error_penalty=None, default_health_max=None, default_health_multiplier=None, default_health_threshold=None, default_max_unreachable_penalty=None, default_ssl_client_certificate=None, default_ssl_client_private_key=None, default_timeout_penalty=None, default_unreachable_threshold=None, email_notification_lists=None, end_user_mapping_enabled=None, geographic_maps=None, id=None, last_modified=None, last_modified_by=None, links=None, load_feedback=None, load_imbalance_percentage=None, map_update_interval=None, max_properties=None, max_resources=None, max_test_timeout=None, max_ttl=None, min_pingable_region_fraction=None, min_test_interval=None, min_ttl=None, modification_comments=None, name=None, properties=None, resources=None, round_robin_prefix=None, server_monitor_pool=None, status=None, type=None):
        if as_maps and not isinstance(as_maps, list):
            raise TypeError("Expected argument 'as_maps' to be a list")
        pulumi.set(__self__, "as_maps", as_maps)
        if cidr_maps and not isinstance(cidr_maps, list):
            raise TypeError("Expected argument 'cidr_maps' to be a list")
        pulumi.set(__self__, "cidr_maps", cidr_maps)
        if cname_coalescing_enabled and not isinstance(cname_coalescing_enabled, bool):
            raise TypeError("Expected argument 'cname_coalescing_enabled' to be a bool")
        pulumi.set(__self__, "cname_coalescing_enabled", cname_coalescing_enabled)
        if datacenters and not isinstance(datacenters, list):
            raise TypeError("Expected argument 'datacenters' to be a list")
        pulumi.set(__self__, "datacenters", datacenters)
        if default_error_penalty and not isinstance(default_error_penalty, int):
            raise TypeError("Expected argument 'default_error_penalty' to be a int")
        pulumi.set(__self__, "default_error_penalty", default_error_penalty)
        if default_health_max and not isinstance(default_health_max, float):
            raise TypeError("Expected argument 'default_health_max' to be a float")
        pulumi.set(__self__, "default_health_max", default_health_max)
        if default_health_multiplier and not isinstance(default_health_multiplier, float):
            raise TypeError("Expected argument 'default_health_multiplier' to be a float")
        pulumi.set(__self__, "default_health_multiplier", default_health_multiplier)
        if default_health_threshold and not isinstance(default_health_threshold, float):
            raise TypeError("Expected argument 'default_health_threshold' to be a float")
        pulumi.set(__self__, "default_health_threshold", default_health_threshold)
        if default_max_unreachable_penalty and not isinstance(default_max_unreachable_penalty, int):
            raise TypeError("Expected argument 'default_max_unreachable_penalty' to be a int")
        pulumi.set(__self__, "default_max_unreachable_penalty", default_max_unreachable_penalty)
        if default_ssl_client_certificate and not isinstance(default_ssl_client_certificate, str):
            raise TypeError("Expected argument 'default_ssl_client_certificate' to be a str")
        pulumi.set(__self__, "default_ssl_client_certificate", default_ssl_client_certificate)
        if default_ssl_client_private_key and not isinstance(default_ssl_client_private_key, str):
            raise TypeError("Expected argument 'default_ssl_client_private_key' to be a str")
        pulumi.set(__self__, "default_ssl_client_private_key", default_ssl_client_private_key)
        if default_timeout_penalty and not isinstance(default_timeout_penalty, int):
            raise TypeError("Expected argument 'default_timeout_penalty' to be a int")
        pulumi.set(__self__, "default_timeout_penalty", default_timeout_penalty)
        if default_unreachable_threshold and not isinstance(default_unreachable_threshold, float):
            raise TypeError("Expected argument 'default_unreachable_threshold' to be a float")
        pulumi.set(__self__, "default_unreachable_threshold", default_unreachable_threshold)
        if email_notification_lists and not isinstance(email_notification_lists, list):
            raise TypeError("Expected argument 'email_notification_lists' to be a list")
        pulumi.set(__self__, "email_notification_lists", email_notification_lists)
        if end_user_mapping_enabled and not isinstance(end_user_mapping_enabled, bool):
            raise TypeError("Expected argument 'end_user_mapping_enabled' to be a bool")
        pulumi.set(__self__, "end_user_mapping_enabled", end_user_mapping_enabled)
        if geographic_maps and not isinstance(geographic_maps, list):
            raise TypeError("Expected argument 'geographic_maps' to be a list")
        pulumi.set(__self__, "geographic_maps", geographic_maps)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if last_modified_by and not isinstance(last_modified_by, str):
            raise TypeError("Expected argument 'last_modified_by' to be a str")
        pulumi.set(__self__, "last_modified_by", last_modified_by)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if load_feedback and not isinstance(load_feedback, bool):
            raise TypeError("Expected argument 'load_feedback' to be a bool")
        pulumi.set(__self__, "load_feedback", load_feedback)
        if load_imbalance_percentage and not isinstance(load_imbalance_percentage, float):
            raise TypeError("Expected argument 'load_imbalance_percentage' to be a float")
        pulumi.set(__self__, "load_imbalance_percentage", load_imbalance_percentage)
        if map_update_interval and not isinstance(map_update_interval, int):
            raise TypeError("Expected argument 'map_update_interval' to be a int")
        pulumi.set(__self__, "map_update_interval", map_update_interval)
        if max_properties and not isinstance(max_properties, int):
            raise TypeError("Expected argument 'max_properties' to be a int")
        pulumi.set(__self__, "max_properties", max_properties)
        if max_resources and not isinstance(max_resources, int):
            raise TypeError("Expected argument 'max_resources' to be a int")
        pulumi.set(__self__, "max_resources", max_resources)
        if max_test_timeout and not isinstance(max_test_timeout, float):
            raise TypeError("Expected argument 'max_test_timeout' to be a float")
        pulumi.set(__self__, "max_test_timeout", max_test_timeout)
        if max_ttl and not isinstance(max_ttl, int):
            raise TypeError("Expected argument 'max_ttl' to be a int")
        pulumi.set(__self__, "max_ttl", max_ttl)
        if min_pingable_region_fraction and not isinstance(min_pingable_region_fraction, float):
            raise TypeError("Expected argument 'min_pingable_region_fraction' to be a float")
        pulumi.set(__self__, "min_pingable_region_fraction", min_pingable_region_fraction)
        if min_test_interval and not isinstance(min_test_interval, int):
            raise TypeError("Expected argument 'min_test_interval' to be a int")
        pulumi.set(__self__, "min_test_interval", min_test_interval)
        if min_ttl and not isinstance(min_ttl, int):
            raise TypeError("Expected argument 'min_ttl' to be a int")
        pulumi.set(__self__, "min_ttl", min_ttl)
        if modification_comments and not isinstance(modification_comments, str):
            raise TypeError("Expected argument 'modification_comments' to be a str")
        pulumi.set(__self__, "modification_comments", modification_comments)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if round_robin_prefix and not isinstance(round_robin_prefix, str):
            raise TypeError("Expected argument 'round_robin_prefix' to be a str")
        pulumi.set(__self__, "round_robin_prefix", round_robin_prefix)
        if server_monitor_pool and not isinstance(server_monitor_pool, str):
            raise TypeError("Expected argument 'server_monitor_pool' to be a str")
        pulumi.set(__self__, "server_monitor_pool", server_monitor_pool)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="asMaps")
    def as_maps(self) -> Optional[Sequence['outputs.GetGtmDomainAsMapResult']]:
        return pulumi.get(self, "as_maps")

    @property
    @pulumi.getter(name="cidrMaps")
    def cidr_maps(self) -> Optional[Sequence['outputs.GetGtmDomainCidrMapResult']]:
        return pulumi.get(self, "cidr_maps")

    @property
    @pulumi.getter(name="cnameCoalescingEnabled")
    def cname_coalescing_enabled(self) -> bool:
        return pulumi.get(self, "cname_coalescing_enabled")

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[Sequence['outputs.GetGtmDomainDatacenterResult']]:
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="defaultErrorPenalty")
    def default_error_penalty(self) -> int:
        return pulumi.get(self, "default_error_penalty")

    @property
    @pulumi.getter(name="defaultHealthMax")
    def default_health_max(self) -> float:
        return pulumi.get(self, "default_health_max")

    @property
    @pulumi.getter(name="defaultHealthMultiplier")
    def default_health_multiplier(self) -> float:
        return pulumi.get(self, "default_health_multiplier")

    @property
    @pulumi.getter(name="defaultHealthThreshold")
    def default_health_threshold(self) -> float:
        return pulumi.get(self, "default_health_threshold")

    @property
    @pulumi.getter(name="defaultMaxUnreachablePenalty")
    def default_max_unreachable_penalty(self) -> int:
        return pulumi.get(self, "default_max_unreachable_penalty")

    @property
    @pulumi.getter(name="defaultSslClientCertificate")
    def default_ssl_client_certificate(self) -> str:
        return pulumi.get(self, "default_ssl_client_certificate")

    @property
    @pulumi.getter(name="defaultSslClientPrivateKey")
    def default_ssl_client_private_key(self) -> str:
        return pulumi.get(self, "default_ssl_client_private_key")

    @property
    @pulumi.getter(name="defaultTimeoutPenalty")
    def default_timeout_penalty(self) -> int:
        return pulumi.get(self, "default_timeout_penalty")

    @property
    @pulumi.getter(name="defaultUnreachableThreshold")
    def default_unreachable_threshold(self) -> float:
        return pulumi.get(self, "default_unreachable_threshold")

    @property
    @pulumi.getter(name="emailNotificationLists")
    def email_notification_lists(self) -> Sequence[str]:
        return pulumi.get(self, "email_notification_lists")

    @property
    @pulumi.getter(name="endUserMappingEnabled")
    def end_user_mapping_enabled(self) -> bool:
        return pulumi.get(self, "end_user_mapping_enabled")

    @property
    @pulumi.getter(name="geographicMaps")
    def geographic_maps(self) -> Optional[Sequence['outputs.GetGtmDomainGeographicMapResult']]:
        return pulumi.get(self, "geographic_maps")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> str:
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.GetGtmDomainLinkResult']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="loadFeedback")
    def load_feedback(self) -> bool:
        return pulumi.get(self, "load_feedback")

    @property
    @pulumi.getter(name="loadImbalancePercentage")
    def load_imbalance_percentage(self) -> float:
        return pulumi.get(self, "load_imbalance_percentage")

    @property
    @pulumi.getter(name="mapUpdateInterval")
    def map_update_interval(self) -> int:
        return pulumi.get(self, "map_update_interval")

    @property
    @pulumi.getter(name="maxProperties")
    def max_properties(self) -> int:
        return pulumi.get(self, "max_properties")

    @property
    @pulumi.getter(name="maxResources")
    def max_resources(self) -> int:
        return pulumi.get(self, "max_resources")

    @property
    @pulumi.getter(name="maxTestTimeout")
    def max_test_timeout(self) -> float:
        return pulumi.get(self, "max_test_timeout")

    @property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> int:
        return pulumi.get(self, "max_ttl")

    @property
    @pulumi.getter(name="minPingableRegionFraction")
    def min_pingable_region_fraction(self) -> float:
        return pulumi.get(self, "min_pingable_region_fraction")

    @property
    @pulumi.getter(name="minTestInterval")
    def min_test_interval(self) -> int:
        return pulumi.get(self, "min_test_interval")

    @property
    @pulumi.getter(name="minTtl")
    def min_ttl(self) -> int:
        return pulumi.get(self, "min_ttl")

    @property
    @pulumi.getter(name="modificationComments")
    def modification_comments(self) -> str:
        return pulumi.get(self, "modification_comments")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.GetGtmDomainPropertyResult']]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence['outputs.GetGtmDomainResourceResult']]:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="roundRobinPrefix")
    def round_robin_prefix(self) -> str:
        return pulumi.get(self, "round_robin_prefix")

    @property
    @pulumi.getter(name="serverMonitorPool")
    def server_monitor_pool(self) -> str:
        return pulumi.get(self, "server_monitor_pool")

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.GetGtmDomainStatusResult']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetGtmDomainResult(GetGtmDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGtmDomainResult(
            as_maps=self.as_maps,
            cidr_maps=self.cidr_maps,
            cname_coalescing_enabled=self.cname_coalescing_enabled,
            datacenters=self.datacenters,
            default_error_penalty=self.default_error_penalty,
            default_health_max=self.default_health_max,
            default_health_multiplier=self.default_health_multiplier,
            default_health_threshold=self.default_health_threshold,
            default_max_unreachable_penalty=self.default_max_unreachable_penalty,
            default_ssl_client_certificate=self.default_ssl_client_certificate,
            default_ssl_client_private_key=self.default_ssl_client_private_key,
            default_timeout_penalty=self.default_timeout_penalty,
            default_unreachable_threshold=self.default_unreachable_threshold,
            email_notification_lists=self.email_notification_lists,
            end_user_mapping_enabled=self.end_user_mapping_enabled,
            geographic_maps=self.geographic_maps,
            id=self.id,
            last_modified=self.last_modified,
            last_modified_by=self.last_modified_by,
            links=self.links,
            load_feedback=self.load_feedback,
            load_imbalance_percentage=self.load_imbalance_percentage,
            map_update_interval=self.map_update_interval,
            max_properties=self.max_properties,
            max_resources=self.max_resources,
            max_test_timeout=self.max_test_timeout,
            max_ttl=self.max_ttl,
            min_pingable_region_fraction=self.min_pingable_region_fraction,
            min_test_interval=self.min_test_interval,
            min_ttl=self.min_ttl,
            modification_comments=self.modification_comments,
            name=self.name,
            properties=self.properties,
            resources=self.resources,
            round_robin_prefix=self.round_robin_prefix,
            server_monitor_pool=self.server_monitor_pool,
            status=self.status,
            type=self.type)


def get_gtm_domain(as_maps: Optional[Sequence[pulumi.InputType['GetGtmDomainAsMapArgs']]] = None,
                   cidr_maps: Optional[Sequence[pulumi.InputType['GetGtmDomainCidrMapArgs']]] = None,
                   datacenters: Optional[Sequence[pulumi.InputType['GetGtmDomainDatacenterArgs']]] = None,
                   geographic_maps: Optional[Sequence[pulumi.InputType['GetGtmDomainGeographicMapArgs']]] = None,
                   links: Optional[Sequence[pulumi.InputType['GetGtmDomainLinkArgs']]] = None,
                   name: Optional[str] = None,
                   properties: Optional[Sequence[pulumi.InputType['GetGtmDomainPropertyArgs']]] = None,
                   resources: Optional[Sequence[pulumi.InputType['GetGtmDomainResourceArgs']]] = None,
                   status: Optional[pulumi.InputType['GetGtmDomainStatusArgs']] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGtmDomainResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['asMaps'] = as_maps
    __args__['cidrMaps'] = cidr_maps
    __args__['datacenters'] = datacenters
    __args__['geographicMaps'] = geographic_maps
    __args__['links'] = links
    __args__['name'] = name
    __args__['properties'] = properties
    __args__['resources'] = resources
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getGtmDomain:getGtmDomain', __args__, opts=opts, typ=GetGtmDomainResult).value

    return AwaitableGetGtmDomainResult(
        as_maps=pulumi.get(__ret__, 'as_maps'),
        cidr_maps=pulumi.get(__ret__, 'cidr_maps'),
        cname_coalescing_enabled=pulumi.get(__ret__, 'cname_coalescing_enabled'),
        datacenters=pulumi.get(__ret__, 'datacenters'),
        default_error_penalty=pulumi.get(__ret__, 'default_error_penalty'),
        default_health_max=pulumi.get(__ret__, 'default_health_max'),
        default_health_multiplier=pulumi.get(__ret__, 'default_health_multiplier'),
        default_health_threshold=pulumi.get(__ret__, 'default_health_threshold'),
        default_max_unreachable_penalty=pulumi.get(__ret__, 'default_max_unreachable_penalty'),
        default_ssl_client_certificate=pulumi.get(__ret__, 'default_ssl_client_certificate'),
        default_ssl_client_private_key=pulumi.get(__ret__, 'default_ssl_client_private_key'),
        default_timeout_penalty=pulumi.get(__ret__, 'default_timeout_penalty'),
        default_unreachable_threshold=pulumi.get(__ret__, 'default_unreachable_threshold'),
        email_notification_lists=pulumi.get(__ret__, 'email_notification_lists'),
        end_user_mapping_enabled=pulumi.get(__ret__, 'end_user_mapping_enabled'),
        geographic_maps=pulumi.get(__ret__, 'geographic_maps'),
        id=pulumi.get(__ret__, 'id'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        last_modified_by=pulumi.get(__ret__, 'last_modified_by'),
        links=pulumi.get(__ret__, 'links'),
        load_feedback=pulumi.get(__ret__, 'load_feedback'),
        load_imbalance_percentage=pulumi.get(__ret__, 'load_imbalance_percentage'),
        map_update_interval=pulumi.get(__ret__, 'map_update_interval'),
        max_properties=pulumi.get(__ret__, 'max_properties'),
        max_resources=pulumi.get(__ret__, 'max_resources'),
        max_test_timeout=pulumi.get(__ret__, 'max_test_timeout'),
        max_ttl=pulumi.get(__ret__, 'max_ttl'),
        min_pingable_region_fraction=pulumi.get(__ret__, 'min_pingable_region_fraction'),
        min_test_interval=pulumi.get(__ret__, 'min_test_interval'),
        min_ttl=pulumi.get(__ret__, 'min_ttl'),
        modification_comments=pulumi.get(__ret__, 'modification_comments'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        resources=pulumi.get(__ret__, 'resources'),
        round_robin_prefix=pulumi.get(__ret__, 'round_robin_prefix'),
        server_monitor_pool=pulumi.get(__ret__, 'server_monitor_pool'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_gtm_domain)
def get_gtm_domain_output(as_maps: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainAsMapArgs']]]]] = None,
                          cidr_maps: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainCidrMapArgs']]]]] = None,
                          datacenters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainDatacenterArgs']]]]] = None,
                          geographic_maps: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainGeographicMapArgs']]]]] = None,
                          links: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainLinkArgs']]]]] = None,
                          name: Optional[pulumi.Input[str]] = None,
                          properties: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainPropertyArgs']]]]] = None,
                          resources: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGtmDomainResourceArgs']]]]] = None,
                          status: Optional[pulumi.Input[Optional[pulumi.InputType['GetGtmDomainStatusArgs']]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGtmDomainResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
