# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPropertyIncludeRulesResult',
    'AwaitableGetPropertyIncludeRulesResult',
    'get_property_include_rules',
    'get_property_include_rules_output',
]

@pulumi.output_type
class GetPropertyIncludeRulesResult:
    """
    A collection of values returned by getPropertyIncludeRules.
    """
    def __init__(__self__, contract_id=None, group_id=None, id=None, include_id=None, name=None, rule_errors=None, rule_format=None, rule_warnings=None, rules=None, type=None, version=None):
        if contract_id and not isinstance(contract_id, str):
            raise TypeError("Expected argument 'contract_id' to be a str")
        pulumi.set(__self__, "contract_id", contract_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_id and not isinstance(include_id, str):
            raise TypeError("Expected argument 'include_id' to be a str")
        pulumi.set(__self__, "include_id", include_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rule_errors and not isinstance(rule_errors, str):
            raise TypeError("Expected argument 'rule_errors' to be a str")
        pulumi.set(__self__, "rule_errors", rule_errors)
        if rule_format and not isinstance(rule_format, str):
            raise TypeError("Expected argument 'rule_format' to be a str")
        pulumi.set(__self__, "rule_format", rule_format)
        if rule_warnings and not isinstance(rule_warnings, str):
            raise TypeError("Expected argument 'rule_warnings' to be a str")
        pulumi.set(__self__, "rule_warnings", rule_warnings)
        if rules and not isinstance(rules, str):
            raise TypeError("Expected argument 'rules' to be a str")
        pulumi.set(__self__, "rules", rules)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contractId")
    def contract_id(self) -> str:
        return pulumi.get(self, "contract_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeId")
    def include_id(self) -> str:
        return pulumi.get(self, "include_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleErrors")
    def rule_errors(self) -> str:
        return pulumi.get(self, "rule_errors")

    @property
    @pulumi.getter(name="ruleFormat")
    def rule_format(self) -> str:
        return pulumi.get(self, "rule_format")

    @property
    @pulumi.getter(name="ruleWarnings")
    def rule_warnings(self) -> str:
        return pulumi.get(self, "rule_warnings")

    @property
    @pulumi.getter
    def rules(self) -> str:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


class AwaitableGetPropertyIncludeRulesResult(GetPropertyIncludeRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPropertyIncludeRulesResult(
            contract_id=self.contract_id,
            group_id=self.group_id,
            id=self.id,
            include_id=self.include_id,
            name=self.name,
            rule_errors=self.rule_errors,
            rule_format=self.rule_format,
            rule_warnings=self.rule_warnings,
            rules=self.rules,
            type=self.type,
            version=self.version)


def get_property_include_rules(contract_id: Optional[str] = None,
                               group_id: Optional[str] = None,
                               include_id: Optional[str] = None,
                               version: Optional[int] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPropertyIncludeRulesResult:
    """
    Use the `get_property_include_rules` data source to query and get an include's rules. This data source lets you search across the contracts and groups you have access to.

    ## Basic usage

    This example returns the include's rule tree based on the specified contract, group, and include IDs:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include_rules = akamai.get_property_include_rules(contract_id="ctr_1-AB123",
        group_id="grp_12345",
        include_id="inc_123456",
        version=3)
    pulumi.export("myExample", my_example_property_include_rules)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `rules` - Include's rules as JSON.
    * `name` - The descriptive name for the include.
    * `rule_errors` - Rule's validation errors. You need to resolve returned errors, as they block an activation.
    * `rule_warnings` - Rule's validation warnings. You can activate a version that yields non-blocking warnings.
    * `rule_format` - Indicates the versioned set of features and criteria that are currently applied to a rule tree. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
    * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    :param int version: (Required) The include version you want to view the rules for.
    """
    __args__ = dict()
    __args__['contractId'] = contract_id
    __args__['groupId'] = group_id
    __args__['includeId'] = include_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getPropertyIncludeRules:getPropertyIncludeRules', __args__, opts=opts, typ=GetPropertyIncludeRulesResult).value

    return AwaitableGetPropertyIncludeRulesResult(
        contract_id=__ret__.contract_id,
        group_id=__ret__.group_id,
        id=__ret__.id,
        include_id=__ret__.include_id,
        name=__ret__.name,
        rule_errors=__ret__.rule_errors,
        rule_format=__ret__.rule_format,
        rule_warnings=__ret__.rule_warnings,
        rules=__ret__.rules,
        type=__ret__.type,
        version=__ret__.version)


@_utilities.lift_output_func(get_property_include_rules)
def get_property_include_rules_output(contract_id: Optional[pulumi.Input[str]] = None,
                                      group_id: Optional[pulumi.Input[str]] = None,
                                      include_id: Optional[pulumi.Input[str]] = None,
                                      version: Optional[pulumi.Input[int]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPropertyIncludeRulesResult]:
    """
    Use the `get_property_include_rules` data source to query and get an include's rules. This data source lets you search across the contracts and groups you have access to.

    ## Basic usage

    This example returns the include's rule tree based on the specified contract, group, and include IDs:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    my_example_property_include_rules = akamai.get_property_include_rules(contract_id="ctr_1-AB123",
        group_id="grp_12345",
        include_id="inc_123456",
        version=3)
    pulumi.export("myExample", my_example_property_include_rules)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `rules` - Include's rules as JSON.
    * `name` - The descriptive name for the include.
    * `rule_errors` - Rule's validation errors. You need to resolve returned errors, as they block an activation.
    * `rule_warnings` - Rule's validation warnings. You can activate a version that yields non-blocking warnings.
    * `rule_format` - Indicates the versioned set of features and criteria that are currently applied to a rule tree. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
    * `type` - Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.


    :param str contract_id: (Required) A contract's unique ID, including the optional `ctr_` prefix.
    :param str group_id: (Required) A group's unique ID, including the optional `grp_` prefix.
    :param str include_id: (Required) An include's unique ID with the optional `inc_` prefix.
    :param int version: (Required) The include version you want to view the rules for.
    """
    ...
