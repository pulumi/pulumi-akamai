# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAllowedApisResult',
    'AwaitableGetIamAllowedApisResult',
    'get_iam_allowed_apis',
    'get_iam_allowed_apis_output',
]

@pulumi.output_type
class GetIamAllowedApisResult:
    """
    A collection of values returned by getIamAllowedApis.
    """
    def __init__(__self__, allow_account_switch=None, allowed_apis=None, client_type=None, id=None, username=None):
        if allow_account_switch and not isinstance(allow_account_switch, bool):
            raise TypeError("Expected argument 'allow_account_switch' to be a bool")
        pulumi.set(__self__, "allow_account_switch", allow_account_switch)
        if allowed_apis and not isinstance(allowed_apis, list):
            raise TypeError("Expected argument 'allowed_apis' to be a list")
        pulumi.set(__self__, "allowed_apis", allowed_apis)
        if client_type and not isinstance(client_type, str):
            raise TypeError("Expected argument 'client_type' to be a str")
        pulumi.set(__self__, "client_type", client_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="allowAccountSwitch")
    def allow_account_switch(self) -> Optional[bool]:
        return pulumi.get(self, "allow_account_switch")

    @property
    @pulumi.getter(name="allowedApis")
    def allowed_apis(self) -> Sequence['outputs.GetIamAllowedApisAllowedApiResult']:
        return pulumi.get(self, "allowed_apis")

    @property
    @pulumi.getter(name="clientType")
    def client_type(self) -> Optional[str]:
        return pulumi.get(self, "client_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


class AwaitableGetIamAllowedApisResult(GetIamAllowedApisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAllowedApisResult(
            allow_account_switch=self.allow_account_switch,
            allowed_apis=self.allowed_apis,
            client_type=self.client_type,
            id=self.id,
            username=self.username)


def get_iam_allowed_apis(allow_account_switch: Optional[bool] = None,
                         client_type: Optional[str] = None,
                         username: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAllowedApisResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['allowAccountSwitch'] = allow_account_switch
    __args__['clientType'] = client_type
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getIamAllowedApis:getIamAllowedApis', __args__, opts=opts, typ=GetIamAllowedApisResult).value

    return AwaitableGetIamAllowedApisResult(
        allow_account_switch=pulumi.get(__ret__, 'allow_account_switch'),
        allowed_apis=pulumi.get(__ret__, 'allowed_apis'),
        client_type=pulumi.get(__ret__, 'client_type'),
        id=pulumi.get(__ret__, 'id'),
        username=pulumi.get(__ret__, 'username'))
def get_iam_allowed_apis_output(allow_account_switch: Optional[pulumi.Input[Optional[bool]]] = None,
                                client_type: Optional[pulumi.Input[Optional[str]]] = None,
                                username: Optional[pulumi.Input[str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAllowedApisResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['allowAccountSwitch'] = allow_account_switch
    __args__['clientType'] = client_type
    __args__['username'] = username
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('akamai:index/getIamAllowedApis:getIamAllowedApis', __args__, opts=opts, typ=GetIamAllowedApisResult)
    return __ret__.apply(lambda __response__: GetIamAllowedApisResult(
        allow_account_switch=pulumi.get(__response__, 'allow_account_switch'),
        allowed_apis=pulumi.get(__response__, 'allowed_apis'),
        client_type=pulumi.get(__response__, 'client_type'),
        id=pulumi.get(__response__, 'id'),
        username=pulumi.get(__response__, 'username')))
