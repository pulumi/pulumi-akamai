// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.IamBlockedUserProperties` resource to remove or grant access to properties. Administrators can block a user's access to any property, overriding any available role already assigned to that user.
 *
 * ## Basic usage
 *
 * This example returns the policy details based on the policy ID and optionally, a version:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const example = new akamai.IamBlockedUserProperties("example", {
 *     blockedProperties: [
 *         1,
 *         2,
 *         3,
 *         4,
 *         5,
 *     ],
 *     groupId: 12345,
 *     identityId: "A-B-123456",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * This resource doesn't return any attributes.
 */
export class IamBlockedUserProperties extends pulumi.CustomResource {
    /**
     * Get an existing IamBlockedUserProperties resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamBlockedUserPropertiesState, opts?: pulumi.CustomResourceOptions): IamBlockedUserProperties {
        return new IamBlockedUserProperties(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/iamBlockedUserProperties:IamBlockedUserProperties';

    /**
     * Returns true if the given object is an instance of IamBlockedUserProperties.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamBlockedUserProperties {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamBlockedUserProperties.__pulumiType;
    }

    /**
     * List of properties to block for a user. The property IDs must be an integer.
     */
    public readonly blockedProperties!: pulumi.Output<number[]>;
    /**
     * A unique identifier for a group. Each identifier must be an integer.
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
     */
    public readonly identityId!: pulumi.Output<string>;

    /**
     * Create a IamBlockedUserProperties resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamBlockedUserPropertiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamBlockedUserPropertiesArgs | IamBlockedUserPropertiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamBlockedUserPropertiesState | undefined;
            resourceInputs["blockedProperties"] = state ? state.blockedProperties : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
        } else {
            const args = argsOrState as IamBlockedUserPropertiesArgs | undefined;
            if ((!args || args.blockedProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockedProperties'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            resourceInputs["blockedProperties"] = args ? args.blockedProperties : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["identityId"] = args ? args.identityId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamBlockedUserProperties.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamBlockedUserProperties resources.
 */
export interface IamBlockedUserPropertiesState {
    /**
     * List of properties to block for a user. The property IDs must be an integer.
     */
    blockedProperties?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A unique identifier for a group. Each identifier must be an integer.
     */
    groupId?: pulumi.Input<number>;
    /**
     * A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
     */
    identityId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamBlockedUserProperties resource.
 */
export interface IamBlockedUserPropertiesArgs {
    /**
     * List of properties to block for a user. The property IDs must be an integer.
     */
    blockedProperties: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A unique identifier for a group. Each identifier must be an integer.
     */
    groupId: pulumi.Input<number>;
    /**
     * A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
     */
    identityId: pulumi.Input<string>;
}
