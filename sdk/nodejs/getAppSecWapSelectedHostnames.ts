// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security policy
 *
 * Returns hostnames currently protected or being evaluated by a configuration and security policy.
 * This resource is available only to organizations running Web Application Protector (WAP).
 * Note that the WAP selected hostnames feature is currently in beta.
 * Please contact your Akamai representative for more information.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const wapSelectedHostnames = configuration.then(configuration => akamai.getAppSecWapSelectedHostnames({
 *     configId: configuration.configId,
 *     securityPolicyId: "gms1_134637",
 * }));
 * export const protectedHostnames = wapSelectedHostnames.then(wapSelectedHostnames => wapSelectedHostnames.protectedHosts);
 * export const evaluatedHostnames = wapSelectedHostnames.then(wapSelectedHostnames => wapSelectedHostnames.evaluatedHosts);
 * ```
 * ## Output Options
 *
 * The following options can be used to determine the information returned and how that returned information is formatted:
 *
 * - `protectedHostnames`. List of hostnames currently protected under the security configuration and security policy.
 * - `evaluatedHostnames`. List of hostnames currently being evaluated under the security configuration and security policy.
 * - `hostnamesJson`. JSON-formatted report of the protected and evaluated hostnames.
 * - `outputText`. Tabular reports of the protected and evaluated hostnames.
 */
export function getAppSecWapSelectedHostnames(args: GetAppSecWapSelectedHostnamesArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecWapSelectedHostnamesResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("akamai:index/getAppSecWapSelectedHostnames:getAppSecWapSelectedHostnames", {
        "configId": args.configId,
        "securityPolicyId": args.securityPolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecWapSelectedHostnames.
 */
export interface GetAppSecWapSelectedHostnamesArgs {
    /**
     * . Unique identifier of the security configuration associated with the hostnames.
     */
    configId: number;
    /**
     * . Unique identifier of the security policy associated with the hostnames.
     */
    securityPolicyId: string;
}

/**
 * A collection of values returned by getAppSecWapSelectedHostnames.
 */
export interface GetAppSecWapSelectedHostnamesResult {
    readonly configId: number;
    readonly evaluatedHosts: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly json: string;
    readonly matchTargets: string;
    readonly outputText: string;
    readonly protectedHosts: string[];
    readonly securityPolicyId: string;
    readonly selectedHosts: string[];
}

export function getAppSecWapSelectedHostnamesOutput(args: GetAppSecWapSelectedHostnamesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSecWapSelectedHostnamesResult> {
    return pulumi.output(args).apply(a => getAppSecWapSelectedHostnames(a, opts))
}

/**
 * A collection of arguments for invoking getAppSecWapSelectedHostnames.
 */
export interface GetAppSecWapSelectedHostnamesOutputArgs {
    /**
     * . Unique identifier of the security configuration associated with the hostnames.
     */
    configId: pulumi.Input<number>;
    /**
     * . Unique identifier of the security policy associated with the hostnames.
     */
    securityPolicyId: pulumi.Input<string>;
}
