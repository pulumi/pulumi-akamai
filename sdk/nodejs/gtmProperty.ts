// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GtmProperty extends pulumi.CustomResource {
    /**
     * Get an existing GtmProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmPropertyState, opts?: pulumi.CustomResourceOptions): GtmProperty {
        return new GtmProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmProperty:GtmProperty';

    /**
     * Returns true if the given object is an instance of GtmProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmProperty.__pulumiType;
    }

    declare public readonly backupCname: pulumi.Output<string | undefined>;
    declare public readonly backupIp: pulumi.Output<string | undefined>;
    declare public readonly balanceByDownloadScore: pulumi.Output<boolean | undefined>;
    declare public readonly cname: pulumi.Output<string | undefined>;
    declare public readonly comments: pulumi.Output<string | undefined>;
    declare public readonly domain: pulumi.Output<string>;
    declare public readonly dynamicTtl: pulumi.Output<number | undefined>;
    declare public readonly failbackDelay: pulumi.Output<number | undefined>;
    declare public readonly failoverDelay: pulumi.Output<number | undefined>;
    declare public readonly ghostDemandReporting: pulumi.Output<boolean | undefined>;
    declare public readonly handoutLimit: pulumi.Output<number>;
    declare public readonly handoutMode: pulumi.Output<string>;
    declare public readonly healthMax: pulumi.Output<number | undefined>;
    declare public readonly healthMultiplier: pulumi.Output<number | undefined>;
    declare public readonly healthThreshold: pulumi.Output<number | undefined>;
    declare public readonly ipv6: pulumi.Output<boolean | undefined>;
    declare public readonly livenessTests: pulumi.Output<outputs.GtmPropertyLivenessTest[] | undefined>;
    declare public readonly loadImbalancePercentage: pulumi.Output<number | undefined>;
    declare public readonly mapName: pulumi.Output<string | undefined>;
    declare public readonly maxUnreachablePenalty: pulumi.Output<number | undefined>;
    declare public readonly minLiveFraction: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly scoreAggregationType: pulumi.Output<string>;
    declare public readonly staticRrSets: pulumi.Output<outputs.GtmPropertyStaticRrSet[] | undefined>;
    declare public readonly stickinessBonusConstant: pulumi.Output<number | undefined>;
    declare public readonly stickinessBonusPercentage: pulumi.Output<number | undefined>;
    declare public readonly trafficTargets: pulumi.Output<outputs.GtmPropertyTrafficTarget[] | undefined>;
    declare public readonly type: pulumi.Output<string>;
    declare public readonly unreachableThreshold: pulumi.Output<number | undefined>;
    declare public readonly useComputedTargets: pulumi.Output<boolean | undefined>;
    declare public readonly waitOnComplete: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly weightedHashBitsForIpv4: pulumi.Output<number>;
    declare public /*out*/ readonly weightedHashBitsForIpv6: pulumi.Output<number>;

    /**
     * Create a GtmProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmPropertyArgs | GtmPropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmPropertyState | undefined;
            resourceInputs["backupCname"] = state?.backupCname;
            resourceInputs["backupIp"] = state?.backupIp;
            resourceInputs["balanceByDownloadScore"] = state?.balanceByDownloadScore;
            resourceInputs["cname"] = state?.cname;
            resourceInputs["comments"] = state?.comments;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["dynamicTtl"] = state?.dynamicTtl;
            resourceInputs["failbackDelay"] = state?.failbackDelay;
            resourceInputs["failoverDelay"] = state?.failoverDelay;
            resourceInputs["ghostDemandReporting"] = state?.ghostDemandReporting;
            resourceInputs["handoutLimit"] = state?.handoutLimit;
            resourceInputs["handoutMode"] = state?.handoutMode;
            resourceInputs["healthMax"] = state?.healthMax;
            resourceInputs["healthMultiplier"] = state?.healthMultiplier;
            resourceInputs["healthThreshold"] = state?.healthThreshold;
            resourceInputs["ipv6"] = state?.ipv6;
            resourceInputs["livenessTests"] = state?.livenessTests;
            resourceInputs["loadImbalancePercentage"] = state?.loadImbalancePercentage;
            resourceInputs["mapName"] = state?.mapName;
            resourceInputs["maxUnreachablePenalty"] = state?.maxUnreachablePenalty;
            resourceInputs["minLiveFraction"] = state?.minLiveFraction;
            resourceInputs["name"] = state?.name;
            resourceInputs["scoreAggregationType"] = state?.scoreAggregationType;
            resourceInputs["staticRrSets"] = state?.staticRrSets;
            resourceInputs["stickinessBonusConstant"] = state?.stickinessBonusConstant;
            resourceInputs["stickinessBonusPercentage"] = state?.stickinessBonusPercentage;
            resourceInputs["trafficTargets"] = state?.trafficTargets;
            resourceInputs["type"] = state?.type;
            resourceInputs["unreachableThreshold"] = state?.unreachableThreshold;
            resourceInputs["useComputedTargets"] = state?.useComputedTargets;
            resourceInputs["waitOnComplete"] = state?.waitOnComplete;
            resourceInputs["weightedHashBitsForIpv4"] = state?.weightedHashBitsForIpv4;
            resourceInputs["weightedHashBitsForIpv6"] = state?.weightedHashBitsForIpv6;
        } else {
            const args = argsOrState as GtmPropertyArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.handoutLimit === undefined && !opts.urn) {
                throw new Error("Missing required property 'handoutLimit'");
            }
            if (args?.handoutMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'handoutMode'");
            }
            if (args?.scoreAggregationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'scoreAggregationType'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["backupCname"] = args?.backupCname;
            resourceInputs["backupIp"] = args?.backupIp;
            resourceInputs["balanceByDownloadScore"] = args?.balanceByDownloadScore;
            resourceInputs["cname"] = args?.cname;
            resourceInputs["comments"] = args?.comments;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["dynamicTtl"] = args?.dynamicTtl;
            resourceInputs["failbackDelay"] = args?.failbackDelay;
            resourceInputs["failoverDelay"] = args?.failoverDelay;
            resourceInputs["ghostDemandReporting"] = args?.ghostDemandReporting;
            resourceInputs["handoutLimit"] = args?.handoutLimit;
            resourceInputs["handoutMode"] = args?.handoutMode;
            resourceInputs["healthMax"] = args?.healthMax;
            resourceInputs["healthMultiplier"] = args?.healthMultiplier;
            resourceInputs["healthThreshold"] = args?.healthThreshold;
            resourceInputs["ipv6"] = args?.ipv6;
            resourceInputs["livenessTests"] = args?.livenessTests;
            resourceInputs["loadImbalancePercentage"] = args?.loadImbalancePercentage;
            resourceInputs["mapName"] = args?.mapName;
            resourceInputs["maxUnreachablePenalty"] = args?.maxUnreachablePenalty;
            resourceInputs["minLiveFraction"] = args?.minLiveFraction;
            resourceInputs["name"] = args?.name;
            resourceInputs["scoreAggregationType"] = args?.scoreAggregationType;
            resourceInputs["staticRrSets"] = args?.staticRrSets;
            resourceInputs["stickinessBonusConstant"] = args?.stickinessBonusConstant;
            resourceInputs["stickinessBonusPercentage"] = args?.stickinessBonusPercentage;
            resourceInputs["trafficTargets"] = args?.trafficTargets;
            resourceInputs["type"] = args?.type;
            resourceInputs["unreachableThreshold"] = args?.unreachableThreshold;
            resourceInputs["useComputedTargets"] = args?.useComputedTargets;
            resourceInputs["waitOnComplete"] = args?.waitOnComplete;
            resourceInputs["weightedHashBitsForIpv4"] = undefined /*out*/;
            resourceInputs["weightedHashBitsForIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmProperty:GtmProperty" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmProperty.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmProperty resources.
 */
export interface GtmPropertyState {
    backupCname?: pulumi.Input<string>;
    backupIp?: pulumi.Input<string>;
    balanceByDownloadScore?: pulumi.Input<boolean>;
    cname?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dynamicTtl?: pulumi.Input<number>;
    failbackDelay?: pulumi.Input<number>;
    failoverDelay?: pulumi.Input<number>;
    ghostDemandReporting?: pulumi.Input<boolean>;
    handoutLimit?: pulumi.Input<number>;
    handoutMode?: pulumi.Input<string>;
    healthMax?: pulumi.Input<number>;
    healthMultiplier?: pulumi.Input<number>;
    healthThreshold?: pulumi.Input<number>;
    ipv6?: pulumi.Input<boolean>;
    livenessTests?: pulumi.Input<pulumi.Input<inputs.GtmPropertyLivenessTest>[]>;
    loadImbalancePercentage?: pulumi.Input<number>;
    mapName?: pulumi.Input<string>;
    maxUnreachablePenalty?: pulumi.Input<number>;
    minLiveFraction?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scoreAggregationType?: pulumi.Input<string>;
    staticRrSets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyStaticRrSet>[]>;
    stickinessBonusConstant?: pulumi.Input<number>;
    stickinessBonusPercentage?: pulumi.Input<number>;
    trafficTargets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyTrafficTarget>[]>;
    type?: pulumi.Input<string>;
    unreachableThreshold?: pulumi.Input<number>;
    useComputedTargets?: pulumi.Input<boolean>;
    waitOnComplete?: pulumi.Input<boolean>;
    weightedHashBitsForIpv4?: pulumi.Input<number>;
    weightedHashBitsForIpv6?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GtmProperty resource.
 */
export interface GtmPropertyArgs {
    backupCname?: pulumi.Input<string>;
    backupIp?: pulumi.Input<string>;
    balanceByDownloadScore?: pulumi.Input<boolean>;
    cname?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    dynamicTtl?: pulumi.Input<number>;
    failbackDelay?: pulumi.Input<number>;
    failoverDelay?: pulumi.Input<number>;
    ghostDemandReporting?: pulumi.Input<boolean>;
    handoutLimit: pulumi.Input<number>;
    handoutMode: pulumi.Input<string>;
    healthMax?: pulumi.Input<number>;
    healthMultiplier?: pulumi.Input<number>;
    healthThreshold?: pulumi.Input<number>;
    ipv6?: pulumi.Input<boolean>;
    livenessTests?: pulumi.Input<pulumi.Input<inputs.GtmPropertyLivenessTest>[]>;
    loadImbalancePercentage?: pulumi.Input<number>;
    mapName?: pulumi.Input<string>;
    maxUnreachablePenalty?: pulumi.Input<number>;
    minLiveFraction?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scoreAggregationType: pulumi.Input<string>;
    staticRrSets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyStaticRrSet>[]>;
    stickinessBonusConstant?: pulumi.Input<number>;
    stickinessBonusPercentage?: pulumi.Input<number>;
    trafficTargets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyTrafficTarget>[]>;
    type: pulumi.Input<string>;
    unreachableThreshold?: pulumi.Input<number>;
    useComputedTargets?: pulumi.Input<boolean>;
    waitOnComplete?: pulumi.Input<boolean>;
}
