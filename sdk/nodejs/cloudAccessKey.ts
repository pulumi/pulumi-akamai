// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing CloudAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudAccessKeyState, opts?: pulumi.CustomResourceOptions): CloudAccessKey {
        return new CloudAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudAccessKey:CloudAccessKey';

    /**
     * Returns true if the given object is an instance of CloudAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudAccessKey.__pulumiType;
    }

    /**
     * Name of the access key.
     */
    declare public readonly accessKeyName: pulumi.Output<string>;
    /**
     * The unique identifier Akamai assigns to an access key.
     */
    declare public /*out*/ readonly accessKeyUid: pulumi.Output<number>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available: "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    declare public readonly authenticationMethod: pulumi.Output<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    declare public readonly credentialsA: pulumi.Output<outputs.CloudAccessKeyCredentialsA | undefined>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    declare public readonly credentialsB: pulumi.Output<outputs.CloudAccessKeyCredentialsB | undefined>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    declare public readonly groupId: pulumi.Output<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    declare public readonly networkConfiguration: pulumi.Output<outputs.CloudAccessKeyNetworkConfiguration>;
    /**
     * Value of `versionGuid` field for credentials marked as primary
     */
    declare public /*out*/ readonly primaryGuid: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.CloudAccessKeyTimeouts | undefined>;

    /**
     * Create a CloudAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudAccessKeyArgs | CloudAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudAccessKeyState | undefined;
            resourceInputs["accessKeyName"] = state?.accessKeyName;
            resourceInputs["accessKeyUid"] = state?.accessKeyUid;
            resourceInputs["authenticationMethod"] = state?.authenticationMethod;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["credentialsA"] = state?.credentialsA;
            resourceInputs["credentialsB"] = state?.credentialsB;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["networkConfiguration"] = state?.networkConfiguration;
            resourceInputs["primaryGuid"] = state?.primaryGuid;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as CloudAccessKeyArgs | undefined;
            if (args?.accessKeyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessKeyName'");
            }
            if (args?.authenticationMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if (args?.contractId === undefined && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.networkConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            resourceInputs["accessKeyName"] = args?.accessKeyName;
            resourceInputs["authenticationMethod"] = args?.authenticationMethod;
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["credentialsA"] = args?.credentialsA;
            resourceInputs["credentialsB"] = args?.credentialsB;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["networkConfiguration"] = args?.networkConfiguration;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["accessKeyUid"] = undefined /*out*/;
            resourceInputs["primaryGuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudAccessKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudAccessKey resources.
 */
export interface CloudAccessKeyState {
    /**
     * Name of the access key.
     */
    accessKeyName?: pulumi.Input<string>;
    /**
     * The unique identifier Akamai assigns to an access key.
     */
    accessKeyUid?: pulumi.Input<number>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available: "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    contractId?: pulumi.Input<string>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    credentialsA?: pulumi.Input<inputs.CloudAccessKeyCredentialsA>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    credentialsB?: pulumi.Input<inputs.CloudAccessKeyCredentialsB>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    groupId?: pulumi.Input<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    networkConfiguration?: pulumi.Input<inputs.CloudAccessKeyNetworkConfiguration>;
    /**
     * Value of `versionGuid` field for credentials marked as primary
     */
    primaryGuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudAccessKeyTimeouts>;
}

/**
 * The set of arguments for constructing a CloudAccessKey resource.
 */
export interface CloudAccessKeyArgs {
    /**
     * Name of the access key.
     */
    accessKeyName: pulumi.Input<string>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available: "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    contractId: pulumi.Input<string>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    credentialsA?: pulumi.Input<inputs.CloudAccessKeyCredentialsA>;
    /**
     * The combination of a `cloudAccessKeyId` and a `cloudSecretAccessKey` used to sign API requests. This pair can be identified as access key version. Access key can contain only two access key versions at specific time (defined as credentialsA and credentialsB).
     */
    credentialsB?: pulumi.Input<inputs.CloudAccessKeyCredentialsB>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    groupId: pulumi.Input<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    networkConfiguration: pulumi.Input<inputs.CloudAccessKeyNetworkConfiguration>;
    timeouts?: pulumi.Input<inputs.CloudAccessKeyTimeouts>;
}
