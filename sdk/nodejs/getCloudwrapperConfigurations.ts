// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudwrapperConfigurations(args?: GetCloudwrapperConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudwrapperConfigurationsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getCloudwrapperConfigurations:getCloudwrapperConfigurations", {
        "configurations": args.configurations,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudwrapperConfigurations.
 */
export interface GetCloudwrapperConfigurationsArgs {
    configurations?: inputs.GetCloudwrapperConfigurationsConfiguration[];
}

/**
 * A collection of values returned by getCloudwrapperConfigurations.
 */
export interface GetCloudwrapperConfigurationsResult {
    readonly configurations?: outputs.GetCloudwrapperConfigurationsConfiguration[];
    /**
     * @deprecated Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_configurations`.
     */
    readonly id: string;
}
export function getCloudwrapperConfigurationsOutput(args?: GetCloudwrapperConfigurationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudwrapperConfigurationsResult> {
    return pulumi.output(args).apply((a: any) => getCloudwrapperConfigurations(a, opts))
}

/**
 * A collection of arguments for invoking getCloudwrapperConfigurations.
 */
export interface GetCloudwrapperConfigurationsOutputArgs {
    configurations?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationArgs>[]>;
}
