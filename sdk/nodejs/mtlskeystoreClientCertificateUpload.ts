// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MtlskeystoreClientCertificateUpload extends pulumi.CustomResource {
    /**
     * Get an existing MtlskeystoreClientCertificateUpload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MtlskeystoreClientCertificateUploadState, opts?: pulumi.CustomResourceOptions): MtlskeystoreClientCertificateUpload {
        return new MtlskeystoreClientCertificateUpload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload';

    /**
     * Returns true if the given object is an instance of MtlskeystoreClientCertificateUpload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MtlskeystoreClientCertificateUpload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MtlskeystoreClientCertificateUpload.__pulumiType;
    }

    /**
     * If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
     */
    declare public readonly autoAcknowledgeWarnings: pulumi.Output<boolean>;
    /**
     * The ID of the client certificate to which the signed certificate will be uploaded.
     */
    declare public readonly clientCertificateId: pulumi.Output<number>;
    /**
     * The signed certificate to upload.
     */
    declare public readonly signedCertificate: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.MtlskeystoreClientCertificateUploadTimeouts | undefined>;
    /**
     * The optional trust chain associated with the signed certificate.
     */
    declare public readonly trustChain: pulumi.Output<string | undefined>;
    /**
     * A unique identifier for the client certificate version.
     */
    declare public /*out*/ readonly versionGuid: pulumi.Output<string>;
    /**
     * The version number of the client certificate to upload the signed certificate to.
     */
    declare public readonly versionNumber: pulumi.Output<number>;
    /**
     * Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
     */
    declare public readonly waitForDeployment: pulumi.Output<boolean>;

    /**
     * Create a MtlskeystoreClientCertificateUpload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MtlskeystoreClientCertificateUploadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MtlskeystoreClientCertificateUploadArgs | MtlskeystoreClientCertificateUploadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MtlskeystoreClientCertificateUploadState | undefined;
            resourceInputs["autoAcknowledgeWarnings"] = state?.autoAcknowledgeWarnings;
            resourceInputs["clientCertificateId"] = state?.clientCertificateId;
            resourceInputs["signedCertificate"] = state?.signedCertificate;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["trustChain"] = state?.trustChain;
            resourceInputs["versionGuid"] = state?.versionGuid;
            resourceInputs["versionNumber"] = state?.versionNumber;
            resourceInputs["waitForDeployment"] = state?.waitForDeployment;
        } else {
            const args = argsOrState as MtlskeystoreClientCertificateUploadArgs | undefined;
            if (args?.clientCertificateId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientCertificateId'");
            }
            if (args?.signedCertificate === undefined && !opts.urn) {
                throw new Error("Missing required property 'signedCertificate'");
            }
            if (args?.versionNumber === undefined && !opts.urn) {
                throw new Error("Missing required property 'versionNumber'");
            }
            resourceInputs["autoAcknowledgeWarnings"] = args?.autoAcknowledgeWarnings;
            resourceInputs["clientCertificateId"] = args?.clientCertificateId;
            resourceInputs["signedCertificate"] = args?.signedCertificate;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["trustChain"] = args?.trustChain;
            resourceInputs["versionNumber"] = args?.versionNumber;
            resourceInputs["waitForDeployment"] = args?.waitForDeployment;
            resourceInputs["versionGuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MtlskeystoreClientCertificateUpload.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MtlskeystoreClientCertificateUpload resources.
 */
export interface MtlskeystoreClientCertificateUploadState {
    /**
     * If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
     */
    autoAcknowledgeWarnings?: pulumi.Input<boolean>;
    /**
     * The ID of the client certificate to which the signed certificate will be uploaded.
     */
    clientCertificateId?: pulumi.Input<number>;
    /**
     * The signed certificate to upload.
     */
    signedCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MtlskeystoreClientCertificateUploadTimeouts>;
    /**
     * The optional trust chain associated with the signed certificate.
     */
    trustChain?: pulumi.Input<string>;
    /**
     * A unique identifier for the client certificate version.
     */
    versionGuid?: pulumi.Input<string>;
    /**
     * The version number of the client certificate to upload the signed certificate to.
     */
    versionNumber?: pulumi.Input<number>;
    /**
     * Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MtlskeystoreClientCertificateUpload resource.
 */
export interface MtlskeystoreClientCertificateUploadArgs {
    /**
     * If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
     */
    autoAcknowledgeWarnings?: pulumi.Input<boolean>;
    /**
     * The ID of the client certificate to which the signed certificate will be uploaded.
     */
    clientCertificateId: pulumi.Input<number>;
    /**
     * The signed certificate to upload.
     */
    signedCertificate: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MtlskeystoreClientCertificateUploadTimeouts>;
    /**
     * The optional trust chain associated with the signed certificate.
     */
    trustChain?: pulumi.Input<string>;
    /**
     * The version number of the client certificate to upload the signed certificate to.
     */
    versionNumber: pulumi.Input<number>;
    /**
     * Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
     */
    waitForDeployment?: pulumi.Input<boolean>;
}
