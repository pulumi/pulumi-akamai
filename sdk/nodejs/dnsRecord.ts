// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    declare public readonly algorithm: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly answerType: pulumi.Output<string>;
    declare public readonly certificate: pulumi.Output<string | undefined>;
    declare public readonly digest: pulumi.Output<string | undefined>;
    declare public readonly digestType: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly dnsName: pulumi.Output<string>;
    declare public readonly emailAddress: pulumi.Output<string | undefined>;
    declare public readonly expiration: pulumi.Output<string | undefined>;
    declare public readonly expiry: pulumi.Output<number | undefined>;
    declare public readonly fingerprint: pulumi.Output<string | undefined>;
    declare public readonly fingerprintType: pulumi.Output<number | undefined>;
    declare public readonly flags: pulumi.Output<number | undefined>;
    declare public readonly flagsnaptr: pulumi.Output<string | undefined>;
    declare public readonly hardware: pulumi.Output<string | undefined>;
    declare public readonly inception: pulumi.Output<string | undefined>;
    declare public readonly iterations: pulumi.Output<number | undefined>;
    declare public readonly key: pulumi.Output<string | undefined>;
    declare public readonly keytag: pulumi.Output<number | undefined>;
    declare public readonly labels: pulumi.Output<number | undefined>;
    declare public readonly mailbox: pulumi.Output<string | undefined>;
    declare public readonly matchType: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nameServer: pulumi.Output<string | undefined>;
    declare public readonly nextHashedOwnerName: pulumi.Output<string | undefined>;
    declare public readonly nxdomainTtl: pulumi.Output<number | undefined>;
    declare public readonly order: pulumi.Output<number | undefined>;
    declare public readonly originalTtl: pulumi.Output<number | undefined>;
    declare public readonly port: pulumi.Output<number | undefined>;
    declare public readonly preference: pulumi.Output<number | undefined>;
    declare public readonly priority: pulumi.Output<number | undefined>;
    declare public readonly priorityIncrement: pulumi.Output<number | undefined>;
    declare public readonly protocol: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly recordSha: pulumi.Output<string>;
    declare public readonly recordtype: pulumi.Output<string>;
    declare public readonly refresh: pulumi.Output<number | undefined>;
    declare public readonly regexp: pulumi.Output<string | undefined>;
    declare public readonly replacement: pulumi.Output<string | undefined>;
    declare public readonly retry: pulumi.Output<number | undefined>;
    declare public readonly salt: pulumi.Output<string | undefined>;
    declare public readonly selector: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly serial: pulumi.Output<number>;
    declare public readonly service: pulumi.Output<string | undefined>;
    declare public readonly signature: pulumi.Output<string | undefined>;
    declare public readonly signer: pulumi.Output<string | undefined>;
    declare public readonly software: pulumi.Output<string | undefined>;
    declare public readonly subtype: pulumi.Output<number | undefined>;
    declare public readonly svcParams: pulumi.Output<string | undefined>;
    declare public readonly svcPriority: pulumi.Output<number | undefined>;
    declare public readonly targetName: pulumi.Output<string | undefined>;
    declare public readonly targets: pulumi.Output<string[] | undefined>;
    declare public readonly ttl: pulumi.Output<number>;
    declare public readonly txt: pulumi.Output<string | undefined>;
    declare public readonly typeBitmaps: pulumi.Output<string | undefined>;
    declare public readonly typeCovered: pulumi.Output<string | undefined>;
    declare public readonly typeMnemonic: pulumi.Output<string | undefined>;
    declare public readonly typeValue: pulumi.Output<number | undefined>;
    declare public readonly usage: pulumi.Output<number | undefined>;
    declare public readonly weight: pulumi.Output<number | undefined>;
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["answerType"] = state?.answerType;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["digest"] = state?.digest;
            resourceInputs["digestType"] = state?.digestType;
            resourceInputs["dnsName"] = state?.dnsName;
            resourceInputs["emailAddress"] = state?.emailAddress;
            resourceInputs["expiration"] = state?.expiration;
            resourceInputs["expiry"] = state?.expiry;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["fingerprintType"] = state?.fingerprintType;
            resourceInputs["flags"] = state?.flags;
            resourceInputs["flagsnaptr"] = state?.flagsnaptr;
            resourceInputs["hardware"] = state?.hardware;
            resourceInputs["inception"] = state?.inception;
            resourceInputs["iterations"] = state?.iterations;
            resourceInputs["key"] = state?.key;
            resourceInputs["keytag"] = state?.keytag;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["mailbox"] = state?.mailbox;
            resourceInputs["matchType"] = state?.matchType;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameServer"] = state?.nameServer;
            resourceInputs["nextHashedOwnerName"] = state?.nextHashedOwnerName;
            resourceInputs["nxdomainTtl"] = state?.nxdomainTtl;
            resourceInputs["order"] = state?.order;
            resourceInputs["originalTtl"] = state?.originalTtl;
            resourceInputs["port"] = state?.port;
            resourceInputs["preference"] = state?.preference;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["priorityIncrement"] = state?.priorityIncrement;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["recordSha"] = state?.recordSha;
            resourceInputs["recordtype"] = state?.recordtype;
            resourceInputs["refresh"] = state?.refresh;
            resourceInputs["regexp"] = state?.regexp;
            resourceInputs["replacement"] = state?.replacement;
            resourceInputs["retry"] = state?.retry;
            resourceInputs["salt"] = state?.salt;
            resourceInputs["selector"] = state?.selector;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["service"] = state?.service;
            resourceInputs["signature"] = state?.signature;
            resourceInputs["signer"] = state?.signer;
            resourceInputs["software"] = state?.software;
            resourceInputs["subtype"] = state?.subtype;
            resourceInputs["svcParams"] = state?.svcParams;
            resourceInputs["svcPriority"] = state?.svcPriority;
            resourceInputs["targetName"] = state?.targetName;
            resourceInputs["targets"] = state?.targets;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["txt"] = state?.txt;
            resourceInputs["typeBitmaps"] = state?.typeBitmaps;
            resourceInputs["typeCovered"] = state?.typeCovered;
            resourceInputs["typeMnemonic"] = state?.typeMnemonic;
            resourceInputs["typeValue"] = state?.typeValue;
            resourceInputs["usage"] = state?.usage;
            resourceInputs["weight"] = state?.weight;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (args?.recordtype === undefined && !opts.urn) {
                throw new Error("Missing required property 'recordtype'");
            }
            if (args?.ttl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["digest"] = args?.digest;
            resourceInputs["digestType"] = args?.digestType;
            resourceInputs["emailAddress"] = args?.emailAddress;
            resourceInputs["expiration"] = args?.expiration;
            resourceInputs["expiry"] = args?.expiry;
            resourceInputs["fingerprint"] = args?.fingerprint;
            resourceInputs["fingerprintType"] = args?.fingerprintType;
            resourceInputs["flags"] = args?.flags;
            resourceInputs["flagsnaptr"] = args?.flagsnaptr;
            resourceInputs["hardware"] = args?.hardware;
            resourceInputs["inception"] = args?.inception;
            resourceInputs["iterations"] = args?.iterations;
            resourceInputs["key"] = args?.key;
            resourceInputs["keytag"] = args?.keytag;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["mailbox"] = args?.mailbox;
            resourceInputs["matchType"] = args?.matchType;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameServer"] = args?.nameServer;
            resourceInputs["nextHashedOwnerName"] = args?.nextHashedOwnerName;
            resourceInputs["nxdomainTtl"] = args?.nxdomainTtl;
            resourceInputs["order"] = args?.order;
            resourceInputs["originalTtl"] = args?.originalTtl;
            resourceInputs["port"] = args?.port;
            resourceInputs["preference"] = args?.preference;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["priorityIncrement"] = args?.priorityIncrement;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["recordtype"] = args?.recordtype;
            resourceInputs["refresh"] = args?.refresh;
            resourceInputs["regexp"] = args?.regexp;
            resourceInputs["replacement"] = args?.replacement;
            resourceInputs["retry"] = args?.retry;
            resourceInputs["salt"] = args?.salt;
            resourceInputs["selector"] = args?.selector;
            resourceInputs["service"] = args?.service;
            resourceInputs["signature"] = args?.signature;
            resourceInputs["signer"] = args?.signer;
            resourceInputs["software"] = args?.software;
            resourceInputs["subtype"] = args?.subtype;
            resourceInputs["svcParams"] = args?.svcParams;
            resourceInputs["svcPriority"] = args?.svcPriority;
            resourceInputs["targetName"] = args?.targetName;
            resourceInputs["targets"] = args?.targets;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["txt"] = args?.txt;
            resourceInputs["typeBitmaps"] = args?.typeBitmaps;
            resourceInputs["typeCovered"] = args?.typeCovered;
            resourceInputs["typeMnemonic"] = args?.typeMnemonic;
            resourceInputs["typeValue"] = args?.typeValue;
            resourceInputs["usage"] = args?.usage;
            resourceInputs["weight"] = args?.weight;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["answerType"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["recordSha"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:edgedns/dnsRecord:DnsRecord" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    algorithm?: pulumi.Input<number>;
    answerType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    digest?: pulumi.Input<string>;
    digestType?: pulumi.Input<number>;
    dnsName?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    expiry?: pulumi.Input<number>;
    fingerprint?: pulumi.Input<string>;
    fingerprintType?: pulumi.Input<number>;
    flags?: pulumi.Input<number>;
    flagsnaptr?: pulumi.Input<string>;
    hardware?: pulumi.Input<string>;
    inception?: pulumi.Input<string>;
    iterations?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    keytag?: pulumi.Input<number>;
    labels?: pulumi.Input<number>;
    mailbox?: pulumi.Input<string>;
    matchType?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nameServer?: pulumi.Input<string>;
    nextHashedOwnerName?: pulumi.Input<string>;
    nxdomainTtl?: pulumi.Input<number>;
    order?: pulumi.Input<number>;
    originalTtl?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    preference?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    priorityIncrement?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    recordSha?: pulumi.Input<string>;
    recordtype?: pulumi.Input<string>;
    refresh?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
    replacement?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    salt?: pulumi.Input<string>;
    selector?: pulumi.Input<number>;
    serial?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signer?: pulumi.Input<string>;
    software?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
    svcParams?: pulumi.Input<string>;
    svcPriority?: pulumi.Input<number>;
    targetName?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    ttl?: pulumi.Input<number>;
    txt?: pulumi.Input<string>;
    typeBitmaps?: pulumi.Input<string>;
    typeCovered?: pulumi.Input<string>;
    typeMnemonic?: pulumi.Input<string>;
    typeValue?: pulumi.Input<number>;
    usage?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    algorithm?: pulumi.Input<number>;
    certificate?: pulumi.Input<string>;
    digest?: pulumi.Input<string>;
    digestType?: pulumi.Input<number>;
    emailAddress?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    expiry?: pulumi.Input<number>;
    fingerprint?: pulumi.Input<string>;
    fingerprintType?: pulumi.Input<number>;
    flags?: pulumi.Input<number>;
    flagsnaptr?: pulumi.Input<string>;
    hardware?: pulumi.Input<string>;
    inception?: pulumi.Input<string>;
    iterations?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    keytag?: pulumi.Input<number>;
    labels?: pulumi.Input<number>;
    mailbox?: pulumi.Input<string>;
    matchType?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nameServer?: pulumi.Input<string>;
    nextHashedOwnerName?: pulumi.Input<string>;
    nxdomainTtl?: pulumi.Input<number>;
    order?: pulumi.Input<number>;
    originalTtl?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    preference?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    priorityIncrement?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    recordtype: pulumi.Input<string>;
    refresh?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
    replacement?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    salt?: pulumi.Input<string>;
    selector?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signer?: pulumi.Input<string>;
    software?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
    svcParams?: pulumi.Input<string>;
    svcPriority?: pulumi.Input<number>;
    targetName?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    ttl: pulumi.Input<number>;
    txt?: pulumi.Input<string>;
    typeBitmaps?: pulumi.Input<string>;
    typeCovered?: pulumi.Input<string>;
    typeMnemonic?: pulumi.Input<string>;
    typeValue?: pulumi.Input<number>;
    usage?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zone: pulumi.Input<string>;
}
