// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration
 *
 * Enables inspection of internal requests (that is, requests between your origin servers and Akamai's edge servers).
 * You can also use this resource to apply rate controls to prefetch requests.
 * When prefetch is enabled, internal requests are inspected by your firewall the same way that external requests (requests that originate outside the firewall and outside Akamai's edge servers) are inspected.
 *
 * This operation applies at the security configuration level, meaning that the settings affect all the security policies in that configuration.
 *
 * **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/advanced-settings/prefetch](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putprefetchrequestsforaconfiguration)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const prefetch = new akamai.AppSecAdvancedSettingsPrefetch("prefetch", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     enableAppLayer: false,
 *     allExtensions: true,
 *     enableRateControls: false,
 *     extensions: [
 *         ".tiff",
 *         ".bmp",
 *         ".jpg",
 *         ".gif",
 *         ".png",
 *     ],
 * });
 * ```
 */
export class AppSecAdvancedSettingsPrefetch extends pulumi.CustomResource {
    /**
     * Get an existing AppSecAdvancedSettingsPrefetch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecAdvancedSettingsPrefetchState, opts?: pulumi.CustomResourceOptions): AppSecAdvancedSettingsPrefetch {
        return new AppSecAdvancedSettingsPrefetch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch';

    /**
     * Returns true if the given object is an instance of AppSecAdvancedSettingsPrefetch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecAdvancedSettingsPrefetch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecAdvancedSettingsPrefetch.__pulumiType;
    }

    /**
     * . Set to **true** to enable prefetch requests for all file extensions; set to **false** to enable prefetch requests on only a specified set of file extensions. If set to false you must include the `extensions` argument.
     */
    public readonly allExtensions!: pulumi.Output<boolean>;
    /**
     * . Unique identifier of the security configuration associated with the prefetch settings being modified.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * . Set to **true** to enable prefetch requests; set to **false** to disable prefetch requests.
     */
    public readonly enableAppLayer!: pulumi.Output<boolean>;
    /**
     * . Set to **true** to enable prefetch requests for rate controls; set to **false** to disable prefetch requests for rate controls.
     */
    public readonly enableRateControls!: pulumi.Output<boolean>;
    /**
     * . If `allExtensions` is **false**, this must be a JSON array of all the file extensions for which prefetch requests are enabled: prefetch requests won't be used with any file extensions not included in the array. If `allExtensions` is **true**, then this argument must be set to an empty array: **[]**.
     */
    public readonly extensions!: pulumi.Output<string[]>;

    /**
     * Create a AppSecAdvancedSettingsPrefetch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecAdvancedSettingsPrefetchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecAdvancedSettingsPrefetchArgs | AppSecAdvancedSettingsPrefetchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecAdvancedSettingsPrefetchState | undefined;
            resourceInputs["allExtensions"] = state ? state.allExtensions : undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["enableAppLayer"] = state ? state.enableAppLayer : undefined;
            resourceInputs["enableRateControls"] = state ? state.enableRateControls : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
        } else {
            const args = argsOrState as AppSecAdvancedSettingsPrefetchArgs | undefined;
            if ((!args || args.allExtensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allExtensions'");
            }
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.enableAppLayer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableAppLayer'");
            }
            if ((!args || args.enableRateControls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableRateControls'");
            }
            if ((!args || args.extensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensions'");
            }
            resourceInputs["allExtensions"] = args ? args.allExtensions : undefined;
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["enableAppLayer"] = args ? args.enableAppLayer : undefined;
            resourceInputs["enableRateControls"] = args ? args.enableRateControls : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSecAdvancedSettingsPrefetch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecAdvancedSettingsPrefetch resources.
 */
export interface AppSecAdvancedSettingsPrefetchState {
    /**
     * . Set to **true** to enable prefetch requests for all file extensions; set to **false** to enable prefetch requests on only a specified set of file extensions. If set to false you must include the `extensions` argument.
     */
    allExtensions?: pulumi.Input<boolean>;
    /**
     * . Unique identifier of the security configuration associated with the prefetch settings being modified.
     */
    configId?: pulumi.Input<number>;
    /**
     * . Set to **true** to enable prefetch requests; set to **false** to disable prefetch requests.
     */
    enableAppLayer?: pulumi.Input<boolean>;
    /**
     * . Set to **true** to enable prefetch requests for rate controls; set to **false** to disable prefetch requests for rate controls.
     */
    enableRateControls?: pulumi.Input<boolean>;
    /**
     * . If `allExtensions` is **false**, this must be a JSON array of all the file extensions for which prefetch requests are enabled: prefetch requests won't be used with any file extensions not included in the array. If `allExtensions` is **true**, then this argument must be set to an empty array: **[]**.
     */
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AppSecAdvancedSettingsPrefetch resource.
 */
export interface AppSecAdvancedSettingsPrefetchArgs {
    /**
     * . Set to **true** to enable prefetch requests for all file extensions; set to **false** to enable prefetch requests on only a specified set of file extensions. If set to false you must include the `extensions` argument.
     */
    allExtensions: pulumi.Input<boolean>;
    /**
     * . Unique identifier of the security configuration associated with the prefetch settings being modified.
     */
    configId: pulumi.Input<number>;
    /**
     * . Set to **true** to enable prefetch requests; set to **false** to disable prefetch requests.
     */
    enableAppLayer: pulumi.Input<boolean>;
    /**
     * . Set to **true** to enable prefetch requests for rate controls; set to **false** to disable prefetch requests for rate controls.
     */
    enableRateControls: pulumi.Input<boolean>;
    /**
     * . If `allExtensions` is **false**, this must be a JSON array of all the file extensions for which prefetch requests are enabled: prefetch requests won't be used with any file extensions not included in the array. If `allExtensions` is **true**, then this argument must be set to an empty array: **[]**.
     */
    extensions: pulumi.Input<pulumi.Input<string>[]>;
}
