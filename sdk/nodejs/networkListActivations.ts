// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkListActivations extends pulumi.CustomResource {
    /**
     * Get an existing NetworkListActivations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkListActivationsState, opts?: pulumi.CustomResourceOptions): NetworkListActivations {
        return new NetworkListActivations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/networkListActivations:NetworkListActivations';

    /**
     * Returns true if the given object is an instance of NetworkListActivations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkListActivations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkListActivations.__pulumiType;
    }

    /**
     * The Akamai network on which the list is activated: STAGING or PRODUCTION
     */
    declare public readonly network: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the network list
     */
    declare public readonly networkListId: pulumi.Output<string>;
    /**
     * Descriptive text to accompany the activation
     */
    declare public readonly notes: pulumi.Output<string | undefined>;
    /**
     * List of email addresses of Control Center users who receive an email when activation of this list is complete
     */
    declare public readonly notificationEmails: pulumi.Output<string[]>;
    /**
     * This network list's current activation status in the environment specified by the "network" attribute
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Identifies the sync point of the network list to be activated
     */
    declare public readonly syncPoint: pulumi.Output<number>;

    /**
     * Create a NetworkListActivations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkListActivationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkListActivationsArgs | NetworkListActivationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkListActivationsState | undefined;
            resourceInputs["network"] = state?.network;
            resourceInputs["networkListId"] = state?.networkListId;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["notificationEmails"] = state?.notificationEmails;
            resourceInputs["status"] = state?.status;
            resourceInputs["syncPoint"] = state?.syncPoint;
        } else {
            const args = argsOrState as NetworkListActivationsArgs | undefined;
            if (args?.networkListId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkListId'");
            }
            if (args?.notificationEmails === undefined && !opts.urn) {
                throw new Error("Missing required property 'notificationEmails'");
            }
            if (args?.syncPoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'syncPoint'");
            }
            resourceInputs["network"] = args?.network;
            resourceInputs["networkListId"] = args?.networkListId;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["notificationEmails"] = args?.notificationEmails;
            resourceInputs["syncPoint"] = args?.syncPoint;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkListActivations.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkListActivations resources.
 */
export interface NetworkListActivationsState {
    /**
     * The Akamai network on which the list is activated: STAGING or PRODUCTION
     */
    network?: pulumi.Input<string>;
    /**
     * Unique identifier of the network list
     */
    networkListId?: pulumi.Input<string>;
    /**
     * Descriptive text to accompany the activation
     */
    notes?: pulumi.Input<string>;
    /**
     * List of email addresses of Control Center users who receive an email when activation of this list is complete
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This network list's current activation status in the environment specified by the "network" attribute
     */
    status?: pulumi.Input<string>;
    /**
     * Identifies the sync point of the network list to be activated
     */
    syncPoint?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkListActivations resource.
 */
export interface NetworkListActivationsArgs {
    /**
     * The Akamai network on which the list is activated: STAGING or PRODUCTION
     */
    network?: pulumi.Input<string>;
    /**
     * Unique identifier of the network list
     */
    networkListId: pulumi.Input<string>;
    /**
     * Descriptive text to accompany the activation
     */
    notes?: pulumi.Input<string>;
    /**
     * List of email addresses of Control Center users who receive an email when activation of this list is complete
     */
    notificationEmails: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifies the sync point of the network list to be activated
     */
    syncPoint: pulumi.Input<number>;
}
