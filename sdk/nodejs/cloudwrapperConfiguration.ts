// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudwrapperConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CloudwrapperConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudwrapperConfigurationState, opts?: pulumi.CustomResourceOptions): CloudwrapperConfiguration {
        return new CloudwrapperConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudwrapperConfiguration:CloudwrapperConfiguration';

    /**
     * Returns true if the given object is an instance of CloudwrapperConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudwrapperConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudwrapperConfiguration.__pulumiType;
    }

    /**
     * Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
     */
    declare public readonly capacityAlertsThreshold: pulumi.Output<number | undefined>;
    /**
     * Additional information you provide to differentiate or track changes of the configuration.
     */
    declare public readonly comments: pulumi.Output<string>;
    /**
     * Name of the configuration.
     */
    declare public readonly configName: pulumi.Output<string>;
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * List of locations to use with the configuration.
     */
    declare public readonly locations: pulumi.Output<outputs.CloudwrapperConfigurationLocation[] | undefined>;
    /**
     * Email addresses to use for notifications.
     */
    declare public readonly notificationEmails: pulumi.Output<string[]>;
    /**
     * List of properties belonging to eligible products.
     */
    declare public readonly propertyIds: pulumi.Output<string[]>;
    /**
     * Retain idle objects beyond their max idle lifetime.
     */
    declare public readonly retainIdleObjects: pulumi.Output<boolean>;
    /**
     * Unique hash value of the configuration.
     */
    declare public /*out*/ readonly revision: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.CloudwrapperConfigurationTimeouts | undefined>;

    /**
     * Create a CloudwrapperConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudwrapperConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudwrapperConfigurationArgs | CloudwrapperConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudwrapperConfigurationState | undefined;
            resourceInputs["capacityAlertsThreshold"] = state?.capacityAlertsThreshold;
            resourceInputs["comments"] = state?.comments;
            resourceInputs["configName"] = state?.configName;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["locations"] = state?.locations;
            resourceInputs["notificationEmails"] = state?.notificationEmails;
            resourceInputs["propertyIds"] = state?.propertyIds;
            resourceInputs["retainIdleObjects"] = state?.retainIdleObjects;
            resourceInputs["revision"] = state?.revision;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as CloudwrapperConfigurationArgs | undefined;
            if (args?.comments === undefined && !opts.urn) {
                throw new Error("Missing required property 'comments'");
            }
            if (args?.configName === undefined && !opts.urn) {
                throw new Error("Missing required property 'configName'");
            }
            if (args?.contractId === undefined && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if (args?.propertyIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'propertyIds'");
            }
            resourceInputs["capacityAlertsThreshold"] = args?.capacityAlertsThreshold;
            resourceInputs["comments"] = args?.comments;
            resourceInputs["configName"] = args?.configName;
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["locations"] = args?.locations;
            resourceInputs["notificationEmails"] = args?.notificationEmails;
            resourceInputs["propertyIds"] = args?.propertyIds;
            resourceInputs["retainIdleObjects"] = args?.retainIdleObjects;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudwrapperConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudwrapperConfiguration resources.
 */
export interface CloudwrapperConfigurationState {
    /**
     * Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
     */
    capacityAlertsThreshold?: pulumi.Input<number>;
    /**
     * Additional information you provide to differentiate or track changes of the configuration.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name of the configuration.
     */
    configName?: pulumi.Input<string>;
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId?: pulumi.Input<string>;
    /**
     * List of locations to use with the configuration.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.CloudwrapperConfigurationLocation>[]>;
    /**
     * Email addresses to use for notifications.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of properties belonging to eligible products.
     */
    propertyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Retain idle objects beyond their max idle lifetime.
     */
    retainIdleObjects?: pulumi.Input<boolean>;
    /**
     * Unique hash value of the configuration.
     */
    revision?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudwrapperConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a CloudwrapperConfiguration resource.
 */
export interface CloudwrapperConfigurationArgs {
    /**
     * Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
     */
    capacityAlertsThreshold?: pulumi.Input<number>;
    /**
     * Additional information you provide to differentiate or track changes of the configuration.
     */
    comments: pulumi.Input<string>;
    /**
     * Name of the configuration.
     */
    configName: pulumi.Input<string>;
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId: pulumi.Input<string>;
    /**
     * List of locations to use with the configuration.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.CloudwrapperConfigurationLocation>[]>;
    /**
     * Email addresses to use for notifications.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of properties belonging to eligible products.
     */
    propertyIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Retain idle objects beyond their max idle lifetime.
     */
    retainIdleObjects?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.CloudwrapperConfigurationTimeouts>;
}
