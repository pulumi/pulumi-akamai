// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration; security policy
 *
 * Use the `akamai.AppSecAdvancedSettingsEvasivePathMatch` data source to retrieve information about the evasive path match for a configuration. This operation applies at the configuration level, and therefore applies to all policies within a configuration. You may retrieve these settings for a particular policy by specifying the policy using the securityPolicyId parameter. The information available is described [here](https://developer.akamai.com/api/cloud_security/application_security/v1.html#gethttpheaderloggingforaconfiguration).
 *
 * **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/advanced-settings/evasive-path-match](https://techdocs.akamai.com/application-security/reference/put-evasive-path-match)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: _var.security_configuration,
 * });
 * const evasivePathMatch = configuration.then(configuration => akamai.getAppSecAdvancedSettingsEvasivePathMatch({
 *     configId: configuration.configId,
 * }));
 * export const advancedSettingsEvasivePathMatchOutput = evasivePathMatch.then(evasivePathMatch => evasivePathMatch.outputText);
 * export const advancedSettingsEvasivePathMatchJson = evasivePathMatch.then(evasivePathMatch => evasivePathMatch.json);
 * const policyOverride = configuration.then(configuration => akamai.getAppSecAdvancedSettingsEvasivePathMatch({
 *     configId: configuration.configId,
 *     securityPolicyId: _var.security_policy_id,
 * }));
 * export const advancedSettingsPolicyEvasivePathMatchOutput = policyOverride.then(policyOverride => policyOverride.outputText);
 * export const advancedSettingsPolicyEvasivePathMatchJson = policyOverride.then(policyOverride => policyOverride.json);
 * ```
 */
export function getAppSecAdvancedSettingsEvasivePathMatch(args: GetAppSecAdvancedSettingsEvasivePathMatchArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecAdvancedSettingsEvasivePathMatchResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("akamai:index/getAppSecAdvancedSettingsEvasivePathMatch:getAppSecAdvancedSettingsEvasivePathMatch", {
        "configId": args.configId,
        "securityPolicyId": args.securityPolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecAdvancedSettingsEvasivePathMatch.
 */
export interface GetAppSecAdvancedSettingsEvasivePathMatchArgs {
    /**
     * The configuration ID.
     */
    configId: number;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId?: string;
}

/**
 * A collection of values returned by getAppSecAdvancedSettingsEvasivePathMatch.
 */
export interface GetAppSecAdvancedSettingsEvasivePathMatchResult {
    readonly configId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A JSON-formatted list of information about the evasive path match settings.
     */
    readonly json: string;
    /**
     * A tabular display showing the evasive path match settings.
     */
    readonly outputText: string;
    readonly securityPolicyId?: string;
}

export function getAppSecAdvancedSettingsEvasivePathMatchOutput(args: GetAppSecAdvancedSettingsEvasivePathMatchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSecAdvancedSettingsEvasivePathMatchResult> {
    return pulumi.output(args).apply(a => getAppSecAdvancedSettingsEvasivePathMatch(a, opts))
}

/**
 * A collection of arguments for invoking getAppSecAdvancedSettingsEvasivePathMatch.
 */
export interface GetAppSecAdvancedSettingsEvasivePathMatchOutputArgs {
    /**
     * The configuration ID.
     */
    configId: pulumi.Input<number>;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId?: pulumi.Input<string>;
}
