// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CpsUploadCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CpsUploadCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CpsUploadCertificateState, opts?: pulumi.CustomResourceOptions): CpsUploadCertificate {
        return new CpsUploadCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cpsUploadCertificate:CpsUploadCertificate';

    /**
     * Returns true if the given object is an instance of CpsUploadCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CpsUploadCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CpsUploadCertificate.__pulumiType;
    }

    /**
     * Whether to acknowledge change management
     */
    public readonly acknowledgeChangeManagement!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to acknowledge post-verification warnings
     */
    public readonly acknowledgePostVerificationWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * List of post-verification warnings to be automatically acknowledged
     */
    public readonly autoApproveWarnings!: pulumi.Output<string[] | undefined>;
    /**
     * ECDSA certificate in pem format to be uploaded
     */
    public readonly certificateEcdsaPem!: pulumi.Output<string | undefined>;
    /**
     * RSA certificate in pem format to be uploaded
     */
    public readonly certificateRsaPem!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the enrollment
     */
    public readonly enrollmentId!: pulumi.Output<number>;
    /**
     * Enables to set timeout for processing
     */
    public readonly timeouts!: pulumi.Output<outputs.CpsUploadCertificateTimeouts | undefined>;
    /**
     * Trust chain in pem format for provided ECDSA certificate
     */
    public readonly trustChainEcdsaPem!: pulumi.Output<string | undefined>;
    /**
     * Trust chain in pem format for provided RSA certificate
     */
    public readonly trustChainRsaPem!: pulumi.Output<string | undefined>;
    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     */
    public /*out*/ readonly unacknowledgedWarnings!: pulumi.Output<boolean>;
    /**
     * Whether to wait for certificate to be deployed
     */
    public readonly waitForDeployment!: pulumi.Output<boolean | undefined>;

    /**
     * Create a CpsUploadCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CpsUploadCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CpsUploadCertificateArgs | CpsUploadCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CpsUploadCertificateState | undefined;
            resourceInputs["acknowledgeChangeManagement"] = state ? state.acknowledgeChangeManagement : undefined;
            resourceInputs["acknowledgePostVerificationWarnings"] = state ? state.acknowledgePostVerificationWarnings : undefined;
            resourceInputs["autoApproveWarnings"] = state ? state.autoApproveWarnings : undefined;
            resourceInputs["certificateEcdsaPem"] = state ? state.certificateEcdsaPem : undefined;
            resourceInputs["certificateRsaPem"] = state ? state.certificateRsaPem : undefined;
            resourceInputs["enrollmentId"] = state ? state.enrollmentId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustChainEcdsaPem"] = state ? state.trustChainEcdsaPem : undefined;
            resourceInputs["trustChainRsaPem"] = state ? state.trustChainRsaPem : undefined;
            resourceInputs["unacknowledgedWarnings"] = state ? state.unacknowledgedWarnings : undefined;
            resourceInputs["waitForDeployment"] = state ? state.waitForDeployment : undefined;
        } else {
            const args = argsOrState as CpsUploadCertificateArgs | undefined;
            if ((!args || args.enrollmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrollmentId'");
            }
            resourceInputs["acknowledgeChangeManagement"] = args ? args.acknowledgeChangeManagement : undefined;
            resourceInputs["acknowledgePostVerificationWarnings"] = args ? args.acknowledgePostVerificationWarnings : undefined;
            resourceInputs["autoApproveWarnings"] = args ? args.autoApproveWarnings : undefined;
            resourceInputs["certificateEcdsaPem"] = args ? args.certificateEcdsaPem : undefined;
            resourceInputs["certificateRsaPem"] = args ? args.certificateRsaPem : undefined;
            resourceInputs["enrollmentId"] = args ? args.enrollmentId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustChainEcdsaPem"] = args ? args.trustChainEcdsaPem : undefined;
            resourceInputs["trustChainRsaPem"] = args ? args.trustChainRsaPem : undefined;
            resourceInputs["waitForDeployment"] = args ? args.waitForDeployment : undefined;
            resourceInputs["unacknowledgedWarnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CpsUploadCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CpsUploadCertificate resources.
 */
export interface CpsUploadCertificateState {
    /**
     * Whether to acknowledge change management
     */
    acknowledgeChangeManagement?: pulumi.Input<boolean>;
    /**
     * Whether to acknowledge post-verification warnings
     */
    acknowledgePostVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * List of post-verification warnings to be automatically acknowledged
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ECDSA certificate in pem format to be uploaded
     */
    certificateEcdsaPem?: pulumi.Input<string>;
    /**
     * RSA certificate in pem format to be uploaded
     */
    certificateRsaPem?: pulumi.Input<string>;
    /**
     * The unique identifier of the enrollment
     */
    enrollmentId?: pulumi.Input<number>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsUploadCertificateTimeouts>;
    /**
     * Trust chain in pem format for provided ECDSA certificate
     */
    trustChainEcdsaPem?: pulumi.Input<string>;
    /**
     * Trust chain in pem format for provided RSA certificate
     */
    trustChainRsaPem?: pulumi.Input<string>;
    /**
     * Used to distinguish whether there are unacknowledged warnings for a certificate
     */
    unacknowledgedWarnings?: pulumi.Input<boolean>;
    /**
     * Whether to wait for certificate to be deployed
     */
    waitForDeployment?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CpsUploadCertificate resource.
 */
export interface CpsUploadCertificateArgs {
    /**
     * Whether to acknowledge change management
     */
    acknowledgeChangeManagement?: pulumi.Input<boolean>;
    /**
     * Whether to acknowledge post-verification warnings
     */
    acknowledgePostVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * List of post-verification warnings to be automatically acknowledged
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ECDSA certificate in pem format to be uploaded
     */
    certificateEcdsaPem?: pulumi.Input<string>;
    /**
     * RSA certificate in pem format to be uploaded
     */
    certificateRsaPem?: pulumi.Input<string>;
    /**
     * The unique identifier of the enrollment
     */
    enrollmentId: pulumi.Input<number>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsUploadCertificateTimeouts>;
    /**
     * Trust chain in pem format for provided ECDSA certificate
     */
    trustChainEcdsaPem?: pulumi.Input<string>;
    /**
     * Trust chain in pem format for provided RSA certificate
     */
    trustChainRsaPem?: pulumi.Input<string>;
    /**
     * Whether to wait for certificate to be deployed
     */
    waitForDeployment?: pulumi.Input<boolean>;
}
