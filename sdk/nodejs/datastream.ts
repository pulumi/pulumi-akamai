// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datastream extends pulumi.CustomResource {
    /**
     * Get an existing Datastream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastreamState, opts?: pulumi.CustomResourceOptions): Datastream {
        return new Datastream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/datastream:Datastream';

    /**
     * Returns true if the given object is an instance of Datastream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datastream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastream.__pulumiType;
    }

    /**
     * Defining if stream should be active or not
     */
    declare public readonly active: pulumi.Output<boolean>;
    declare public readonly azureConnector: pulumi.Output<outputs.DatastreamAzureConnector | undefined>;
    /**
     * Identifies if stream needs to collect midgress data
     */
    declare public readonly collectMidgress: pulumi.Output<boolean | undefined>;
    /**
     * Identifies the contract that has access to the product
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * The username who created the stream
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The date and time when the stream was created
     */
    declare public /*out*/ readonly createdDate: pulumi.Output<string>;
    declare public readonly datadogConnector: pulumi.Output<outputs.DatastreamDatadogConnector | undefined>;
    /**
     * A list of data set fields selected from the associated template that the stream monitors in logs. The order of the identifiers define how the value for these fields appear in the log lines
     */
    declare public readonly datasetFields: pulumi.Output<number[]>;
    /**
     * Provides information about the configuration related to logs (format, file names, delivery frequency)
     */
    declare public readonly deliveryConfiguration: pulumi.Output<outputs.DatastreamDeliveryConfiguration>;
    declare public readonly elasticsearchConnector: pulumi.Output<outputs.DatastreamElasticsearchConnector | undefined>;
    declare public readonly gcsConnector: pulumi.Output<outputs.DatastreamGcsConnector | undefined>;
    /**
     * Identifies the group that has access to the product and for which the stream configuration was created
     */
    declare public readonly groupId: pulumi.Output<string>;
    declare public readonly httpsConnector: pulumi.Output<outputs.DatastreamHttpsConnector | undefined>;
    /**
     * Identifies the latest active configuration version of the stream
     */
    declare public /*out*/ readonly latestVersion: pulumi.Output<number>;
    declare public readonly logglyConnector: pulumi.Output<outputs.DatastreamLogglyConnector | undefined>;
    /**
     * The username who modified the stream
     */
    declare public /*out*/ readonly modifiedBy: pulumi.Output<string>;
    /**
     * The date and time when the stream was modified
     */
    declare public /*out*/ readonly modifiedDate: pulumi.Output<string>;
    declare public readonly newRelicConnector: pulumi.Output<outputs.DatastreamNewRelicConnector | undefined>;
    /**
     * List of email addresses where the system sends notifications about activations and deactivations of the stream
     */
    declare public readonly notificationEmails: pulumi.Output<string[] | undefined>;
    declare public readonly oracleConnector: pulumi.Output<outputs.DatastreamOracleConnector | undefined>;
    /**
     * The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
     */
    declare public /*out*/ readonly papiJson: pulumi.Output<string>;
    /**
     * The ID of the product for which the stream was created
     */
    declare public /*out*/ readonly productId: pulumi.Output<string>;
    /**
     * Identifies the properties monitored in the stream
     */
    declare public readonly properties: pulumi.Output<string[]>;
    declare public readonly s3Connector: pulumi.Output<outputs.DatastreamS3Connector | undefined>;
    declare public readonly splunkConnector: pulumi.Output<outputs.DatastreamSplunkConnector | undefined>;
    /**
     * The name of the stream
     */
    declare public readonly streamName: pulumi.Output<string>;
    /**
     * Identifies the configuration version of the stream
     */
    declare public /*out*/ readonly streamVersion: pulumi.Output<number>;
    declare public readonly sumologicConnector: pulumi.Output<outputs.DatastreamSumologicConnector | undefined>;

    /**
     * Create a Datastream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastreamArgs | DatastreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastreamState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["azureConnector"] = state?.azureConnector;
            resourceInputs["collectMidgress"] = state?.collectMidgress;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["createdDate"] = state?.createdDate;
            resourceInputs["datadogConnector"] = state?.datadogConnector;
            resourceInputs["datasetFields"] = state?.datasetFields;
            resourceInputs["deliveryConfiguration"] = state?.deliveryConfiguration;
            resourceInputs["elasticsearchConnector"] = state?.elasticsearchConnector;
            resourceInputs["gcsConnector"] = state?.gcsConnector;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["httpsConnector"] = state?.httpsConnector;
            resourceInputs["latestVersion"] = state?.latestVersion;
            resourceInputs["logglyConnector"] = state?.logglyConnector;
            resourceInputs["modifiedBy"] = state?.modifiedBy;
            resourceInputs["modifiedDate"] = state?.modifiedDate;
            resourceInputs["newRelicConnector"] = state?.newRelicConnector;
            resourceInputs["notificationEmails"] = state?.notificationEmails;
            resourceInputs["oracleConnector"] = state?.oracleConnector;
            resourceInputs["papiJson"] = state?.papiJson;
            resourceInputs["productId"] = state?.productId;
            resourceInputs["properties"] = state?.properties;
            resourceInputs["s3Connector"] = state?.s3Connector;
            resourceInputs["splunkConnector"] = state?.splunkConnector;
            resourceInputs["streamName"] = state?.streamName;
            resourceInputs["streamVersion"] = state?.streamVersion;
            resourceInputs["sumologicConnector"] = state?.sumologicConnector;
        } else {
            const args = argsOrState as DatastreamArgs | undefined;
            if (args?.active === undefined && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if (args?.contractId === undefined && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if (args?.datasetFields === undefined && !opts.urn) {
                throw new Error("Missing required property 'datasetFields'");
            }
            if (args?.deliveryConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'deliveryConfiguration'");
            }
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.properties === undefined && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            if (args?.streamName === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamName'");
            }
            resourceInputs["active"] = args?.active;
            resourceInputs["azureConnector"] = args?.azureConnector;
            resourceInputs["collectMidgress"] = args?.collectMidgress;
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["datadogConnector"] = args?.datadogConnector;
            resourceInputs["datasetFields"] = args?.datasetFields;
            resourceInputs["deliveryConfiguration"] = args?.deliveryConfiguration;
            resourceInputs["elasticsearchConnector"] = args?.elasticsearchConnector;
            resourceInputs["gcsConnector"] = args?.gcsConnector;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["httpsConnector"] = args?.httpsConnector;
            resourceInputs["logglyConnector"] = args?.logglyConnector;
            resourceInputs["newRelicConnector"] = args?.newRelicConnector;
            resourceInputs["notificationEmails"] = args?.notificationEmails;
            resourceInputs["oracleConnector"] = args?.oracleConnector;
            resourceInputs["properties"] = args?.properties;
            resourceInputs["s3Connector"] = args?.s3Connector;
            resourceInputs["splunkConnector"] = args?.splunkConnector;
            resourceInputs["streamName"] = args?.streamName;
            resourceInputs["sumologicConnector"] = args?.sumologicConnector;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedDate"] = undefined /*out*/;
            resourceInputs["papiJson"] = undefined /*out*/;
            resourceInputs["productId"] = undefined /*out*/;
            resourceInputs["streamVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datastream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Datastream resources.
 */
export interface DatastreamState {
    /**
     * Defining if stream should be active or not
     */
    active?: pulumi.Input<boolean>;
    azureConnector?: pulumi.Input<inputs.DatastreamAzureConnector>;
    /**
     * Identifies if stream needs to collect midgress data
     */
    collectMidgress?: pulumi.Input<boolean>;
    /**
     * Identifies the contract that has access to the product
     */
    contractId?: pulumi.Input<string>;
    /**
     * The username who created the stream
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The date and time when the stream was created
     */
    createdDate?: pulumi.Input<string>;
    datadogConnector?: pulumi.Input<inputs.DatastreamDatadogConnector>;
    /**
     * A list of data set fields selected from the associated template that the stream monitors in logs. The order of the identifiers define how the value for these fields appear in the log lines
     */
    datasetFields?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Provides information about the configuration related to logs (format, file names, delivery frequency)
     */
    deliveryConfiguration?: pulumi.Input<inputs.DatastreamDeliveryConfiguration>;
    elasticsearchConnector?: pulumi.Input<inputs.DatastreamElasticsearchConnector>;
    gcsConnector?: pulumi.Input<inputs.DatastreamGcsConnector>;
    /**
     * Identifies the group that has access to the product and for which the stream configuration was created
     */
    groupId?: pulumi.Input<string>;
    httpsConnector?: pulumi.Input<inputs.DatastreamHttpsConnector>;
    /**
     * Identifies the latest active configuration version of the stream
     */
    latestVersion?: pulumi.Input<number>;
    logglyConnector?: pulumi.Input<inputs.DatastreamLogglyConnector>;
    /**
     * The username who modified the stream
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * The date and time when the stream was modified
     */
    modifiedDate?: pulumi.Input<string>;
    newRelicConnector?: pulumi.Input<inputs.DatastreamNewRelicConnector>;
    /**
     * List of email addresses where the system sends notifications about activations and deactivations of the stream
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    oracleConnector?: pulumi.Input<inputs.DatastreamOracleConnector>;
    /**
     * The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
     */
    papiJson?: pulumi.Input<string>;
    /**
     * The ID of the product for which the stream was created
     */
    productId?: pulumi.Input<string>;
    /**
     * Identifies the properties monitored in the stream
     */
    properties?: pulumi.Input<pulumi.Input<string>[]>;
    s3Connector?: pulumi.Input<inputs.DatastreamS3Connector>;
    splunkConnector?: pulumi.Input<inputs.DatastreamSplunkConnector>;
    /**
     * The name of the stream
     */
    streamName?: pulumi.Input<string>;
    /**
     * Identifies the configuration version of the stream
     */
    streamVersion?: pulumi.Input<number>;
    sumologicConnector?: pulumi.Input<inputs.DatastreamSumologicConnector>;
}

/**
 * The set of arguments for constructing a Datastream resource.
 */
export interface DatastreamArgs {
    /**
     * Defining if stream should be active or not
     */
    active: pulumi.Input<boolean>;
    azureConnector?: pulumi.Input<inputs.DatastreamAzureConnector>;
    /**
     * Identifies if stream needs to collect midgress data
     */
    collectMidgress?: pulumi.Input<boolean>;
    /**
     * Identifies the contract that has access to the product
     */
    contractId: pulumi.Input<string>;
    datadogConnector?: pulumi.Input<inputs.DatastreamDatadogConnector>;
    /**
     * A list of data set fields selected from the associated template that the stream monitors in logs. The order of the identifiers define how the value for these fields appear in the log lines
     */
    datasetFields: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Provides information about the configuration related to logs (format, file names, delivery frequency)
     */
    deliveryConfiguration: pulumi.Input<inputs.DatastreamDeliveryConfiguration>;
    elasticsearchConnector?: pulumi.Input<inputs.DatastreamElasticsearchConnector>;
    gcsConnector?: pulumi.Input<inputs.DatastreamGcsConnector>;
    /**
     * Identifies the group that has access to the product and for which the stream configuration was created
     */
    groupId: pulumi.Input<string>;
    httpsConnector?: pulumi.Input<inputs.DatastreamHttpsConnector>;
    logglyConnector?: pulumi.Input<inputs.DatastreamLogglyConnector>;
    newRelicConnector?: pulumi.Input<inputs.DatastreamNewRelicConnector>;
    /**
     * List of email addresses where the system sends notifications about activations and deactivations of the stream
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    oracleConnector?: pulumi.Input<inputs.DatastreamOracleConnector>;
    /**
     * Identifies the properties monitored in the stream
     */
    properties: pulumi.Input<pulumi.Input<string>[]>;
    s3Connector?: pulumi.Input<inputs.DatastreamS3Connector>;
    splunkConnector?: pulumi.Input<inputs.DatastreamSplunkConnector>;
    /**
     * The name of the stream
     */
    streamName: pulumi.Input<string>;
    sumologicConnector?: pulumi.Input<inputs.DatastreamSumologicConnector>;
}
