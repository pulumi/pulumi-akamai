// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudwrapperConfiguration(args: GetCloudwrapperConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudwrapperConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getCloudwrapperConfiguration:getCloudwrapperConfiguration", {
        "id": args.id,
        "locations": args.locations,
        "multiCdnSettings": args.multiCdnSettings,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudwrapperConfiguration.
 */
export interface GetCloudwrapperConfigurationArgs {
    id: number;
    locations?: inputs.GetCloudwrapperConfigurationLocation[];
    multiCdnSettings?: inputs.GetCloudwrapperConfigurationMultiCdnSettings;
}

/**
 * A collection of values returned by getCloudwrapperConfiguration.
 */
export interface GetCloudwrapperConfigurationResult {
    readonly capacityAlertsThreshold: number;
    readonly comments: string;
    readonly configName: string;
    readonly contractId: string;
    readonly id: number;
    readonly lastActivatedBy: string;
    readonly lastActivatedDate: string;
    readonly lastUpdatedBy: string;
    readonly lastUpdatedDate: string;
    readonly locations?: outputs.GetCloudwrapperConfigurationLocation[];
    readonly multiCdnSettings?: outputs.GetCloudwrapperConfigurationMultiCdnSettings;
    readonly notificationEmails: string[];
    readonly propertyIds: string[];
    readonly retainIdleObjects: boolean;
    readonly status: string;
}
export function getCloudwrapperConfigurationOutput(args: GetCloudwrapperConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudwrapperConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getCloudwrapperConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getCloudwrapperConfiguration.
 */
export interface GetCloudwrapperConfigurationOutputArgs {
    id: pulumi.Input<number>;
    locations?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationLocationArgs>[]>;
    multiCdnSettings?: pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsArgs>;
}
