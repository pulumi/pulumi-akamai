// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration
 *
 * Activates or deactivates a security configuration. Security configurations activated on the staging network can be used for testing and fine-tuning; security configurations activated on the production network are used to protect your actual websites.
 *
 * **Related API Endpoint**: [/appsec/v1/activations](https://developer.akamai.com/api/cloud_security/application_security/v1.html#postactivations)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const activation = new akamai.AppSecActivations("activation", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     network: "STAGING",
 *     notes: "This configuration was activated for testing purposes only.",
 *     notificationEmails: ["user@example.com"],
 * });
 * ```
 * ## Output Options
 *
 * The following options can be used to determine the information returned, and how that returned information is formatted:
 *
 * - `status`. Status of the operation. Valid values are:
 *   
 *   *   **ACTIVATED**
 *   *   **DEACTIVATED**
 *   *   **FAILED**
 */
export class AppSecActivations extends pulumi.CustomResource {
    /**
     * Get an existing AppSecActivations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecActivationsState, opts?: pulumi.CustomResourceOptions): AppSecActivations {
        return new AppSecActivations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecActivations:AppSecActivations';

    /**
     * Returns true if the given object is an instance of AppSecActivations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecActivations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecActivations.__pulumiType;
    }

    /**
     * . Set to **true** to activate the specified security configuration; set to **false** to deactivate the configuration. If not included, the security configuration will be activated.
     */
    public readonly activate!: pulumi.Output<boolean | undefined>;
    /**
     * . Unique identifier of the security configuration being activated.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * . Network on which activation will occur; allowed values are:
     */
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * . Brief description of the activation/deactivation process. Note that, if no attributes have changed since the last time you called the akamai.AppSecActivations resource, neither activation nor deactivation takes place: that's because *something* must be different in order to trigger the activation/deactivation process. With that in mind, it's recommended that you always update the `notes` argument. That ensures that the resource will be called and that activation or deactivation will occur.
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * . JSON array containing the email addresses of the people to be notified when activation is complete.
     */
    public readonly notificationEmails!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AppSecActivations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecActivationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecActivationsArgs | AppSecActivationsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecActivationsState | undefined;
            inputs["activate"] = state ? state.activate : undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["notes"] = state ? state.notes : undefined;
            inputs["notificationEmails"] = state ? state.notificationEmails : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AppSecActivationsArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.notes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notes'");
            }
            if ((!args || args.notificationEmails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationEmails'");
            }
            inputs["activate"] = args ? args.activate : undefined;
            inputs["configId"] = args ? args.configId : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["notes"] = args ? args.notes : undefined;
            inputs["notificationEmails"] = args ? args.notificationEmails : undefined;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppSecActivations.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecActivations resources.
 */
export interface AppSecActivationsState {
    /**
     * . Set to **true** to activate the specified security configuration; set to **false** to deactivate the configuration. If not included, the security configuration will be activated.
     */
    activate?: pulumi.Input<boolean>;
    /**
     * . Unique identifier of the security configuration being activated.
     */
    configId?: pulumi.Input<number>;
    /**
     * . Network on which activation will occur; allowed values are:
     */
    network?: pulumi.Input<string>;
    /**
     * . Brief description of the activation/deactivation process. Note that, if no attributes have changed since the last time you called the akamai.AppSecActivations resource, neither activation nor deactivation takes place: that's because *something* must be different in order to trigger the activation/deactivation process. With that in mind, it's recommended that you always update the `notes` argument. That ensures that the resource will be called and that activation or deactivation will occur.
     */
    notes?: pulumi.Input<string>;
    /**
     * . JSON array containing the email addresses of the people to be notified when activation is complete.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecActivations resource.
 */
export interface AppSecActivationsArgs {
    /**
     * . Set to **true** to activate the specified security configuration; set to **false** to deactivate the configuration. If not included, the security configuration will be activated.
     */
    activate?: pulumi.Input<boolean>;
    /**
     * . Unique identifier of the security configuration being activated.
     */
    configId: pulumi.Input<number>;
    /**
     * . Network on which activation will occur; allowed values are:
     */
    network?: pulumi.Input<string>;
    /**
     * . Brief description of the activation/deactivation process. Note that, if no attributes have changed since the last time you called the akamai.AppSecActivations resource, neither activation nor deactivation takes place: that's because *something* must be different in order to trigger the activation/deactivation process. With that in mind, it's recommended that you always update the `notes` argument. That ensures that the resource will be called and that activation or deactivation will occur.
     */
    notes: pulumi.Input<string>;
    /**
     * . JSON array containing the email addresses of the people to be notified when activation is complete.
     */
    notificationEmails: pulumi.Input<pulumi.Input<string>[]>;
}
