// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudwrapperProperties(args?: GetCloudwrapperPropertiesArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudwrapperPropertiesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getCloudwrapperProperties:getCloudwrapperProperties", {
        "contractIds": args.contractIds,
        "properties": args.properties,
        "unused": args.unused,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudwrapperProperties.
 */
export interface GetCloudwrapperPropertiesArgs {
    contractIds?: string[];
    properties?: inputs.GetCloudwrapperPropertiesProperty[];
    unused?: boolean;
}

/**
 * A collection of values returned by getCloudwrapperProperties.
 */
export interface GetCloudwrapperPropertiesResult {
    readonly contractIds?: string[];
    /**
     * @deprecated Required by the terraform plugin testing framework, always set to `akamai_cloudwrapper_properties`
     */
    readonly id: string;
    readonly properties?: outputs.GetCloudwrapperPropertiesProperty[];
    readonly unused?: boolean;
}
export function getCloudwrapperPropertiesOutput(args?: GetCloudwrapperPropertiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudwrapperPropertiesResult> {
    return pulumi.output(args).apply((a: any) => getCloudwrapperProperties(a, opts))
}

/**
 * A collection of arguments for invoking getCloudwrapperProperties.
 */
export interface GetCloudwrapperPropertiesOutputArgs {
    contractIds?: pulumi.Input<pulumi.Input<string>[]>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperPropertiesPropertyArgs>[]>;
    unused?: pulumi.Input<boolean>;
}
