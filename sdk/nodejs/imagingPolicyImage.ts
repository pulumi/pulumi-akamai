// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ImagingPolicyImage extends pulumi.CustomResource {
    /**
     * Get an existing ImagingPolicyImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagingPolicyImageState, opts?: pulumi.CustomResourceOptions): ImagingPolicyImage {
        return new ImagingPolicyImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/imagingPolicyImage:ImagingPolicyImage';

    /**
     * Returns true if the given object is an instance of ImagingPolicyImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagingPolicyImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagingPolicyImage.__pulumiType;
    }

    /**
     * With this flag set to false, the user can perform modifications on staging without affecting the version already saved
     * to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
     * it back to false only when there are any changes to the policy qualifying it for the new version.
     */
    public readonly activateOnProduction!: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier for the Akamai Contract containing the Policy Set(s)
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * A JSON encoded policy
     */
    public readonly json!: pulumi.Output<string>;
    /**
     * Unique identifier for a Policy. It is not possible to modify the id of the policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Unique identifier for the Image & Video Manager Policy Set.
     */
    public readonly policysetId!: pulumi.Output<string>;
    /**
     * The version number of this policy version
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a ImagingPolicyImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagingPolicyImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagingPolicyImageArgs | ImagingPolicyImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagingPolicyImageState | undefined;
            resourceInputs["activateOnProduction"] = state ? state.activateOnProduction : undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["json"] = state ? state.json : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policysetId"] = state ? state.policysetId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ImagingPolicyImageArgs | undefined;
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.json === undefined) && !opts.urn) {
                throw new Error("Missing required property 'json'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.policysetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policysetId'");
            }
            resourceInputs["activateOnProduction"] = args ? args.activateOnProduction : undefined;
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["json"] = args ? args.json : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["policysetId"] = args ? args.policysetId : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagingPolicyImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImagingPolicyImage resources.
 */
export interface ImagingPolicyImageState {
    /**
     * With this flag set to false, the user can perform modifications on staging without affecting the version already saved
     * to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
     * it back to false only when there are any changes to the policy qualifying it for the new version.
     */
    activateOnProduction?: pulumi.Input<boolean>;
    /**
     * Unique identifier for the Akamai Contract containing the Policy Set(s)
     */
    contractId?: pulumi.Input<string>;
    /**
     * A JSON encoded policy
     */
    json?: pulumi.Input<string>;
    /**
     * Unique identifier for a Policy. It is not possible to modify the id of the policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Unique identifier for the Image & Video Manager Policy Set.
     */
    policysetId?: pulumi.Input<string>;
    /**
     * The version number of this policy version
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ImagingPolicyImage resource.
 */
export interface ImagingPolicyImageArgs {
    /**
     * With this flag set to false, the user can perform modifications on staging without affecting the version already saved
     * to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
     * it back to false only when there are any changes to the policy qualifying it for the new version.
     */
    activateOnProduction?: pulumi.Input<boolean>;
    /**
     * Unique identifier for the Akamai Contract containing the Policy Set(s)
     */
    contractId: pulumi.Input<string>;
    /**
     * A JSON encoded policy
     */
    json: pulumi.Input<string>;
    /**
     * Unique identifier for a Policy. It is not possible to modify the id of the policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * Unique identifier for the Image & Video Manager Policy Set.
     */
    policysetId: pulumi.Input<string>;
}
