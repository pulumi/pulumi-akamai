// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppSecIPGeo extends pulumi.CustomResource {
    /**
     * Get an existing AppSecIPGeo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecIPGeoState, opts?: pulumi.CustomResourceOptions): AppSecIPGeo {
        return new AppSecIPGeo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecIPGeo:AppSecIPGeo';

    /**
     * Returns true if the given object is an instance of AppSecIPGeo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecIPGeo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecIPGeo.__pulumiType;
    }

    /**
     * List of IDs of ASN network list to be blocked
     */
    declare public readonly asnNetworkLists: pulumi.Output<string[] | undefined>;
    /**
     * Unique identifier of the security configuration
     */
    declare public readonly configId: pulumi.Output<number>;
    /**
     * List of IDs of network list that are always allowed
     */
    declare public readonly exceptionIpNetworkLists: pulumi.Output<string[] | undefined>;
    /**
     * List of IDs of geographic network list to be blocked
     */
    declare public readonly geoNetworkLists: pulumi.Output<string[] | undefined>;
    /**
     * List of IDs of IP network list to be blocked
     */
    declare public readonly ipNetworkLists: pulumi.Output<string[] | undefined>;
    /**
     * Protection mode (block or allow)
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * Unique identifier of the security policy
     */
    declare public readonly securityPolicyId: pulumi.Output<string>;
    /**
     * Action set for Ukraine geo control
     */
    declare public readonly ukraineGeoControlAction: pulumi.Output<string | undefined>;

    /**
     * Create a AppSecIPGeo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecIPGeoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecIPGeoArgs | AppSecIPGeoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecIPGeoState | undefined;
            resourceInputs["asnNetworkLists"] = state?.asnNetworkLists;
            resourceInputs["configId"] = state?.configId;
            resourceInputs["exceptionIpNetworkLists"] = state?.exceptionIpNetworkLists;
            resourceInputs["geoNetworkLists"] = state?.geoNetworkLists;
            resourceInputs["ipNetworkLists"] = state?.ipNetworkLists;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["securityPolicyId"] = state?.securityPolicyId;
            resourceInputs["ukraineGeoControlAction"] = state?.ukraineGeoControlAction;
        } else {
            const args = argsOrState as AppSecIPGeoArgs | undefined;
            if (args?.configId === undefined && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.securityPolicyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyId'");
            }
            resourceInputs["asnNetworkLists"] = args?.asnNetworkLists;
            resourceInputs["configId"] = args?.configId;
            resourceInputs["exceptionIpNetworkLists"] = args?.exceptionIpNetworkLists;
            resourceInputs["geoNetworkLists"] = args?.geoNetworkLists;
            resourceInputs["ipNetworkLists"] = args?.ipNetworkLists;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["securityPolicyId"] = args?.securityPolicyId;
            resourceInputs["ukraineGeoControlAction"] = args?.ukraineGeoControlAction;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSecIPGeo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecIPGeo resources.
 */
export interface AppSecIPGeoState {
    /**
     * List of IDs of ASN network list to be blocked
     */
    asnNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the security configuration
     */
    configId?: pulumi.Input<number>;
    /**
     * List of IDs of network list that are always allowed
     */
    exceptionIpNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IDs of geographic network list to be blocked
     */
    geoNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IDs of IP network list to be blocked
     */
    ipNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Protection mode (block or allow)
     */
    mode?: pulumi.Input<string>;
    /**
     * Unique identifier of the security policy
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * Action set for Ukraine geo control
     */
    ukraineGeoControlAction?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecIPGeo resource.
 */
export interface AppSecIPGeoArgs {
    /**
     * List of IDs of ASN network list to be blocked
     */
    asnNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the security configuration
     */
    configId: pulumi.Input<number>;
    /**
     * List of IDs of network list that are always allowed
     */
    exceptionIpNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IDs of geographic network list to be blocked
     */
    geoNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of IDs of IP network list to be blocked
     */
    ipNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Protection mode (block or allow)
     */
    mode: pulumi.Input<string>;
    /**
     * Unique identifier of the security policy
     */
    securityPolicyId: pulumi.Input<string>;
    /**
     * Action set for Ukraine geo control
     */
    ukraineGeoControlAction?: pulumi.Input<string>;
}
