// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security policy
 *
 * Modifies the method used for firewall blocking, and manages the network lists used for IP/Geo firewall blocking.
 *
 * **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/ip-geo-firewall](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putipgeofirewall)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const ipGeoBlock = new akamai.AppSecIPGeo("ipGeoBlock", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     securityPolicyId: "gms1_134637",
 *     mode: "block",
 *     geoNetworkLists: ["06038_GEO_TEST"],
 *     ipNetworkLists: ["56921_TEST"],
 *     exceptionIpNetworkLists: ["07126_EXCEPTION_TEST"],
 * });
 * // USE CASE: User wants to update the IP/Geo firewall mode and update the exception list.
 * const ipGeoAllow = new akamai.AppSecIPGeo("ipGeoAllow", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     securityPolicyId: "gms1-090334",
 *     mode: "allow",
 *     exceptionIpNetworkLists: ["07126_EXCEPTION_TEST"],
 * });
 * export const ipGeoModeBlock = ipGeoBlock.mode;
 * export const blockGeoNetworkLists = ipGeoBlock.geoNetworkLists;
 * export const blockIpNetworkLists = ipGeoBlock.ipNetworkLists;
 * export const blockExceptionIpNetworkLists = ipGeoBlock.exceptionIpNetworkLists;
 * export const ipGeoModeAllow = ipGeoAllow.mode;
 * export const allowExceptionIpNetworkLists = ipGeoAllow.exceptionIpNetworkLists;
 * ```
 */
export class AppSecIPGeo extends pulumi.CustomResource {
    /**
     * Get an existing AppSecIPGeo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecIPGeoState, opts?: pulumi.CustomResourceOptions): AppSecIPGeo {
        return new AppSecIPGeo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecIPGeo:AppSecIPGeo';

    /**
     * Returns true if the given object is an instance of AppSecIPGeo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecIPGeo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecIPGeo.__pulumiType;
    }

    /**
     * . Unique identifier of the security configuration associated with the IP/Geo lists being modified.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * . JSON array of network lists that are always allowed to pass through the firewall, regardless of the value of any other setting.
     */
    public readonly exceptionIpNetworkLists!: pulumi.Output<string[] | undefined>;
    /**
     * . JSON array of geographic network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall.
     */
    public readonly geoNetworkLists!: pulumi.Output<string[] | undefined>;
    /**
     * . JSON array of IP network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall..
     */
    public readonly ipNetworkLists!: pulumi.Output<string[] | undefined>;
    /**
     * . Set to **block** to prevent the specified network lists from being allowed through the firewall: all other entities will be allowed to pass through the firewall. Set to **allow** to allow the specified network lists to pass through the firewall; all other entities will be prevented from passing through the firewall.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * . Unique identifier of the security policy associated with the IP/Geo lists being modified.
     */
    public readonly securityPolicyId!: pulumi.Output<string>;

    /**
     * Create a AppSecIPGeo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecIPGeoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecIPGeoArgs | AppSecIPGeoState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecIPGeoState | undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["exceptionIpNetworkLists"] = state ? state.exceptionIpNetworkLists : undefined;
            inputs["geoNetworkLists"] = state ? state.geoNetworkLists : undefined;
            inputs["ipNetworkLists"] = state ? state.ipNetworkLists : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
        } else {
            const args = argsOrState as AppSecIPGeoArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.securityPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyId'");
            }
            inputs["configId"] = args ? args.configId : undefined;
            inputs["exceptionIpNetworkLists"] = args ? args.exceptionIpNetworkLists : undefined;
            inputs["geoNetworkLists"] = args ? args.geoNetworkLists : undefined;
            inputs["ipNetworkLists"] = args ? args.ipNetworkLists : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppSecIPGeo.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecIPGeo resources.
 */
export interface AppSecIPGeoState {
    /**
     * . Unique identifier of the security configuration associated with the IP/Geo lists being modified.
     */
    configId?: pulumi.Input<number>;
    /**
     * . JSON array of network lists that are always allowed to pass through the firewall, regardless of the value of any other setting.
     */
    exceptionIpNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . JSON array of geographic network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall.
     */
    geoNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . JSON array of IP network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall..
     */
    ipNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . Set to **block** to prevent the specified network lists from being allowed through the firewall: all other entities will be allowed to pass through the firewall. Set to **allow** to allow the specified network lists to pass through the firewall; all other entities will be prevented from passing through the firewall.
     */
    mode?: pulumi.Input<string>;
    /**
     * . Unique identifier of the security policy associated with the IP/Geo lists being modified.
     */
    securityPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecIPGeo resource.
 */
export interface AppSecIPGeoArgs {
    /**
     * . Unique identifier of the security configuration associated with the IP/Geo lists being modified.
     */
    configId: pulumi.Input<number>;
    /**
     * . JSON array of network lists that are always allowed to pass through the firewall, regardless of the value of any other setting.
     */
    exceptionIpNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . JSON array of geographic network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall.
     */
    geoNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . JSON array of IP network lists that, depending on the value of the `mode` argument, will be blocked or allowed through the firewall..
     */
    ipNetworkLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * . Set to **block** to prevent the specified network lists from being allowed through the firewall: all other entities will be allowed to pass through the firewall. Set to **allow** to allow the specified network lists to pass through the firewall; all other entities will be prevented from passing through the firewall.
     */
    mode: pulumi.Input<string>;
    /**
     * . Unique identifier of the security policy associated with the IP/Geo lists being modified.
     */
    securityPolicyId: pulumi.Input<string>;
}
