// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.PropertyInclude` resource to create an include and its rule tree.
 *
 * ## Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const myExample = new akamai.PropertyInclude("myExample", {
 *     contractId: "ctr_1-AB123",
 *     groupId: "grp_12345",
 *     productId: "prd_123456",
 *     ruleFormat: "v2022-10-18",
 *     type: "MICROSERVICES",
 * });
 * ```
 *
 * ## Attributes reference
 *
 * This resource returns these attributes:
 *
 * * `ruleErrors` - Rule's validation errors. You need to resolve returned errors, as they block an activation.
 * * `ruleWarnings` - Rule's validation warnings. You can activate a version that yields less severe warnings.
 * * `latestVersion` - Returns the most recent version of the include.
 * * `stagingVersion` - The include version currently activated on the staging network.
 * * `productionVersion` - The include version currently activated on the production network.
 */
export class PropertyInclude extends pulumi.CustomResource {
    /**
     * Get an existing PropertyInclude resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyIncludeState, opts?: pulumi.CustomResourceOptions): PropertyInclude {
        return new PropertyInclude(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/propertyInclude:PropertyInclude';

    /**
     * Returns true if the given object is an instance of PropertyInclude.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PropertyInclude {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PropertyInclude.__pulumiType;
    }

    /**
     * (Required) A contract's unique ID, including the optional `ctr_` prefix.
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * (Required) A group's unique ID, including the optional `grp_` prefix.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Specifies the most recent version of the include
     */
    public /*out*/ readonly latestVersion!: pulumi.Output<number>;
    /**
     * (Required) The descriptive name for the include.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The product assigned to the include
     */
    public readonly productId!: pulumi.Output<string | undefined>;
    /**
     * The most recent version to be activated to the production network
     */
    public /*out*/ readonly productionVersion!: pulumi.Output<string>;
    /**
     * Rule validation errors
     */
    public /*out*/ readonly ruleErrors!: pulumi.Output<string>;
    /**
     * (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
     */
    public readonly ruleFormat!: pulumi.Output<string>;
    /**
     * Rule validation warnings
     */
    public /*out*/ readonly ruleWarnings!: pulumi.Output<string>;
    /**
     * (Optional) Include's rules as JSON.
     */
    public readonly rules!: pulumi.Output<string>;
    /**
     * The most recent version to be activated to the staging network
     */
    public /*out*/ readonly stagingVersion!: pulumi.Output<string>;
    /**
     * (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PropertyInclude resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PropertyIncludeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyIncludeArgs | PropertyIncludeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PropertyIncludeState | undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["productionVersion"] = state ? state.productionVersion : undefined;
            resourceInputs["ruleErrors"] = state ? state.ruleErrors : undefined;
            resourceInputs["ruleFormat"] = state ? state.ruleFormat : undefined;
            resourceInputs["ruleWarnings"] = state ? state.ruleWarnings : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["stagingVersion"] = state ? state.stagingVersion : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PropertyIncludeArgs | undefined;
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.ruleFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleFormat'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["ruleFormat"] = args ? args.ruleFormat : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["productionVersion"] = undefined /*out*/;
            resourceInputs["ruleErrors"] = undefined /*out*/;
            resourceInputs["ruleWarnings"] = undefined /*out*/;
            resourceInputs["stagingVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PropertyInclude.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PropertyInclude resources.
 */
export interface PropertyIncludeState {
    /**
     * (Required) A contract's unique ID, including the optional `ctr_` prefix.
     */
    contractId?: pulumi.Input<string>;
    /**
     * (Required) A group's unique ID, including the optional `grp_` prefix.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Specifies the most recent version of the include
     */
    latestVersion?: pulumi.Input<number>;
    /**
     * (Required) The descriptive name for the include.
     */
    name?: pulumi.Input<string>;
    /**
     * The product assigned to the include
     */
    productId?: pulumi.Input<string>;
    /**
     * The most recent version to be activated to the production network
     */
    productionVersion?: pulumi.Input<string>;
    /**
     * Rule validation errors
     */
    ruleErrors?: pulumi.Input<string>;
    /**
     * (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
     */
    ruleFormat?: pulumi.Input<string>;
    /**
     * Rule validation warnings
     */
    ruleWarnings?: pulumi.Input<string>;
    /**
     * (Optional) Include's rules as JSON.
     */
    rules?: pulumi.Input<string>;
    /**
     * The most recent version to be activated to the staging network
     */
    stagingVersion?: pulumi.Input<string>;
    /**
     * (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PropertyInclude resource.
 */
export interface PropertyIncludeArgs {
    /**
     * (Required) A contract's unique ID, including the optional `ctr_` prefix.
     */
    contractId: pulumi.Input<string>;
    /**
     * (Required) A group's unique ID, including the optional `grp_` prefix.
     */
    groupId: pulumi.Input<string>;
    /**
     * (Required) The descriptive name for the include.
     */
    name?: pulumi.Input<string>;
    /**
     * The product assigned to the include
     */
    productId?: pulumi.Input<string>;
    /**
     * (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
     */
    ruleFormat: pulumi.Input<string>;
    /**
     * (Optional) Include's rules as JSON.
     */
    rules?: pulumi.Input<string>;
    /**
     * (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     */
    type: pulumi.Input<string>;
}
