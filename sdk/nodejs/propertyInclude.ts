// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PropertyInclude extends pulumi.CustomResource {
    /**
     * Get an existing PropertyInclude resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyIncludeState, opts?: pulumi.CustomResourceOptions): PropertyInclude {
        return new PropertyInclude(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/propertyInclude:PropertyInclude';

    /**
     * Returns true if the given object is an instance of PropertyInclude.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PropertyInclude {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PropertyInclude.__pulumiType;
    }

    /**
     * ID of the include in the Identity and Access Management API.
     */
    declare public /*out*/ readonly assetId: pulumi.Output<string>;
    /**
     * Identifies the contract to which the include is assigned
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * Identifies the group to which the include is assigned
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * Specifies the most recent version of the include
     */
    declare public /*out*/ readonly latestVersion: pulumi.Output<number>;
    /**
     * A descriptive name for the include
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The product assigned to the include
     */
    declare public readonly productId: pulumi.Output<string | undefined>;
    /**
     * The most recent version to be activated to the production network
     */
    declare public /*out*/ readonly productionVersion: pulumi.Output<string>;
    /**
     * Rule validation errors
     */
    declare public /*out*/ readonly ruleErrors: pulumi.Output<string>;
    /**
     * Indicates the versioned set of features and criteria
     */
    declare public readonly ruleFormat: pulumi.Output<string>;
    /**
     * Rule validation warnings
     */
    declare public /*out*/ readonly ruleWarnings: pulumi.Output<string>;
    /**
     * Property Rules as JSON
     */
    declare public readonly rules: pulumi.Output<string>;
    /**
     * The most recent version to be activated to the staging network
     */
    declare public /*out*/ readonly stagingVersion: pulumi.Output<string>;
    /**
     * Specifies the type of the include, either 'MICROSERVICES' or 'COMMON_SETTINGS'
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a PropertyInclude resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PropertyIncludeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyIncludeArgs | PropertyIncludeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PropertyIncludeState | undefined;
            resourceInputs["assetId"] = state?.assetId;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["latestVersion"] = state?.latestVersion;
            resourceInputs["name"] = state?.name;
            resourceInputs["productId"] = state?.productId;
            resourceInputs["productionVersion"] = state?.productionVersion;
            resourceInputs["ruleErrors"] = state?.ruleErrors;
            resourceInputs["ruleFormat"] = state?.ruleFormat;
            resourceInputs["ruleWarnings"] = state?.ruleWarnings;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["stagingVersion"] = state?.stagingVersion;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as PropertyIncludeArgs | undefined;
            if (args?.contractId === undefined && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.ruleFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleFormat'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["name"] = args?.name;
            resourceInputs["productId"] = args?.productId;
            resourceInputs["ruleFormat"] = args?.ruleFormat;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["type"] = args?.type;
            resourceInputs["assetId"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["productionVersion"] = undefined /*out*/;
            resourceInputs["ruleErrors"] = undefined /*out*/;
            resourceInputs["ruleWarnings"] = undefined /*out*/;
            resourceInputs["stagingVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PropertyInclude.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PropertyInclude resources.
 */
export interface PropertyIncludeState {
    /**
     * ID of the include in the Identity and Access Management API.
     */
    assetId?: pulumi.Input<string>;
    /**
     * Identifies the contract to which the include is assigned
     */
    contractId?: pulumi.Input<string>;
    /**
     * Identifies the group to which the include is assigned
     */
    groupId?: pulumi.Input<string>;
    /**
     * Specifies the most recent version of the include
     */
    latestVersion?: pulumi.Input<number>;
    /**
     * A descriptive name for the include
     */
    name?: pulumi.Input<string>;
    /**
     * The product assigned to the include
     */
    productId?: pulumi.Input<string>;
    /**
     * The most recent version to be activated to the production network
     */
    productionVersion?: pulumi.Input<string>;
    /**
     * Rule validation errors
     */
    ruleErrors?: pulumi.Input<string>;
    /**
     * Indicates the versioned set of features and criteria
     */
    ruleFormat?: pulumi.Input<string>;
    /**
     * Rule validation warnings
     */
    ruleWarnings?: pulumi.Input<string>;
    /**
     * Property Rules as JSON
     */
    rules?: pulumi.Input<string>;
    /**
     * The most recent version to be activated to the staging network
     */
    stagingVersion?: pulumi.Input<string>;
    /**
     * Specifies the type of the include, either 'MICROSERVICES' or 'COMMON_SETTINGS'
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PropertyInclude resource.
 */
export interface PropertyIncludeArgs {
    /**
     * Identifies the contract to which the include is assigned
     */
    contractId: pulumi.Input<string>;
    /**
     * Identifies the group to which the include is assigned
     */
    groupId: pulumi.Input<string>;
    /**
     * A descriptive name for the include
     */
    name?: pulumi.Input<string>;
    /**
     * The product assigned to the include
     */
    productId?: pulumi.Input<string>;
    /**
     * Indicates the versioned set of features and criteria
     */
    ruleFormat: pulumi.Input<string>;
    /**
     * Property Rules as JSON
     */
    rules?: pulumi.Input<string>;
    /**
     * Specifies the type of the include, either 'MICROSERVICES' or 'COMMON_SETTINGS'
     */
    type: pulumi.Input<string>;
}
