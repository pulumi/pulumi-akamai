// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GtmDatacenter extends pulumi.CustomResource {
    /**
     * Get an existing GtmDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmDatacenterState, opts?: pulumi.CustomResourceOptions): GtmDatacenter {
        return new GtmDatacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmDatacenter:GtmDatacenter';

    /**
     * Returns true if the given object is an instance of GtmDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmDatacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmDatacenter.__pulumiType;
    }

    declare public readonly city: pulumi.Output<string | undefined>;
    declare public readonly cloneOf: pulumi.Output<number | undefined>;
    declare public readonly cloudServerHostHeaderOverride: pulumi.Output<boolean | undefined>;
    declare public readonly cloudServerTargeting: pulumi.Output<boolean | undefined>;
    declare public readonly continent: pulumi.Output<string | undefined>;
    declare public readonly country: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly datacenterId: pulumi.Output<number>;
    declare public readonly defaultLoadObject: pulumi.Output<outputs.GtmDatacenterDefaultLoadObject | undefined>;
    declare public readonly domain: pulumi.Output<string>;
    declare public readonly latitude: pulumi.Output<number | undefined>;
    declare public readonly longitude: pulumi.Output<number | undefined>;
    declare public readonly nickname: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly pingInterval: pulumi.Output<number>;
    declare public /*out*/ readonly pingPacketSize: pulumi.Output<number>;
    declare public /*out*/ readonly scorePenalty: pulumi.Output<number>;
    declare public /*out*/ readonly servermonitorLivenessCount: pulumi.Output<number>;
    declare public /*out*/ readonly servermonitorLoadCount: pulumi.Output<number>;
    declare public /*out*/ readonly servermonitorPool: pulumi.Output<string>;
    declare public readonly stateOrProvince: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly virtual: pulumi.Output<boolean>;
    declare public readonly waitOnComplete: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmDatacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmDatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmDatacenterArgs | GtmDatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmDatacenterState | undefined;
            resourceInputs["city"] = state?.city;
            resourceInputs["cloneOf"] = state?.cloneOf;
            resourceInputs["cloudServerHostHeaderOverride"] = state?.cloudServerHostHeaderOverride;
            resourceInputs["cloudServerTargeting"] = state?.cloudServerTargeting;
            resourceInputs["continent"] = state?.continent;
            resourceInputs["country"] = state?.country;
            resourceInputs["datacenterId"] = state?.datacenterId;
            resourceInputs["defaultLoadObject"] = state?.defaultLoadObject;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["latitude"] = state?.latitude;
            resourceInputs["longitude"] = state?.longitude;
            resourceInputs["nickname"] = state?.nickname;
            resourceInputs["pingInterval"] = state?.pingInterval;
            resourceInputs["pingPacketSize"] = state?.pingPacketSize;
            resourceInputs["scorePenalty"] = state?.scorePenalty;
            resourceInputs["servermonitorLivenessCount"] = state?.servermonitorLivenessCount;
            resourceInputs["servermonitorLoadCount"] = state?.servermonitorLoadCount;
            resourceInputs["servermonitorPool"] = state?.servermonitorPool;
            resourceInputs["stateOrProvince"] = state?.stateOrProvince;
            resourceInputs["virtual"] = state?.virtual;
            resourceInputs["waitOnComplete"] = state?.waitOnComplete;
        } else {
            const args = argsOrState as GtmDatacenterArgs | undefined;
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["city"] = args?.city;
            resourceInputs["cloneOf"] = args?.cloneOf;
            resourceInputs["cloudServerHostHeaderOverride"] = args?.cloudServerHostHeaderOverride;
            resourceInputs["cloudServerTargeting"] = args?.cloudServerTargeting;
            resourceInputs["continent"] = args?.continent;
            resourceInputs["country"] = args?.country;
            resourceInputs["defaultLoadObject"] = args?.defaultLoadObject;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["latitude"] = args?.latitude;
            resourceInputs["longitude"] = args?.longitude;
            resourceInputs["nickname"] = args?.nickname;
            resourceInputs["stateOrProvince"] = args?.stateOrProvince;
            resourceInputs["waitOnComplete"] = args?.waitOnComplete;
            resourceInputs["datacenterId"] = undefined /*out*/;
            resourceInputs["pingInterval"] = undefined /*out*/;
            resourceInputs["pingPacketSize"] = undefined /*out*/;
            resourceInputs["scorePenalty"] = undefined /*out*/;
            resourceInputs["servermonitorLivenessCount"] = undefined /*out*/;
            resourceInputs["servermonitorLoadCount"] = undefined /*out*/;
            resourceInputs["servermonitorPool"] = undefined /*out*/;
            resourceInputs["virtual"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmDatacenter:GtmDatacenter" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmDatacenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmDatacenter resources.
 */
export interface GtmDatacenterState {
    city?: pulumi.Input<string>;
    cloneOf?: pulumi.Input<number>;
    cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    cloudServerTargeting?: pulumi.Input<boolean>;
    continent?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    datacenterId?: pulumi.Input<number>;
    defaultLoadObject?: pulumi.Input<inputs.GtmDatacenterDefaultLoadObject>;
    domain?: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    nickname?: pulumi.Input<string>;
    pingInterval?: pulumi.Input<number>;
    pingPacketSize?: pulumi.Input<number>;
    scorePenalty?: pulumi.Input<number>;
    servermonitorLivenessCount?: pulumi.Input<number>;
    servermonitorLoadCount?: pulumi.Input<number>;
    servermonitorPool?: pulumi.Input<string>;
    stateOrProvince?: pulumi.Input<string>;
    virtual?: pulumi.Input<boolean>;
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmDatacenter resource.
 */
export interface GtmDatacenterArgs {
    city?: pulumi.Input<string>;
    cloneOf?: pulumi.Input<number>;
    cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    cloudServerTargeting?: pulumi.Input<boolean>;
    continent?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    defaultLoadObject?: pulumi.Input<inputs.GtmDatacenterDefaultLoadObject>;
    domain: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    nickname?: pulumi.Input<string>;
    stateOrProvince?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}
