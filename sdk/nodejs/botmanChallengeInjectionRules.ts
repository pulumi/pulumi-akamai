// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BotmanChallengeInjectionRules extends pulumi.CustomResource {
    /**
     * Get an existing BotmanChallengeInjectionRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotmanChallengeInjectionRulesState, opts?: pulumi.CustomResourceOptions): BotmanChallengeInjectionRules {
        return new BotmanChallengeInjectionRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/botmanChallengeInjectionRules:BotmanChallengeInjectionRules';

    /**
     * Returns true if the given object is an instance of BotmanChallengeInjectionRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotmanChallengeInjectionRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotmanChallengeInjectionRules.__pulumiType;
    }

    declare public readonly challengeInjectionRules: pulumi.Output<string>;
    declare public readonly configId: pulumi.Output<number>;

    /**
     * Create a BotmanChallengeInjectionRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotmanChallengeInjectionRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotmanChallengeInjectionRulesArgs | BotmanChallengeInjectionRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotmanChallengeInjectionRulesState | undefined;
            resourceInputs["challengeInjectionRules"] = state?.challengeInjectionRules;
            resourceInputs["configId"] = state?.configId;
        } else {
            const args = argsOrState as BotmanChallengeInjectionRulesArgs | undefined;
            if (args?.challengeInjectionRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'challengeInjectionRules'");
            }
            if (args?.configId === undefined && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            resourceInputs["challengeInjectionRules"] = args?.challengeInjectionRules;
            resourceInputs["configId"] = args?.configId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BotmanChallengeInjectionRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BotmanChallengeInjectionRules resources.
 */
export interface BotmanChallengeInjectionRulesState {
    challengeInjectionRules?: pulumi.Input<string>;
    configId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BotmanChallengeInjectionRules resource.
 */
export interface BotmanChallengeInjectionRulesArgs {
    challengeInjectionRules: pulumi.Input<string>;
    configId: pulumi.Input<number>;
}
