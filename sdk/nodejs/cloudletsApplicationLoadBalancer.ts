// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudletsApplicationLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing CloudletsApplicationLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudletsApplicationLoadBalancerState, opts?: pulumi.CustomResourceOptions): CloudletsApplicationLoadBalancer {
        return new CloudletsApplicationLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer';

    /**
     * Returns true if the given object is an instance of CloudletsApplicationLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudletsApplicationLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudletsApplicationLoadBalancer.__pulumiType;
    }

    /**
     * The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
     */
    public readonly balancingType!: pulumi.Output<string | undefined>;
    /**
     * The object containing information on conditional origins being used as data centers for an Application Load Balancer
     * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
     * application load balancer configuration.
     */
    public readonly dataCenters!: pulumi.Output<outputs.CloudletsApplicationLoadBalancerDataCenter[]>;
    /**
     * The load balancer configuration version description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly livenessSettings!: pulumi.Output<outputs.CloudletsApplicationLoadBalancerLivenessSettings | undefined>;
    /**
     * The load balancer configuration description
     */
    public readonly originDescription!: pulumi.Output<string | undefined>;
    /**
     * The conditional origin's unique identifier
     */
    public readonly originId!: pulumi.Output<string>;
    /**
     * The load balancer configuration version
     */
    public /*out*/ readonly version!: pulumi.Output<number>;
    /**
     * Describes warnings during activation of load balancer configuration
     */
    public /*out*/ readonly warnings!: pulumi.Output<string>;

    /**
     * Create a CloudletsApplicationLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudletsApplicationLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudletsApplicationLoadBalancerArgs | CloudletsApplicationLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudletsApplicationLoadBalancerState | undefined;
            resourceInputs["balancingType"] = state ? state.balancingType : undefined;
            resourceInputs["dataCenters"] = state ? state.dataCenters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["livenessSettings"] = state ? state.livenessSettings : undefined;
            resourceInputs["originDescription"] = state ? state.originDescription : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["warnings"] = state ? state.warnings : undefined;
        } else {
            const args = argsOrState as CloudletsApplicationLoadBalancerArgs | undefined;
            if ((!args || args.dataCenters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCenters'");
            }
            if ((!args || args.originId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originId'");
            }
            resourceInputs["balancingType"] = args ? args.balancingType : undefined;
            resourceInputs["dataCenters"] = args ? args.dataCenters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["livenessSettings"] = args ? args.livenessSettings : undefined;
            resourceInputs["originDescription"] = args ? args.originDescription : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudletsApplicationLoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudletsApplicationLoadBalancer resources.
 */
export interface CloudletsApplicationLoadBalancerState {
    /**
     * The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
     */
    balancingType?: pulumi.Input<string>;
    /**
     * The object containing information on conditional origins being used as data centers for an Application Load Balancer
     * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
     * application load balancer configuration.
     */
    dataCenters?: pulumi.Input<pulumi.Input<inputs.CloudletsApplicationLoadBalancerDataCenter>[]>;
    /**
     * The load balancer configuration version description
     */
    description?: pulumi.Input<string>;
    livenessSettings?: pulumi.Input<inputs.CloudletsApplicationLoadBalancerLivenessSettings>;
    /**
     * The load balancer configuration description
     */
    originDescription?: pulumi.Input<string>;
    /**
     * The conditional origin's unique identifier
     */
    originId?: pulumi.Input<string>;
    /**
     * The load balancer configuration version
     */
    version?: pulumi.Input<number>;
    /**
     * Describes warnings during activation of load balancer configuration
     */
    warnings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudletsApplicationLoadBalancer resource.
 */
export interface CloudletsApplicationLoadBalancerArgs {
    /**
     * The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
     */
    balancingType?: pulumi.Input<string>;
    /**
     * The object containing information on conditional origins being used as data centers for an Application Load Balancer
     * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
     * application load balancer configuration.
     */
    dataCenters: pulumi.Input<pulumi.Input<inputs.CloudletsApplicationLoadBalancerDataCenter>[]>;
    /**
     * The load balancer configuration version description
     */
    description?: pulumi.Input<string>;
    livenessSettings?: pulumi.Input<inputs.CloudletsApplicationLoadBalancerLivenessSettings>;
    /**
     * The load balancer configuration description
     */
    originDescription?: pulumi.Input<string>;
    /**
     * The conditional origin's unique identifier
     */
    originId: pulumi.Input<string>;
}
