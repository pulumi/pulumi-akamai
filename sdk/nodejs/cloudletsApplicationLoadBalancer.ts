// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use the `akamai.CloudletsApplicationLoadBalancer` resource to create the Application Load Balancer Cloudlet configuration. The Application Load Balancer Cloudlet provides intelligent, scalable traffic management across physical, virtual, and cloud-hosted data centers without requiring the origin to send load feedback. This Cloudlet can automatically detect load conditions and route traffic to the optimal data source while maintaining custom routing policies and consistent visitor session behavior for your visitors.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const example = new akamai.CloudletsApplicationLoadBalancer("example", {
 *     balancingType: "WEIGHTED",
 *     dataCenters: [{
 *         city: "Boston",
 *         cloudServerHostHeaderOverride: false,
 *         cloudService: true,
 *         continent: "NA",
 *         country: "US",
 *         hostname: "example-hostname",
 *         latitude: 102.78108,
 *         livenessHosts: ["example"],
 *         longitude: -116.07064,
 *         originId: "alb_test_1",
 *         percent: 100,
 *         stateOrProvince: "MA",
 *     }],
 *     description: "application_load_balancer description",
 *     livenessSettings: {
 *         additionalHeaders: {
 *             additional_headers: "123",
 *         },
 *         hostHeader: "header",
 *         interval: 10,
 *         path: "/status",
 *         port: 1234,
 *         protocol: "HTTP",
 *         requestString: "test_request_string",
 *         responseString: "test_response_string",
 *         timeout: 60,
 *     },
 *     originId: "alb_test_1",
 * });
 * ```
 *
 * ## Import
 *
 * Basic usagehcl resource "akamai_cloudlets_application_load_balancer" "example" {
 *
 * # (resource arguments)
 *
 *  } You can import your Akamai Application Load Balancer configuration using an origin ID. For example
 *
 * ```sh
 *  $ pulumi import akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer example alb_test_1
 * ```
 */
export class CloudletsApplicationLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing CloudletsApplicationLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudletsApplicationLoadBalancerState, opts?: pulumi.CustomResourceOptions): CloudletsApplicationLoadBalancer {
        return new CloudletsApplicationLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer';

    /**
     * Returns true if the given object is an instance of CloudletsApplicationLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudletsApplicationLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudletsApplicationLoadBalancer.__pulumiType;
    }

    /**
     * The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
     */
    public readonly balancingType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
     */
    public readonly dataCenters!: pulumi.Output<outputs.CloudletsApplicationLoadBalancerDataCenter[]>;
    /**
     * The description of the load balancing configuration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the health of each load balanced data center defined in the data center list.
     */
    public readonly livenessSettings!: pulumi.Output<outputs.CloudletsApplicationLoadBalancerLivenessSettings | undefined>;
    /**
     * The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     */
    public readonly originId!: pulumi.Output<string>;
    /**
     * The version number of the load balancing configuration.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;
    /**
     * A list of warnings that occurred during the activation of the load balancing configuration.
     */
    public /*out*/ readonly warnings!: pulumi.Output<string>;

    /**
     * Create a CloudletsApplicationLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudletsApplicationLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudletsApplicationLoadBalancerArgs | CloudletsApplicationLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudletsApplicationLoadBalancerState | undefined;
            resourceInputs["balancingType"] = state ? state.balancingType : undefined;
            resourceInputs["dataCenters"] = state ? state.dataCenters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["livenessSettings"] = state ? state.livenessSettings : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["warnings"] = state ? state.warnings : undefined;
        } else {
            const args = argsOrState as CloudletsApplicationLoadBalancerArgs | undefined;
            if ((!args || args.dataCenters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCenters'");
            }
            if ((!args || args.originId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originId'");
            }
            resourceInputs["balancingType"] = args ? args.balancingType : undefined;
            resourceInputs["dataCenters"] = args ? args.dataCenters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["livenessSettings"] = args ? args.livenessSettings : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudletsApplicationLoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudletsApplicationLoadBalancer resources.
 */
export interface CloudletsApplicationLoadBalancerState {
    /**
     * The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
     */
    balancingType?: pulumi.Input<string>;
    /**
     * Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
     */
    dataCenters?: pulumi.Input<pulumi.Input<inputs.CloudletsApplicationLoadBalancerDataCenter>[]>;
    /**
     * The description of the load balancing configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the health of each load balanced data center defined in the data center list.
     */
    livenessSettings?: pulumi.Input<inputs.CloudletsApplicationLoadBalancerLivenessSettings>;
    /**
     * The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     */
    originId?: pulumi.Input<string>;
    /**
     * The version number of the load balancing configuration.
     */
    version?: pulumi.Input<number>;
    /**
     * A list of warnings that occurred during the activation of the load balancing configuration.
     */
    warnings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudletsApplicationLoadBalancer resource.
 */
export interface CloudletsApplicationLoadBalancerArgs {
    /**
     * The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
     */
    balancingType?: pulumi.Input<string>;
    /**
     * Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
     */
    dataCenters: pulumi.Input<pulumi.Input<inputs.CloudletsApplicationLoadBalancerDataCenter>[]>;
    /**
     * The description of the load balancing configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the health of each load balanced data center defined in the data center list.
     */
    livenessSettings?: pulumi.Input<inputs.CloudletsApplicationLoadBalancerLivenessSettings>;
    /**
     * The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     */
    originId: pulumi.Input<string>;
}
