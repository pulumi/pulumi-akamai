// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamApiClient extends pulumi.CustomResource {
    /**
     * Get an existing IamApiClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamApiClientState, opts?: pulumi.CustomResourceOptions): IamApiClient {
        return new IamApiClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/iamApiClient:IamApiClient';

    /**
     * Returns true if the given object is an instance of IamApiClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamApiClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamApiClient.__pulumiType;
    }

    /**
     * The part of the client secret that identifies your API client and lets you access applications and resources.
     */
    public /*out*/ readonly accessToken!: pulumi.Output<string>;
    /**
     * Specifies activities available for the API client.
     */
    public /*out*/ readonly actions!: pulumi.Output<outputs.IamApiClientActions>;
    /**
     * The number of credentials active for the API client. When the count is zero, you can delete the API client without
     * interruption.
     */
    public /*out*/ readonly activeCredentialCount!: pulumi.Output<number>;
    /**
     * Enables the API client to manage more than one account.
     */
    public readonly allowAccountSwitch!: pulumi.Output<boolean>;
    /**
     * The APIs the API client can access.
     */
    public readonly apiAccess!: pulumi.Output<outputs.IamApiClientApiAccess>;
    /**
     * The API client's valid users. When the 'client_type' is either 'CLIENT' or 'USER_CLIENT', you need to specify a single
     * username in an array.
     */
    public readonly authorizedUsers!: pulumi.Output<string[]>;
    /**
     * The base URL for the service.
     */
    public /*out*/ readonly baseUrl!: pulumi.Output<string>;
    /**
     * Whether the API client can create a credential for a new API client. The default is false.
     */
    public readonly canAutoCreateCredential!: pulumi.Output<boolean>;
    /**
     * A human-readable description of the API client.
     */
    public readonly clientDescription!: pulumi.Output<string>;
    /**
     * A unique identifier for the API client.
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * A human-readable name for the API client.
     */
    public readonly clientName!: pulumi.Output<string>;
    /**
     * Specifies the API client's ownership and credential management. 'CLIENT' indicates the creator owns and manages the
     * credentials. 'USER_CLIENT' indicates another user owns the client and manages the credentials.
     */
    public readonly clientType!: pulumi.Output<string>;
    /**
     * The user who created the API client.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The ISO 8601 timestamp indicating when the API client was created.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly credential!: pulumi.Output<outputs.IamApiClientCredential>;
    /**
     * Specifies the API client's group access.
     */
    public readonly groupAccess!: pulumi.Output<outputs.IamApiClientGroupAccess>;
    /**
     * Specifies the API client's IP list restriction.
     */
    public readonly ipAcl!: pulumi.Output<outputs.IamApiClientIpAcl | undefined>;
    /**
     * Whether to lock or unlock the API client.
     */
    public readonly lock!: pulumi.Output<boolean>;
    /**
     * Email addresses to notify users when credentials expire.
     */
    public readonly notificationEmails!: pulumi.Output<string[]>;
    /**
     * Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `apiName` of
     * `CCU API`.
     */
    public readonly purgeOptions!: pulumi.Output<outputs.IamApiClientPurgeOptions | undefined>;

    /**
     * Create a IamApiClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamApiClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamApiClientArgs | IamApiClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamApiClientState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["activeCredentialCount"] = state ? state.activeCredentialCount : undefined;
            resourceInputs["allowAccountSwitch"] = state ? state.allowAccountSwitch : undefined;
            resourceInputs["apiAccess"] = state ? state.apiAccess : undefined;
            resourceInputs["authorizedUsers"] = state ? state.authorizedUsers : undefined;
            resourceInputs["baseUrl"] = state ? state.baseUrl : undefined;
            resourceInputs["canAutoCreateCredential"] = state ? state.canAutoCreateCredential : undefined;
            resourceInputs["clientDescription"] = state ? state.clientDescription : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientName"] = state ? state.clientName : undefined;
            resourceInputs["clientType"] = state ? state.clientType : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
            resourceInputs["groupAccess"] = state ? state.groupAccess : undefined;
            resourceInputs["ipAcl"] = state ? state.ipAcl : undefined;
            resourceInputs["lock"] = state ? state.lock : undefined;
            resourceInputs["notificationEmails"] = state ? state.notificationEmails : undefined;
            resourceInputs["purgeOptions"] = state ? state.purgeOptions : undefined;
        } else {
            const args = argsOrState as IamApiClientArgs | undefined;
            if ((!args || args.apiAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiAccess'");
            }
            if ((!args || args.authorizedUsers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedUsers'");
            }
            if ((!args || args.clientName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientName'");
            }
            if ((!args || args.clientType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientType'");
            }
            if ((!args || args.credential === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credential'");
            }
            if ((!args || args.groupAccess === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupAccess'");
            }
            resourceInputs["allowAccountSwitch"] = args ? args.allowAccountSwitch : undefined;
            resourceInputs["apiAccess"] = args ? args.apiAccess : undefined;
            resourceInputs["authorizedUsers"] = args ? args.authorizedUsers : undefined;
            resourceInputs["canAutoCreateCredential"] = args ? args.canAutoCreateCredential : undefined;
            resourceInputs["clientDescription"] = args ? args.clientDescription : undefined;
            resourceInputs["clientName"] = args ? args.clientName : undefined;
            resourceInputs["clientType"] = args ? args.clientType : undefined;
            resourceInputs["credential"] = args ? args.credential : undefined;
            resourceInputs["groupAccess"] = args ? args.groupAccess : undefined;
            resourceInputs["ipAcl"] = args ? args.ipAcl : undefined;
            resourceInputs["lock"] = args ? args.lock : undefined;
            resourceInputs["notificationEmails"] = args ? args.notificationEmails : undefined;
            resourceInputs["purgeOptions"] = args ? args.purgeOptions : undefined;
            resourceInputs["accessToken"] = undefined /*out*/;
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["activeCredentialCount"] = undefined /*out*/;
            resourceInputs["baseUrl"] = undefined /*out*/;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "baseUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IamApiClient.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamApiClient resources.
 */
export interface IamApiClientState {
    /**
     * The part of the client secret that identifies your API client and lets you access applications and resources.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Specifies activities available for the API client.
     */
    actions?: pulumi.Input<inputs.IamApiClientActions>;
    /**
     * The number of credentials active for the API client. When the count is zero, you can delete the API client without
     * interruption.
     */
    activeCredentialCount?: pulumi.Input<number>;
    /**
     * Enables the API client to manage more than one account.
     */
    allowAccountSwitch?: pulumi.Input<boolean>;
    /**
     * The APIs the API client can access.
     */
    apiAccess?: pulumi.Input<inputs.IamApiClientApiAccess>;
    /**
     * The API client's valid users. When the 'client_type' is either 'CLIENT' or 'USER_CLIENT', you need to specify a single
     * username in an array.
     */
    authorizedUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base URL for the service.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Whether the API client can create a credential for a new API client. The default is false.
     */
    canAutoCreateCredential?: pulumi.Input<boolean>;
    /**
     * A human-readable description of the API client.
     */
    clientDescription?: pulumi.Input<string>;
    /**
     * A unique identifier for the API client.
     */
    clientId?: pulumi.Input<string>;
    /**
     * A human-readable name for the API client.
     */
    clientName?: pulumi.Input<string>;
    /**
     * Specifies the API client's ownership and credential management. 'CLIENT' indicates the creator owns and manages the
     * credentials. 'USER_CLIENT' indicates another user owns the client and manages the credentials.
     */
    clientType?: pulumi.Input<string>;
    /**
     * The user who created the API client.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The ISO 8601 timestamp indicating when the API client was created.
     */
    createdDate?: pulumi.Input<string>;
    credential?: pulumi.Input<inputs.IamApiClientCredential>;
    /**
     * Specifies the API client's group access.
     */
    groupAccess?: pulumi.Input<inputs.IamApiClientGroupAccess>;
    /**
     * Specifies the API client's IP list restriction.
     */
    ipAcl?: pulumi.Input<inputs.IamApiClientIpAcl>;
    /**
     * Whether to lock or unlock the API client.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * Email addresses to notify users when credentials expire.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `apiName` of
     * `CCU API`.
     */
    purgeOptions?: pulumi.Input<inputs.IamApiClientPurgeOptions>;
}

/**
 * The set of arguments for constructing a IamApiClient resource.
 */
export interface IamApiClientArgs {
    /**
     * Enables the API client to manage more than one account.
     */
    allowAccountSwitch?: pulumi.Input<boolean>;
    /**
     * The APIs the API client can access.
     */
    apiAccess: pulumi.Input<inputs.IamApiClientApiAccess>;
    /**
     * The API client's valid users. When the 'client_type' is either 'CLIENT' or 'USER_CLIENT', you need to specify a single
     * username in an array.
     */
    authorizedUsers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the API client can create a credential for a new API client. The default is false.
     */
    canAutoCreateCredential?: pulumi.Input<boolean>;
    /**
     * A human-readable description of the API client.
     */
    clientDescription?: pulumi.Input<string>;
    /**
     * A human-readable name for the API client.
     */
    clientName: pulumi.Input<string>;
    /**
     * Specifies the API client's ownership and credential management. 'CLIENT' indicates the creator owns and manages the
     * credentials. 'USER_CLIENT' indicates another user owns the client and manages the credentials.
     */
    clientType: pulumi.Input<string>;
    credential: pulumi.Input<inputs.IamApiClientCredential>;
    /**
     * Specifies the API client's group access.
     */
    groupAccess: pulumi.Input<inputs.IamApiClientGroupAccess>;
    /**
     * Specifies the API client's IP list restriction.
     */
    ipAcl?: pulumi.Input<inputs.IamApiClientIpAcl>;
    /**
     * Whether to lock or unlock the API client.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * Email addresses to notify users when credentials expire.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the API client to access the Fast Purge API. Provide it only if the `apis` attribute includes an `apiName` of
     * `CCU API`.
     */
    purgeOptions?: pulumi.Input<inputs.IamApiClientPurgeOptions>;
}
