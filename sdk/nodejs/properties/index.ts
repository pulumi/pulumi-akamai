// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CpCodeArgs, CpCodeState } from "./cpCode";
export type CpCode = import("./cpCode").CpCode;
export const CpCode: typeof import("./cpCode").CpCode = null as any;
utilities.lazyLoad(exports, ["CpCode"], () => require("./cpCode"));

export { EdgeHostNameArgs, EdgeHostNameState } from "./edgeHostName";
export type EdgeHostName = import("./edgeHostName").EdgeHostName;
export const EdgeHostName: typeof import("./edgeHostName").EdgeHostName = null as any;
utilities.lazyLoad(exports, ["EdgeHostName"], () => require("./edgeHostName"));

export { GetActivationArgs, GetActivationResult, GetActivationOutputArgs } from "./getActivation";
export const getActivation: typeof import("./getActivation").getActivation = null as any;
export const getActivationOutput: typeof import("./getActivation").getActivationOutput = null as any;
utilities.lazyLoad(exports, ["getActivation","getActivationOutput"], () => require("./getActivation"));

export { GetCpCodeArgs, GetCpCodeResult, GetCpCodeOutputArgs } from "./getCpCode";
export const getCpCode: typeof import("./getCpCode").getCpCode = null as any;
export const getCpCodeOutput: typeof import("./getCpCode").getCpCodeOutput = null as any;
utilities.lazyLoad(exports, ["getCpCode","getCpCodeOutput"], () => require("./getCpCode"));

export { GetPropertyArgs, GetPropertyResult, GetPropertyOutputArgs } from "./getProperty";
export const getProperty: typeof import("./getProperty").getProperty = null as any;
export const getPropertyOutput: typeof import("./getProperty").getPropertyOutput = null as any;
utilities.lazyLoad(exports, ["getProperty","getPropertyOutput"], () => require("./getProperty"));

export { GetPropertyRulesArgs, GetPropertyRulesResult, GetPropertyRulesOutputArgs } from "./getPropertyRules";
export const getPropertyRules: typeof import("./getPropertyRules").getPropertyRules = null as any;
export const getPropertyRulesOutput: typeof import("./getPropertyRules").getPropertyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRules","getPropertyRulesOutput"], () => require("./getPropertyRules"));

export { PropertyArgs, PropertyState } from "./property";
export type Property = import("./property").Property;
export const Property: typeof import("./property").Property = null as any;
utilities.lazyLoad(exports, ["Property"], () => require("./property"));

export { PropertyActivationArgs, PropertyActivationState } from "./propertyActivation";
export type PropertyActivation = import("./propertyActivation").PropertyActivation;
export const PropertyActivation: typeof import("./propertyActivation").PropertyActivation = null as any;
utilities.lazyLoad(exports, ["PropertyActivation"], () => require("./propertyActivation"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "akamai:properties/cpCode:CpCode":
                return new CpCode(name, <any>undefined, { urn })
            case "akamai:properties/edgeHostName:EdgeHostName":
                return new EdgeHostName(name, <any>undefined, { urn })
            case "akamai:properties/property:Property":
                return new Property(name, <any>undefined, { urn })
            case "akamai:properties/propertyActivation:PropertyActivation":
                return new PropertyActivation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("akamai", "properties/cpCode", _module)
pulumi.runtime.registerResourceModule("akamai", "properties/edgeHostName", _module)
pulumi.runtime.registerResourceModule("akamai", "properties/property", _module)
pulumi.runtime.registerResourceModule("akamai", "properties/propertyActivation", _module)
