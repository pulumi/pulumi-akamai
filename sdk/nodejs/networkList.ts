// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkList extends pulumi.CustomResource {
    /**
     * Get an existing NetworkList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkListState, opts?: pulumi.CustomResourceOptions): NetworkList {
        return new NetworkList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/networkList:NetworkList';

    /**
     * Returns true if the given object is an instance of NetworkList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkList.__pulumiType;
    }

    /**
     * contract ID
     */
    declare public readonly contractId: pulumi.Output<string | undefined>;
    /**
     * A description of the network list
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * group ID
     */
    declare public readonly groupId: pulumi.Output<number | undefined>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or removed from an existing list
     */
    declare public readonly lists: pulumi.Output<string[] | undefined>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be 'APPEND', 'REPLACE', or 'REMOVE'
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The name to be assigned to the network list
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * network list ID
     */
    declare public /*out*/ readonly networkListId: pulumi.Output<string>;
    /**
     * sync point
     */
    declare public /*out*/ readonly syncPoint: pulumi.Output<number>;
    /**
     * The type of the network list; must be either 'IP' or 'GEO'
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * unique ID
     */
    declare public /*out*/ readonly uniqueid: pulumi.Output<string>;

    /**
     * Create a NetworkList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkListArgs | NetworkListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkListState | undefined;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["description"] = state?.description;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["lists"] = state?.lists;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkListId"] = state?.networkListId;
            resourceInputs["syncPoint"] = state?.syncPoint;
            resourceInputs["type"] = state?.type;
            resourceInputs["uniqueid"] = state?.uniqueid;
        } else {
            const args = argsOrState as NetworkListArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["description"] = args?.description;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["lists"] = args?.lists;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["type"] = args?.type;
            resourceInputs["networkListId"] = undefined /*out*/;
            resourceInputs["syncPoint"] = undefined /*out*/;
            resourceInputs["uniqueid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkList resources.
 */
export interface NetworkListState {
    /**
     * contract ID
     */
    contractId?: pulumi.Input<string>;
    /**
     * A description of the network list
     */
    description?: pulumi.Input<string>;
    /**
     * group ID
     */
    groupId?: pulumi.Input<number>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or removed from an existing list
     */
    lists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be 'APPEND', 'REPLACE', or 'REMOVE'
     */
    mode?: pulumi.Input<string>;
    /**
     * The name to be assigned to the network list
     */
    name?: pulumi.Input<string>;
    /**
     * network list ID
     */
    networkListId?: pulumi.Input<string>;
    /**
     * sync point
     */
    syncPoint?: pulumi.Input<number>;
    /**
     * The type of the network list; must be either 'IP' or 'GEO'
     */
    type?: pulumi.Input<string>;
    /**
     * unique ID
     */
    uniqueid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkList resource.
 */
export interface NetworkListArgs {
    /**
     * contract ID
     */
    contractId?: pulumi.Input<string>;
    /**
     * A description of the network list
     */
    description: pulumi.Input<string>;
    /**
     * group ID
     */
    groupId?: pulumi.Input<number>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or removed from an existing list
     */
    lists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be 'APPEND', 'REPLACE', or 'REMOVE'
     */
    mode: pulumi.Input<string>;
    /**
     * The name to be assigned to the network list
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the network list; must be either 'IP' or 'GEO'
     */
    type: pulumi.Input<string>;
}
