// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.NetworkList` resource to create a network list, or to modify an existing list.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const networkList = new akamai.NetworkList("networkList", {
 *     type: "IP",
 *     description: "network list description",
 *     lists: _var.list,
 *     mode: "APPEND",
 *     contractId: "ABC-123",
 *     groupId: 12345,
 * });
 * ```
 */
export class NetworkList extends pulumi.CustomResource {
    /**
     * Get an existing NetworkList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkListState, opts?: pulumi.CustomResourceOptions): NetworkList {
        return new NetworkList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/networkList:NetworkList';

    /**
     * Returns true if the given object is an instance of NetworkList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkList.__pulumiType;
    }

    /**
     * The contract ID of the network list. If supplied, groupId must also be supplied. The
     * contractId value of an existing network list may not be modified.
     */
    public readonly contractId!: pulumi.Output<string | undefined>;
    /**
     * The description to be assigned to the network list.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The group ID of the network list. If supplied, contractId must also be supplied. The
     * groupId value of an existing network list may not be modified.
     */
    public readonly groupId!: pulumi.Output<number | undefined>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or
     * removed from an existing list.
     */
    public readonly lists!: pulumi.Output<string[] | undefined>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be one of the following:
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The name to be assigned to the network list.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the network list.
     */
    public /*out*/ readonly networkListId!: pulumi.Output<string>;
    /**
     * An integer that identifies the current version of the network list; this value is incremented each time
     * the list is modified.
     */
    public /*out*/ readonly syncPoint!: pulumi.Output<number>;
    /**
     * The type of the network list; must be either "IP" or "GEO".
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * unique ID
     */
    public /*out*/ readonly uniqueid!: pulumi.Output<string>;

    /**
     * Create a NetworkList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkListArgs | NetworkListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkListState | undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["lists"] = state ? state.lists : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkListId"] = state ? state.networkListId : undefined;
            resourceInputs["syncPoint"] = state ? state.syncPoint : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uniqueid"] = state ? state.uniqueid : undefined;
        } else {
            const args = argsOrState as NetworkListArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["lists"] = args ? args.lists : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["networkListId"] = undefined /*out*/;
            resourceInputs["syncPoint"] = undefined /*out*/;
            resourceInputs["uniqueid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkList resources.
 */
export interface NetworkListState {
    /**
     * The contract ID of the network list. If supplied, groupId must also be supplied. The
     * contractId value of an existing network list may not be modified.
     */
    contractId?: pulumi.Input<string>;
    /**
     * The description to be assigned to the network list.
     */
    description?: pulumi.Input<string>;
    /**
     * The group ID of the network list. If supplied, contractId must also be supplied. The
     * groupId value of an existing network list may not be modified.
     */
    groupId?: pulumi.Input<number>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or
     * removed from an existing list.
     */
    lists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be one of the following:
     */
    mode?: pulumi.Input<string>;
    /**
     * The name to be assigned to the network list.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the network list.
     */
    networkListId?: pulumi.Input<string>;
    /**
     * An integer that identifies the current version of the network list; this value is incremented each time
     * the list is modified.
     */
    syncPoint?: pulumi.Input<number>;
    /**
     * The type of the network list; must be either "IP" or "GEO".
     */
    type?: pulumi.Input<string>;
    /**
     * unique ID
     */
    uniqueid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkList resource.
 */
export interface NetworkListArgs {
    /**
     * The contract ID of the network list. If supplied, groupId must also be supplied. The
     * contractId value of an existing network list may not be modified.
     */
    contractId?: pulumi.Input<string>;
    /**
     * The description to be assigned to the network list.
     */
    description: pulumi.Input<string>;
    /**
     * The group ID of the network list. If supplied, contractId must also be supplied. The
     * groupId value of an existing network list may not be modified.
     */
    groupId?: pulumi.Input<number>;
    /**
     * A list of IP addresses or locations to be included in the list, added to an existing list, or
     * removed from an existing list.
     */
    lists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string specifying the interpretation of the `list` parameter. Must be one of the following:
     */
    mode: pulumi.Input<string>;
    /**
     * The name to be assigned to the network list.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the network list; must be either "IP" or "GEO".
     */
    type: pulumi.Input<string>;
}
