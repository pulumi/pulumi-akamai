// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CloudletsApplicationLoadBalancerDataCenter {
    /**
     * The city in which the data center is located.
     */
    city?: string;
    /**
     * Whether to override the cloud server host header.
     */
    cloudServerHostHeaderOverride?: boolean;
    /**
     * Whether this datacenter is a cloud service.
     */
    cloudService?: boolean;
    /**
     * The code of the continent on which the data center is located. See [Continent Codes](https://control.akamai.com/dl/edgescape/continentCodes.csv) for a list of valid codes.
     */
    continent: string;
    /**
     * The country in which the data center is located. See [Country Codes](https://control.akamai.com/dl/edgescape/cc2continent.csv) for a list of valid codes.
     */
    country: string;
    /**
     * The name of the host that can be used as a Conditional Origin. This should match the `hostname` value defined for this datacenter in Property Manager.
     */
    hostname?: string;
    /**
     * The latitude value for the data center. This member supports six decimal places of precision.
     */
    latitude: number;
    /**
     * A list of the origin servers used to poll the data centers in an Application Load Balancer configuration. These servers support basic HTTP polling.
     */
    livenessHosts?: string[];
    /**
     * The longitude value for the data center. This member supports six decimal places of precision.
     */
    longitude: number;
    /**
     * The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
     */
    originId: string;
    /**
     * The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     */
    percent: number;
    /**
     * The state, province, or region where the data center is located.
     */
    stateOrProvince?: string;
}

export interface CloudletsApplicationLoadBalancerLivenessSettings {
    /**
     * Maps additional case-insensitive HTTP header names included to the liveness testing requests.
     */
    additionalHeaders?: {[key: string]: string};
    /**
     * The Host header for the liveness HTTP request.
     */
    hostHeader?: string;
    /**
     * The frequency of liveness tests. Defaults to 60 seconds, minimum is 10 seconds.
     */
    interval?: number;
    /**
     * The path to the test object used for liveness testing. The function of the test object is to help determine whether the data center is functioning.
     */
    path: string;
    /**
     * Whether to validate the origin certificate for an HTTPS request.
     */
    peerCertificateVerification?: boolean;
    /**
     * The port for the test object. The default port is 80, which is standard for HTTP. Enter 443 if you are using HTTPS.
     */
    port: number;
    /**
     * The protocol or scheme for the database, either `HTTP` or `HTTPS`.
     */
    protocol: string;
    /**
     * The request used for TCP and TCPS tests.
     */
    requestString?: string;
    /**
     * The response used for TCP and TCPS tests.
     */
    responseString?: string;
    /**
     * If set to `true`, marks the liveness test as failed when the request returns a 3xx (redirection) status code.
     */
    status3xxFailure?: boolean;
    /**
     * If set to `true`, marks the liveness test as failed when the request returns a 4xx (client error) status code.
     */
    status4xxFailure?: boolean;
    /**
     * If set to `true`, marks the liveness test as failed when the request returns a 5xx (server error) status code.
     */
    status5xxFailure?: boolean;
    /**
     * The number of seconds the system waits before failing the liveness test.
     */
    timeout?: number;
}

export interface CpsDvEnrollmentAdminContact {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The email address of the technical contact at Akamai, accessible at the `akamai.com` domain.
     */
    email: string;
    /**
     * The first name of the technical contact at Akamai.
     */
    firstName: string;
    /**
     * The last name of the technical contact at Akamai.
     */
    lastName: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
    /**
     * The title of the technical contact at Akamai.
     */
    title?: string;
}

export interface CpsDvEnrollmentCsr {
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * Your organizational unit.
     */
    organizationalUnit: string;
    /**
     * Your state or province.
     */
    state: string;
}

export interface CpsDvEnrollmentDnsChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentHttpChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentNetworkConfiguration {
    /**
     * The configuration for client mutual authentication. Specifies the trust chain that is used to verify client certificates and some configuration options.
     */
    clientMutualAuthentication?: outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication;
    /**
     * Whether CPS should direct traffic using all the SANs you listed in the SANs parameter when you created your enrollment.
     */
    cloneDnsNames?: boolean;
    /**
     * The TLS protocol version to disallow. CPS uses the TLS protocols that Akamai currently supports as a best practice.
     */
    disallowedTlsVersions?: string[];
    /**
     * Lists where you can deploy the certificate. Either `core` to specify worldwide deployment (including China and Russia), `china+core` to specify worldwide deployment and China, or `russia+core` to specify worldwide deployment and Russia. You can only use the setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
     */
    geography: string;
    /**
     * The ciphers to include for the enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm).
     */
    mustHaveCiphers?: string;
    /**
     * Whether to use OCSP stapling for the enrollment, either `on`, `off` or `not-set`. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. This option allows the visitors on your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate.
     */
    ocspStapling?: string;
    /**
     * Ciphers that you preferably want to include for the enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm).
     */
    preferredCiphers?: string;
    /**
     * Whether to use the QUIC transport layer network protocol.
     */
    quicEnabled?: boolean;
}

export interface CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication {
    /**
     * Whether you want to enable the Online Certificate Status Protocol (OCSP) stapling for client certificates.
     */
    ocspEnabled?: boolean;
    /**
     * Whether you want to enable the server to send the certificate authority (CA) list to the client.
     */
    sendCaListToClient?: boolean;
    /**
     * The identifier of the set of trust chains, created in [Trust Chain Manager](https://techdocs.akamai.com/trust-chain-mgr/docs/welcome-trust-chain-manager).
     */
    setId?: string;
}

export interface CpsDvEnrollmentOrganization {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The name of your organization.
     */
    name: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
}

export interface CpsDvEnrollmentTechContact {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The email address of the technical contact at Akamai, accessible at the `akamai.com` domain.
     */
    email: string;
    /**
     * The first name of the technical contact at Akamai.
     */
    firstName: string;
    /**
     * The last name of the technical contact at Akamai.
     */
    lastName: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
    /**
     * The title of the technical contact at Akamai.
     */
    title?: string;
}

export interface CpsThirdPartyEnrollmentAdminContact {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The email address of the technical contact at Akamai, accessible at the `akamai.com` domain.
     */
    email: string;
    /**
     * The first name of the technical contact at Akamai.
     */
    firstName: string;
    /**
     * The last name of the technical contact at Akamai.
     */
    lastName: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
    /**
     * The title of the technical contact at Akamai.
     */
    title?: string;
}

export interface CpsThirdPartyEnrollmentCsr {
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * Your organizational unit.
     */
    organizationalUnit: string;
    /**
     * Your state or province.
     */
    state: string;
}

export interface CpsThirdPartyEnrollmentNetworkConfiguration {
    /**
     * The configuration for client mutual authentication. Specifies the trust chain that is used to verify client certificates and some configuration options.
     */
    clientMutualAuthentication?: outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication;
    /**
     * Whether CPS should direct traffic using all the SANs you listed in the SANs parameter when you created your enrollment.
     */
    cloneDnsNames?: boolean;
    /**
     * The TLS protocol version to disallow. CPS uses the TLS protocols that Akamai currently supports as a best practice.
     */
    disallowedTlsVersions?: string[];
    /**
     * Lists where you can deploy the certificate. Either `core` to specify worldwide deployment (including China and Russia), `china+core` to specify worldwide deployment and China, or `russia+core` to specify worldwide deployment and Russia. You can only use the setting to include China and Russia if your Akamai contract specifies your ability to do so and you have approval from the Chinese and Russian government.
     */
    geography: string;
    /**
     * The ciphers to include for the enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm).
     */
    mustHaveCiphers?: string;
    /**
     * Whether to use OCSP stapling for the enrollment, either `on`, `off` or `not-set`. OCSP Stapling improves performance by including a valid OCSP response in every TLS handshake. This option allows the visitors on your site to query the Online Certificate Status Protocol (OCSP) server at regular intervals to obtain a signed time-stamped OCSP response. This response must be signed by the CA, not the server, therefore ensuring security. Disable OSCP Stapling if you want visitors to your site to contact the CA directly for an OSCP response. OCSP allows you to obtain the revocation status of a certificate.
     */
    ocspStapling?: string;
    /**
     * Ciphers that you preferably want to include for the enrollment while deploying it on the network. Defaults to `ak-akamai-default` when it is not set. For more information on cipher profiles, see [Akamai community](https://community.akamai.com/customers/s/article/SSL-TLS-Cipher-Profiles-for-Akamai-Secure-CDNrxdxm).
     */
    preferredCiphers?: string;
    /**
     * Whether to use the QUIC transport layer network protocol.
     */
    quicEnabled?: boolean;
}

export interface CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication {
    /**
     * Whether you want to enable the Online Certificate Status Protocol (OCSP) stapling for client certificates.
     */
    ocspEnabled?: boolean;
    /**
     * Whether you want to enable the server to send the certificate authority (CA) list to the client.
     */
    sendCaListToClient?: boolean;
    /**
     * The identifier of the set of trust chains, created in [Trust Chain Manager](https://techdocs.akamai.com/trust-chain-mgr/docs/welcome-trust-chain-manager).
     */
    setId?: string;
}

export interface CpsThirdPartyEnrollmentOrganization {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The name of your organization.
     */
    name: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
}

export interface CpsThirdPartyEnrollmentTechContact {
    /**
     * The address of your organization.
     */
    addressLineOne: string;
    /**
     * The address of your organization.
     */
    addressLineTwo?: string;
    /**
     * The city where your organization resides.
     */
    city: string;
    /**
     * The code for the country where your organization resides.
     */
    countryCode: string;
    /**
     * The email address of the technical contact at Akamai, accessible at the `akamai.com` domain.
     */
    email: string;
    /**
     * The first name of the technical contact at Akamai.
     */
    firstName: string;
    /**
     * The last name of the technical contact at Akamai.
     */
    lastName: string;
    /**
     * Your organization information.
     */
    organization: string;
    /**
     * The phone number of the administrator who you want to use as a contact at your company.
     */
    phone: string;
    /**
     * The postal code of your organization.
     */
    postalCode: string;
    /**
     * The region of your organization, typically a state or province.
     */
    region: string;
    /**
     * The title of the technical contact at Akamai.
     */
    title?: string;
}

export interface DatastreamAzureConnector {
    /**
     * **Secret**. The access key identifier that you use to authenticate requests to your Oracle Cloud account. See [Managing user credentials in OCS](https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm).
     */
    accessKey: string;
    /**
     * Specifies the Azure Storage account name.
     */
    accountName: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Specifies the Azure Storage container name.
     */
    containerName: string;
    /**
     * The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     */
    path: string;
}

export interface DatastreamConfig {
    /**
     * A delimiter that you want to use to separate data set fields in the log lines. Currently, `SPACE` is the only available delimiter. This field is required for the `STRUCTURED` log file `format`.
     */
    delimiter?: string;
    /**
     * The format in which you want to receive log files, either `STRUCTURED` or `JSON`. When `delimiter` is present in the request, `STRUCTURED` is the mandatory format.
     */
    format: string;
    /**
     * How often you want to collect logs from each uploader and send them to a destination.
     */
    frequency: outputs.DatastreamConfigFrequency;
    /**
     * The prefix of the log file that you want to send to a destination. It’s a string of at most 200 characters. If unspecified, defaults to `ak`.
     */
    uploadFilePrefix?: string;
    /**
     * The suffix of the log file that you want to send to a destination. It’s a static string of at most 10 characters. If unspecified, defaults to `ds`.
     */
    uploadFileSuffix?: string;
}

export interface DatastreamConfigFrequency {
    /**
     * The time in seconds after which the system bundles log lines into a file and sends it to a destination. `30` or `60` are the possible values.
     */
    timeInSec: number;
}

export interface DatastreamDatadogConnector {
    /**
     * **Secret**. Your Log API token for your account in New Relic.
     */
    authToken: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs?: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * The service of the Datadog connector. A service groups together endpoints, queries, or jobs for the purposes of scaling instances. See [View Datadog reserved attribute list](https://docs.datadoghq.com/logs/log_configuration/attributes_naming_convention/#reserved-attributes).
     */
    service?: string;
    /**
     * The source of the Datadog connector. See [View Datadog reserved attribute list](https://docs.datadoghq.com/logs/log_collection/?tab=http#reserved-attributes).
     */
    source?: string;
    /**
     * The tags you can use to segment and filter log events in Loggly. Learn more about [Tags](https://documentation.solarwinds.com/en/success_center/loggly/content/admin/tags.htm).
     */
    tags?: string;
    /**
     * Enter the secure URL where you want to send and store your logs.
     */
    url: string;
}

export interface DatastreamElasticsearchConnector {
    /**
     * **Secret**. The certification authority (CA) certificate used to verify the origin server's certificate. It's needed if the certificate stored in `clientCert` is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: string;
    /**
     * **Secret**. The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientCert?: string;
    /**
     * **Secret**. The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: string;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Content type to pass in the log file header.
     */
    contentType?: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    /**
     * The Elasticsearch bulk endpoint URL in the format: `https://<hostname>.elastic-cloud.com:9243/_bulk/`. Set `indexName` in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. 
     * <br>Learn more about how to [Stream logs to Elasticsearch](https://techdocs.akamai.com/datastream2/docs/stream-elasticsearch).
     */
    endpoint: string;
    /**
     * **Secret**. The index name of the Elastic cloud where you want to store log files.
     */
    indexName: string;
    mTls: boolean;
    /**
     * **Secret**. The Elasticsearch basic access authentication password.
     */
    password: string;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: string;
    /**
     * **Secret**. The Elasticsearch basic access authentication username.
     */
    userName: string;
}

export interface DatastreamGcsConnector {
    /**
     * The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     */
    bucket: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     */
    path?: string;
    /**
     * **Secret**. The contents of the JSON private key you generated and downloaded in your Google Cloud Storage account.
     */
    privateKey: string;
    /**
     * The unique ID of your Google Cloud project.
     */
    projectId: string;
    /**
     * The name of the service account with the storage.object.create permission or Storage Object Creator role.
     */
    serviceAccountName: string;
}

export interface DatastreamHttpsConnector {
    /**
     * Either `NONE` for no authentication, or `BASIC`. For basic authentication, provide the `userName` and `password` you set in your custom HTTPS endpoint.
     */
    authenticationType: string;
    /**
     * **Secret**. The certification authority (CA) certificate used to verify the origin server's certificate. It's needed if the certificate stored in `clientCert` is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: string;
    /**
     * **Secret**. The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientCert?: string;
    /**
     * **Secret**. The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs?: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Content type to pass in the log file header.
     */
    contentType?: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    mTls: boolean;
    /**
     * **Secret**. The Elasticsearch basic access authentication password.
     */
    password?: string;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: string;
    /**
     * Enter the secure URL where you want to send and store your logs.
     */
    url: string;
    /**
     * **Secret**. The Elasticsearch basic access authentication username.
     */
    userName?: string;
}

export interface DatastreamLogglyConnector {
    /**
     * **Secret**. Your Log API token for your account in New Relic.
     */
    authToken: string;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Content type to pass in the log file header.
     */
    contentType?: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    /**
     * The Elasticsearch bulk endpoint URL in the format: `https://<hostname>.elastic-cloud.com:9243/_bulk/`. Set `indexName` in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. 
     * <br>Learn more about how to [Stream logs to Elasticsearch](https://techdocs.akamai.com/datastream2/docs/stream-elasticsearch).
     */
    endpoint: string;
    /**
     * The tags you can use to segment and filter log events in Loggly. Learn more about [Tags](https://documentation.solarwinds.com/en/success_center/loggly/content/admin/tags.htm).
     */
    tags?: string;
}

export interface DatastreamNewRelicConnector {
    /**
     * **Secret**. Your Log API token for your account in New Relic.
     */
    authToken: string;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Content type to pass in the log file header.
     */
    contentType?: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    /**
     * The Elasticsearch bulk endpoint URL in the format: `https://<hostname>.elastic-cloud.com:9243/_bulk/`. Set `indexName` in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. 
     * <br>Learn more about how to [Stream logs to Elasticsearch](https://techdocs.akamai.com/datastream2/docs/stream-elasticsearch).
     */
    endpoint: string;
}

export interface DatastreamOracleConnector {
    /**
     * **Secret**. The access key identifier that you use to authenticate requests to your Oracle Cloud account. See [Managing user credentials in OCS](https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm).
     */
    accessKey: string;
    /**
     * The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     */
    bucket: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * The namespace of your Oracle Cloud Storage account. See [Understanding Object Storage namespaces](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/understandingnamespaces.htm).
     */
    namespace: string;
    /**
     * The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     */
    path: string;
    /**
     * The Oracle Cloud Storage region where your bucket resides. See [Regions and availability domains in OCS](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     */
    region: string;
    /**
     * **Secret**. The secret access key identifier that you use to authenticate requests to your Oracle Cloud account.
     */
    secretAccessKey: string;
}

export interface DatastreamS3Connector {
    /**
     * **Secret**. The access key identifier that you use to authenticate requests to your Oracle Cloud account. See [Managing user credentials in OCS](https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm).
     */
    accessKey: string;
    /**
     * The name of the Oracle Cloud Storage bucket. See [Working with Oracle Cloud Storage buckets](https://docs.oracle.com/en-us/iaas/Content/Object/Tasks/managingbuckets.htm).
     */
    bucket: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * The path to the folder within your Oracle Cloud Storage bucket where you want to store your logs.
     */
    path: string;
    /**
     * The Oracle Cloud Storage region where your bucket resides. See [Regions and availability domains in OCS](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm).
     */
    region: string;
    /**
     * **Secret**. The secret access key identifier that you use to authenticate requests to your Oracle Cloud account.
     */
    secretAccessKey: string;
}

export interface DatastreamSplunkConnector {
    /**
     * **Secret**. The certification authority (CA) certificate used to verify the origin server's certificate. It's needed if the certificate stored in `clientCert` is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: string;
    /**
     * **Secret**. The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientCert?: string;
    /**
     * **Secret**. The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs?: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    /**
     * **Secret**. The Event Collector token associated with your Splunk account. See [View usage of Event Collector token in Splunk](https://docs.splunk.com/Documentation/Splunk/8.0.3/Data/UsetheHTTPEventCollector).
     */
    eventCollectorToken: string;
    mTls: boolean;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: string;
    /**
     * Enter the secure URL where you want to send and store your logs.
     */
    url: string;
}

export interface DatastreamSumologicConnector {
    /**
     * **Secret**. The unique HTTP collector code of your Sumo Logic `endpoint`.
     */
    collectorCode: string;
    /**
     * Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     */
    compressLogs?: boolean;
    connectorId: number;
    /**
     * The name of the connector.
     */
    connectorName: string;
    /**
     * Content type to pass in the log file header.
     */
    contentType?: string;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters.
     */
    customHeaderName?: string;
    /**
     * The custom header's contents passed with the request that contains information about the client connection.
     */
    customHeaderValue?: string;
    /**
     * The Elasticsearch bulk endpoint URL in the format: `https://<hostname>.elastic-cloud.com:9243/_bulk/`. Set `indexName` in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. 
     * <br>Learn more about how to [Stream logs to Elasticsearch](https://techdocs.akamai.com/datastream2/docs/stream-elasticsearch).
     */
    endpoint: string;
}

export interface DnsZoneTsigKey {
    /**
     * The hashing algorithm.
     */
    algorithm: string;
    /**
     * The key name.
     */
    name: string;
    /**
     * String known between transfer endpoints.
     */
    secret: string;
}

export interface EdgeKvInitialData {
    group?: string;
    key: string;
    value: string;
}

export interface GetCPSEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    state: string;
}

export interface GetCPSEnrollmentDnsChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface GetCPSEnrollmentHttpChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface GetCPSEnrollmentNetworkConfiguration {
    clientMutualAuthentications: outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication[];
    cloneDnsNames: boolean;
    disallowedTlsVersions: string[];
    geography: string;
    mustHaveCiphers: string;
    ocspStapling: string;
    preferredCiphers: string;
    quicEnabled: boolean;
}

export interface GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled: boolean;
    sendCaListToClient: boolean;
    setId: string;
}

export interface GetCPSEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface GetCPSEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentsEnrollment {
    adminContacts: outputs.GetCPSEnrollmentsEnrollmentAdminContact[];
    certificateChainType: string;
    certificateType: string;
    commonName: string;
    csrs: outputs.GetCPSEnrollmentsEnrollmentCsr[];
    enableMultiStackedCertificates: boolean;
    enrollmentId: number;
    networkConfigurations: outputs.GetCPSEnrollmentsEnrollmentNetworkConfiguration[];
    organizations: outputs.GetCPSEnrollmentsEnrollmentOrganization[];
    pendingChanges: boolean;
    registrationAuthority: string;
    sans: string[];
    secureNetwork: string;
    signatureAlgorithm: string;
    sniOnly: boolean;
    techContacts: outputs.GetCPSEnrollmentsEnrollmentTechContact[];
    validationType: string;
}

export interface GetCPSEnrollmentsEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentsEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    state: string;
}

export interface GetCPSEnrollmentsEnrollmentNetworkConfiguration {
    clientMutualAuthentications: outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthentication[];
    cloneDnsNames: boolean;
    disallowedTlsVersions: string[];
    geography: string;
    mustHaveCiphers: string;
    ocspStapling: string;
    preferredCiphers: string;
    quicEnabled: boolean;
}

export interface GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled: boolean;
    sendCaListToClient: boolean;
    setId: string;
}

export interface GetCPSEnrollmentsEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface GetCPSEnrollmentsEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch[];
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Required) Entering a value in the range of `0.0` to `99.0` specifies the percent of requests that pass through to the origin. Enter `100` to always have the request pass through to the origin.
     */
    passThroughPercent: number;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerDataCenter {
    city: string;
    cloudServerHostHeaderOverride: boolean;
    cloudService: boolean;
    continent: string;
    country: string;
    hostname: string;
    latitude: number;
    livenessHosts: string[];
    longitude: number;
    /**
     * (Required) A unique identifier for the Conditional Origin that supports the load balancing configuration. The Conditional Origin type must be set to `APPLICATION_LOAD_BALANCER` in the `origin` behavior. See property rules for more information.
     */
    originId: string;
    percent: number;
    stateOrProvince: string;
}

export interface GetCloudletsApplicationLoadBalancerLivenessSetting {
    additionalHeaders: {[key: string]: string};
    hostHeader: string;
    interval: number;
    path: string;
    peerCertificateVerification: boolean;
    port: number;
    protocol: string;
    requestString: string;
    responseString: string;
    status3xxFailure: boolean;
    status4xxFailure: boolean;
    status5xxFailure: boolean;
    timeout: number;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRule {
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Required) Defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, the Edge Server returns an HTTP response from the rewritten URL.
     */
    forwardSettings: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting[];
    /**
     * (Optional) An identifier for Akamai internal use only.
     */
    id?: number;
    /**
     * (Optional) The URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch[];
    /**
     * (Optional) Whether the match supports default rules that apply to all requests.
     */
    matchesAlways?: boolean;
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object`, `range`, or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting {
    /**
     * (Required) The ID of the Conditional Origin the requests are forwarded to.
     */
    originId: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `clientip`, `continent`, `cookie`, `countrycode`, `deviceCharacteristics`, `extension`, `header`, `hostname`, `method`, `path`, `protocol`, `proxy`, `query`, `regioncode`, or `range`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object`, `range`, or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple` or `range`, specify the values in the incoming request to match on. With `range`, you can only specify an array of integers, for example `[1, 2]`.
     */
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple` or `range`, specify the values in the incoming request to match on. With `range`, you can only specify an array of integers, for example `[1, 2]`.
     */
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Required) The data used to construct a new request URL if all match conditions are met. If all conditions are met, the edge server returns an HTTP response from the rewritten URL.
     */
    forwardSettings: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch[];
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings {
    /**
     * (Optional) The ID of the new origin requests are forwarded to. This type of origin is known as a Conditional Origin. See Property requirements for Cloudlets that forward requests to learn more.
     */
    originId?: string;
    /**
     * (Optional) When match conditions are met, this value defines the path, resource, or query string added to the rewritten URL.
     */
    pathAndQs?: string;
    /**
     * (Optional) Whether the Cloudlet should include the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either header`, `hostname`, `path`, `extension`, `query`, `regex`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch[];
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Required) The URL Edge Redirector redirects the request to. If you're using `useRelativeUrl`, you can enter a path for the value.
     */
    redirectUrl: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The HTTP response status code, which is either `301` (permanent redirect) or `302` (temporary redirect).
     */
    statusCode: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) Whether the Cloudlet should include the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: boolean;
    /**
     * (Optional) If set to `relativeUrl`, takes the path you specify in the `redirectUrl` argument and sets it in the response’s Location header. The client or browser receiving the request decides which protocol and hostname to use. If set to `copySchemeHostname`, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information you specify in the `redirectUrl` argument. This absolute path is set in the response’s Location header. If you do not specify useRelativeUrl or set to `none`, then specify the `redirectUrl` argument as a fully-qualified URL.
     */
    useRelativeUrl?: string;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `regex`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Required) The data used to construct a new request URL if all match conditions are met. If all conditions are met, the edge server returns an HTTP response from the rewritten URL.
     */
    forwardSettings: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatch[];
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings {
    /**
     * (Optional) The ID of the new origin requests are forwarded to. This type of origin is known as a Conditional Origin. See Property requirements for Cloudlets that forward requests to learn more.
     */
    originId?: string;
    /**
     * (Optional) When match conditions are met, this value defines the path, resource, or query string added to the rewritten URL.
     */
    pathAndQs?: string;
    /**
     * (Optional) Whether the Cloudlet should include the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `regex`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Required) The data used to construct a new request URL if all match conditions are met. If all conditions are met, the edge server returns an HTTP response from the rewritten URL.
     */
    forwardSettings: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch[];
    /**
     * (Optional) Whether the match supports default rules that apply to all requests.
     */
    matchesAlways?: boolean;
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings {
    /**
     * (Required) The ID of the new origin requests are forwarded to. This type of origin is known as a Conditional Origin. See Property requirements for Cloudlets that forward requests to learn more.
     */
    originId: string;
    /**
     * (Required)
     */
    percent: number;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsPolicyActivation {
    apiVersion: string;
    network: string;
    policyInfos: outputs.GetCloudletsPolicyActivationPolicyInfo[];
    propertyInfos: outputs.GetCloudletsPolicyActivationPropertyInfo[];
}

export interface GetCloudletsPolicyActivationPolicyInfo {
    activatedBy: string;
    activationDate: number;
    name: string;
    /**
     * (Required) An integer identifier that is associated with all versions of a policy.
     */
    policyId: number;
    status: string;
    statusDetail: string;
    /**
     * (Optional) The version number of a policy.
     */
    version: number;
}

export interface GetCloudletsPolicyActivationPropertyInfo {
    activatedBy: string;
    activationDate: number;
    groupId: number;
    name: string;
    status: string;
    /**
     * (Optional) The version number of a policy.
     */
    version: number;
}

export interface GetCloudletsRequestControlMatchRuleMatchRule {
    /**
     * (Required) If set to `allow`, the request is sent to origin when all conditions are true. If set to `deny`, the request is denied when all conditions are true. If set to `denybranded`, the request is denied and rerouted according to the Request Control behavior settings.
     */
    allowDeny: string;
    /**
     * (Optional) Whether to disable a rule. When a rule is disabled it's not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatch[];
    /**
     * (Optional) Match on all incoming requests.
     */
    matchesAlways?: boolean;
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRule {
    /**
     * (Optional) Whether to disable a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * (Optional) The end time for this match. Specify the value in UTC in seconds since the epoch.
     */
    end?: number;
    /**
     * (Optional) If you're using a URL match, this specifies the URL that the Cloudlet uses to match the incoming request.
     */
    matchUrl?: string;
    /**
     * (Optional) A list of conditions to apply to a Cloudlet, including:
     */
    matches?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch[];
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Required) Entering a value in the range of `0.0` to `99.0` specifies the percent of requests that pass through to the origin. Enter `100` to always have the request pass through to the origin. Enter `-1` to send everyone to the waiting room.
     */
    passThroughPercent: number;
    /**
     * (Optional) The start time for this match. Specify the value in UTC in seconds since the epoch.
     */
    start?: number;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch {
    /**
     * (Optional) Whether the match is case sensitive.
     */
    caseSensitive?: boolean;
    /**
     * (Optional) For `clientip`, `continent`, `countrycode`, `proxy`, and `regioncode` match types, this defines the part of the request that determines the IP address to use. Values include the connecting IP address (`CONNECTING_IP`) and the X_Forwarded_For header (`XFF_HEADERS`). To select both, enter the two values separated by a space delimiter. When both values are included, the connecting IP address is evaluated first.
     */
    checkIps?: string;
    /**
     * (Optional) Compares a string expression with a pattern, either `contains`, `exists`, or `equals`.
     */
    matchOperator?: string;
    /**
     * (Optional) The type of match used, either `header`, `hostname`, `path`, `extension`, `query`, `cookie`, `deviceCharacteristics`, `clientip`, `continent`, `countrycode`, `regioncode`, `protocol`, `method`, or `proxy`.
     */
    matchType?: string;
    /**
     * (Optional) This depends on the `matchType`. If the `matchType` is `hostname`, then `matchValue` is the fully qualified domain name, like `www.akamai.com`.
     */
    matchValue?: string;
    /**
     * (Optional) Whether to negate the match.
     */
    negate?: boolean;
    /**
     * (Optional) If `matchValue` is empty, this argument is required. An object used when a rule includes more complex match criteria, like multiple value attributes. Includes these sub-arguments:
     */
    objectMatchValues?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * (Optional) If you're using a `matchType` that supports name attributes, specify the part the incoming request to match on, either `cookie`, `header`, `parameter`, or `query`.
     */
    name?: string;
    /**
     * (Optional) Whether the `name` argument should be evaluated based on case sensitivity.
     */
    nameCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `name` argument includes wildcards.
     */
    nameHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `object`, use this array to list the values to match on.
     */
    options?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * (Required) The type of the array, either `object` or `simple`. Use the `simple` option when adding only an array of string-based values.
     */
    type: string;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * (Optional) Whether the `value` argument should be evaluated based on case sensitivity.
     */
    valueCaseSensitive?: boolean;
    /**
     * (Optional) Whether the `value` argument should be compared in an escaped form.
     */
    valueEscaped?: boolean;
    /**
     * (Optional) Whether the `value` argument includes wildcards.
     */
    valueHasWildcard?: boolean;
    /**
     * (Optional) If you set the `type` argument to `simple`, specify the values in the incoming request to match on.
     */
    values?: string[];
}

export interface GetContractsContract {
    contractId: string;
    contractTypeName: string;
}

export interface GetDatastreamActivationHistoryActivation {
    createdBy: string;
    createdDate: string;
    isActive: boolean;
    /**
     * (Required) A stream's unique identifier.
     */
    streamId: number;
    streamVersionId: number;
}

export interface GetDatastreamDatasetFieldsField {
    datasetFields: outputs.GetDatastreamDatasetFieldsFieldDatasetField[];
    datasetGroupDescription: string;
    datasetGroupName: string;
}

export interface GetDatastreamDatasetFieldsFieldDatasetField {
    datasetFieldDescription: string;
    datasetFieldId: number;
    datasetFieldJsonKey: string;
    datasetFieldName: string;
}

export interface GetDatastreamsStream {
    activationStatus: string;
    archived: boolean;
    connectors: string;
    contractId: string;
    createdBy: string;
    createdDate: string;
    currentVersionId: number;
    errors: outputs.GetDatastreamsStreamError[];
    /**
     * Unique identifier of the group that can access the product.
     */
    groupId: number;
    groupName: string;
    properties: outputs.GetDatastreamsStreamProperty[];
    streamId: number;
    streamName: string;
    streamTypeName: string;
    streamVersionId: number;
}

export interface GetDatastreamsStreamError {
    detail: string;
    title: string;
    type: string;
}

export interface GetDatastreamsStreamProperty {
    propertyId: number;
    propertyName: string;
}

export interface GetGroupsGroup {
    contractIds: string[];
    groupId: string;
    groupName: string;
    parentGroupId: string;
}

export interface GetIamGrantableRolesGrantableRole {
    description: string;
    grantedRoleId: number;
    name: string;
}

export interface GetIamRolesRole {
    createdBy: string;
    description: string;
    modifiedBy: string;
    name: string;
    roleId: string;
    timeCreated: string;
    timeModified: string;
    type: string;
}

export interface GetIamTimezonesTimezone {
    description: string;
    offset: string;
    posix: string;
    timezone: string;
}

export interface GetPropertiesProperty {
    /**
     * (Required) A contract's unique ID, including the `ctr_` prefix.
     */
    contractId: string;
    /**
     * (Required) A group's unique ID, including the `grp_` prefix.
     */
    groupId: string;
    latestVersion: number;
    note: string;
    productId: string;
    productionVersion: number;
    propertyId: string;
    propertyName: string;
    ruleFormat: string;
    stagingVersion: number;
}

export interface GetPropertiesSearchProperty {
    accountId: string;
    assetId: string;
    contractId: string;
    edgeHostname: string;
    groupId: string;
    hostname: string;
    productionStatus: string;
    propertyId: string;
    propertyName: string;
    propertyVersion: number;
    stagingStatus: string;
    updatedByUser: string;
    updatedDate: string;
}

export interface GetPropertyHostnamesHostname {
    certProvisioningType: string;
    certStatuses: outputs.GetPropertyHostnamesHostnameCertStatus[];
    cnameFrom: string;
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface GetPropertyHostnamesHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface GetPropertyIncludeParentsParent {
    id: string;
    isIncludeUsedInProductionVersion: boolean;
    isIncludeUsedInStagingVersion: boolean;
    name: string;
    productionVersion: string;
    stagingVersion: string;
}

export interface GetPropertyIncludesInclude {
    /**
     * (Required) The property's unique identifier.
     */
    id: string;
    latestVersion: number;
    name: string;
    productionVersion: string;
    stagingVersion: string;
    /**
     * (Optional) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     */
    type: string;
}

export interface GetPropertyIncludesParentProperty {
    /**
     * (Required) The property's unique identifier.
     */
    id: string;
    /**
     * (Required) The version of the activated parent property.
     */
    version: number;
}

export interface GetPropertyProductsProduct {
    productId: string;
    productName: string;
}

export interface GetPropertyRulesTemplateTemplate {
    /**
     * The content of the JSON template as a string.
     */
    templateData: string;
    /**
     * The absolute or relative path to the directory containing the template files. The path must end with `property-snippets`, the required directory name. For example: `templateDir = abspath("${path.root}/property-snippets/")`, or `templateDir = "property-snippets/"`.
     */
    templateDir: string;
}

export interface GetPropertyRulesTemplateVariable {
    /**
     * The name of the variable used in the template.
     */
    name: string;
    /**
     * The type of variable: `string`, `number`, `bool`, or `jsonBlock`.
     */
    type?: string;
    /**
     * The value of the variable passed as a string.
     */
    value: string;
}

export interface GtmAsmapAssignment {
    /**
     * Specifies an array of AS numbers.
     */
    asNumbers: number[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the group.
     */
    nickname: string;
}

export interface GtmAsmapDefaultDatacenter {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the group.
     */
    nickname?: string;
}

export interface GtmCidrmapAssignment {
    /**
     * Specifies an array of CIDR blocks.
     */
    blocks?: string[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the CIDR zone group, up to 256 characters.
     */
    nickname: string;
}

export interface GtmCidrmapDefaultDatacenter {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the CIDR zone group, up to 256 characters.
     */
    nickname?: string;
}

export interface GtmDatacenterDefaultLoadObject {
    /**
     * A load object is a file that provides real-time information about the current load, maximum allowable load, and target load on each resource.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port to connect to when requesting the load object.
     */
    loadObjectPort?: number;
    /**
     * Specifies a list of servers to request the load object from.
     */
    loadServers?: string[];
}

export interface GtmGeomapAssignment {
    /**
     * Specifies an array of two-letter ISO 3166 country codes, or for finer subdivisions, the two-letter country code and the two-letter stateOrProvince code separated by a forward slash.
     */
    countries?: string[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the group.
     */
    nickname: string;
}

export interface GtmGeomapDefaultDatacenter {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * A descriptive label for the group.
     */
    nickname?: string;
}

export interface GtmPropertyLivenessTest {
    /**
     * If `testObjectProtocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
     */
    answersRequired?: boolean;
    /**
     * A boolean that if set to `true`, disables warnings when non-standard ports are used.
     */
    disableNonstandardPortWarning?: boolean;
    /**
     * A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
     */
    disabled?: boolean;
    /**
     * Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     */
    errorPenalty?: number;
    /**
     * A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
     */
    httpError3xx?: boolean;
    /**
     * A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
     */
    httpError4xx?: boolean;
    /**
     * A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
     */
    httpError5xx?: boolean;
    /**
     * Contains HTTP headers to send if the `testObjectProtocol` is `http` or `https`. You can have multiple `httpHeader` entries. Requires these arguments:
     */
    httpHeaders?: outputs.GtmPropertyLivenessTestHttpHeader[];
    /**
     * Name of HTTP header.
     */
    name: string;
    /**
     * A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `testObjectProtocol` of https.
     */
    peerCertificateVerification?: boolean;
    /**
     * A boolean indicating whether the `testObjectProtocol` is DNS. The DNS query is recursive.
     */
    recursionRequested?: boolean;
    /**
     * Specifies a request string.
     */
    requestString?: string;
    /**
     * Specifies the query type, if `testObjectProtocol` is DNS.
     */
    resourceType?: string;
    /**
     * Specifies a response string.
     */
    responseString?: string;
    /**
     * Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
     */
    sslClientCertificate?: string;
    /**
     * Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can't have a passphrase nor be used for any other purpose.
     */
    sslClientPrivateKey?: string;
    /**
     * Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
     */
    testInterval: number;
    /**
     * Specifies the static text that acts as a stand-in for the data that you're sending on the network.
     */
    testObject: string;
    /**
     * Specifies the test object's password. It is required if testObjectProtocol is ftp.
     */
    testObjectPassword?: string;
    /**
     * Specifies the port number for the testObject.
     */
    testObjectPort?: number;
    /**
     * Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
     */
    testObjectProtocol: string;
    /**
     * A descriptive name for the testObject.
     */
    testObjectUsername?: string;
    /**
     * Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
     */
    testTimeout: number;
    /**
     * Specifies the score to be reported if the liveness test times out.
     */
    timeoutPenalty?: number;
}

export interface GtmPropertyLivenessTestHttpHeader {
    /**
     * Name of HTTP header.
     */
    name?: string;
    /**
     * Value of HTTP header.
     */
    value?: string;
}

export interface GtmPropertyStaticRrSet {
    /**
     * (List) An array of data strings, representing multiple records within a set.
     */
    rdatas?: string[];
    /**
     * The number of seconds that this record should live in a resolver's cache before being refetched.
     */
    ttl?: number;
    /**
     * The record type.
     */
    type?: string;
}

export interface GtmPropertyTrafficTarget {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A boolean indicating whether the traffic target is used. You can also omit the traffic target, which has the same result as the false value.
     */
    enabled?: boolean;
    /**
     * Specifies an optional data center for the property. Used when there are no servers configured for the property.
     */
    handoutCname?: string;
    /**
     * Name of HTTP header.
     */
    name?: string;
    /**
     * (List) Identifies the IP address or the hostnames of the servers.
     */
    servers?: string[];
    /**
     * Specifies the traffic weight for the target.
     */
    weight?: number;
}

export interface GtmResourceResourceInstance {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId: number;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load, and target load on each resource.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port of the `loadObject`.
     */
    loadObjectPort?: number;
    /**
     * (List) Specifies a list of servers from which to request the load object.
     */
    loadServers?: string[];
    /**
     * A boolean that indicates whether a default `loadObject` is used for the resources.
     */
    useDefaultLoadObject?: boolean;
}

export interface PropertyActivationRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyActivationRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyHostname {
    /**
     * The certificate's provisioning type, either the default `CPS_MANAGED` type for the custom certificates you provision with the [Certificate Provisioning System (CPS)](https://techdocs.akamai.com/cps/docs), or `DEFAULT` for certificates provisioned automatically.
     */
    certProvisioningType: string;
    certStatuses: outputs.PropertyHostnameCertStatus[];
    /**
     * A string containing the original origin's hostname. For example, `"example.org"`.
     */
    cnameFrom: string;
    /**
     * A string containing the hostname for edge content. For example,  `"example.org.edgesuite.net"`.
     */
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface PropertyHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface PropertyIncludeActivationComplianceRecord {
    customerEmail?: string;
    noncomplianceReason: string;
    otherNoncomplianceReason?: string;
    peerReviewedBy?: string;
    ticketId?: string;
    unitTested?: boolean;
}

export interface PropertyOrigin {
    cacheKeyHostname?: string;
    compress?: boolean;
    enableTrueClientIp?: boolean;
    forwardHostname?: string;
    hostname?: string;
    port?: number;
}

export interface PropertyRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export namespace config {
    export interface Appsecs {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Config {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Dns {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Gtm {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Networks {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Property {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

}

export namespace edgedns {
    export interface DnsZoneTsigKey {
        /**
         * The hashing algorithm.
         */
        algorithm: string;
        /**
         * The key name.
         */
        name: string;
        /**
         * String known between transfer endpoints.
         */
        secret: string;
    }

}

export namespace properties {
    export interface PropertyActivationRuleError {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyActivationRuleWarning {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyHostname {
        /**
         * The certificate's provisioning type, either the default `CPS_MANAGED` type for the custom certificates you provision with the [Certificate Provisioning System (CPS)](https://techdocs.akamai.com/cps/docs), or `DEFAULT` for certificates provisioned automatically.
         */
        certProvisioningType: string;
        certStatuses: outputs.properties.PropertyHostnameCertStatus[];
        /**
         * A string containing the original origin's hostname. For example, `"example.org"`.
         */
        cnameFrom: string;
        /**
         * A string containing the hostname for edge content. For example,  `"example.org.edgesuite.net"`.
         */
        cnameTo: string;
        cnameType: string;
        edgeHostnameId: string;
    }

    export interface PropertyHostnameCertStatus {
        hostname: string;
        productionStatus: string;
        stagingStatus: string;
        target: string;
    }

    export interface PropertyOrigin {
        cacheKeyHostname?: string;
        compress?: boolean;
        enableTrueClientIp?: boolean;
        forwardHostname?: string;
        hostname?: string;
        port?: number;
    }

    export interface PropertyRuleError {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyRuleWarning {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

}

export namespace trafficmanagement {
    export interface GtmASmapAssignment {
        /**
         * Specifies an array of AS numbers.
         */
        asNumbers: number[];
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the group.
         */
        nickname: string;
    }

    export interface GtmASmapDefaultDatacenter {
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the group.
         */
        nickname?: string;
    }

    export interface GtmCidrmapAssignment {
        /**
         * Specifies an array of CIDR blocks.
         */
        blocks?: string[];
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the CIDR zone group, up to 256 characters.
         */
        nickname: string;
    }

    export interface GtmCidrmapDefaultDatacenter {
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the CIDR zone group, up to 256 characters.
         */
        nickname?: string;
    }

    export interface GtmDatacenterDefaultLoadObject {
        /**
         * A load object is a file that provides real-time information about the current load, maximum allowable load, and target load on each resource.
         */
        loadObject?: string;
        /**
         * Specifies the TCP port to connect to when requesting the load object.
         */
        loadObjectPort?: number;
        /**
         * Specifies a list of servers to request the load object from.
         */
        loadServers?: string[];
    }

    export interface GtmGeomapAssignment {
        /**
         * Specifies an array of two-letter ISO 3166 country codes, or for finer subdivisions, the two-letter country code and the two-letter stateOrProvince code separated by a forward slash.
         */
        countries?: string[];
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the group.
         */
        nickname: string;
    }

    export interface GtmGeomapDefaultDatacenter {
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * A descriptive label for the group.
         */
        nickname?: string;
    }

    export interface GtmPropertyLivenessTest {
        /**
         * If `testObjectProtocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
         */
        answersRequired?: boolean;
        /**
         * A boolean that if set to `true`, disables warnings when non-standard ports are used.
         */
        disableNonstandardPortWarning?: boolean;
        /**
         * A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
         */
        disabled?: boolean;
        /**
         * Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
         */
        errorPenalty?: number;
        /**
         * A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
         */
        httpError3xx?: boolean;
        /**
         * A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
         */
        httpError4xx?: boolean;
        /**
         * A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
         */
        httpError5xx?: boolean;
        /**
         * Contains HTTP headers to send if the `testObjectProtocol` is `http` or `https`. You can have multiple `httpHeader` entries. Requires these arguments:
         */
        httpHeaders?: outputs.trafficmanagement.GtmPropertyLivenessTestHttpHeader[];
        /**
         * Name of HTTP header.
         */
        name: string;
        /**
         * A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `testObjectProtocol` of https.
         */
        peerCertificateVerification?: boolean;
        /**
         * A boolean indicating whether the `testObjectProtocol` is DNS. The DNS query is recursive.
         */
        recursionRequested?: boolean;
        /**
         * Specifies a request string.
         */
        requestString?: string;
        /**
         * Specifies the query type, if `testObjectProtocol` is DNS.
         */
        resourceType?: string;
        /**
         * Specifies a response string.
         */
        responseString?: string;
        /**
         * Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
         */
        sslClientCertificate?: string;
        /**
         * Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can't have a passphrase nor be used for any other purpose.
         */
        sslClientPrivateKey?: string;
        /**
         * Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
         */
        testInterval: number;
        /**
         * Specifies the static text that acts as a stand-in for the data that you're sending on the network.
         */
        testObject: string;
        /**
         * Specifies the test object's password. It is required if testObjectProtocol is ftp.
         */
        testObjectPassword?: string;
        /**
         * Specifies the port number for the testObject.
         */
        testObjectPort?: number;
        /**
         * Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
         */
        testObjectProtocol: string;
        /**
         * A descriptive name for the testObject.
         */
        testObjectUsername?: string;
        /**
         * Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
         */
        testTimeout: number;
        /**
         * Specifies the score to be reported if the liveness test times out.
         */
        timeoutPenalty?: number;
    }

    export interface GtmPropertyLivenessTestHttpHeader {
        /**
         * Name of HTTP header.
         */
        name?: string;
        /**
         * Value of HTTP header.
         */
        value?: string;
    }

    export interface GtmPropertyStaticRrSet {
        /**
         * (List) An array of data strings, representing multiple records within a set.
         */
        rdatas?: string[];
        /**
         * The number of seconds that this record should live in a resolver's cache before being refetched.
         */
        ttl?: number;
        /**
         * The record type.
         */
        type?: string;
    }

    export interface GtmPropertyTrafficTarget {
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId?: number;
        /**
         * A boolean indicating whether the traffic target is used. You can also omit the traffic target, which has the same result as the false value.
         */
        enabled?: boolean;
        /**
         * Specifies an optional data center for the property. Used when there are no servers configured for the property.
         */
        handoutCname?: string;
        /**
         * Name of HTTP header.
         */
        name?: string;
        /**
         * (List) Identifies the IP address or the hostnames of the servers.
         */
        servers?: string[];
        /**
         * Specifies the traffic weight for the target.
         */
        weight?: number;
    }

    export interface GtmResourceResourceInstance {
        /**
         * A unique identifier for an existing data center in the domain.
         */
        datacenterId: number;
        /**
         * Identifies the load object file used to report real-time information about the current load, maximum allowable load, and target load on each resource.
         */
        loadObject?: string;
        /**
         * Specifies the TCP port of the `loadObject`.
         */
        loadObjectPort?: number;
        /**
         * (List) Specifies a list of servers from which to request the load object.
         */
        loadServers?: string[];
        /**
         * A boolean that indicates whether a default `loadObject` is used for the resources.
         */
        useDefaultLoadObject?: boolean;
    }

}
