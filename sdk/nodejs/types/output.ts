// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CloudletsApplicationLoadBalancerDataCenter {
    city?: string;
    cloudServerHostHeaderOverride?: boolean;
    cloudService?: boolean;
    continent: string;
    country: string;
    hostname?: string;
    latitude: number;
    livenessHosts?: string[];
    longitude: number;
    originId: string;
    percent: number;
    stateOrProvince?: string;
}

export interface CloudletsApplicationLoadBalancerLivenessSettings {
    additionalHeaders?: {[key: string]: string};
    hostHeader?: string;
    interval?: number;
    path: string;
    peerCertificateVerification?: boolean;
    port: number;
    protocol: string;
    requestString?: string;
    responseString?: string;
    status3xxFailure?: boolean;
    status4xxFailure?: boolean;
    status5xxFailure?: boolean;
    timeout?: number;
}

export interface CpsDvEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface CpsDvEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    preferredTrustChain?: string;
    state: string;
}

export interface CpsDvEnrollmentDnsChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentHttpChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentNetworkConfiguration {
    clientMutualAuthentication?: outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication;
    cloneDnsNames?: boolean;
    disallowedTlsVersions?: string[];
    geography: string;
    mustHaveCiphers?: string;
    ocspStapling?: string;
    preferredCiphers?: string;
    quicEnabled?: boolean;
}

export interface CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled?: boolean;
    sendCaListToClient?: boolean;
    setId?: string;
}

export interface CpsDvEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface CpsDvEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface CpsThirdPartyEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface CpsThirdPartyEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    preferredTrustChain?: string;
    state: string;
}

export interface CpsThirdPartyEnrollmentNetworkConfiguration {
    clientMutualAuthentication?: outputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication;
    cloneDnsNames?: boolean;
    disallowedTlsVersions?: string[];
    geography: string;
    mustHaveCiphers?: string;
    ocspStapling?: string;
    preferredCiphers?: string;
    quicEnabled?: boolean;
}

export interface CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled?: boolean;
    sendCaListToClient?: boolean;
    setId?: string;
}

export interface CpsThirdPartyEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface CpsThirdPartyEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface DatastreamAzureConnector {
    accessKey: string;
    accountName: string;
    compressLogs: boolean;
    connectorId: number;
    connectorName: string;
    containerName: string;
    path: string;
}

export interface DatastreamConfig {
    delimiter?: string;
    format: string;
    frequency: outputs.DatastreamConfigFrequency;
    uploadFilePrefix?: string;
    uploadFileSuffix?: string;
}

export interface DatastreamConfigFrequency {
    timeInSec: number;
}

export interface DatastreamDatadogConnector {
    authToken: string;
    compressLogs?: boolean;
    connectorId: number;
    connectorName: string;
    service?: string;
    source?: string;
    tags?: string;
    url: string;
}

export interface DatastreamElasticsearchConnector {
    caCert?: string;
    clientCert?: string;
    clientKey?: string;
    connectorName: string;
    contentType?: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    endpoint: string;
    indexName: string;
    mTls: boolean;
    password: string;
    tlsHostname?: string;
    userName: string;
}

export interface DatastreamGcsConnector {
    bucket: string;
    compressLogs: boolean;
    connectorId: number;
    connectorName: string;
    path?: string;
    privateKey: string;
    projectId: string;
    serviceAccountName: string;
}

export interface DatastreamHttpsConnector {
    authenticationType: string;
    caCert?: string;
    clientCert?: string;
    clientKey?: string;
    compressLogs?: boolean;
    connectorId: number;
    connectorName: string;
    contentType?: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    mTls: boolean;
    password?: string;
    tlsHostname?: string;
    url: string;
    userName?: string;
}

export interface DatastreamLogglyConnector {
    authToken: string;
    connectorName: string;
    contentType?: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    endpoint: string;
    tags?: string;
}

export interface DatastreamNewRelicConnector {
    authToken: string;
    connectorName: string;
    contentType?: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    endpoint: string;
}

export interface DatastreamOracleConnector {
    accessKey: string;
    bucket: string;
    compressLogs: boolean;
    connectorId: number;
    connectorName: string;
    namespace: string;
    path: string;
    region: string;
    secretAccessKey: string;
}

export interface DatastreamS3Connector {
    accessKey: string;
    bucket: string;
    compressLogs: boolean;
    connectorId: number;
    connectorName: string;
    path: string;
    region: string;
    secretAccessKey: string;
}

export interface DatastreamSplunkConnector {
    caCert?: string;
    clientCert?: string;
    clientKey?: string;
    compressLogs?: boolean;
    connectorId: number;
    connectorName: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    eventCollectorToken: string;
    mTls: boolean;
    tlsHostname?: string;
    url: string;
}

export interface DatastreamSumologicConnector {
    collectorCode: string;
    compressLogs?: boolean;
    connectorId: number;
    connectorName: string;
    contentType?: string;
    customHeaderName?: string;
    customHeaderValue?: string;
    endpoint: string;
}

export interface DnsZoneTsigKey {
    algorithm: string;
    name: string;
    secret: string;
}

export interface EdgeKvInitialData {
    group?: string;
    key: string;
    value: string;
}

export interface GetCPSEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    preferredTrustChain: string;
    state: string;
}

export interface GetCPSEnrollmentDnsChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface GetCPSEnrollmentHttpChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface GetCPSEnrollmentNetworkConfiguration {
    clientMutualAuthentications: outputs.GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication[];
    cloneDnsNames: boolean;
    disallowedTlsVersions: string[];
    geography: string;
    mustHaveCiphers: string;
    ocspStapling: string;
    preferredCiphers: string;
    quicEnabled: boolean;
}

export interface GetCPSEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled: boolean;
    sendCaListToClient: boolean;
    setId: string;
}

export interface GetCPSEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface GetCPSEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentsEnrollment {
    adminContacts: outputs.GetCPSEnrollmentsEnrollmentAdminContact[];
    certificateChainType: string;
    certificateType: string;
    commonName: string;
    csrs: outputs.GetCPSEnrollmentsEnrollmentCsr[];
    enableMultiStackedCertificates: boolean;
    enrollmentId: number;
    networkConfigurations: outputs.GetCPSEnrollmentsEnrollmentNetworkConfiguration[];
    organizations: outputs.GetCPSEnrollmentsEnrollmentOrganization[];
    pendingChanges: boolean;
    registrationAuthority: string;
    sans: string[];
    secureNetwork: string;
    signatureAlgorithm: string;
    sniOnly: boolean;
    techContacts: outputs.GetCPSEnrollmentsEnrollmentTechContact[];
    validationType: string;
}

export interface GetCPSEnrollmentsEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCPSEnrollmentsEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    preferredTrustChain: string;
    state: string;
}

export interface GetCPSEnrollmentsEnrollmentNetworkConfiguration {
    clientMutualAuthentications: outputs.GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthentication[];
    cloneDnsNames: boolean;
    disallowedTlsVersions: string[];
    geography: string;
    mustHaveCiphers: string;
    ocspStapling: string;
    preferredCiphers: string;
    quicEnabled: boolean;
}

export interface GetCPSEnrollmentsEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled: boolean;
    sendCaListToClient: boolean;
    setId: string;
}

export interface GetCPSEnrollmentsEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface GetCPSEnrollmentsEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    matchUrl?: string;
    matches?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch[];
    name?: string;
    passThroughPercent: number;
    start?: number;
    type: string;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerDataCenter {
    city: string;
    cloudServerHostHeaderOverride: boolean;
    cloudService: boolean;
    continent: string;
    country: string;
    hostname: string;
    latitude: number;
    livenessHosts: string[];
    longitude: number;
    originId: string;
    percent: number;
    stateOrProvince: string;
}

export interface GetCloudletsApplicationLoadBalancerLivenessSetting {
    additionalHeaders: {[key: string]: string};
    hostHeader: string;
    interval: number;
    path: string;
    peerCertificateVerification: boolean;
    port: number;
    protocol: string;
    requestString: string;
    responseString: string;
    status3xxFailure: boolean;
    status4xxFailure: boolean;
    status5xxFailure: boolean;
    timeout: number;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    forwardSettings: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting[];
    id?: number;
    matchUrl?: string;
    matches?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch[];
    matchesAlways?: boolean;
    name?: string;
    start?: number;
    type: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting {
    originId: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    forwardSettings: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings;
    matchUrl?: string;
    matches?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch[];
    name?: string;
    start?: number;
    type: string;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings {
    originId?: string;
    pathAndQs?: string;
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    matchUrl?: string;
    matches?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch[];
    name?: string;
    redirectUrl: string;
    start?: number;
    statusCode: number;
    type: string;
    useIncomingQueryString?: boolean;
    useRelativeUrl?: string;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    forwardSettings: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings;
    matchUrl?: string;
    matches?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatch[];
    name?: string;
    start?: number;
    type: string;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings {
    originId?: string;
    pathAndQs?: string;
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    forwardSettings: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings;
    matchUrl?: string;
    matches?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch[];
    matchesAlways?: boolean;
    name?: string;
    start?: number;
    type: string;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings {
    originId: string;
    percent: number;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsPolicyActivation {
    apiVersion: string;
    network: string;
    policyInfos: outputs.GetCloudletsPolicyActivationPolicyInfo[];
    propertyInfos: outputs.GetCloudletsPolicyActivationPropertyInfo[];
}

export interface GetCloudletsPolicyActivationPolicyInfo {
    activatedBy: string;
    activationDate: number;
    name: string;
    policyId: number;
    status: string;
    statusDetail: string;
    version: number;
}

export interface GetCloudletsPolicyActivationPropertyInfo {
    activatedBy: string;
    activationDate: number;
    groupId: number;
    name: string;
    status: string;
    version: number;
}

export interface GetCloudletsRequestControlMatchRuleMatchRule {
    allowDeny: string;
    disabled?: boolean;
    end?: number;
    matches?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatch[];
    matchesAlways?: boolean;
    name?: string;
    start?: number;
    type: string;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRule {
    disabled?: boolean;
    end?: number;
    matchUrl?: string;
    matches?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch[];
    name?: string;
    passThroughPercent: number;
    start?: number;
    type: string;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch {
    caseSensitive?: boolean;
    checkIps?: string;
    matchOperator?: string;
    matchType?: string;
    matchValue?: string;
    negate?: boolean;
    objectMatchValues?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    name?: string;
    nameCaseSensitive?: boolean;
    nameHasWildcard?: boolean;
    options?: outputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    type: string;
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    valueCaseSensitive?: boolean;
    valueEscaped?: boolean;
    valueHasWildcard?: boolean;
    values?: string[];
}

export interface GetContractsContract {
    contractId: string;
    contractTypeName: string;
}

export interface GetDatastreamActivationHistoryActivation {
    createdBy: string;
    createdDate: string;
    isActive: boolean;
    streamId: number;
    streamVersionId: number;
}

export interface GetDatastreamDatasetFieldsField {
    datasetFields: outputs.GetDatastreamDatasetFieldsFieldDatasetField[];
    datasetGroupDescription: string;
    datasetGroupName: string;
}

export interface GetDatastreamDatasetFieldsFieldDatasetField {
    datasetFieldDescription: string;
    datasetFieldId: number;
    datasetFieldJsonKey: string;
    datasetFieldName: string;
}

export interface GetDatastreamsStream {
    activationStatus: string;
    archived: boolean;
    connectors: string;
    contractId: string;
    createdBy: string;
    createdDate: string;
    currentVersionId: number;
    errors: outputs.GetDatastreamsStreamError[];
    groupId: number;
    groupName: string;
    properties: outputs.GetDatastreamsStreamProperty[];
    streamId: number;
    streamName: string;
    streamTypeName: string;
    streamVersionId: number;
}

export interface GetDatastreamsStreamError {
    detail: string;
    title: string;
    type: string;
}

export interface GetDatastreamsStreamProperty {
    propertyId: number;
    propertyName: string;
}

export interface GetGroupsGroup {
    contractIds: string[];
    groupId: string;
    groupName: string;
    parentGroupId: string;
}

export interface GetGtmDatacenterDefaultLoadObject {
    loadObject: string;
    loadObjectPort: number;
    loadServers: string[];
}

export interface GetGtmDatacenterLink {
    href: string;
    rel: string;
}

export interface GetGtmDatacentersDatacenter {
    city: string;
    cloneOf: number;
    cloudServerHostHeaderOverride: boolean;
    cloudServerTargeting: boolean;
    continent: string;
    country: string;
    datacenterId: number;
    defaultLoadObjects: outputs.GetGtmDatacentersDatacenterDefaultLoadObject[];
    latitude: number;
    links: outputs.GetGtmDatacentersDatacenterLink[];
    longitude: number;
    nickname: string;
    scorePenalty: number;
    servermonitorPool: string;
    stateOrProvince: string;
    virtual: boolean;
}

export interface GetGtmDatacentersDatacenterDefaultLoadObject {
    loadObject: string;
    loadObjectPort: number;
    loadServers: string[];
}

export interface GetGtmDatacentersDatacenterLink {
    href: string;
    rel: string;
}

export interface GetIamGrantableRolesGrantableRole {
    description: string;
    grantedRoleId: number;
    name: string;
}

export interface GetIamRolesRole {
    createdBy: string;
    description: string;
    modifiedBy: string;
    name: string;
    roleId: string;
    timeCreated: string;
    timeModified: string;
    type: string;
}

export interface GetIamTimezonesTimezone {
    description: string;
    offset: string;
    posix: string;
    timezone: string;
}

export interface GetImagingPolicyImagePolicy {
    breakpoints?: outputs.GetImagingPolicyImagePolicyBreakpoints;
    hosts?: string[];
    output?: outputs.GetImagingPolicyImagePolicyOutput;
    postBreakpointTransformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformation[];
    rolloutDuration?: string;
    transformations?: outputs.GetImagingPolicyImagePolicyTransformation[];
    variables?: outputs.GetImagingPolicyImagePolicyVariable[];
}

export interface GetImagingPolicyImagePolicyBreakpoints {
    widths?: number[];
}

export interface GetImagingPolicyImagePolicyOutput {
    adaptiveQuality?: string;
    allowedFormats?: string[];
    forcedFormats?: string[];
    perceptualQuality?: string;
    perceptualQualityFloor?: string;
    perceptualQualityVar?: string;
    quality?: string;
    qualityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformation {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqual {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThan {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefault {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscape {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortrait {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquare {
    backgroundColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareContrast[];
    goops?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientation[];
    maxColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareOpacity[];
    removeColors?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareRemoveColor[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAppendImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImage {
    boxImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageBoxImage[];
    circleImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageCircleImage[];
    textImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageTextImage[];
    urlImages?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageBoxImage {
    color?: string;
    colorVar?: string;
    height?: string;
    heightVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageBoxImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageBoxImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageCircleImage {
    color?: string;
    colorVar?: string;
    diameter?: string;
    diameterVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageCircleImageTransformation;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageCircleImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageTextImage {
    fill?: string;
    fillVar?: string;
    size?: string;
    sizeVar?: string;
    stroke?: string;
    strokeSize?: string;
    strokeSizeVar?: string;
    strokeVar?: string;
    text?: string;
    textVar?: string;
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageTextImageTransformation;
    typeface?: string;
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageTextImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageUrlImage {
    transformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageUrlImageTransformation;
    url?: string;
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompositeImageUrlImageTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCompoundTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformation {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareFitAndFillFillTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqual {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionEqualUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionGreaterThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThan {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfDimensionLessThanUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefault {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationDefaultUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscape {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationLandscapeUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortrait {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationPortraitUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquare {
    appends?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAppend[];
    aspectCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAspectCrop[];
    backgroundColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareBackgroundColor[];
    blurs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareBlur[];
    chromaKeys?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareChromaKey[];
    composites?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareComposite[];
    compounds?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompound[];
    contrasts?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareContrast[];
    crops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCrop[];
    faceCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFaceCrop[];
    featureCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFeatureCrop[];
    fitAndFills?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFitAndFill[];
    goops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareGoop[];
    grayscales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareGrayscale[];
    hsls?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareHsl[];
    hsvs?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareHsv[];
    ifDimensions?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimension[];
    ifOrientations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientation[];
    imQueries?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareImQuery[];
    maxColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMaxColor[];
    mirrors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMirror[];
    monoHues?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMonoHue[];
    opacities?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareOpacity[];
    regionOfInterestCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRegionOfInterestCrop[];
    relativeCrops?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRelativeCrop[];
    removeColors?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRemoveColor[];
    resizes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareResize[];
    rotates?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRotate[];
    scales?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareScale[];
    shears?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareShears[];
    trims?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareTrim[];
    unsharpMasks?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAppend {
    gravity?: string;
    gravityPriority?: string;
    gravityPriorityVar?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAppendImage;
    preserveMinorDimension?: string;
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAppendImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareAspectCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareBackgroundColor {
    color?: string;
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareBlur {
    sigma?: string;
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareChromaKey {
    hue?: string;
    hueFeather?: string;
    hueFeatherVar?: string;
    hueTolerance?: string;
    hueToleranceVar?: string;
    hueVar?: string;
    lightnessFeather?: string;
    lightnessFeatherVar?: string;
    lightnessTolerance?: string;
    lightnessToleranceVar?: string;
    saturationFeather?: string;
    saturationFeatherVar?: string;
    saturationTolerance?: string;
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareComposite {
    gravity?: string;
    gravityVar?: string;
    image: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompositeImage;
    placement?: string;
    placementVar?: string;
    scale?: string;
    scaleDimension?: string;
    scaleDimensionVar?: string;
    scaleVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompositeImage {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompound {
    transformations?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompoundTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCompoundTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareContrast {
    brightness?: string;
    brightnessVar?: string;
    contrast?: string;
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareCrop {
    allowExpansion?: string;
    allowExpansionVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
    xPosition?: string;
    xPositionVar?: string;
    yPosition?: string;
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFaceCrop {
    algorithm?: string;
    algorithmVar?: string;
    confidence?: string;
    confidenceVar?: string;
    failGravity?: string;
    failGravityVar?: string;
    focus?: string;
    focusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFeatureCrop {
    failGravity?: string;
    failGravityVar?: string;
    featureRadius?: string;
    featureRadiusVar?: string;
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    maxFeatures?: string;
    maxFeaturesVar?: string;
    minFeatureQuality?: string;
    minFeatureQualityVar?: string;
    padding?: string;
    paddingVar?: string;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFitAndFill {
    fillTransformation?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFitAndFillFillTransformation;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareFitAndFillFillTransformation {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareGoop {
    chaos?: string;
    chaosVar?: string;
    density?: string;
    densityVar?: string;
    power?: string;
    powerVar?: string;
    seed?: string;
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareGrayscale {
    type?: string;
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareHsl {
    hue?: string;
    hueVar?: string;
    lightness?: string;
    lightnessVar?: string;
    saturation?: string;
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareHsv {
    hue?: string;
    hueVar?: string;
    saturation?: string;
    saturationVar?: string;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimension {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionDefault;
    dimension?: string;
    dimensionVar?: string;
    equal?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionEqual;
    greaterThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionGreaterThan;
    lessThan?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionLessThan;
    value?: string;
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionEqual {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionGreaterThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfDimensionLessThan {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientation {
    default?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationDefault;
    landscape?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationLandscape;
    portrait?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationPortrait;
    square?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationSquare;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationDefault {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationLandscape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationPortrait {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareIfOrientationSquare {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRegionOfInterestCropRegionOfInterest {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRegionOfInterestCropRegionOfInterestUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationSquareUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationImQuery {
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationMaxColor {
    colors?: string;
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationMirror {
    horizontal?: string;
    horizontalVar?: string;
    vertical?: string;
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationMonoHue {
    hue?: string;
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationOpacity {
    opacity?: string;
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop {
    gravity?: string;
    gravityVar?: string;
    height?: string;
    heightVar?: string;
    regionOfInterest: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest;
    style?: string;
    styleVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape {
    circleShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape[];
    pointShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShape[];
    polygonShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShape[];
    rectangleShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShape[];
    unionShapes?: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape {
    center: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter;
    radius?: string;
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShape {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShape {
    points: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePoint {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShape {
    anchor: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchor;
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchor {
    x?: string;
    xVar?: string;
    y?: string;
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShape {
    shapes: outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationRelativeCrop {
    east?: string;
    eastVar?: string;
    north?: string;
    northVar?: string;
    south?: string;
    southVar?: string;
    west?: string;
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRemoveColor {
    color?: string;
    colorVar?: string;
    feather?: string;
    featherVar?: string;
    tolerance?: string;
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationResize {
    aspect?: string;
    aspectVar?: string;
    height?: string;
    heightVar?: string;
    type?: string;
    typeVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRotate {
    degrees?: string;
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationScale {
    height?: string;
    heightVar?: string;
    width?: string;
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationShears {
    xShear?: string;
    xShearVar?: string;
    yShear?: string;
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationTrim {
    fuzz?: string;
    fuzzVar?: string;
    padding?: string;
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationUnsharpMask {
    gain?: string;
    gainVar?: string;
    sigma?: string;
    sigmaVar?: string;
    threshold?: string;
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyVariable {
    defaultValue: string;
    enumOptions?: outputs.GetImagingPolicyImagePolicyVariableEnumOption[];
    name: string;
    postfix?: string;
    prefix?: string;
    type: string;
}

export interface GetImagingPolicyImagePolicyVariableEnumOption {
    id: string;
    value: string;
}

export interface GetImagingPolicyVideoPolicy {
    breakpoints?: outputs.GetImagingPolicyVideoPolicyBreakpoints;
    hosts?: string[];
    output?: outputs.GetImagingPolicyVideoPolicyOutput;
    rolloutDuration?: string;
    variables?: outputs.GetImagingPolicyVideoPolicyVariable[];
}

export interface GetImagingPolicyVideoPolicyBreakpoints {
    widths?: number[];
}

export interface GetImagingPolicyVideoPolicyOutput {
    perceptualQuality?: string;
    perceptualQualityVar?: string;
    placeholderVideoUrl?: string;
    placeholderVideoUrlVar?: string;
    videoAdaptiveQuality?: string;
    videoAdaptiveQualityVar?: string;
}

export interface GetImagingPolicyVideoPolicyVariable {
    defaultValue: string;
    enumOptions?: outputs.GetImagingPolicyVideoPolicyVariableEnumOption[];
    name: string;
    postfix?: string;
    prefix?: string;
    type: string;
}

export interface GetImagingPolicyVideoPolicyVariableEnumOption {
    id: string;
    value: string;
}

export interface GetPropertiesProperty {
    contractId: string;
    groupId: string;
    latestVersion: number;
    note: string;
    productId: string;
    productionVersion: number;
    propertyId: string;
    propertyName: string;
    ruleFormat: string;
    stagingVersion: number;
}

export interface GetPropertiesSearchProperty {
    accountId: string;
    assetId: string;
    contractId: string;
    edgeHostname: string;
    groupId: string;
    hostname: string;
    productionStatus: string;
    propertyId: string;
    propertyName: string;
    propertyVersion: number;
    stagingStatus: string;
    updatedByUser: string;
    updatedDate: string;
}

export interface GetPropertyHostnamesHostname {
    certProvisioningType: string;
    certStatuses: outputs.GetPropertyHostnamesHostnameCertStatus[];
    cnameFrom: string;
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface GetPropertyHostnamesHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface GetPropertyIncludeParentsParent {
    id: string;
    isIncludeUsedInProductionVersion: boolean;
    isIncludeUsedInStagingVersion: boolean;
    name: string;
    productionVersion: string;
    stagingVersion: string;
}

export interface GetPropertyIncludesInclude {
    id: string;
    latestVersion: number;
    name: string;
    productionVersion: string;
    stagingVersion: string;
    type: string;
}

export interface GetPropertyIncludesParentProperty {
    id: string;
    version: number;
}

export interface GetPropertyProductsProduct {
    productId: string;
    productName: string;
}

export interface GetPropertyRulesBuilderRulesV20230105 {
    advancedOverride?: string;
    behaviors?: outputs.GetPropertyRulesBuilderRulesV20230105Behavior[];
    childrens?: string[];
    comments?: string;
    criteriaLocked?: boolean;
    criteriaMustSatisfy?: string;
    criterions?: outputs.GetPropertyRulesBuilderRulesV20230105Criterion[];
    customOverride?: outputs.GetPropertyRulesBuilderRulesV20230105CustomOverride;
    isSecure?: boolean;
    name: string;
    templateLink?: string;
    templateUuid?: string;
    uuid?: string;
    variables?: outputs.GetPropertyRulesBuilderRulesV20230105Variable[];
}

export interface GetPropertyRulesBuilderRulesV20230105Behavior {
    adScalerCircuitBreaker?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreaker;
    adaptiveAcceleration?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAcceleration;
    adaptiveImageCompression?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompression;
    advanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAdvanced;
    aggregatedReporting?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReporting;
    akamaizer?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizer;
    akamaizerTag?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTag;
    allHttpInCacheHierarchy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchy;
    allowCloudletsOrigins?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOrigins;
    allowDelete?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowDelete;
    allowHttpsCacheKeySharing?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharing;
    allowHttpsDowngrade?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngrade;
    allowOptions?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptions;
    allowPatch?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatch;
    allowPost?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPost;
    allowPut?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowPut;
    allowTransferEncoding?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncoding;
    altSvcHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeader;
    apiPrioritization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritization;
    applicationLoadBalancer?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancer;
    audienceSegmentation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentation;
    autoDomainValidation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidation;
    baseDirectory?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectory;
    bossBeaconing?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconing;
    breadcrumbs?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbs;
    breakConnection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnection;
    brotli?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorBrotli;
    cacheError?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheError;
    cacheId?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheId;
    cacheKeyIgnoreCase?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCase;
    cacheKeyQueryParams?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParams;
    cacheKeyRewrite?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewrite;
    cachePost?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCachePost;
    cacheRedirect?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirect;
    cacheTag?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTag;
    cacheTagVisible?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisible;
    caching?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCaching;
    centralAuthorization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorization;
    chaseRedirects?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirects;
    clientCharacteristics?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristics;
    cloudInterconnects?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnects;
    cloudWrapper?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapper;
    cloudWrapperAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvanced;
    conditionalOrigin?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOrigin;
    constructResponse?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponse;
    contentCharacteristics?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristics;
    contentCharacteristicsAmd?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmd;
    contentCharacteristicsDd?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDd;
    contentCharacteristicsWsdLargeFile?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFile;
    contentCharacteristicsWsdLive?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLive;
    contentCharacteristicsWsdVod?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVod;
    contentPrePosition?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePosition;
    contentTargetingProtection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtection;
    corsSupport?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupport;
    cpCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCode;
    customBehavior?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehavior;
    datastream?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDatastream;
    dcp?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcp;
    dcpAuthHmacTransformation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformation;
    dcpAuthRegexTransformation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformation;
    dcpAuthSubstringTransformation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformation;
    dcpAuthVariableExtractor?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractor;
    dcpDefaultAuthzGroups?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroups;
    dcpDevRelations?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelations;
    dcpRealTimeAuth?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuth;
    deliveryReceipt?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceipt;
    denyAccess?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccess;
    denyDirectFailoverAccess?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccess;
    deviceCharacteristicCacheId?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheId;
    deviceCharacteristicHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeader;
    dnsAsyncRefresh?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefresh;
    dnsPrefresh?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefresh;
    downgradeProtocol?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocol;
    downloadCompleteMarker?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarker;
    downloadNotification?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotification;
    downstreamCache?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCache;
    dynamicThroughtputOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimization;
    dynamicThroughtputOptimizationOverride?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverride;
    dynamicWebContent?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContent;
    ecmsBulkUpload?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUpload;
    ecmsDatabase?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabase;
    ecmsDataset?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDataset;
    ecmsObjectKey?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKey;
    edgeConnect?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnect;
    edgeLoadBalancingAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvanced;
    edgeLoadBalancingDataCenter?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenter;
    edgeLoadBalancingOrigin?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOrigin;
    edgeOriginAuthorization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorization;
    edgeRedirector?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirector;
    edgeScape?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScape;
    edgeSideIncludes?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludes;
    edgeWorker?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorker;
    enhancedAkamaiProtocol?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocol;
    enhancedProxyDetection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetection;
    epdForwardHeaderEnrichment?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichment;
    failAction?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailAction;
    failoverBotManagerFeatureCompatibility?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibility;
    fastInvalidate?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidate;
    firstPartyMarketing?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketing;
    firstPartyMarketingPlus?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlus;
    forwardRewrite?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewrite;
    frontEndOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimization;
    g2oheader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorG2oheader;
    globalRequestNumber?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumber;
    graphqlCaching?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCaching;
    gzipResponse?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponse;
    hdDataAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvanced;
    healthDetection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetection;
    hsafEipBinding?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBinding;
    http2?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp2;
    http3?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttp3;
    httpStrictTransportSecurity?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurity;
    httpToHttpsUpgrade?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgrade;
    imOverride?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImOverride;
    imageAndVideoManager?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManager;
    imageManager?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManager;
    imageManagerVideo?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideo;
    include?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInclude;
    inputValidation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidation;
    instant?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstant;
    instantConfig?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfig;
    largeFileOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimization;
    largeFileOptimizationAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvanced;
    limitBitRate?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRate;
    logCustom?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLogCustom;
    mPulse?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMPulse;
    manifestPersonalization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalization;
    manifestRerouting?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManifestRerouting;
    manualServerPush?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPush;
    mediaAcceleration?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAcceleration;
    mediaAccelerationQuicOptout?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptout;
    mediaClient?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaClient;
    mediaFileRetrievalOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimization;
    mediaOriginFailover?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailover;
    metadataCaching?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCaching;
    mobileSdkPerformance?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformance;
    modifyIncomingRequestHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeader;
    modifyIncomingResponseHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeader;
    modifyOutgoingRequestHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeader;
    modifyOutgoingResponseHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeader;
    modifyViaHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeader;
    origin?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOrigin;
    originCharacteristics?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristics;
    originCharacteristicsWsd?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsd;
    originFailureRecoveryMethod?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethod;
    originFailureRecoveryPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicy;
    originIpAcl?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAcl;
    persistentClientConnection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnection;
    persistentConnection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnection;
    personallyIdentifiableInformation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformation;
    phasedRelease?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedRelease;
    preconnect?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPreconnect;
    predictiveContentDelivery?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDelivery;
    predictivePrefetching?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetching;
    prefetch?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetch;
    prefetchable?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchable;
    prefreshCache?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCache;
    quality?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuality;
    quicBeta?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorQuicBeta;
    randomSeek?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeek;
    rapid?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRapid;
    readTimeout?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeout;
    realTimeReporting?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReporting;
    realUserMonitoring?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoring;
    redirect?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirect;
    redirectplus?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplus;
    refererChecking?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRefererChecking;
    removeQueryParameter?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameter;
    removeVary?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVary;
    report?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReport;
    requestControl?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControl;
    requestTypeMarker?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarker;
    resourceOptimizer?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizer;
    resourceOptimizerExtendedCompatibility?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibility;
    responseCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCode;
    responseCookie?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookie;
    restrictObjectCaching?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCaching;
    returnCacheStatus?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatus;
    rewriteUrl?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrl;
    rumCustom?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRumCustom;
    saasDefinitions?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitions;
    salesForceCommerceCloudClient?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClient;
    salesForceCommerceCloudProvider?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProvider;
    salesForceCommerceCloudProviderHostHeader?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeader;
    savePostDcaProcessing?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessing;
    scheduleInvalidation?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidation;
    scriptManagement?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagement;
    segmentedContentProtection?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtection;
    segmentedMediaOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimization;
    segmentedMediaStreamingPrefetch?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetch;
    setVariable?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSetVariable;
    shutr?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorShutr;
    simulateErrorCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCode;
    siteShield?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShield;
    standardTlsMigration?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration;
    standardTlsMigrationOverride?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverride;
    strictHeaderParsing?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsing;
    subCustomer?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomer;
    sureRoute?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSureRoute;
    tcpOptimization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimization;
    teaLeaf?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeaf;
    tieredDistribution?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistribution;
    tieredDistributionAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvanced;
    tieredDistributionCustomization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomization;
    timeout?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorTimeout;
    uidConfiguration?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorUidConfiguration;
    validateEntityTag?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTag;
    verifyJsonWebToken?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebToken;
    verifyJsonWebTokenForDcp?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcp;
    verifyTokenAuthorization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization;
    virtualWaitingRoom?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoom;
    virtualWaitingRoomWithEdgeWorkers?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkers;
    visitorPrioritization?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritization;
    visitorPrioritizationFifo?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifo;
    visitorPrioritizationFifoStandalone?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandalone;
    watermarking?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWatermarking;
    webApplicationFirewall?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewall;
    webSockets?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebSockets;
    webdav?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebdav;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAdScalerCircuitBreaker {
    fallbackActionResponseCodeBased?: string;
    locked?: boolean;
    responseCodeBased?: boolean;
    responseCodes?: string;
    responseDelayBased?: boolean;
    responseDelayThreshold?: string;
    returnErrorResponseCodeBased?: string;
    specifyYourOwnResponseCodeBased?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveAcceleration {
    abLogic?: string;
    abTesting?: string;
    compression?: string;
    cookieName?: string;
    enableBrotliCompression?: boolean;
    enableForNoncacheable?: boolean;
    enablePreconnect?: boolean;
    enablePush?: boolean;
    enableRo?: boolean;
    locked?: boolean;
    preloadEnable?: boolean;
    source?: string;
    templateUuid?: string;
    titleBrotli?: string;
    titleHttp2ServerPush?: string;
    titlePreconnect?: string;
    titlePreload?: string;
    titleRo?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAdaptiveImageCompression {
    compressMobile?: boolean;
    compressStandard?: boolean;
    locked?: boolean;
    templateUuid?: string;
    tier1MobileCompressionMethod?: string;
    tier1MobileCompressionValue?: number;
    tier1StandardCompressionMethod?: string;
    tier1StandardCompressionValue?: number;
    tier2MobileCompressionMethod?: string;
    tier2MobileCompressionValue?: number;
    tier2StandardCompressionMethod?: string;
    tier2StandardCompressionValue?: number;
    tier3MobileCompressionMethod?: string;
    tier3MobileCompressionValue?: number;
    tier3StandardCompressionMethod?: string;
    tier3StandardCompressionValue?: number;
    titleAicMobile?: string;
    titleAicNonmobile?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAdvanced {
    description?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    xml?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAggregatedReporting {
    attribute1?: string;
    attribute2?: string;
    attribute3?: string;
    attribute4?: string;
    attributesCount?: number;
    enabled?: boolean;
    locked?: boolean;
    reportName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizer {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTag {
    includeTagsAttribute?: boolean;
    locked?: boolean;
    matchHostname?: string;
    replaceAll?: boolean;
    replacementHostname?: string;
    scope?: string;
    tagsAttribute?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllHttpInCacheHierarchy {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowCloudletsOrigins {
    enabled?: boolean;
    honorBaseDirectory?: boolean;
    locked?: boolean;
    purgeOriginQueryParameter?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowDelete {
    allowBody?: boolean;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsCacheKeySharing {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowHttpsDowngrade {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowOptions {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowPatch {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowPost {
    allowWithoutContentLength?: boolean;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowPut {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAllowTransferEncoding {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAltSvcHeader {
    locked?: boolean;
    maxAge?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritization {
    alternateResponseCacheTtl?: number;
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicy;
    enabled?: boolean;
    label?: string;
    locked?: boolean;
    netStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorage;
    netStoragePath?: string;
    templateUuid?: string;
    throttledCpCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCode;
    throttledStatusCode?: number;
    useThrottledCpCode?: boolean;
    useThrottledStatusCode?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCode {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApiPrioritizationThrottledCpCodeCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancer {
    allDownNetStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorage;
    allDownNetStorageFile?: string;
    allDownStatusCode?: string;
    allDownTitle?: string;
    allowCachePrefresh?: boolean;
    cachedContentTitle?: string;
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicy;
    enabled?: boolean;
    failoverAttemptsThreshold?: number;
    failoverMode?: string;
    failoverOriginMaps?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMap[];
    failoverStatusCodes?: string[];
    failoverTitle?: string;
    label?: string;
    locked?: boolean;
    originCookieName?: string;
    specifyStickinessCookieDomain?: boolean;
    stickinessCookieAutomaticSalt?: boolean;
    stickinessCookieDomain?: string;
    stickinessCookieSalt?: string;
    stickinessCookieSetHttpOnlyFlag?: boolean;
    stickinessCookieType?: string;
    stickinessDuration?: string;
    stickinessExpirationDate?: string;
    stickinessRefresh?: boolean;
    stickinessTitle?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerAllDownNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorApplicationLoadBalancerFailoverOriginMap {
    fromOriginId?: string;
    toOriginIds?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentation {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicy;
    cloudletSharedPolicy?: number;
    enabled?: boolean;
    isSharedPolicy?: boolean;
    label?: string;
    locked?: boolean;
    populationCookieAutomaticSalt?: boolean;
    populationCookieDomain?: string;
    populationCookieIncludeRuleName?: boolean;
    populationCookieSalt?: string;
    populationCookieType?: string;
    populationDuration?: string;
    populationRefresh?: boolean;
    populationTitle?: string;
    segmentTrackingCookieName?: string;
    segmentTrackingCustomHeader?: string;
    segmentTrackingMethod?: string;
    segmentTrackingQueryParam?: string;
    segmentTrackingTitle?: string;
    specifyPopulationCookieDomain?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAudienceSegmentationCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorAutoDomainValidation {
    autodv?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorBaseDirectory {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorBossBeaconing {
    conditionalErrorPattern?: string;
    conditionalHttpStatuses?: string[];
    conditionalSamplingFrequency?: string;
    cpcodes?: string;
    enabled?: boolean;
    forwardType?: string;
    locked?: boolean;
    requestType?: string;
    samplingFrequency?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorBreadcrumbs {
    enabled?: boolean;
    locked?: boolean;
    loggingEnabled?: boolean;
    optMode?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorBreakConnection {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorBrotli {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheError {
    enabled?: boolean;
    locked?: boolean;
    preserveStale?: boolean;
    templateUuid?: string;
    ttl?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheId {
    elements?: string[];
    includeValue?: boolean;
    locked?: boolean;
    optional?: boolean;
    rule?: string;
    templateUuid?: string;
    uuid?: string;
    variableName?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyIgnoreCase {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyQueryParams {
    behavior?: string;
    exactMatch?: boolean;
    locked?: boolean;
    parameters?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheKeyRewrite {
    locked?: boolean;
    purgeKey?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCachePost {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    useBody?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheRedirect {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheTag {
    locked?: boolean;
    tag?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCacheTagVisible {
    behavior?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCaching {
    behavior?: string;
    cacheControlDirectives?: string;
    cacheabilitySettings?: string;
    defaultTtl?: string;
    enhancedRfcSupport?: boolean;
    expirationSettings?: string;
    honorMaxAge?: boolean;
    honorMustRevalidate?: boolean;
    honorNoCache?: boolean;
    honorNoStore?: boolean;
    honorPrivate?: boolean;
    honorProxyRevalidate?: boolean;
    honorSMaxage?: boolean;
    locked?: boolean;
    mustRevalidate?: boolean;
    revalidationSettings?: string;
    templateUuid?: string;
    ttl?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCentralAuthorization {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorChaseRedirects {
    enabled?: boolean;
    limit?: string;
    locked?: boolean;
    serve404?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorClientCharacteristics {
    country?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCloudInterconnects {
    cloudLocations?: string[];
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapper {
    enabled?: boolean;
    location?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCloudWrapperAdvanced {
    customFailoverMap?: string;
    enabled?: boolean;
    failoverMap?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorConditionalOrigin {
    locked?: boolean;
    originId?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorConstructResponse {
    body?: string;
    enabled?: boolean;
    forceEviction?: boolean;
    ignorePurge?: boolean;
    locked?: boolean;
    responseCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristics {
    catalogSize?: string;
    contentType?: string;
    locked?: boolean;
    objectSize?: string;
    popularityDistribution?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsAmd {
    catalogSize?: string;
    contentType?: string;
    dash?: boolean;
    hds?: boolean;
    hls?: boolean;
    locked?: boolean;
    popularityDistribution?: string;
    segmentDurationDash?: string;
    segmentDurationDashCustom?: number;
    segmentDurationHds?: string;
    segmentDurationHdsCustom?: number;
    segmentDurationHls?: string;
    segmentDurationHlsCustom?: number;
    segmentDurationSmooth?: string;
    segmentDurationSmoothCustom?: number;
    segmentSizeDash?: string;
    segmentSizeHds?: string;
    segmentSizeHls?: string;
    segmentSizeSmooth?: string;
    smooth?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsDd {
    catalogSize?: string;
    contentType?: string;
    locked?: boolean;
    objectSize?: string;
    optimizeOption?: boolean;
    popularityDistribution?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLargeFile {
    catalogSize?: string;
    contentType?: string;
    locked?: boolean;
    objectSize?: string;
    popularityDistribution?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdLive {
    catalogSize?: string;
    contentType?: string;
    dash?: boolean;
    hds?: boolean;
    hls?: boolean;
    locked?: boolean;
    popularityDistribution?: string;
    segmentDurationDash?: string;
    segmentDurationHds?: string;
    segmentDurationHls?: string;
    segmentDurationSmooth?: string;
    segmentSizeDash?: string;
    segmentSizeHds?: string;
    segmentSizeHls?: string;
    segmentSizeSmooth?: string;
    smooth?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentCharacteristicsWsdVod {
    catalogSize?: string;
    contentType?: string;
    dash?: boolean;
    hds?: boolean;
    hls?: boolean;
    locked?: boolean;
    popularityDistribution?: string;
    segmentDurationDash?: string;
    segmentDurationHds?: string;
    segmentDurationHls?: string;
    segmentDurationSmooth?: string;
    segmentSizeDash?: string;
    segmentSizeHds?: string;
    segmentSizeHls?: string;
    segmentSizeSmooth?: string;
    smooth?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentPrePosition {
    enabled?: boolean;
    firstLocation?: string;
    locked?: boolean;
    secondLocation?: string;
    sourceType?: string;
    targets?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorContentTargetingProtection {
    countries?: string[];
    dmas?: string[];
    enableGeoProtection?: boolean;
    enableGeoRedirectOnDeny?: boolean;
    enableIpProtection?: boolean;
    enableIpRedirectOnDeny?: boolean;
    enableReferrerProtection?: boolean;
    enableReferrerRedirectOnDeny?: boolean;
    enabled?: boolean;
    geoProtectionMode?: string;
    geoProtectionTitle?: string;
    geoRedirectUrl?: string;
    ipAddresses?: string[];
    ipProtectionMode?: string;
    ipProtectionTitle?: string;
    ipRedirectUrl?: string;
    locked?: boolean;
    overrideIpAddresses?: string[];
    referrerDomains?: string[];
    referrerProtectionMode?: string;
    referrerProtectionTitle?: string;
    referrerRedirectUrl?: string;
    regions?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCorsSupport {
    allowCredentials?: boolean;
    allowHeaders?: string;
    allowOrigins?: string;
    enabled?: boolean;
    exposeHeaders?: string[];
    headers?: string[];
    locked?: boolean;
    methods?: string[];
    origins?: string[];
    preflightMaxAge?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCpCode {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValue;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValue {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCpCodeValueCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorCustomBehavior {
    behaviorId?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDatastream {
    beaconStreamTitle?: string;
    collectMidgressTraffic?: boolean;
    datastreamIds?: string;
    enabled?: boolean;
    locked?: boolean;
    logEnabled?: boolean;
    logStreamName?: number;
    logStreamTitle?: string;
    samplingPercentage?: number;
    streamType?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcp {
    anonymous?: boolean;
    enabled?: boolean;
    gwenabled?: boolean;
    locked?: boolean;
    namespaceId?: string;
    templateUuid?: string;
    tlsenabled?: boolean;
    uuid?: string;
    wsenabled?: boolean;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthHmacTransformation {
    hashConversionAlgorithm?: string;
    hashConversionKey?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthRegexTransformation {
    locked?: boolean;
    regexPattern?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthSubstringTransformation {
    locked?: boolean;
    substringEnd?: string;
    substringStart?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpAuthVariableExtractor {
    certificateField?: string;
    dcpMutualAuthProcessingVariableId?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpDefaultAuthzGroups {
    groupNames?: string[];
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpDevRelations {
    customValues?: boolean;
    enabled?: boolean;
    hostname?: string;
    locked?: boolean;
    path?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDcpRealTimeAuth {
    extractHostname?: boolean;
    extractJurisdiction?: boolean;
    extractNamespace?: boolean;
    hostnameClaim?: string;
    jurisdictionClaim?: string;
    locked?: boolean;
    namespaceClaim?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDeliveryReceipt {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDenyAccess {
    enabled?: boolean;
    locked?: boolean;
    reason?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDenyDirectFailoverAccess {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicCacheId {
    elements?: string[];
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDeviceCharacteristicHeader {
    elements?: string[];
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDnsAsyncRefresh {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    timeout?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDnsPrefresh {
    delay?: string;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    timeout?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDowngradeProtocol {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDownloadCompleteMarker {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDownloadNotification {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDownstreamCache {
    allowBehavior?: string;
    behavior?: string;
    locked?: boolean;
    sendHeaders?: string;
    sendPrivate?: boolean;
    templateUuid?: string;
    ttl?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimization {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDynamicThroughtputOptimizationOverride {
    locked?: boolean;
    templateUuid?: string;
    throughput?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorDynamicWebContent {
    imageCompression?: boolean;
    locked?: boolean;
    prefetch?: boolean;
    realUserMonitoring?: boolean;
    sureRoute?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEcmsBulkUpload {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDatabase {
    database?: string;
    extractLocation?: string;
    headerName?: string;
    locked?: boolean;
    queryParameterName?: string;
    regexPattern?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEcmsDataset {
    dataset?: string;
    extractLocation?: string;
    headerName?: string;
    locked?: boolean;
    queryParameterName?: string;
    regexPattern?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEcmsObjectKey {
    locked?: boolean;
    regex?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeConnect {
    aggregateLines?: string;
    aggregateSize?: string;
    aggregateTime?: string;
    apiConnector?: string;
    apiDataElements?: string[];
    destinationHostname?: string;
    destinationPath?: string;
    enabled?: boolean;
    locked?: boolean;
    overrideAggregateSettings?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingAdvanced {
    description?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    xml?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenter {
    cookieName?: string;
    description?: string;
    enableFailover?: boolean;
    failoverRules?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRule[];
    failoverTitle?: string;
    hostname?: string;
    ip?: string;
    locked?: boolean;
    originId?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRule {
    absolutePath?: boolean;
    contextRoot?: string;
    failoverHostname?: string;
    modifyRequest?: boolean;
    overrideHostname?: boolean;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingOrigin {
    cookieName?: string;
    description?: string;
    enableSessionPersistence?: boolean;
    hostname?: string;
    id?: string;
    locked?: boolean;
    sessionPersistenceTitle?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeOriginAuthorization {
    cookieName?: string;
    domain?: string;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirector {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicy;
    cloudletSharedPolicy?: number;
    enabled?: boolean;
    isSharedPolicy?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeRedirectorCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeScape {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeSideIncludes {
    detectInjection?: boolean;
    enableViaHttp?: boolean;
    enabled?: boolean;
    i18nCharsets?: string[];
    i18nStatus?: boolean;
    locked?: boolean;
    passClientIp?: boolean;
    passSetCookie?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEdgeWorker {
    createEdgeWorker?: string;
    edgeWorkerId?: string;
    enabled?: boolean;
    locked?: boolean;
    resourceTier?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedAkamaiProtocol {
    display?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEnhancedProxyDetection {
    anonymousVpn?: string;
    bestPracticeAction?: string;
    bestPracticeRedirecturl?: string;
    detectAnonymousVpn?: boolean;
    detectAnonymousVpnAction?: string;
    detectAnonymousVpnRedirecturl?: string;
    detectHostingProvider?: boolean;
    detectHostingProviderAction?: string;
    detectHostingProviderRedirecturl?: string;
    detectPublicProxy?: boolean;
    detectPublicProxyAction?: string;
    detectPublicProxyRedirecturl?: string;
    detectResidentialProxy?: boolean;
    detectResidentialProxyAction?: string;
    detectResidentialProxyRedirecturl?: string;
    detectSmartDnsProxy?: boolean;
    detectSmartDnsProxyAction?: string;
    detectSmartDnsProxyRedirecturl?: string;
    detectTorExitNode?: boolean;
    detectTorExitNodeAction?: string;
    detectTorExitNodeRedirecturl?: string;
    detectVpnDataCenter?: boolean;
    detectVpnDataCenterAction?: string;
    detectVpnDataCenterRedirecturl?: string;
    enableConfigurationMode?: string;
    enabled?: boolean;
    forwardHeaderEnrichment?: boolean;
    hostingProvider?: string;
    locked?: boolean;
    publicProxy?: string;
    residentialProxy?: string;
    smartDnsProxy?: string;
    templateUuid?: string;
    torExitNode?: string;
    uuid?: string;
    vpnDataCenter?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorEpdForwardHeaderEnrichment {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFailAction {
    actionType?: string;
    allowFcmParentOverride?: boolean;
    cexCustomPath?: boolean;
    cexHostname?: string;
    cexPath?: string;
    contentCustomPath?: boolean;
    contentHostname?: string;
    contentPath?: string;
    cpCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCode;
    dynamicCustomPath?: boolean;
    dynamicMethod?: string;
    dynamicPath?: string;
    enabled?: boolean;
    locked?: boolean;
    modifyProtocol?: boolean;
    netStorageHostname?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostname;
    netStoragePath?: string;
    preserveQueryString?: boolean;
    protocol?: string;
    redirectCustomPath?: boolean;
    redirectHostname?: string;
    redirectHostnameType?: string;
    redirectMethod?: number;
    redirectPath?: string;
    saasCnameEnabled?: boolean;
    saasCnameLevel?: number;
    saasCookie?: string;
    saasQueryString?: string;
    saasRegex?: string;
    saasReplace?: string;
    saasSuffix?: string;
    saasType?: string;
    statusCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCode {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFailActionCpCodeCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFailActionNetStorageHostname {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFailoverBotManagerFeatureCompatibility {
    compatibility?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFastInvalidate {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketing {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicy;
    enabled?: boolean;
    javaScriptInsertionRule?: string;
    locked?: boolean;
    mediaMathPrefix?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlus {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicy;
    enabled?: boolean;
    javaScriptInsertionRule?: string;
    locked?: boolean;
    mediaMathPrefix?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFirstPartyMarketingPlusCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewrite {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicy;
    cloudletSharedPolicy?: number;
    enabled?: boolean;
    isSharedPolicy?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorForwardRewriteCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorFrontEndOptimization {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorG2oheader {
    customSignStrings?: string[];
    dataHeader?: string;
    enabled?: boolean;
    encodingVersion?: number;
    locked?: boolean;
    nonce?: string;
    secretKey?: string;
    signedHeader?: string;
    templateUuid?: string;
    useCustomSignString?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorGlobalRequestNumber {
    headerName?: string;
    locked?: boolean;
    outputOption?: string;
    templateUuid?: string;
    uuid?: string;
    variableName?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorGraphqlCaching {
    advanced?: string;
    cacheResponsesWithErrors?: boolean;
    enabled?: boolean;
    locked?: boolean;
    operationsJsonBodyParameterName?: string;
    operationsUrlQueryParameterName?: string;
    postRequestProcessingErrorHandling?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorGzipResponse {
    behavior?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHdDataAdvanced {
    description?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    xml?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHealthDetection {
    locked?: boolean;
    maximumReconnects?: number;
    retryCount?: number;
    retryInterval?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHsafEipBinding {
    customExtractedSerial?: boolean;
    enabled?: boolean;
    hashMaxValue?: number;
    hashMinValue?: number;
    locked?: boolean;
    templateUuid?: string;
    tier?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHttp2 {
    enabled?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHttp3 {
    enable?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHttpStrictTransportSecurity {
    enable?: boolean;
    includeSubDomains?: boolean;
    locked?: boolean;
    maxAge?: string;
    preload?: boolean;
    redirect?: boolean;
    redirectStatusCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorHttpToHttpsUpgrade {
    locked?: boolean;
    templateUuid?: string;
    upgrade?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImOverride {
    dpr?: number;
    dprvar?: string;
    excludeAllQueryParameters?: boolean;
    excludedQueryParameters?: string[];
    format?: string;
    formatvar?: string;
    locked?: boolean;
    override?: string;
    policy?: string;
    policyvar?: string;
    policyvarIMvar?: string;
    policyvarName?: string;
    templateUuid?: string;
    typesel?: string;
    uuid?: string;
    width?: number;
    widthvar?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManager {
    applyBestFileType?: boolean;
    cpCodeOriginal?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginal;
    cpCodeTransformed?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformed;
    enabled?: boolean;
    imageSet?: string;
    locked?: boolean;
    policySetType?: string;
    resize?: boolean;
    templateUuid?: string;
    uuid?: string;
    videoSet?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginal {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeOriginalCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformed {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageAndVideoManagerCpCodeTransformedCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManager {
    advanced?: boolean;
    apiReferenceTitle?: string;
    applyBestFileType?: boolean;
    cpCodeOriginal?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal;
    cpCodeTransformed?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed;
    enabled?: boolean;
    locked?: boolean;
    policySet?: string;
    policyToken?: string;
    policyTokenDefault?: string;
    resize?: boolean;
    settingsTitle?: string;
    superCacheRegion?: string;
    templateUuid?: string;
    trafficTitle?: string;
    useExistingPolicySet?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginalCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformedCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideo {
    advanced?: boolean;
    apiReferenceTitle?: string;
    applyBestFileType?: boolean;
    cpCodeOriginal?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginal;
    cpCodeTransformed?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformed;
    enabled?: boolean;
    locked?: boolean;
    policySet?: string;
    policyToken?: string;
    policyTokenDefault?: string;
    resize?: boolean;
    settingsTitle?: string;
    superCacheRegion?: string;
    templateUuid?: string;
    trafficTitle?: string;
    useExistingPolicySet?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginal {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeOriginalCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformed {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerVideoCpCodeTransformedCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInclude {
    id?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInputValidation {
    allowLargePostBody?: boolean;
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicy;
    enabled?: boolean;
    failure302Uri?: string;
    label?: string;
    locked?: boolean;
    penalty302Uri?: string;
    penalty403NetStoragePath?: string;
    penaltyAction?: string;
    penaltyBrandedDenyCacheTtl?: number;
    penaltyNetStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorage;
    penaltyThreshold?: number;
    penaltyTitle?: string;
    resetOnValid?: boolean;
    templateUuid?: string;
    userIdentificationByCookie?: boolean;
    userIdentificationByHeaders?: boolean;
    userIdentificationByIp?: boolean;
    userIdentificationByParams?: boolean;
    userIdentificationKeyCookie?: string;
    userIdentificationKeyHeaders?: string[];
    userIdentificationKeyParams?: string[];
    userIdentificationTitle?: string;
    uuid?: string;
    validateOnOriginHeaderName?: string;
    validateOnOriginHeaderValue?: string;
    validateOnOriginResponseCode?: number;
    validateOnOriginWith?: string;
    validationTitle?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInstant {
    customLinkRelations?: string[];
    locked?: boolean;
    prefetchCacheable?: boolean;
    prefetchHtml?: boolean;
    prefetchNoStore?: boolean;
    prefetchNoStoreExtensions?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorInstantConfig {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimization {
    enablePartialObjectCaching?: string;
    enabled?: boolean;
    locked?: boolean;
    maximumSize?: string;
    minimumSize?: string;
    templateUuid?: string;
    useVersioning?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLargeFileOptimizationAdvanced {
    enabled?: boolean;
    fragmentSize?: string;
    locked?: boolean;
    objectSize?: string;
    prefetchAfterRequest?: number;
    prefetchDuringRequest?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRate {
    bitrateTables?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTable[];
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    thresholdTables?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTable[];
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateBitrateTable {
    bitrateUnit?: string;
    bitrateValue?: number;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLimitBitRateThresholdTable {
    thresholdUnit?: string;
    thresholdValue?: number;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorLogCustom {
    customLogField?: string;
    locked?: boolean;
    logCustomLogField?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMPulse {
    apiKey?: string;
    bufferSize?: string;
    configOverride?: string;
    enabled?: boolean;
    loaderVersion?: string;
    locked?: boolean;
    requirePci?: boolean;
    templateUuid?: string;
    titleOptional?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorManifestPersonalization {
    enabled?: boolean;
    hlsEnableDebugHeaders?: boolean;
    hlsEnabled?: boolean;
    hlsFilterInBitrateRanges?: string;
    hlsFilterInBitrates?: string;
    hlsMode?: string;
    hlsPreferredBitrate?: string;
    hlsQueryParamEnabled?: boolean;
    hlsQueryParamSecretKey?: string;
    hlsQueryParamTransitionKey?: string;
    hlsShowAdvanced?: boolean;
    hlsTitle?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorManifestRerouting {
    locked?: boolean;
    partner?: string;
    templateUuid?: string;
    username?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorManualServerPush {
    locked?: boolean;
    serverpushlists?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMediaAcceleration {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMediaAccelerationQuicOptout {
    locked?: boolean;
    optout?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMediaClient {
    beaconId?: string;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    useHybridHttpUdp?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMediaFileRetrievalOptimization {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMediaOriginFailover {
    cacheErrorResponse?: boolean;
    cacheWindow?: string;
    clientResponseCode?: string;
    detectObjectUnavailable?: boolean;
    detectObjectUnavailableTitle?: string;
    detectOriginUnavailable?: boolean;
    detectOriginUnavailableTitle?: string;
    detectOriginUnresponsive?: boolean;
    detectOriginUnresponsiveTitle?: string;
    locked?: boolean;
    objectUnavailableAlternateHost?: string;
    objectUnavailableBackupHost?: string;
    objectUnavailableBlacklistOriginIp?: boolean;
    objectUnavailableBlacklistWindow?: string;
    objectUnavailableChangeProtocol?: boolean;
    objectUnavailableDetectionLevel?: string;
    objectUnavailableIncludeQueryString?: boolean;
    objectUnavailableModifiedPath?: string;
    objectUnavailableModifyRequestPath?: boolean;
    objectUnavailableProtocol?: string;
    objectUnavailableRecovery?: string;
    objectUnavailableRedirectMethod?: number;
    objectUnavailableResponseCodes?: string[];
    objectUnavailableRetryLimit?: string;
    originUnavailableAlternateHost?: string;
    originUnavailableBackupHost?: string;
    originUnavailableBlacklistOriginIp?: boolean;
    originUnavailableBlacklistWindow?: string;
    originUnavailableChangeProtocol?: boolean;
    originUnavailableDetectionLevel?: string;
    originUnavailableIncludeQueryString?: boolean;
    originUnavailableModifiedPath?: string;
    originUnavailableModifyRequestPath?: boolean;
    originUnavailableProtocol?: string;
    originUnavailableRecovery?: string;
    originUnavailableRedirectMethod?: number;
    originUnavailableResponseCodes?: string[];
    originUnavailableRetryLimit?: string;
    originUnresponsiveAlternateHost?: string;
    originUnresponsiveBackupHost?: string;
    originUnresponsiveBlacklistOriginIp?: boolean;
    originUnresponsiveBlacklistWindow?: string;
    originUnresponsiveChangeProtocol?: boolean;
    originUnresponsiveDetectionLevel?: string;
    originUnresponsiveIncludeQueryString?: boolean;
    originUnresponsiveModifiedPath?: string;
    originUnresponsiveModifyRequestPath?: boolean;
    originUnresponsiveProtocol?: string;
    originUnresponsiveRecovery?: string;
    originUnresponsiveRedirectMethod?: number;
    originUnresponsiveRetryLimit?: string;
    otherOptions?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMetadataCaching {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorMobileSdkPerformance {
    enabled?: boolean;
    locked?: boolean;
    secondaryMultipathToOrigin?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingRequestHeader {
    action?: string;
    avoidDuplicateHeaders?: boolean;
    customHeaderName?: string;
    headerValue?: string;
    locked?: boolean;
    newHeaderValue?: string;
    standardAddHeaderName?: string;
    standardDeleteHeaderName?: string;
    standardModifyHeaderName?: string;
    standardPassHeaderName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorModifyIncomingResponseHeader {
    action?: string;
    avoidDuplicateHeaders?: boolean;
    customHeaderName?: string;
    headerValue?: string;
    locked?: boolean;
    newHeaderValue?: string;
    standardAddHeaderName?: string;
    standardDeleteHeaderName?: string;
    standardModifyHeaderName?: string;
    standardPassHeaderName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingRequestHeader {
    action?: string;
    avoidDuplicateHeaders?: boolean;
    customHeaderName?: string;
    headerValue?: string;
    locked?: boolean;
    matchMultiple?: boolean;
    newHeaderValue?: string;
    regexHeaderMatch?: string;
    regexHeaderReplace?: string;
    standardAddHeaderName?: string;
    standardDeleteHeaderName?: string;
    standardModifyHeaderName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorModifyOutgoingResponseHeader {
    action?: string;
    avoidDuplicateHeaders?: boolean;
    customHeaderName?: string;
    headerValue?: string;
    locked?: boolean;
    matchMultiple?: boolean;
    newHeaderValue?: string;
    regexHeaderMatch?: string;
    regexHeaderReplace?: string;
    standardAddHeaderName?: string;
    standardDeleteHeaderName?: string;
    standardModifyHeaderName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorModifyViaHeader {
    enabled?: boolean;
    locked?: boolean;
    modificationOption?: string;
    renameHeaderTo?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOrigin {
    cacheKeyHostname?: string;
    compress?: boolean;
    customCertificateAuthorities?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthority[];
    customCertificates?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificate[];
    customForwardHostHeader?: string;
    customValidCnValues?: string[];
    enableTrueClientIp?: boolean;
    forwardHostHeader?: string;
    hostname?: string;
    httpPort?: number;
    httpsPort?: number;
    ipVersion?: string;
    locked?: boolean;
    mslorigin?: string;
    netStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorage;
    originCertificate?: string;
    originCertsToHonor?: string;
    originId?: string;
    originSni?: boolean;
    originType?: string;
    ports?: string;
    saasCnameEnabled?: boolean;
    saasCnameLevel?: number;
    saasCookie?: string;
    saasQueryString?: string;
    saasRegex?: string;
    saasReplace?: string;
    saasSuffix?: string;
    saasType?: string;
    secondHostname?: string;
    secondHostnameEnabled?: boolean;
    standardCertificateAuthorities?: string[];
    templateUuid?: string;
    trueClientIpClientSetting?: boolean;
    trueClientIpHeader?: string;
    useUniqueCacheKey?: boolean;
    uuid?: string;
    verificationMode?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristics {
    accessKeyEncryptedStorage?: boolean;
    adcTitle?: string;
    authenticationMethod?: string;
    authenticationMethodTitle?: string;
    awsAccessKeyId?: string;
    awsAccessKeyVersionGuid?: string;
    awsHost?: string;
    awsRegion?: string;
    awsSecretAccessKey?: string;
    awsService?: string;
    country?: string;
    customSignStrings?: string[];
    directConnectGeo?: string;
    encodingVersion?: number;
    gcsAccessKeyVersionGuid?: string;
    gcsHmacKeyAccessId?: string;
    gcsHmacKeySecret?: string;
    locked?: boolean;
    mslkey?: string;
    mslname?: string;
    nonce?: string;
    secretKey?: string;
    templateUuid?: string;
    useCustomSignString?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginCharacteristicsWsd {
    locked?: boolean;
    origintype?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificate {
    pemEncodedCert?: string;
    sha1Fingerprint?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginCustomCertificateAuthority {
    pemEncodedCert?: string;
    sha1Fingerprint?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryMethod {
    customStatusCode?: string;
    locked?: boolean;
    recoveryMethod?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginFailureRecoveryPolicy {
    binaryEquivalentContent?: boolean;
    enableIpAvoidance?: boolean;
    enabled?: boolean;
    ipAvoidanceErrorThreshold?: number;
    ipAvoidanceRetryInterval?: number;
    locked?: boolean;
    monitorOriginResponsiveness?: boolean;
    monitorResponseCodes1s?: string[];
    monitorResponseCodes2s?: string[];
    monitorResponseCodes3s?: string[];
    monitorStatusCodes1?: boolean;
    monitorStatusCodes1EnableRecovery?: boolean;
    monitorStatusCodes1EnableRetry?: boolean;
    monitorStatusCodes1RecoveryConfigName?: string;
    monitorStatusCodes2?: boolean;
    monitorStatusCodes2EnableRecovery?: boolean;
    monitorStatusCodes2EnableRetry?: boolean;
    monitorStatusCodes2RecoveryConfigName?: string;
    monitorStatusCodes3?: boolean;
    monitorStatusCodes3EnableRecovery?: boolean;
    monitorStatusCodes3EnableRetry?: boolean;
    monitorStatusCodes3RecoveryConfigName?: string;
    originResponsivenessCustomTimeout?: number;
    originResponsivenessEnableRecovery?: boolean;
    originResponsivenessEnableRetry?: boolean;
    originResponsivenessMonitoring?: string;
    originResponsivenessRecoveryConfigName?: string;
    originResponsivenessTimeout?: string;
    statusCodeMonitoring1?: string;
    statusCodeMonitoring2?: string;
    statusCodeMonitoring3?: string;
    templateUuid?: string;
    tuningParameters?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginIpAcl {
    enable?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorOriginNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPersistentClientConnection {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    timeout?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPersistentConnection {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    timeout?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPersonallyIdentifiableInformation {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPhasedRelease {
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicy;
    enabled?: boolean;
    failoverDuration?: number;
    failoverEnabled?: boolean;
    failoverResponseCodes?: string[];
    failoverTitle?: string;
    label?: string;
    locked?: boolean;
    populationCookieType?: string;
    populationDuration?: string;
    populationExpirationDate?: string;
    populationRefresh?: boolean;
    populationTitle?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPhasedReleaseCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPreconnect {
    locked?: boolean;
    preconnectlists?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPredictiveContentDelivery {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPredictivePrefetching {
    accuracyTarget?: string;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPrefetch {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPrefetchable {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorPrefreshCache {
    enabled?: boolean;
    locked?: boolean;
    prefreshval?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorQuality {
    audienceSettings?: string;
    catalogSize?: string;
    contentSettings?: string;
    contentType?: string;
    country?: string;
    deliveryFormat?: string;
    deliveryType?: string;
    downloadType?: string;
    endUserLocation?: string;
    locked?: boolean;
    maximumConcurrentUsers?: string;
    objectSize?: string;
    optimizeFor?: string;
    originSettings?: string;
    popularityDistribution?: string;
    refreshRate?: string;
    segmentDuration?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorQuicBeta {
    enabled?: boolean;
    locked?: boolean;
    quicOfferPercentage?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRandomSeek {
    flv?: boolean;
    locked?: boolean;
    maximumSize?: string;
    mp4?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRapid {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorReadTimeout {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRealTimeReporting {
    advanced?: boolean;
    beaconSamplingPercentage?: number;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRealUserMonitoring {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRedirect {
    destinationHostname?: string;
    destinationHostnameOther?: string;
    destinationHostnameSibling?: string;
    destinationHostnameSubdomain?: string;
    destinationPath?: string;
    destinationPathOther?: string;
    destinationPathPrefix?: string;
    destinationPathSuffix?: string;
    destinationPathSuffixStatus?: string;
    destinationProtocol?: string;
    locked?: boolean;
    mobileDefaultChoice?: string;
    queryString?: string;
    responseCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRedirectplus {
    destination?: string;
    enabled?: boolean;
    locked?: boolean;
    responseCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRefererChecking {
    allowChildren?: boolean;
    domains?: string[];
    enabled?: boolean;
    locked?: boolean;
    strict?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRemoveQueryParameter {
    locked?: boolean;
    parameters?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRemoveVary {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorReport {
    cookies?: string[];
    customLogField?: string;
    locked?: boolean;
    logAcceptLanguage?: boolean;
    logCookies?: string;
    logCustomLogField?: boolean;
    logEdgeIp?: boolean;
    logHost?: boolean;
    logReferer?: boolean;
    logUserAgent?: boolean;
    logXForwardedFor?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRequestControl {
    branded403File?: string;
    branded403StatusCode?: number;
    branded403Url?: string;
    brandedDenyCacheTtl?: number;
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicy;
    enableBranded403?: boolean;
    enabled?: boolean;
    locked?: boolean;
    netStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorage;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRequestControlNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRequestTypeMarker {
    locked?: boolean;
    requestType?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizer {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorResourceOptimizerExtendedCompatibility {
    enableAllFeatures?: boolean;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorResponseCode {
    locked?: boolean;
    override206?: boolean;
    statusCode?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorResponseCookie {
    cookieName?: string;
    defaultDomain?: boolean;
    defaultPath?: boolean;
    domain?: string;
    duration?: string;
    enabled?: boolean;
    expirationDate?: string;
    expires?: string;
    format?: string;
    httpOnly?: boolean;
    locked?: boolean;
    path?: string;
    sameSite?: string;
    secure?: boolean;
    templateUuid?: string;
    type?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRestrictObjectCaching {
    locked?: boolean;
    maximumSize?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorReturnCacheStatus {
    locked?: boolean;
    responseHeaderName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRewriteUrl {
    behavior?: string;
    keepQueryString?: boolean;
    locked?: boolean;
    match?: string;
    matchMultiple?: boolean;
    matchRegex?: string;
    targetPath?: string;
    targetPathPrepend?: string;
    targetRegex?: string;
    targetUrl?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorRumCustom {
    locked?: boolean;
    rumGroupName?: string;
    rumSampleRate?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSaasDefinitions {
    applicationAction?: string;
    applicationCnameEnabled?: boolean;
    applicationCnameLevel?: number;
    applicationCookie?: string;
    applicationQueryString?: string;
    applicationRegex?: string;
    applicationReplace?: string;
    applicationTitle?: string;
    customerAction?: string;
    customerCnameEnabled?: boolean;
    customerCnameLevel?: number;
    customerCookie?: string;
    customerQueryString?: string;
    customerRegex?: string;
    customerReplace?: string;
    customerTitle?: string;
    locked?: boolean;
    templateUuid?: string;
    usersAction?: string;
    usersCnameEnabled?: boolean;
    usersCnameLevel?: number;
    usersCookie?: string;
    usersQueryString?: string;
    usersRegex?: string;
    usersReplace?: string;
    usersTitle?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudClient {
    allowOverrideOriginCacheKey?: boolean;
    connectorId?: string;
    enabled?: boolean;
    locked?: boolean;
    originHostHeader?: string;
    originType?: string;
    sf3cOriginHost?: string;
    sf3cOriginHostHeader?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProvider {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSalesForceCommerceCloudProviderHostHeader {
    hostHeaderSource?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSavePostDcaProcessing {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorScheduleInvalidation {
    locked?: boolean;
    refreshMethod?: string;
    repeat?: boolean;
    repeatInterval?: string;
    start?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorScriptManagement {
    enabled?: boolean;
    locked?: boolean;
    serviceworker?: string;
    templateUuid?: string;
    timestamp?: number;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedContentProtection {
    acl?: boolean;
    dashMediaEncryption?: boolean;
    dataPayload?: boolean;
    enableTokenInUri?: boolean;
    enabled?: boolean;
    fieldCarryOver?: string;
    headerForSalts?: string[];
    hlsMasterManifestFiles?: string[];
    hlsMediaEncryption?: boolean;
    ip?: boolean;
    key?: string;
    locked?: boolean;
    mediaEncryptionTitle?: string;
    revokedListId?: number;
    salt?: string;
    sessionId?: boolean;
    templateUuid?: string;
    tokenAuthHlsTitle?: string;
    tokenAuthenticationTitle?: string;
    tokenRevocationEnabled?: boolean;
    tokenRevocationTitle?: string;
    transitionKey?: string;
    useAdvanced?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaOptimization {
    behavior?: string;
    dvrType?: string;
    dvrWindow?: string;
    enableUllStreaming?: boolean;
    endTime?: string;
    liveType?: string;
    locked?: boolean;
    showAdvanced?: boolean;
    startTime?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSegmentedMediaStreamingPrefetch {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSetVariable {
    algorithm?: string;
    caseSensitive?: boolean;
    certificateFieldName?: string;
    cookieName?: string;
    deviceProfile?: string;
    encryptionKey?: string;
    encryptionMode?: string;
    endIndex?: string;
    exceptChars?: string;
    extractLocation?: string;
    forceChars?: string;
    formatString?: string;
    generator?: string;
    globalSubstitution?: boolean;
    headerName?: string;
    hmacAlgorithm?: string;
    hmacKey?: string;
    initializationVector?: string;
    ipVersion?: string;
    ipv4Prefix?: number;
    ipv6Prefix?: number;
    locationId?: string;
    locked?: boolean;
    max?: number;
    maxRandomNumber?: string;
    min?: number;
    minRandomNumber?: string;
    nonce?: string;
    numberOfBytes?: number;
    operandOne?: string;
    paramName?: string;
    pathComponentOffset?: string;
    prependBytes?: boolean;
    queryParameterName?: string;
    regex?: string;
    replacement?: string;
    responseHeaderName?: string;
    separator?: string;
    setCookieName?: string;
    startIndex?: string;
    subString?: string;
    templateUuid?: string;
    transform?: string;
    uuid?: string;
    valueSource?: string;
    variableName?: string;
    variableValue?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorShutr {
    locked?: boolean;
    status?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSimulateErrorCode {
    errorType?: string;
    locked?: boolean;
    templateUuid?: string;
    timeout?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSiteShield {
    locked?: boolean;
    nossmap?: string;
    ssmap?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmap;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSiteShieldSsmap {
    name?: string;
    srmap?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration {
    allowHttpsDowngrade?: boolean;
    allowHttpsUpgrade?: boolean;
    cacheSharingDuration?: number;
    cacheSharingStartTime?: string;
    enabled?: boolean;
    isCertificateSniOnly?: boolean;
    isTieredDistributionUsed?: boolean;
    locked?: boolean;
    migrationDuration?: number;
    migrationFrom?: string;
    migrationStartTime?: string;
    tdLocation?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigrationOverride {
    info?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorStrictHeaderParsing {
    locked?: boolean;
    strictMode?: boolean;
    templateUuid?: string;
    uuid?: string;
    validMode?: boolean;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSubCustomer {
    accessControl?: boolean;
    cacheKey?: boolean;
    caching?: boolean;
    contentCompressor?: boolean;
    dynamicWebContent?: boolean;
    enabled?: boolean;
    geoLocation?: boolean;
    ip?: boolean;
    largeFileDelivery?: boolean;
    liveVideoDelivery?: boolean;
    locked?: boolean;
    modifyPath?: boolean;
    onDemandVideoDelivery?: boolean;
    origin?: boolean;
    partnerDomainSuffix?: string;
    referrer?: boolean;
    refreshContent?: boolean;
    siteFailover?: boolean;
    templateUuid?: string;
    tokenAuthorization?: boolean;
    uuid?: string;
    webApplicationFirewall?: boolean;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorSureRoute {
    allowFcmParentOverride?: boolean;
    customMap?: string;
    customStatKey?: string;
    enableCustomKey?: boolean;
    enabled?: boolean;
    forceSslForward?: boolean;
    locked?: boolean;
    raceStatTtl?: string;
    srDownloadLinkTitle?: string;
    templateUuid?: string;
    testObjectUrl?: string;
    toHost?: string;
    toHostStatus?: string;
    type?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTcpOptimization {
    display?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTeaLeaf {
    enabled?: boolean;
    ibmCustomerId?: number;
    limitToDynamic?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistribution {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    tieredDistributionMap?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionAdvanced {
    allowall?: boolean;
    enabled?: boolean;
    locked?: boolean;
    method?: string;
    policy?: string;
    templateUuid?: string;
    tieredDistributionMap?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTieredDistributionCustomization {
    cloudwrapperMapMigrationTitle?: string;
    customMapEnabled?: boolean;
    customMapName?: string;
    hashAlgorithm?: string;
    location?: string;
    locked?: boolean;
    mapMigrationEnabled?: boolean;
    migrationEndDate?: string;
    migrationStartDate?: string;
    migrationWithinCwMapsEnabled?: boolean;
    serialEnd?: string;
    serialStart?: string;
    templateUuid?: string;
    tier1Title?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorTimeout {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorUidConfiguration {
    enabled?: boolean;
    extractLocation?: string;
    headerName?: string;
    legalText?: string;
    locked?: boolean;
    queryParameterName?: string;
    templateUuid?: string;
    uuid?: string;
    variableName?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorValidateEntityTag {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebToken {
    enableEs256?: boolean;
    enableRs256?: boolean;
    extractLocation?: string;
    headerName?: string;
    jwt?: string;
    locked?: boolean;
    queryParameterName?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVerifyJsonWebTokenForDcp {
    authorizations?: string;
    clientId?: string;
    customHeader?: boolean;
    enableEs256?: boolean;
    enableRs256?: boolean;
    extractAuthorizations?: boolean;
    extractClientId?: boolean;
    extractLocation?: string;
    extractUserName?: boolean;
    headerName?: string;
    jwt?: string;
    locked?: boolean;
    primaryLocation?: string;
    queryParameterName?: string;
    templateUuid?: string;
    userName?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization {
    algorithm?: string;
    escapeHmacInputs?: boolean;
    failureResponse?: boolean;
    ignoreQueryString?: boolean;
    key?: string;
    location?: string;
    locationId?: string;
    locked?: boolean;
    salt?: string;
    templateUuid?: string;
    transitionKey?: string;
    useAdvanced?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoom {
    accessTitle?: string;
    cloudletSharedPolicy?: number;
    customCookieDomain?: string;
    domainConfig?: string;
    locked?: boolean;
    sessionAutoProlong?: boolean;
    sessionDuration?: number;
    templateUuid?: string;
    uuid?: string;
    waitingRoomAssetsPaths?: string[];
    waitingRoomPath?: string;
    waitingRoomTitle?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVirtualWaitingRoomWithEdgeWorkers {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritization {
    allowedUserCookieAdvanced?: boolean;
    allowedUserCookieAutomaticSalt?: boolean;
    allowedUserCookieDomain?: string;
    allowedUserCookieDomainType?: string;
    allowedUserCookieDuration?: number;
    allowedUserCookieEnabled?: boolean;
    allowedUserCookieHttpOnly?: boolean;
    allowedUserCookieLabel?: string;
    allowedUserCookieManagementTitle?: string;
    allowedUserCookieRefresh?: boolean;
    allowedUserCookieSalt?: string;
    cloudletPolicy?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicy;
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    userIdentificationByCookie?: boolean;
    userIdentificationByHeaders?: boolean;
    userIdentificationByIp?: boolean;
    userIdentificationByParams?: boolean;
    userIdentificationKeyCookie?: string;
    userIdentificationKeyHeaders?: string[];
    userIdentificationKeyParams?: string[];
    userIdentificationTitle?: string;
    uuid?: string;
    waitingRoomCacheTtl?: number;
    waitingRoomCookieAdvanced?: boolean;
    waitingRoomCookieAutomaticSalt?: boolean;
    waitingRoomCookieDomain?: string;
    waitingRoomCookieDomainType?: string;
    waitingRoomCookieDuration?: number;
    waitingRoomCookieEnabled?: boolean;
    waitingRoomCookieHttpOnly?: boolean;
    waitingRoomCookieLabel?: string;
    waitingRoomCookieManagementTitle?: string;
    waitingRoomCookieSalt?: string;
    waitingRoomCookieShareLabel?: boolean;
    waitingRoomCpCode?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCode;
    waitingRoomDirectory?: string;
    waitingRoomManagementTitle?: string;
    waitingRoomNetStorage?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorage;
    waitingRoomStatusCode?: number;
    waitingRoomUseCpCode?: boolean;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationCloudletPolicy {
    id?: number;
    name?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifo {
    accessTitle?: string;
    cloudletSharedPolicy?: number;
    customCookieDomain?: string;
    domainConfig?: string;
    locked?: boolean;
    sessionAutoProlong?: boolean;
    sessionDuration?: number;
    templateUuid?: string;
    uuid?: string;
    waitingRoomAssetsPaths?: string[];
    waitingRoomPath?: string;
    waitingRoomTitle?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationFifoStandalone {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCode {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomCpCodeCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorVisitorPrioritizationWaitingRoomNetStorage {
    cpCode?: number;
    downloadDomainName?: string;
    g2oToken?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorWatermarking {
    abVariantLocation?: string;
    decryptionPassword1?: string;
    decryptionPassword2?: string;
    decryptionPasswordId1?: string;
    decryptionPasswordId2?: string;
    enable?: boolean;
    locked?: boolean;
    miscellaneousSettingsTitle?: string;
    patternDecryptionEnable?: boolean;
    patternEncryptionTitle?: string;
    signatureVerificationEnable?: boolean;
    templateUuid?: string;
    tokenSigningTitle?: string;
    useOriginalAsA?: boolean;
    uuid?: string;
    verificationKeyId1?: string;
    verificationKeyId2?: string;
    verificationPublicKey1?: string;
    verificationPublicKey2?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewall {
    firewallConfiguration?: outputs.GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfiguration;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorWebApplicationFirewallFirewallConfiguration {
    configId?: number;
    fileName?: string;
    productionStatus?: string;
    productionVersion?: number;
    stagingStatus?: string;
    stagingVersion?: number;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorWebSockets {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105BehaviorWebdav {
    enabled?: boolean;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105Criterion {
    advancedImMatch?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatch;
    bucket?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionBucket;
    cacheability?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionCacheability;
    chinaCdnRegion?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegion;
    clientCertificate?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientCertificate;
    clientIp?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIp;
    clientIpVersion?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersion;
    cloudletsOrigin?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOrigin;
    contentDeliveryNetwork?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetwork;
    contentType?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionContentType;
    deviceCharacteristic?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristic;
    ecmdAuthGroups?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroups;
    ecmdAuthScheme?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthScheme;
    ecmdIsAuthenticated?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticated;
    ecmdUsername?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsername;
    edgeWorkersFailure?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailure;
    fileExtension?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionFileExtension;
    filename?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionFilename;
    hostname?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionHostname;
    matchAdvanced?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvanced;
    matchCpCode?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCode;
    matchResponseCode?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCode;
    matchVariable?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchVariable;
    metadataStage?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMetadataStage;
    originTimeout?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeout;
    path?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionPath;
    queryStringParameter?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameter;
    random?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRandom;
    recoveryConfig?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfig;
    regularExpression?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRegularExpression;
    requestCookie?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestCookie;
    requestHeader?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestHeader;
    requestMethod?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestMethod;
    requestProtocol?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocol;
    requestType?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionRequestType;
    responseHeader?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionResponseHeader;
    time?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionTime;
    tokenAuthorization?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorization;
    userAgent?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserAgent;
    userLocation?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserLocation;
    userNetwork?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionUserNetwork;
    variableError?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionVariableError;
    virtualWaitingRoomRequest?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequest;
    visitorPrioritizationRequest?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequest;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionAdvancedImMatch {
    locked?: boolean;
    matchOn?: string;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionBucket {
    locked?: boolean;
    percentage?: number;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionCacheability {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionChinaCdnRegion {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionClientCertificate {
    isCertificatePresent?: boolean;
    isCertificateValid?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionClientIp {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    useHeaders?: boolean;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionClientIpVersion {
    locked?: boolean;
    templateUuid?: string;
    useXForwardedFor?: boolean;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionCloudletsOrigin {
    locked?: boolean;
    originId?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionContentDeliveryNetwork {
    locked?: boolean;
    matchOperator?: string;
    network?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionContentType {
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    matchWildcard?: boolean;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionDeviceCharacteristic {
    booleanValue?: boolean;
    characteristic?: string;
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchWildcard?: boolean;
    numericMatchOperator?: string;
    numericValue?: number;
    stringMatchOperator?: string;
    stringValues?: string[];
    templateUuid?: string;
    uuid?: string;
    versionMatchOperator?: string;
    versionValue?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthGroups {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionEcmdAuthScheme {
    authScheme?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionEcmdIsAuthenticated {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionEcmdUsername {
    length?: string;
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionEdgeWorkersFailure {
    execStatus?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionFileExtension {
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionFilename {
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionHostname {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchAdvanced {
    closeXml?: string;
    description?: string;
    locked?: boolean;
    openXml?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCode {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValue;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValue {
    cpCodeLimits?: outputs.GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimits;
    createdDate?: number;
    description?: string;
    id?: number;
    name?: string;
    products?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchCpCodeValueCpCodeLimits {
    currentCapacity?: number;
    limit?: number;
    limitType?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchResponseCode {
    locked?: boolean;
    lowerBound?: number;
    matchOperator?: string;
    templateUuid?: string;
    upperBound?: number;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMatchVariable {
    locked?: boolean;
    lowerBound?: string;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    matchWildcard?: boolean;
    templateUuid?: string;
    upperBound?: string;
    uuid?: string;
    variableExpression?: string;
    variableName?: string;
    variableValues?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionMetadataStage {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionOriginTimeout {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionPath {
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    normalize?: boolean;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionQueryStringParameter {
    escapeValue?: boolean;
    locked?: boolean;
    lowerBound?: number;
    matchCaseSensitiveName?: boolean;
    matchCaseSensitiveValue?: boolean;
    matchOperator?: string;
    matchWildcardName?: boolean;
    matchWildcardValue?: boolean;
    parameterName?: string;
    templateUuid?: string;
    upperBound?: number;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRandom {
    bucket?: number;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRecoveryConfig {
    configName?: string;
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRegularExpression {
    caseSensitive?: boolean;
    locked?: boolean;
    matchString?: string;
    regex?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRequestCookie {
    cookieName?: string;
    locked?: boolean;
    lowerBound?: number;
    matchCaseSensitiveName?: boolean;
    matchCaseSensitiveValue?: boolean;
    matchOperator?: string;
    matchWildcardName?: boolean;
    matchWildcardValue?: boolean;
    templateUuid?: string;
    upperBound?: number;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRequestHeader {
    headerName?: string;
    locked?: boolean;
    matchCaseSensitiveValue?: boolean;
    matchOperator?: string;
    matchWildcardName?: boolean;
    matchWildcardValue?: boolean;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRequestMethod {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRequestProtocol {
    locked?: boolean;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionRequestType {
    locked?: boolean;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
    value?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionResponseHeader {
    headerName?: string;
    locked?: boolean;
    lowerBound?: number;
    matchCaseSensitiveValue?: boolean;
    matchOperator?: string;
    matchWildcardName?: boolean;
    matchWildcardValue?: boolean;
    templateUuid?: string;
    upperBound?: number;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionTime {
    applyDaylightSavingsTime?: boolean;
    beginDate?: string;
    endDate?: string;
    lastingDate?: string;
    lastingDuration?: string;
    locked?: boolean;
    matchOperator?: string;
    repeatBeginDate?: string;
    repeatDuration?: string;
    repeatInterval?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionTokenAuthorization {
    locked?: boolean;
    matchOperator?: string;
    statusLists?: string[];
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionUserAgent {
    locked?: boolean;
    matchCaseSensitive?: boolean;
    matchOperator?: string;
    matchWildcard?: boolean;
    templateUuid?: string;
    uuid?: string;
    values?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionUserLocation {
    checkIps?: string;
    continentValues?: string[];
    countryValues?: string[];
    field?: string;
    locked?: boolean;
    matchOperator?: string;
    regionValues?: string[];
    templateUuid?: string;
    useOnlyFirstXForwardedForIp?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionUserNetwork {
    bandwidthValues?: string[];
    checkIps?: string;
    field?: string;
    locked?: boolean;
    matchOperator?: string;
    networkTypeValues?: string[];
    networkValues?: string[];
    templateUuid?: string;
    useOnlyFirstXForwardedForIp?: boolean;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionVariableError {
    locked?: boolean;
    result?: boolean;
    templateUuid?: string;
    uuid?: string;
    variableNames?: string[];
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionVirtualWaitingRoomRequest {
    locked?: boolean;
    matchOn?: string;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CriterionVisitorPrioritizationRequest {
    locked?: boolean;
    matchOn?: string;
    matchOperator?: string;
    templateUuid?: string;
    uuid?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105CustomOverride {
    name?: string;
    overrideId?: string;
}

export interface GetPropertyRulesBuilderRulesV20230105Variable {
    description: string;
    hidden: boolean;
    name: string;
    sensitive: boolean;
    value: string;
}

export interface GetPropertyRulesTemplateTemplate {
    templateData: string;
    templateDir: string;
}

export interface GetPropertyRulesTemplateVariable {
    name: string;
    type?: string;
    value: string;
}

export interface GtmAsmapAssignment {
    asNumbers: number[];
    datacenterId: number;
    nickname: string;
}

export interface GtmAsmapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmCidrmapAssignment {
    blocks?: string[];
    datacenterId: number;
    nickname: string;
}

export interface GtmCidrmapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmDatacenterDefaultLoadObject {
    loadObject?: string;
    loadObjectPort?: number;
    loadServers?: string[];
}

export interface GtmGeomapAssignment {
    countries?: string[];
    datacenterId: number;
    nickname: string;
}

export interface GtmGeomapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmPropertyLivenessTest {
    answersRequired?: boolean;
    disableNonstandardPortWarning?: boolean;
    disabled?: boolean;
    errorPenalty?: number;
    httpError3xx?: boolean;
    httpError4xx?: boolean;
    httpError5xx?: boolean;
    httpHeaders?: outputs.GtmPropertyLivenessTestHttpHeader[];
    name: string;
    peerCertificateVerification?: boolean;
    recursionRequested?: boolean;
    requestString?: string;
    resourceType?: string;
    responseString?: string;
    sslClientCertificate?: string;
    sslClientPrivateKey?: string;
    testInterval: number;
    testObject: string;
    testObjectPassword?: string;
    testObjectPort?: number;
    testObjectProtocol: string;
    testObjectUsername?: string;
    testTimeout: number;
    timeoutPenalty?: number;
}

export interface GtmPropertyLivenessTestHttpHeader {
    name?: string;
    value?: string;
}

export interface GtmPropertyStaticRrSet {
    rdatas?: string[];
    ttl?: number;
    type?: string;
}

export interface GtmPropertyTrafficTarget {
    datacenterId?: number;
    enabled?: boolean;
    handoutCname?: string;
    /**
     * @deprecated The attribute `name` has been deprecated. Any reads or writes on this attribute are ignored
     */
    name?: string;
    servers?: string[];
    weight?: number;
}

export interface GtmResourceResourceInstance {
    datacenterId: number;
    loadObject?: string;
    loadObjectPort?: number;
    loadServers?: string[];
    useDefaultLoadObject?: boolean;
}

export interface PropertyActivationComplianceRecord {
    noncomplianceReasonEmergency?: outputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency;
    noncomplianceReasonNoProductionTraffic?: outputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic;
    noncomplianceReasonNone?: outputs.PropertyActivationComplianceRecordNoncomplianceReasonNone;
    noncomplianceReasonOther?: outputs.PropertyActivationComplianceRecordNoncomplianceReasonOther;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonEmergency {
    ticketId?: string;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic {
    ticketId?: string;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonNone {
    customerEmail?: string;
    peerReviewedBy?: string;
    ticketId?: string;
    unitTested?: boolean;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonOther {
    otherNoncomplianceReason?: string;
    ticketId?: string;
}

export interface PropertyActivationRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyActivationRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyHostname {
    certProvisioningType: string;
    certStatuses: outputs.PropertyHostnameCertStatus[];
    cnameFrom: string;
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface PropertyHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface PropertyIncludeActivationComplianceRecord {
    noncomplianceReasonEmergency?: outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency;
    noncomplianceReasonNoProductionTraffic?: outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic;
    noncomplianceReasonNone?: outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone;
    noncomplianceReasonOther?: outputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency {
    ticketId?: string;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic {
    ticketId?: string;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone {
    customerEmail?: string;
    peerReviewedBy?: string;
    ticketId?: string;
    unitTested?: boolean;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther {
    otherNoncomplianceReason?: string;
    ticketId?: string;
}

export interface PropertyOrigin {
    cacheKeyHostname?: string;
    compress?: boolean;
    enableTrueClientIp?: boolean;
    forwardHostname?: string;
    hostname?: string;
    port?: number;
}

export interface PropertyRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export namespace config {
    export interface Appsecs {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Config {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Dns {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Gtm {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Networks {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Property {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

}
