// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppSecSiemSettingsExceptions {
    /**
     * Whether there should be an exception to include api request constraints events in SIEM
     */
    apiRequestConstraints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include apr protection events in SIEM
     */
    aprProtections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include bot management events in SIEM
     */
    botManagements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include client reputation events in SIEM
     */
    clientReps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include custom rules events in SIEM
     */
    customRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include ip geo events in SIEM
     */
    ipGeos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include malware protection events in SIEM
     */
    malwareProtections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include rate events in SIEM
     */
    rates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include slow post events in SIEM
     */
    slowPosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include url protection events in SIEM
     */
    urlProtections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether there should be an exception to include waf events in SIEM
     */
    wafs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClientlistListItem {
    /**
     * A description of the item.
     */
    description?: pulumi.Input<string>;
    /**
     * The item expiration date.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The item tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value of the item. (i.e. IP address, AS Number, GEO, ...etc)
     */
    value: pulumi.Input<string>;
}

export interface CloudAccessKeyCredentialsA {
    /**
     * Access key id from cloud provider which is used to sign API requests
     */
    cloudAccessKeyId: pulumi.Input<string>;
    /**
     * Cloud Access secret from cloud provider which is used to sign API requests
     */
    cloudSecretAccessKey: pulumi.Input<string>;
    /**
     * Boolean value which helps to define if credentials should be assigned to property
     */
    primaryKey: pulumi.Input<boolean>;
    /**
     * Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
     */
    version?: pulumi.Input<number>;
    /**
     * The unique identifier assigned to specific access key version
     */
    versionGuid?: pulumi.Input<string>;
}

export interface CloudAccessKeyCredentialsB {
    /**
     * Access key id from cloud provider which is used to sign API requests
     */
    cloudAccessKeyId: pulumi.Input<string>;
    /**
     * Cloud Access secret from cloud provider which is used to sign API requests
     */
    cloudSecretAccessKey: pulumi.Input<string>;
    /**
     * Boolean value which helps to define if credentials should be assigned to property
     */
    primaryKey: pulumi.Input<boolean>;
    /**
     * Numeric access key version associated with specific pair of cloud access credentials used to sign API requests
     */
    version?: pulumi.Input<number>;
    /**
     * The unique identifier assigned to specific access key version
     */
    versionGuid?: pulumi.Input<string>;
}

export interface CloudAccessKeyNetworkConfiguration {
    /**
     * Additional type of the deployment network that the access key will be deployed to.
     */
    additionalCdn?: pulumi.Input<string>;
    /**
     * The API deploys the access key to this secure network
     */
    securityNetwork: pulumi.Input<string>;
}

export interface CloudAccessKeyTimeouts {
    /**
     * Optional configurable resource create timeout. By default it's 60 minutes with 1 minute polling interval.
     */
    create?: pulumi.Input<string>;
    /**
     * Optional configurable resource delete timeout. By default it's 60 minutes with 1 minute polling interval.
     */
    delete?: pulumi.Input<string>;
    /**
     * Optional configurable resource update timeout. By default it's 60 minutes with 1 minute polling interval.
     */
    update?: pulumi.Input<string>;
}

export interface CloudletsApplicationLoadBalancerActivationTimeouts {
    default?: pulumi.Input<string>;
}

export interface CloudletsApplicationLoadBalancerDataCenter {
    /**
     * The city in which the data center is located.
     */
    city?: pulumi.Input<string>;
    /**
     * Describes if cloud server host header is overridden
     */
    cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    /**
     * Describes if this datacenter is a cloud service
     */
    cloudService?: pulumi.Input<boolean>;
    /**
     * The continent on which the data center is located
     */
    continent: pulumi.Input<string>;
    /**
     * The country in which the data center is located
     */
    country: pulumi.Input<string>;
    /**
     * This should match the 'hostname' value defined for this datacenter in Property Manager
     */
    hostname?: pulumi.Input<string>;
    /**
     * The latitude value for the data center. This member supports six decimal places of precision.
     */
    latitude: pulumi.Input<number>;
    /**
     * An array of strings that represent the origin servers used to poll the data centers in an application load balancer configuration. These servers support basic HTTP polling.
     */
    livenessHosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The longitude value for the data center. This member supports six decimal places of precision.
     */
    longitude: pulumi.Input<number>;
    /**
     * The ID of an origin that represents the data center. The conditional origin, which is defined in the Property Manager API, must have an originType of either CUSTOMER or NET_STORAGE
     */
    originId: pulumi.Input<string>;
    /**
     * The percent of traffic that is sent to the data center. The total for all data centers must equal 100%.
     */
    percent: pulumi.Input<number>;
    /**
     * The state, province, or region where the data center is located
     */
    stateOrProvince?: pulumi.Input<string>;
}

export interface CloudletsApplicationLoadBalancerLivenessSettings {
    /**
     * Maps additional case-insensitive HTTP header names included to the liveness testing requests
     */
    additionalHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Host header for the liveness HTTP request
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * Describes how often the liveness test will be performed. Optional defaults to 60 seconds, minimum is 10 seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * The path to the test object used for liveness testing. The function of the test object is to help determine whether the data center is functioning.
     */
    path: pulumi.Input<string>;
    /**
     * Describes whether or not to validate the origin certificate for an HTTPS request
     */
    peerCertificateVerification?: pulumi.Input<boolean>;
    /**
     * The port for the test object. The default port is 80, which is standard for HTTP. Enter 443 if you are using HTTPS.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol or scheme for the database, either HTTP or HTTPS.
     */
    protocol: pulumi.Input<string>;
    /**
     * The request which will be used for TCP(S) tests
     */
    requestString?: pulumi.Input<string>;
    responseString?: pulumi.Input<string>;
    /**
     * Set to true to mark the liveness test as failed when the request returns a 3xx (redirection) status code.
     */
    status3xxFailure?: pulumi.Input<boolean>;
    /**
     * Set to true to mark the liveness test as failed when the request returns a 4xx (client error) status code.
     */
    status4xxFailure?: pulumi.Input<boolean>;
    /**
     * Set to true to mark the liveness test as failed when the request returns a 5xx (server error) status code.
     */
    status5xxFailure?: pulumi.Input<boolean>;
    /**
     * The number of seconds the system waits before failing the liveness test. The default is 25 seconds.
     */
    timeout?: pulumi.Input<number>;
}

export interface CloudletsPolicyActivationTimeouts {
    default?: pulumi.Input<string>;
}

export interface CloudletsPolicyTimeouts {
    default?: pulumi.Input<string>;
}

export interface CloudwrapperActivationTimeouts {
    /**
     * Optional configurable activation timeout to be used on resource create. By default it's 4h with 1m pooling interval.
     */
    create?: pulumi.Input<string>;
    /**
     * Optional configurable activation timeout to be used on resource update. By default it's 4h with 1m pooling interval.
     */
    update?: pulumi.Input<string>;
}

export interface CloudwrapperConfigurationLocation {
    /**
     * The capacity assigned to this configuration's location
     */
    capacity?: pulumi.Input<inputs.CloudwrapperConfigurationLocationCapacity>;
    /**
     * Additional comments provided by the user.
     */
    comments: pulumi.Input<string>;
    /**
     * Unique identifier for the location and traffic type combination
     */
    trafficTypeId: pulumi.Input<number>;
}

export interface CloudwrapperConfigurationLocationCapacity {
    /**
     * Unit of capacity. Can be either 'GB' or 'TB'.
     */
    unit: pulumi.Input<string>;
    /**
     * Value of capacity.
     */
    value: pulumi.Input<number>;
}

export interface CloudwrapperConfigurationTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
}

export interface CpCodeTimeouts {
    update?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentAdminContact {
    /**
     * The address of the contact
     */
    addressLineOne?: pulumi.Input<string>;
    /**
     * The address of the contact
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of residence of the contact
     */
    city?: pulumi.Input<string>;
    /**
     * Country code of the contact
     */
    countryCode?: pulumi.Input<string>;
    /**
     * E-mail address of the contact
     */
    email: pulumi.Input<string>;
    /**
     * First name of the contact
     */
    firstName: pulumi.Input<string>;
    /**
     * Last name of the contact
     */
    lastName: pulumi.Input<string>;
    /**
     * Organization where contact is hired
     */
    organization?: pulumi.Input<string>;
    /**
     * Phone number of the contact
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of the contact
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The region of the contact
     */
    region?: pulumi.Input<string>;
    /**
     * Title of the the contact
     */
    title?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentCsr {
    /**
     * City where organization is located
     */
    city: pulumi.Input<string>;
    /**
     * The code of the country where organization is located
     */
    countryCode: pulumi.Input<string>;
    /**
     * Name of organization used in all legal documents
     */
    organization: pulumi.Input<string>;
    /**
     * Organizational unit of organization
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
     */
    preferredTrustChain?: pulumi.Input<string>;
    /**
     * State or province of organization location
     */
    state?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentDnsChallenge {
    /**
     * Domain for which the challenges were completed
     */
    domain?: pulumi.Input<string>;
    /**
     * The domain name where Akamai publishes the response body to validate
     */
    fullPath?: pulumi.Input<string>;
    /**
     * The unique content of the challenge
     */
    responseBody?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentHttpChallenge {
    /**
     * Domain for which the challenges were completed
     */
    domain?: pulumi.Input<string>;
    /**
     * The URL where Akamai publishes the response body to validate
     */
    fullPath?: pulumi.Input<string>;
    /**
     * The unique content of the challenge
     */
    responseBody?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentNetworkConfiguration {
    /**
     * The trust chain configuration used for client mutual authentication
     */
    clientMutualAuthentication?: pulumi.Input<inputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication>;
    /**
     * Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
     */
    cloneDnsNames?: pulumi.Input<boolean>;
    /**
     * TLS versions which are disallowed
     */
    disallowedTlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Geography type used for enrollment
     */
    geography: pulumi.Input<string>;
    /**
     * Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
     */
    mustHaveCiphers?: pulumi.Input<string>;
    /**
     * Enable OCSP stapling. Default is 'on'
     */
    ocspStapling?: pulumi.Input<string>;
    /**
     * Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
     */
    preferredCiphers?: pulumi.Input<string>;
    /**
     * Enable QUIC protocol. Default is false
     */
    quicEnabled?: pulumi.Input<boolean>;
}

export interface CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication {
    /**
     * Enable OCSP stapling
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * Enable the server to send the certificate authority (CA) list to the client
     */
    sendCaListToClient?: pulumi.Input<boolean>;
    /**
     * The identifier of the set of trust chains, created in the Trust Chain Manager
     */
    setId?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentOrganization {
    /**
     * The address of organization
     */
    addressLineOne: pulumi.Input<string>;
    /**
     * The address of organization
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of organization
     */
    city: pulumi.Input<string>;
    /**
     * Country code of organization
     */
    countryCode: pulumi.Input<string>;
    /**
     * Name of organization
     */
    name: pulumi.Input<string>;
    /**
     * Phone number of organization
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of organization
     */
    postalCode: pulumi.Input<string>;
    /**
     * The region of organization
     */
    region: pulumi.Input<string>;
}

export interface CpsDvEnrollmentTechContact {
    /**
     * The address of the contact
     */
    addressLineOne?: pulumi.Input<string>;
    /**
     * The address of the contact
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of residence of the contact
     */
    city?: pulumi.Input<string>;
    /**
     * Country code of the contact
     */
    countryCode?: pulumi.Input<string>;
    /**
     * E-mail address of the contact
     */
    email: pulumi.Input<string>;
    /**
     * First name of the contact
     */
    firstName: pulumi.Input<string>;
    /**
     * Last name of the contact
     */
    lastName: pulumi.Input<string>;
    /**
     * Organization where contact is hired
     */
    organization?: pulumi.Input<string>;
    /**
     * Phone number of the contact
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of the contact
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The region of the contact
     */
    region?: pulumi.Input<string>;
    /**
     * Title of the the contact
     */
    title?: pulumi.Input<string>;
}

export interface CpsDvEnrollmentTimeouts {
    default?: pulumi.Input<string>;
}

export interface CpsDvValidationTimeouts {
    default?: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentAdminContact {
    /**
     * The address of the contact
     */
    addressLineOne?: pulumi.Input<string>;
    /**
     * The address of the contact
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of residence of the contact
     */
    city?: pulumi.Input<string>;
    /**
     * Country code of the contact
     */
    countryCode?: pulumi.Input<string>;
    /**
     * E-mail address of the contact
     */
    email: pulumi.Input<string>;
    /**
     * First name of the contact
     */
    firstName: pulumi.Input<string>;
    /**
     * Last name of the contact
     */
    lastName: pulumi.Input<string>;
    /**
     * Organization where contact is hired
     */
    organization?: pulumi.Input<string>;
    /**
     * Phone number of the contact
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of the contact
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The region of the contact
     */
    region?: pulumi.Input<string>;
    /**
     * Title of the the contact
     */
    title?: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentCsr {
    /**
     * City where organization is located
     */
    city: pulumi.Input<string>;
    /**
     * The code of the country where organization is located
     */
    countryCode: pulumi.Input<string>;
    /**
     * Name of organization used in all legal documents
     */
    organization: pulumi.Input<string>;
    /**
     * Organizational unit of organization
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
     */
    preferredTrustChain?: pulumi.Input<string>;
    /**
     * State or province of organization location
     */
    state?: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentNetworkConfiguration {
    /**
     * The trust chain configuration used for client mutual authentication
     */
    clientMutualAuthentication?: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication>;
    /**
     * Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
     */
    cloneDnsNames?: pulumi.Input<boolean>;
    /**
     * TLS versions which are disallowed
     */
    disallowedTlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Geography type used for enrollment
     */
    geography: pulumi.Input<string>;
    /**
     * Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
     */
    mustHaveCiphers?: pulumi.Input<string>;
    /**
     * Enable OCSP stapling. Default is 'on'
     */
    ocspStapling?: pulumi.Input<string>;
    /**
     * Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
     */
    preferredCiphers?: pulumi.Input<string>;
    /**
     * Enable QUIC protocol. Default is false
     */
    quicEnabled?: pulumi.Input<boolean>;
}

export interface CpsThirdPartyEnrollmentNetworkConfigurationClientMutualAuthentication {
    /**
     * Enable OCSP stapling
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * Enable the server to send the certificate authority (CA) list to the client
     */
    sendCaListToClient?: pulumi.Input<boolean>;
    /**
     * The identifier of the set of trust chains, created in the Trust Chain Manager
     */
    setId?: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentOrganization {
    /**
     * The address of organization
     */
    addressLineOne: pulumi.Input<string>;
    /**
     * The address of organization
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of organization
     */
    city: pulumi.Input<string>;
    /**
     * Country code of organization
     */
    countryCode: pulumi.Input<string>;
    /**
     * Name of organization
     */
    name: pulumi.Input<string>;
    /**
     * Phone number of organization
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of organization
     */
    postalCode: pulumi.Input<string>;
    /**
     * The region of organization
     */
    region: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentTechContact {
    /**
     * The address of the contact
     */
    addressLineOne?: pulumi.Input<string>;
    /**
     * The address of the contact
     */
    addressLineTwo?: pulumi.Input<string>;
    /**
     * City of residence of the contact
     */
    city?: pulumi.Input<string>;
    /**
     * Country code of the contact
     */
    countryCode?: pulumi.Input<string>;
    /**
     * E-mail address of the contact
     */
    email: pulumi.Input<string>;
    /**
     * First name of the contact
     */
    firstName: pulumi.Input<string>;
    /**
     * Last name of the contact
     */
    lastName: pulumi.Input<string>;
    /**
     * Organization where contact is hired
     */
    organization?: pulumi.Input<string>;
    /**
     * Phone number of the contact
     */
    phone: pulumi.Input<string>;
    /**
     * Postal code of the contact
     */
    postalCode?: pulumi.Input<string>;
    /**
     * The region of the contact
     */
    region?: pulumi.Input<string>;
    /**
     * Title of the the contact
     */
    title?: pulumi.Input<string>;
}

export interface CpsThirdPartyEnrollmentTimeouts {
    default?: pulumi.Input<string>;
}

export interface CpsUploadCertificateTimeouts {
    default?: pulumi.Input<string>;
}

export interface DatastreamAzureConnector {
    /**
     * Access keys associated with Azure Storage account
     */
    accessKey: pulumi.Input<string>;
    /**
     * Specifies the Azure Storage account name
     */
    accountName: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * Specifies the Azure Storage container name
     */
    containerName: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The path to the folder within Azure Storage container where logs will be stored
     */
    path: pulumi.Input<string>;
}

export interface DatastreamDatadogConnector {
    /**
     * The API key associated with Datadog account
     */
    authToken: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The Datadog endpoint where logs will be stored
     */
    endpoint: pulumi.Input<string>;
    /**
     * The service of the Datadog connector
     */
    service?: pulumi.Input<string>;
    /**
     * The source of the Datadog connector
     */
    source?: pulumi.Input<string>;
    /**
     * The tags of the Datadog connector
     */
    tags?: pulumi.Input<string>;
}

export interface DatastreamDeliveryConfiguration {
    /**
     * A delimiter that you use to separate data set fields in log lines
     */
    fieldDelimiter?: pulumi.Input<string>;
    /**
     * The format in which logs will be received
     */
    format: pulumi.Input<string>;
    /**
     * The frequency of collecting logs from each uploader and sending these logs to a destination
     */
    frequency: pulumi.Input<inputs.DatastreamDeliveryConfigurationFrequency>;
    /**
     * The prefix of the log file that will be send to a destination
     */
    uploadFilePrefix?: pulumi.Input<string>;
    /**
     * The suffix of the log file that will be send to a destination
     */
    uploadFileSuffix?: pulumi.Input<string>;
}

export interface DatastreamDeliveryConfigurationFrequency {
    /**
     * The time in seconds after which the system bundles log lines into a file and sends it to a destination
     */
    intervalInSecs: pulumi.Input<number>;
}

export interface DatastreamElasticsearchConnector {
    /**
     * The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    displayName: pulumi.Input<string>;
    /**
     * The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
     */
    endpoint: pulumi.Input<string>;
    /**
     * The index name of the Elastic cloud where you want to store log files.
     */
    indexName: pulumi.Input<string>;
    /**
     * Indicates whether mTLS is enabled or not.
     */
    mTls?: pulumi.Input<boolean>;
    /**
     * The Elasticsearch basic access authentication password.
     */
    password: pulumi.Input<string>;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Elasticsearch basic access authentication username.
     */
    userName: pulumi.Input<string>;
}

export interface DatastreamGcsConnector {
    /**
     * The name of the storage bucket created in Google Cloud account
     */
    bucket: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The path to the folder within Google Cloud bucket where logs will be stored
     */
    path?: pulumi.Input<string>;
    /**
     * The contents of the JSON private key generated and downloaded in Google Cloud Storage account
     */
    privateKey: pulumi.Input<string>;
    /**
     * The unique ID of Google Cloud project
     */
    projectId: pulumi.Input<string>;
    /**
     * The name of the service account with the storage.object.create permission or Storage Object Creator role
     */
    serviceAccountName: pulumi.Input<string>;
}

export interface DatastreamHttpsConnector {
    /**
     * Either NONE for no authentication, or BASIC for username and password authentication
     */
    authenticationType: pulumi.Input<string>;
    /**
     * The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
     */
    clientCert?: pulumi.Input<string>;
    /**
     * The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * Content type to pass in the log file header
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of custom header passed with the request to the destination
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request to the destination
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * URL where logs will be stored
     */
    endpoint: pulumi.Input<string>;
    /**
     * Indicates whether mTLS is enabled or not.
     */
    mTls?: pulumi.Input<boolean>;
    /**
     * Password set for custom HTTPS endpoint for authentication
     */
    password?: pulumi.Input<string>;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * Username used for authentication
     */
    userName?: pulumi.Input<string>;
}

export interface DatastreamLogglyConnector {
    /**
     * The unique HTTP code for your Loggly bulk endpoint.
     */
    authToken: pulumi.Input<string>;
    /**
     * The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    displayName: pulumi.Input<string>;
    /**
     * The Loggly bulk endpoint URL in the https://hostname.loggly.com/bulk/ format. Set the endpoint code in the authToken field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Loggly.
     */
    endpoint: pulumi.Input<string>;
    /**
     * The tags you can use to segment and filter log events in Loggly. See Tags in the Loggly documentation.
     */
    tags?: pulumi.Input<string>;
}

export interface DatastreamNewRelicConnector {
    /**
     * Your Log API token for your account in New Relic.
     */
    authToken: pulumi.Input<string>;
    /**
     * The type of the resource passed in the request's custom header. For details, see Additional options in the DataStream user guide.
     */
    contentType?: pulumi.Input<string>;
    /**
     * A human-readable name for the request's custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    displayName: pulumi.Input<string>;
    /**
     * A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://<newrelic.com>/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
     */
    endpoint: pulumi.Input<string>;
}

export interface DatastreamOracleConnector {
    /**
     * The access key identifier used to authenticate requests to the Oracle Cloud account
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of the Oracle Cloud Storage bucket
     */
    bucket: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The namespace of Oracle Cloud Storage account
     */
    namespace: pulumi.Input<string>;
    /**
     * The path to the folder within your Oracle Cloud Storage bucket where logs will be stored
     */
    path: pulumi.Input<string>;
    /**
     * The Oracle Cloud Storage region where bucket resides
     */
    region: pulumi.Input<string>;
    /**
     * The secret access key identifier used to authenticate requests to the Oracle Cloud account
     */
    secretAccessKey: pulumi.Input<string>;
}

export interface DatastreamS3Connector {
    /**
     * The access key identifier used to authenticate requests to the Amazon S3 account
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of the Amazon S3 bucket
     */
    bucket: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The path to the folder within Amazon S3 bucket where logs will be stored
     */
    path: pulumi.Input<string>;
    /**
     * The AWS region where Amazon S3 bucket resides
     */
    region: pulumi.Input<string>;
    /**
     * The secret access key identifier used to authenticate requests to the Amazon S3 account
     */
    secretAccessKey: pulumi.Input<string>;
}

export interface DatastreamSplunkConnector {
    /**
     * The certification authority (CA) certificate used to verify the origin server's certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The digital certificate in the PEM format you want to use to authenticate requests to your destination. If you want to use mutual authentication, you need to provide both the client certificate and the client key (in the PEM format).
     */
    clientCert?: pulumi.Input<string>;
    /**
     * The private key in the non-encrypted PKCS8 format you want to use to authenticate with the back-end server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * The name of custom header passed with the request to the destination
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request to the destination
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The raw event Splunk URL where logs will be stored
     */
    endpoint: pulumi.Input<string>;
    /**
     * The Event Collector token associated with Splunk account
     */
    eventCollectorToken: pulumi.Input<string>;
    /**
     * Indicates whether mTLS is enabled or not.
     */
    mTls?: pulumi.Input<boolean>;
    /**
     * The hostname that verifies the server's certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     */
    tlsHostname?: pulumi.Input<string>;
}

export interface DatastreamSumologicConnector {
    /**
     * The unique HTTP collector code of Sumo Logic endpoint
     */
    collectorCode: pulumi.Input<string>;
    /**
     * Indicates whether the logs should be compressed
     */
    compressLogs?: pulumi.Input<boolean>;
    /**
     * Content type to pass in the log file header
     */
    contentType?: pulumi.Input<string>;
    /**
     * The name of custom header passed with the request to the destination
     */
    customHeaderName?: pulumi.Input<string>;
    /**
     * The custom header's contents passed with the request to the destination
     */
    customHeaderValue?: pulumi.Input<string>;
    /**
     * The name of the connector
     */
    displayName: pulumi.Input<string>;
    /**
     * The Sumo Logic collection endpoint where logs will be stored
     */
    endpoint: pulumi.Input<string>;
}

export interface DnsZoneOutboundZoneTransfer {
    /**
     * The access control list, defined as IPv4 and IPv6 CIDR blocks.
     */
    acls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables outbound zone transfer.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Customer secondary nameservers to notify, if NOTIFY requests are desired. Up to 64 IPv4 or IPv6 addresses. If no targets are specified, you can manually request zone transfer updates as needed.
     */
    notifyTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TSIG key used for outbound zone transfers.
     */
    tsigKey?: pulumi.Input<inputs.DnsZoneOutboundZoneTransferTsigKey>;
}

export interface DnsZoneOutboundZoneTransferTsigKey {
    /**
     * The algorithm used to encode the TSIG key's secret data. Possible values are: hmac-md5, hmac-sha1, hmac-sha224, hmac-sha256, hmac-sha384, hmac-sha512, or HMAC-MD5.SIG-ALG.REG.INT.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The zone name.
     */
    name: pulumi.Input<string>;
    /**
     * A Base64-encoded string of data. When decoded, it needs to contain the correct number of bits for the chosen algorithm. If the input isn't correctly padded, the server applies the padding.
     */
    secret: pulumi.Input<string>;
}

export interface DnsZoneTsigKey {
    algorithm: pulumi.Input<string>;
    name: pulumi.Input<string>;
    secret: pulumi.Input<string>;
}

export interface EdgeHostNameTimeouts {
    default?: pulumi.Input<string>;
}

export interface EdgeWorkerTimeouts {
    default?: pulumi.Input<string>;
}

export interface EdgeWorkersActivationTimeouts {
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface EdgekvGroupItemsTimeouts {
    default?: pulumi.Input<string>;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch[];
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
     */
    passThroughPercent: number;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
     */
    passThroughPercent: pulumi.Input<number>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: string[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsApiPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting[];
    /**
     * Akamai internal use only
     */
    id?: number;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch[];
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: boolean;
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: pulumi.Input<pulumi.Input<inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs>[]>;
    /**
     * Akamai internal use only
     */
    id?: pulumi.Input<number>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: pulumi.Input<boolean>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSetting {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId: string;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleForwardSettingArgs {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId: pulumi.Input<string>;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match
     */
    objectMatchValues?: inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes, or a range match
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object, range, or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object, range, or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsApplicationLoadBalancerMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch[];
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: pulumi.Input<inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettings {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId?: string;
    /**
     * If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
     */
    pathAndQs?: string;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleForwardSettingsArgs {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId?: pulumi.Input<string>;
    /**
     * If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
     */
    pathAndQs?: pulumi.Input<string>;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: pulumi.Input<boolean>;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple or range. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple or range. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsAudienceSegmentationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch[];
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: boolean;
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The URL Edge Redirector redirects the request to. If using use_relative_url, you can enter a path for the value
     */
    redirectUrl: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The HTTP response status code (allowed values: 301, 302, 303, 307, 308)
     */
    statusCode: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL
     */
    useIncomingQueryString?: boolean;
    /**
     * If set to relative_url, takes the path entered for the redirectUrl and sets it in the response’s Location header. If set to copy_scheme_hostname, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information entered for the redirectUrl. If this property is not included, or is set to none, then the redirectUrl should be fully-qualified URL
     */
    useRelativeUrl?: string;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: pulumi.Input<boolean>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The URL Edge Redirector redirects the request to. If using use_relative_url, you can enter a path for the value
     */
    redirectUrl: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The HTTP response status code (allowed values: 301, 302, 303, 307, 308)
     */
    statusCode: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL
     */
    useIncomingQueryString?: pulumi.Input<boolean>;
    /**
     * If set to relative_url, takes the path entered for the redirectUrl and sets it in the response’s Location header. If set to copy_scheme_hostname, creates an absolute path by taking the protocol and hostname from the incoming request and combining them with path information entered for the redirectUrl. If this property is not included, or is set to none, then the redirectUrl should be fully-qualified URL
     */
    useRelativeUrl?: pulumi.Input<string>;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatch[];
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: pulumi.Input<inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettings {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId?: string;
    /**
     * If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
     */
    pathAndQs?: string;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: boolean;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleForwardSettingsArgs {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId?: pulumi.Input<string>;
    /**
     * If a value is provided and match conditions are met, this property defines the path/resource/query string to rewrite URL for the incoming request.
     */
    pathAndQs?: pulumi.Input<string>;
    /**
     * If set to true, the Cloudlet includes the query string from the request in the rewritten or forwarded URL.
     */
    useIncomingQueryString?: pulumi.Input<boolean>;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsForwardRewriteMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch[];
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: boolean;
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for. It is known as Continuous Deployment (CD) too.
     */
    type?: string;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * This property defines data used to construct a new request URL if all conditions are met. If all of the conditions you set are true, then the Edge Server returns an HTTP response from the rewritten URL
     */
    forwardSettings: pulumi.Input<inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: pulumi.Input<boolean>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for. It is known as Continuous Deployment (CD) too.
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettings {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId: string;
    /**
     * The percent of traffic that is sent to the data center.
     */
    percent: number;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleForwardSettingsArgs {
    /**
     * The ID of the Conditional Origin requests are forwarded to
     */
    originId: pulumi.Input<string>;
    /**
     * The percent of traffic that is sent to the data center.
     */
    percent: pulumi.Input<number>;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple or range type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsPhasedReleaseMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsRequestControlMatchRuleMatchRule {
    /**
     * If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
     */
    allowDeny: string;
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatch[];
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: boolean;
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleArgs {
    /**
     * If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
     */
    allowDeny: pulumi.Input<string>;
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     */
    matchesAlways?: pulumi.Input<boolean>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: string[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsRequestControlMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsSharedPolicyActivations {
    /**
     * The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
     */
    production?: inputs.GetCloudletsSharedPolicyActivationsProduction;
    /**
     * The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
     */
    staging?: inputs.GetCloudletsSharedPolicyActivationsStaging;
}

export interface GetCloudletsSharedPolicyActivationsArgs {
    /**
     * The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
     */
    production?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsProductionArgs>;
    /**
     * The policy version number that's currently in use on this network and the status of the most recent activation or deactivation operation for this policy's versions.
     */
    staging?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsStagingArgs>;
}

export interface GetCloudletsSharedPolicyActivationsProduction {
    /**
     * The status of the activation that's currently in use on this network, or null if the policy has no activations.
     */
    effective?: inputs.GetCloudletsSharedPolicyActivationsProductionEffective;
    /**
     * The status of the latest activation or null if the policy has no activations.
     */
    latest?: inputs.GetCloudletsSharedPolicyActivationsProductionLatest;
}

export interface GetCloudletsSharedPolicyActivationsProductionArgs {
    /**
     * The status of the activation that's currently in use on this network, or null if the policy has no activations.
     */
    effective?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsProductionEffectiveArgs>;
    /**
     * The status of the latest activation or null if the policy has no activations.
     */
    latest?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsProductionLatestArgs>;
}

export interface GetCloudletsSharedPolicyActivationsProductionEffective {
    /**
     * Identifies the activation.
     */
    activationId?: number;
    /**
     * The username who created the activation.
     */
    createdBy?: string;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: string;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: string;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: string;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: string;
    /**
     * Identifies the shared policy.
     */
    policyId?: number;
    /**
     * The number of the policy version.
     */
    policyVersion?: number;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: boolean;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: string;
}

export interface GetCloudletsSharedPolicyActivationsProductionEffectiveArgs {
    /**
     * Identifies the activation.
     */
    activationId?: pulumi.Input<number>;
    /**
     * The username who created the activation.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: pulumi.Input<string>;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: pulumi.Input<string>;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: pulumi.Input<string>;
    /**
     * Identifies the shared policy.
     */
    policyId?: pulumi.Input<number>;
    /**
     * The number of the policy version.
     */
    policyVersion?: pulumi.Input<number>;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: pulumi.Input<boolean>;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: pulumi.Input<string>;
}

export interface GetCloudletsSharedPolicyActivationsProductionLatest {
    /**
     * Identifies the activation.
     */
    activationId?: number;
    /**
     * The username who created the activation.
     */
    createdBy?: string;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: string;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: string;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: string;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: string;
    /**
     * Identifies the shared policy.
     */
    policyId?: number;
    /**
     * The number of the policy version.
     */
    policyVersion?: number;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: boolean;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: string;
}

export interface GetCloudletsSharedPolicyActivationsProductionLatestArgs {
    /**
     * Identifies the activation.
     */
    activationId?: pulumi.Input<number>;
    /**
     * The username who created the activation.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: pulumi.Input<string>;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: pulumi.Input<string>;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: pulumi.Input<string>;
    /**
     * Identifies the shared policy.
     */
    policyId?: pulumi.Input<number>;
    /**
     * The number of the policy version.
     */
    policyVersion?: pulumi.Input<number>;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: pulumi.Input<boolean>;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: pulumi.Input<string>;
}

export interface GetCloudletsSharedPolicyActivationsStaging {
    /**
     * The status of the activation that's currently in use on this network, or null if the policy has no activations.
     */
    effective?: inputs.GetCloudletsSharedPolicyActivationsStagingEffective;
    /**
     * The status of the latest activation or null if the policy has no activations.
     */
    latest?: inputs.GetCloudletsSharedPolicyActivationsStagingLatest;
}

export interface GetCloudletsSharedPolicyActivationsStagingArgs {
    /**
     * The status of the activation that's currently in use on this network, or null if the policy has no activations.
     */
    effective?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsStagingEffectiveArgs>;
    /**
     * The status of the latest activation or null if the policy has no activations.
     */
    latest?: pulumi.Input<inputs.GetCloudletsSharedPolicyActivationsStagingLatestArgs>;
}

export interface GetCloudletsSharedPolicyActivationsStagingEffective {
    /**
     * Identifies the activation.
     */
    activationId?: number;
    /**
     * The username who created the activation.
     */
    createdBy?: string;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: string;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: string;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: string;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: string;
    /**
     * Identifies the shared policy.
     */
    policyId?: number;
    /**
     * The number of the policy version.
     */
    policyVersion?: number;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: boolean;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: string;
}

export interface GetCloudletsSharedPolicyActivationsStagingEffectiveArgs {
    /**
     * Identifies the activation.
     */
    activationId?: pulumi.Input<number>;
    /**
     * The username who created the activation.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: pulumi.Input<string>;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: pulumi.Input<string>;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: pulumi.Input<string>;
    /**
     * Identifies the shared policy.
     */
    policyId?: pulumi.Input<number>;
    /**
     * The number of the policy version.
     */
    policyVersion?: pulumi.Input<number>;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: pulumi.Input<boolean>;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: pulumi.Input<string>;
}

export interface GetCloudletsSharedPolicyActivationsStagingLatest {
    /**
     * Identifies the activation.
     */
    activationId?: number;
    /**
     * The username who created the activation.
     */
    createdBy?: string;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: string;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: string;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: string;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: string;
    /**
     * Identifies the shared policy.
     */
    policyId?: number;
    /**
     * The number of the policy version.
     */
    policyVersion?: number;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: boolean;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: string;
}

export interface GetCloudletsSharedPolicyActivationsStagingLatestArgs {
    /**
     * Identifies the activation.
     */
    activationId?: pulumi.Input<number>;
    /**
     * The username who created the activation.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in 'failureDetails'.
     */
    finishDate?: pulumi.Input<string>;
    /**
     * The networks where you can activate or deactivate the policy version, either 'PRODUCTION' or 'STAGING'.
     */
    network?: pulumi.Input<string>;
    /**
     * The operations that you can perform on a policy version, either 'ACTIVATION' or 'DEACTIVATION'.
     */
    operation?: pulumi.Input<string>;
    /**
     * Identifies the shared policy.
     */
    policyId?: pulumi.Input<number>;
    /**
     * The number of the policy version.
     */
    policyVersion?: pulumi.Input<number>;
    /**
     * Indicates if the policy version is deleted.
     */
    policyVersionDeleted?: pulumi.Input<boolean>;
    /**
     * The status of the operation, either 'IN_PROGRESS', 'SUCCESS', or 'FAILED'.
     */
    status?: pulumi.Input<string>;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRule {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: boolean;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: number;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: string;
    /**
     * Defines a set of match objects
     */
    matches?: inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch[];
    /**
     * The name of the rule
     */
    name?: string;
    /**
     * The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
     */
    passThroughPercent: number;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: number;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: string;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleArgs {
    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The end time for this match (in seconds since the epoch)
     */
    end?: pulumi.Input<number>;
    /**
     * If using a URL match, this property is the URL that the Cloudlet uses to match the incoming request
     */
    matchUrl?: pulumi.Input<string>;
    /**
     * Defines a set of match objects
     */
    matches?: pulumi.Input<pulumi.Input<inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs>[]>;
    /**
     * The name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * The range 0.0: 99.0 specifies the percentage of requests that pass through to the origin. The value of 100 means the request always passes through to the origin. A value of -1 means send everyone to the waiting room.
     */
    passThroughPercent: pulumi.Input<number>;
    /**
     * The start time for this match (in seconds since the epoch)
     */
    start?: pulumi.Input<number>;
    /**
     * The type of Cloudlet the rule is for
     */
    type?: pulumi.Input<string>;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatch {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: boolean;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: string;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: string;
    /**
     * The type of match used
     */
    matchType?: string;
    /**
     * Depends on the matchType
     */
    matchValue?: string;
    /**
     * If true, negates the match
     */
    negate?: boolean;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchArgs {
    /**
     * If true, the match is case sensitive
     */
    caseSensitive?: pulumi.Input<boolean>;
    /**
     * For clientip, continent, countrycode, proxy, and regioncode match types, the part of the request that determines the IP address to use
     */
    checkIps?: pulumi.Input<string>;
    /**
     * Valid entries for this property: contains, exists, and equals
     */
    matchOperator?: pulumi.Input<string>;
    /**
     * The type of match used
     */
    matchType?: pulumi.Input<string>;
    /**
     * Depends on the matchType
     */
    matchValue?: pulumi.Input<string>;
    /**
     * If true, negates the match
     */
    negate?: pulumi.Input<boolean>;
    /**
     * An object used when a rule either includes more complex match criteria, like multiple value attributes
     */
    objectMatchValues?: pulumi.Input<pulumi.Input<inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs>[]>;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValue {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: string;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: boolean;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: boolean;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: string;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueArgs {
    /**
     * If using a match type that supports name attributes, enter the value in the incoming request to match on. The following match types support this property: cookie, header, parameter, and query
     */
    name?: pulumi.Input<string>;
    /**
     * Set to true if the entry for the name property should be evaluated based on case sensitivity
     */
    nameCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if the entry for the name property includes wildcards
     */
    nameHasWildcard?: pulumi.Input<boolean>;
    /**
     * If using the object type, use this set to list the values to match on (use only with the object type)
     */
    options?: pulumi.Input<inputs.GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs>;
    /**
     * The array type, which can be one of the following: object or simple. Use the simple option when adding only an array of string-based values
     */
    type: pulumi.Input<string>;
    /**
     * The value attributes in the incoming request to match on (use only with simple type)
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptions {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: boolean;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: boolean;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: boolean;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: string[];
}

export interface GetCloudletsVisitorPrioritizationMatchRuleMatchRuleMatchObjectMatchValueOptionsArgs {
    /**
     * Set to true if the entries for the value property should be evaluated based on case sensitivity
     */
    valueCaseSensitive?: pulumi.Input<boolean>;
    /**
     * Set to true if provided value should be compared in escaped form
     */
    valueEscaped?: pulumi.Input<boolean>;
    /**
     * Set to true if the entries for the value property include wildcards
     */
    valueHasWildcard?: pulumi.Input<boolean>;
    /**
     * The value attributes in the incoming request to match on
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudwrapperCapacitiesCapacity {
    /**
     * Capacity allocated for the location.
     */
    approved?: inputs.GetCloudwrapperCapacitiesCapacityApproved;
    /**
     * Capacity already assigned to Cloud Wrapper configurations.
     */
    assigned?: inputs.GetCloudwrapperCapacitiesCapacityAssigned;
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId?: string;
    /**
     * Unique identifier of the configured location.
     */
    locationId?: number;
    /**
     * Name of the location.
     */
    locationName?: string;
    /**
     * The type of property this capacity is related to.
     */
    type?: string;
    /**
     * Capacity value that can be assigned to Cloud Wrapper configurations.
     */
    unassigned?: inputs.GetCloudwrapperCapacitiesCapacityUnassigned;
}

export interface GetCloudwrapperCapacitiesCapacityArgs {
    /**
     * Capacity allocated for the location.
     */
    approved?: pulumi.Input<inputs.GetCloudwrapperCapacitiesCapacityApprovedArgs>;
    /**
     * Capacity already assigned to Cloud Wrapper configurations.
     */
    assigned?: pulumi.Input<inputs.GetCloudwrapperCapacitiesCapacityAssignedArgs>;
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId?: pulumi.Input<string>;
    /**
     * Unique identifier of the configured location.
     */
    locationId?: pulumi.Input<number>;
    /**
     * Name of the location.
     */
    locationName?: pulumi.Input<string>;
    /**
     * The type of property this capacity is related to.
     */
    type?: pulumi.Input<string>;
    /**
     * Capacity value that can be assigned to Cloud Wrapper configurations.
     */
    unassigned?: pulumi.Input<inputs.GetCloudwrapperCapacitiesCapacityUnassignedArgs>;
}

export interface GetCloudwrapperCapacitiesCapacityApproved {
    unit: string;
    value: number;
}

export interface GetCloudwrapperCapacitiesCapacityApprovedArgs {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetCloudwrapperCapacitiesCapacityAssigned {
    unit: string;
    value: number;
}

export interface GetCloudwrapperCapacitiesCapacityAssignedArgs {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetCloudwrapperCapacitiesCapacityUnassigned {
    unit: string;
    value: number;
}

export interface GetCloudwrapperCapacitiesCapacityUnassignedArgs {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationLocation {
    /**
     * The capacity assigned to this configuration's location.
     */
    capacity?: inputs.GetCloudwrapperConfigurationLocationCapacity;
    /**
     * Additional comments provided by user.
     */
    comments?: string;
    /**
     * The name of the map.
     */
    mapName?: string;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: number;
}

export interface GetCloudwrapperConfigurationLocationArgs {
    /**
     * The capacity assigned to this configuration's location.
     */
    capacity?: pulumi.Input<inputs.GetCloudwrapperConfigurationLocationCapacityArgs>;
    /**
     * Additional comments provided by user.
     */
    comments?: pulumi.Input<string>;
    /**
     * The name of the map.
     */
    mapName?: pulumi.Input<string>;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationLocationCapacity {
    unit: string;
    value: number;
}

export interface GetCloudwrapperConfigurationLocationCapacityArgs {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettings {
    /**
     * Specify diagnostic data beacons details.
     */
    bocc?: inputs.GetCloudwrapperConfigurationMultiCdnSettingsBocc;
    /**
     * List of CDN added for the configuration.
     */
    cdns?: inputs.GetCloudwrapperConfigurationMultiCdnSettingsCdn[];
    /**
     * Specifies data streams details.
     */
    dataStreams?: inputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreams;
    /**
     * Option to opt out of alerts based on soft limits of bandwidth usage.
     */
    enableSoftAlerts?: boolean;
    /**
     * List of origins corresponding to the properties selected in the configuration.
     */
    origins?: inputs.GetCloudwrapperConfigurationMultiCdnSettingsOrigin[];
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsArgs {
    /**
     * Specify diagnostic data beacons details.
     */
    bocc?: pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs>;
    /**
     * List of CDN added for the configuration.
     */
    cdns?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs>[]>;
    /**
     * Specifies data streams details.
     */
    dataStreams?: pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs>;
    /**
     * Option to opt out of alerts based on soft limits of bandwidth usage.
     */
    enableSoftAlerts?: pulumi.Input<boolean>;
    /**
     * List of origins corresponding to the properties selected in the configuration.
     */
    origins?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs>[]>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsBocc {
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    conditionalSamplingFrequency?: string;
    /**
     * Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     */
    enabled?: boolean;
    /**
     * Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     */
    forwardType?: string;
    /**
     * Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     */
    requestType?: string;
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    samplingFrequency?: string;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsBoccArgs {
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    conditionalSamplingFrequency?: pulumi.Input<string>;
    /**
     * Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     */
    forwardType?: pulumi.Input<string>;
    /**
     * Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     */
    requestType?: pulumi.Input<string>;
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    samplingFrequency?: pulumi.Input<string>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsCdn {
    /**
     * List of auth keys configured for the CDN.
     */
    cdnAuthKeys?: inputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKey[];
    /**
     * Unique identifier for the CDN.
     */
    cdnCode?: string;
    /**
     * Enable CDN.
     */
    enabled?: boolean;
    /**
     * Specify whether CDN communication is HTTPS only.
     */
    httpsOnly?: boolean;
    /**
     * Configure an access control list using IP addresses in CIDR notation.
     */
    ipAclCidrs?: string[];
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsCdnArgs {
    /**
     * List of auth keys configured for the CDN.
     */
    cdnAuthKeys?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs>[]>;
    /**
     * Unique identifier for the CDN.
     */
    cdnCode?: pulumi.Input<string>;
    /**
     * Enable CDN.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specify whether CDN communication is HTTPS only.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * Configure an access control list using IP addresses in CIDR notation.
     */
    ipAclCidrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKey {
    /**
     * The name of the auth key.
     */
    authKeyName?: string;
    /**
     * The expirty date of an auth key.
     */
    expiryDate?: string;
    /**
     * The header name of an auth key.
     */
    headerName?: string;
    /**
     * The secret of an auth key.
     */
    secret?: string;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs {
    /**
     * The name of the auth key.
     */
    authKeyName?: pulumi.Input<string>;
    /**
     * The expirty date of an auth key.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The header name of an auth key.
     */
    headerName?: pulumi.Input<string>;
    /**
     * The secret of an auth key.
     */
    secret?: pulumi.Input<string>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsDataStreams {
    /**
     * Unique identifiers of the Data Streams.
     */
    dataStreamIds?: number[];
    /**
     * Enables DataStream reporting.
     */
    enabled?: boolean;
    /**
     * Specifies the percentage of log data you want to collect for this configuration.
     */
    samplingRate?: number;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsDataStreamsArgs {
    /**
     * Unique identifiers of the Data Streams.
     */
    dataStreamIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enables DataStream reporting.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the percentage of log data you want to collect for this configuration.
     */
    samplingRate?: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsOrigin {
    /**
     * Origins hostname corresponding to the Akamai Delivery Property.
     */
    hostname?: string;
    /**
     * Origin identifier and will be used to generated Multi CDN host names.
     */
    originId?: string;
    /**
     * Property ID of the property that origin belongs to.
     */
    propertyId?: number;
}

export interface GetCloudwrapperConfigurationMultiCdnSettingsOriginArgs {
    /**
     * Origins hostname corresponding to the Akamai Delivery Property.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Origin identifier and will be used to generated Multi CDN host names.
     */
    originId?: pulumi.Input<string>;
    /**
     * Property ID of the property that origin belongs to.
     */
    propertyId?: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationsConfiguration {
    /**
     * Represents the threshold for sending alerts.
     */
    capacityAlertsThreshold?: number;
    /**
     * Additional information provided by user which can help to differentiate or track changes of the configuration.
     */
    comments?: string;
    /**
     * Name of the configuration.
     */
    configName?: string;
    /**
     * Contract ID with Cloud Wrapper entitlement.
     */
    contractId?: string;
    /**
     * Unique identifier of a Cloud Wrapper configuration.
     */
    id?: number;
    /**
     * User to last activate the configuration.
     */
    lastActivatedBy?: string;
    /**
     * ISO format date that represents when the configuration was last activated successfully.
     */
    lastActivatedDate?: string;
    /**
     * User to last modify the configuration.
     */
    lastUpdatedBy?: string;
    /**
     * ISO format date that represents when the configuration was last edited.
     */
    lastUpdatedDate?: string;
    /**
     * List of all unused properties.
     */
    locations?: inputs.GetCloudwrapperConfigurationsConfigurationLocation[];
    /**
     * Specify details about the Multi CDN settings.
     */
    multiCdnSettings?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettings;
    /**
     * Email addresses to receive notifications.
     */
    notificationEmails?: string[];
    /**
     * List of properties belonging to media delivery products. Properties need to be unique across configurations.
     */
    propertyIds?: string[];
    /**
     * Retain idle objects beyond their max idle lifetime.
     */
    retainIdleObjects?: boolean;
    /**
     * Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
     */
    status?: string;
}

export interface GetCloudwrapperConfigurationsConfigurationArgs {
    /**
     * Represents the threshold for sending alerts.
     */
    capacityAlertsThreshold?: pulumi.Input<number>;
    /**
     * Additional information provided by user which can help to differentiate or track changes of the configuration.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name of the configuration.
     */
    configName?: pulumi.Input<string>;
    /**
     * Contract ID with Cloud Wrapper entitlement.
     */
    contractId?: pulumi.Input<string>;
    /**
     * Unique identifier of a Cloud Wrapper configuration.
     */
    id?: pulumi.Input<number>;
    /**
     * User to last activate the configuration.
     */
    lastActivatedBy?: pulumi.Input<string>;
    /**
     * ISO format date that represents when the configuration was last activated successfully.
     */
    lastActivatedDate?: pulumi.Input<string>;
    /**
     * User to last modify the configuration.
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * ISO format date that represents when the configuration was last edited.
     */
    lastUpdatedDate?: pulumi.Input<string>;
    /**
     * List of all unused properties.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationLocationArgs>[]>;
    /**
     * Specify details about the Multi CDN settings.
     */
    multiCdnSettings?: pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs>;
    /**
     * Email addresses to receive notifications.
     */
    notificationEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of properties belonging to media delivery products. Properties need to be unique across configurations.
     */
    propertyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Retain idle objects beyond their max idle lifetime.
     */
    retainIdleObjects?: pulumi.Input<boolean>;
    /**
     * Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
     */
    status?: pulumi.Input<string>;
}

export interface GetCloudwrapperConfigurationsConfigurationLocation {
    /**
     * The capacity assigned to this configuration's location.
     */
    capacity?: inputs.GetCloudwrapperConfigurationsConfigurationLocationCapacity;
    /**
     * Additional comments provided by user.
     */
    comments?: string;
    /**
     * The name of the map.
     */
    mapName?: string;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: number;
}

export interface GetCloudwrapperConfigurationsConfigurationLocationArgs {
    /**
     * The capacity assigned to this configuration's location.
     */
    capacity?: pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs>;
    /**
     * Additional comments provided by user.
     */
    comments?: pulumi.Input<string>;
    /**
     * The name of the map.
     */
    mapName?: pulumi.Input<string>;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationsConfigurationLocationCapacity {
    unit: string;
    value: number;
}

export interface GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs {
    unit: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettings {
    /**
     * Specify diagnostic data beacons details.
     */
    bocc?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc;
    /**
     * List of CDN added for the configuration.
     */
    cdns?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn[];
    /**
     * Specifies data streams details.
     */
    dataStreams?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams;
    /**
     * Option to opt out of alerts based on soft limits of bandwidth usage.
     */
    enableSoftAlerts?: boolean;
    /**
     * List of origins corresponding to the properties selected in the configuration.
     */
    origins?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin[];
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs {
    /**
     * Specify diagnostic data beacons details.
     */
    bocc?: pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs>;
    /**
     * List of CDN added for the configuration.
     */
    cdns?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs>[]>;
    /**
     * Specifies data streams details.
     */
    dataStreams?: pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs>;
    /**
     * Option to opt out of alerts based on soft limits of bandwidth usage.
     */
    enableSoftAlerts?: pulumi.Input<boolean>;
    /**
     * List of origins corresponding to the properties selected in the configuration.
     */
    origins?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs>[]>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc {
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    conditionalSamplingFrequency?: string;
    /**
     * Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     */
    enabled?: boolean;
    /**
     * Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     */
    forwardType?: string;
    /**
     * Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     */
    requestType?: string;
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    samplingFrequency?: string;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccArgs {
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    conditionalSamplingFrequency?: pulumi.Input<string>;
    /**
     * Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     */
    forwardType?: pulumi.Input<string>;
    /**
     * Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     */
    requestType?: pulumi.Input<string>;
    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     */
    samplingFrequency?: pulumi.Input<string>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn {
    /**
     * List of auth keys configured for the CDN.
     */
    cdnAuthKeys?: inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey[];
    /**
     * Unique identifier for the CDN.
     */
    cdnCode?: string;
    /**
     * Enable CDN.
     */
    enabled?: boolean;
    /**
     * Specify whether CDN communication is HTTPS only.
     */
    httpsOnly?: boolean;
    /**
     * Configure an access control list using IP addresses in CIDR notation.
     */
    ipAclCidrs?: string[];
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnArgs {
    /**
     * List of auth keys configured for the CDN.
     */
    cdnAuthKeys?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs>[]>;
    /**
     * Unique identifier for the CDN.
     */
    cdnCode?: pulumi.Input<string>;
    /**
     * Enable CDN.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specify whether CDN communication is HTTPS only.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * Configure an access control list using IP addresses in CIDR notation.
     */
    ipAclCidrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKey {
    /**
     * The name of the auth key.
     */
    authKeyName?: string;
    /**
     * The expirty date of an auth key.
     */
    expiryDate?: string;
    /**
     * The header name of an auth key.
     */
    headerName?: string;
    /**
     * The secret of an auth key.
     */
    secret?: string;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdnCdnAuthKeyArgs {
    /**
     * The name of the auth key.
     */
    authKeyName?: pulumi.Input<string>;
    /**
     * The expirty date of an auth key.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The header name of an auth key.
     */
    headerName?: pulumi.Input<string>;
    /**
     * The secret of an auth key.
     */
    secret?: pulumi.Input<string>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams {
    /**
     * Unique identifiers of the Data Streams.
     */
    dataStreamIds?: number[];
    /**
     * Enables DataStream reporting.
     */
    enabled?: boolean;
    /**
     * Specifies the percentage of log data you want to collect for this configuration.
     */
    samplingRate?: number;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreamsArgs {
    /**
     * Unique identifiers of the Data Streams.
     */
    dataStreamIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Enables DataStream reporting.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the percentage of log data you want to collect for this configuration.
     */
    samplingRate?: pulumi.Input<number>;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin {
    /**
     * Origins hostname corresponding to the Akamai Delivery Property.
     */
    hostname?: string;
    /**
     * Origin identifier and will be used to generated Multi CDN host names.
     */
    originId?: string;
    /**
     * Property ID of the property that origin belongs to.
     */
    propertyId?: number;
}

export interface GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOriginArgs {
    /**
     * Origins hostname corresponding to the Akamai Delivery Property.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Origin identifier and will be used to generated Multi CDN host names.
     */
    originId?: pulumi.Input<string>;
    /**
     * Property ID of the property that origin belongs to.
     */
    propertyId?: pulumi.Input<number>;
}

export interface GetCloudwrapperLocationsLocation {
    /**
     * Unique identifier of the location.
     */
    locationId?: number;
    /**
     * Name of the location.
     */
    locationName?: string;
    /**
     * Unique identifier of the multi CDN location.
     */
    multiCdnLocationId?: string;
    /**
     * List of traffic types for the location.
     */
    trafficTypes?: inputs.GetCloudwrapperLocationsLocationTrafficType[];
}

export interface GetCloudwrapperLocationsLocationArgs {
    /**
     * Unique identifier of the location.
     */
    locationId?: pulumi.Input<number>;
    /**
     * Name of the location.
     */
    locationName?: pulumi.Input<string>;
    /**
     * Unique identifier of the multi CDN location.
     */
    multiCdnLocationId?: pulumi.Input<string>;
    /**
     * List of traffic types for the location.
     */
    trafficTypes?: pulumi.Input<pulumi.Input<inputs.GetCloudwrapperLocationsLocationTrafficTypeArgs>[]>;
}

export interface GetCloudwrapperLocationsLocationTrafficType {
    /**
     * Represents the failover map.
     */
    locationId?: string;
    /**
     * Represents the traffic type. LIVE applies to low-latency media traffic, such as live streaming. LIVE_VOD applies to redundant media traffic, like video on demand content. WEB_STANDARD_TLS or WEB_ENHANCED_TLS applies to web content using Standard TLS security or Enhanced TLS security, respectively.
     */
    trafficType?: string;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: number;
}

export interface GetCloudwrapperLocationsLocationTrafficTypeArgs {
    /**
     * Represents the failover map.
     */
    locationId?: pulumi.Input<string>;
    /**
     * Represents the traffic type. LIVE applies to low-latency media traffic, such as live streaming. LIVE_VOD applies to redundant media traffic, like video on demand content. WEB_STANDARD_TLS or WEB_ENHANCED_TLS applies to web content using Standard TLS security or Enhanced TLS security, respectively.
     */
    trafficType?: pulumi.Input<string>;
    /**
     * Unique identifier for the location and traffic type combination.
     */
    trafficTypeId?: pulumi.Input<number>;
}

export interface GetCloudwrapperPropertiesProperty {
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId?: string;
    /**
     * ID of the group which the property belongs to.
     */
    groupId?: number;
    /**
     * Property ID of the property.
     */
    propertyId?: number;
    /**
     * Name of the property belonging to the origin.
     */
    propertyName?: string;
    /**
     * The type of property. MEDIA applies to live or video on demand content. WEB applies to website or app content.
     */
    type?: string;
}

export interface GetCloudwrapperPropertiesPropertyArgs {
    /**
     * Contract ID having Cloud Wrapper entitlement.
     */
    contractId?: pulumi.Input<string>;
    /**
     * ID of the group which the property belongs to.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Property ID of the property.
     */
    propertyId?: pulumi.Input<number>;
    /**
     * Name of the property belonging to the origin.
     */
    propertyName?: pulumi.Input<string>;
    /**
     * The type of property. MEDIA applies to live or video on demand content. WEB applies to website or app content.
     */
    type?: pulumi.Input<string>;
}

export interface GetGtmAsmapAssignment {
    /**
     * Specifies an array of AS numbers.
     */
    asNumbers?: number[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A descriptive label for the group.
     */
    nickname?: string;
}

export interface GetGtmAsmapAssignmentArgs {
    /**
     * Specifies an array of AS numbers.
     */
    asNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for the group.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmAsmapDefaultDatacenter {
    /**
     * For each property, an identifier for all other AS zones
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other AS zones
     */
    nickname?: string;
}

export interface GetGtmAsmapDefaultDatacenterArgs {
    /**
     * For each property, an identifier for all other AS zones
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other AS zones
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmAsmapLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmAsmapLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmCidrmapAssignment {
    /**
     * Specifies an array of CIDR blocks.
     */
    blocks?: string[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A descriptive label for the CIDR zone group.
     */
    nickname?: string;
}

export interface GetGtmCidrmapAssignmentArgs {
    /**
     * Specifies an array of CIDR blocks.
     */
    blocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for the CIDR zone group.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmCidrmapDefaultDatacenter {
    /**
     * For each property, an identifier for all other CIDR zones' CNAME.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other CIDR blocks.
     */
    nickname?: string;
}

export interface GetGtmCidrmapDefaultDatacenterArgs {
    /**
     * For each property, an identifier for all other CIDR zones' CNAME.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other CIDR blocks.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmCidrmapLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmCidrmapLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainAsMap {
    /**
     * Contains information about the AS zone groupings of AS IDs.
     */
    assignments?: inputs.GetGtmDomainAsMapAssignment[];
    /**
     * A placeholder for all other AS zones, AS IDs not found in these AS zones.
     */
    defaultDatacenter?: inputs.GetGtmDomainAsMapDefaultDatacenter;
    /**
     * Specifies the URL path that allows direct navigation to the As map.
     */
    links?: inputs.GetGtmDomainAsMapLink[];
    /**
     * A descriptive label for the AS map.
     */
    name?: string;
}

export interface GetGtmDomainAsMapArgs {
    /**
     * Contains information about the AS zone groupings of AS IDs.
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainAsMapAssignmentArgs>[]>;
    /**
     * A placeholder for all other AS zones, AS IDs not found in these AS zones.
     */
    defaultDatacenter?: pulumi.Input<inputs.GetGtmDomainAsMapDefaultDatacenterArgs>;
    /**
     * Specifies the URL path that allows direct navigation to the As map.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainAsMapLinkArgs>[]>;
    /**
     * A descriptive label for the AS map.
     */
    name?: pulumi.Input<string>;
}

export interface GetGtmDomainAsMapAssignment {
    /**
     * Specifies an array of AS numbers.
     */
    asNumbers?: number[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: string;
}

export interface GetGtmDomainAsMapAssignmentArgs {
    /**
     * Specifies an array of AS numbers.
     */
    asNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainAsMapDefaultDatacenter {
    /**
     * For each property, an identifier for all other AS zones' CNAME.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: string;
}

export interface GetGtmDomainAsMapDefaultDatacenterArgs {
    /**
     * For each property, an identifier for all other AS zones' CNAME.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainAsMapLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainAsMapLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainCidrMap {
    /**
     * Contains information about the CIDR zone groupings of CIDR blocks.
     */
    assignments?: inputs.GetGtmDomainCidrMapAssignment[];
    /**
     * A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
     */
    defaultDatacenter?: inputs.GetGtmDomainCidrMapDefaultDatacenter;
    /**
     * Specifies the URL path that allows direct navigation to the CIDR map.
     */
    links?: inputs.GetGtmDomainCidrMapLink[];
    /**
     * Unique name for the CIDR map.
     */
    name?: string;
}

export interface GetGtmDomainCidrMapArgs {
    /**
     * Contains information about the CIDR zone groupings of CIDR blocks.
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainCidrMapAssignmentArgs>[]>;
    /**
     * A placeholder for all other CIDR zones, CIDR blocks not found in these CIDR zones.
     */
    defaultDatacenter?: pulumi.Input<inputs.GetGtmDomainCidrMapDefaultDatacenterArgs>;
    /**
     * Specifies the URL path that allows direct navigation to the CIDR map.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainCidrMapLinkArgs>[]>;
    /**
     * Unique name for the CIDR map.
     */
    name?: pulumi.Input<string>;
}

export interface GetGtmDomainCidrMapAssignment {
    /**
     * Specifies an array of CIDR blocks.
     */
    blocks?: string[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: string;
}

export interface GetGtmDomainCidrMapAssignmentArgs {
    /**
     * Specifies an array of CIDR blocks.
     */
    blocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainCidrMapDefaultDatacenter {
    /**
     * For each property, an identifier for all other CIDR zones' CNAME.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other CIDR blocks.
     */
    nickname?: string;
}

export interface GetGtmDomainCidrMapDefaultDatacenterArgs {
    /**
     * For each property, an identifier for all other CIDR zones' CNAME.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other CIDR blocks.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainCidrMapLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainCidrMapLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainDatacenter {
    /**
     * The name of the city where the data center is located.
     */
    city?: string;
    /**
     * Identifies the data center's ID of which this data center is a clone.
     */
    cloneOf?: number;
    /**
     * Balances load between two or more servers in a cloud environment.
     */
    cloudServerHostHeaderOverride?: boolean;
    /**
     * Balances load between two or more servers in a cloud environment.
     */
    cloudServerTargeting?: boolean;
    /**
     * A two-letter code that specifies the continent where the data center maps to.
     */
    continent?: string;
    /**
     * A two-letter ISO 3166 country code that specifies the country where the data center is located.
     */
    country?: string;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * Specifies the load reporting interface between you and the GTM system.
     */
    defaultLoadObjects?: inputs.GetGtmDomainDatacenterDefaultLoadObject[];
    /**
     * Specifies the geographic latitude of the data center's position.
     */
    latitude?: number;
    /**
     * Provides a URL path that allows direct navigation to a data center.
     */
    links?: inputs.GetGtmDomainDatacenterLink[];
    /**
     * Specifies the geographic longitude of the data center's position.
     */
    longitude?: number;
    /**
     * A descriptive label for the datacenter.
     */
    nickname?: string;
    /**
     * Influences the score for a datacenter.
     */
    scorePenalty?: number;
    /**
     * The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     */
    serverMonitorPool?: string;
    /**
     * Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     */
    stateOrProvince?: string;
    /**
     * Indicates whether or not the data center is virtual or physical.
     */
    virtual?: boolean;
}

export interface GetGtmDomainDatacenterArgs {
    /**
     * The name of the city where the data center is located.
     */
    city?: pulumi.Input<string>;
    /**
     * Identifies the data center's ID of which this data center is a clone.
     */
    cloneOf?: pulumi.Input<number>;
    /**
     * Balances load between two or more servers in a cloud environment.
     */
    cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    /**
     * Balances load between two or more servers in a cloud environment.
     */
    cloudServerTargeting?: pulumi.Input<boolean>;
    /**
     * A two-letter code that specifies the continent where the data center maps to.
     */
    continent?: pulumi.Input<string>;
    /**
     * A two-letter ISO 3166 country code that specifies the country where the data center is located.
     */
    country?: pulumi.Input<string>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * Specifies the load reporting interface between you and the GTM system.
     */
    defaultLoadObjects?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainDatacenterDefaultLoadObjectArgs>[]>;
    /**
     * Specifies the geographic latitude of the data center's position.
     */
    latitude?: pulumi.Input<number>;
    /**
     * Provides a URL path that allows direct navigation to a data center.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainDatacenterLinkArgs>[]>;
    /**
     * Specifies the geographic longitude of the data center's position.
     */
    longitude?: pulumi.Input<number>;
    /**
     * A descriptive label for the datacenter.
     */
    nickname?: pulumi.Input<string>;
    /**
     * Influences the score for a datacenter.
     */
    scorePenalty?: pulumi.Input<number>;
    /**
     * The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     */
    serverMonitorPool?: pulumi.Input<string>;
    /**
     * Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     */
    stateOrProvince?: pulumi.Input<string>;
    /**
     * Indicates whether or not the data center is virtual or physical.
     */
    virtual?: pulumi.Input<boolean>;
}

export interface GetGtmDomainDatacenterDefaultLoadObject {
    /**
     * Specifies the load object that GTM requests.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port to connect to when requesting the load object.
     */
    loadObjectPort?: number;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: string[];
}

export interface GetGtmDomainDatacenterDefaultLoadObjectArgs {
    /**
     * Specifies the load object that GTM requests.
     */
    loadObject?: pulumi.Input<string>;
    /**
     * Specifies the TCP port to connect to when requesting the load object.
     */
    loadObjectPort?: pulumi.Input<number>;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetGtmDomainDatacenterLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainDatacenterLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainGeographicMap {
    /**
     * Contains information about the geographic zone groupings of countries.
     */
    assignments?: inputs.GetGtmDomainGeographicMapAssignment[];
    /**
     * A placeholder for all other geographic zones, countries not found in these geographic zones.
     */
    defaultDatacenter?: inputs.GetGtmDomainGeographicMapDefaultDatacenter;
    /**
     * Specifies the URL path that allows direct navigation to the geographic map.
     */
    links?: inputs.GetGtmDomainGeographicMapLink[];
    /**
     * A descriptive label for the geographic map.
     */
    name?: string;
}

export interface GetGtmDomainGeographicMapArgs {
    /**
     * Contains information about the geographic zone groupings of countries.
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainGeographicMapAssignmentArgs>[]>;
    /**
     * A placeholder for all other geographic zones, countries not found in these geographic zones.
     */
    defaultDatacenter?: pulumi.Input<inputs.GetGtmDomainGeographicMapDefaultDatacenterArgs>;
    /**
     * Specifies the URL path that allows direct navigation to the geographic map.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainGeographicMapLinkArgs>[]>;
    /**
     * A descriptive label for the geographic map.
     */
    name?: pulumi.Input<string>;
}

export interface GetGtmDomainGeographicMapAssignment {
    /**
     * Specifies an array of two-letter ISO 3166 `country` codes.
     */
    countries?: string[];
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: string;
}

export interface GetGtmDomainGeographicMapAssignmentArgs {
    /**
     * Specifies an array of two-letter ISO 3166 `country` codes.
     */
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other AS zones.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainGeographicMapDefaultDatacenter {
    /**
     * An identifier for all other geographic zones' CNAME.
     */
    datacenterId?: number;
    /**
     * A descriptive label for all other geographic zones.
     */
    nickname?: string;
}

export interface GetGtmDomainGeographicMapDefaultDatacenterArgs {
    /**
     * An identifier for all other geographic zones' CNAME.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * A descriptive label for all other geographic zones.
     */
    nickname?: pulumi.Input<string>;
}

export interface GetGtmDomainGeographicMapLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainGeographicMapLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainProperty {
    /**
     * Specifies a backup CNAME.
     */
    backupCname?: string;
    /**
     * Specifies a backup IP.
     */
    backupIp?: string;
    /**
     * Indicates whether download score based load balancing is enabled.
     */
    balanceByDownloadScore?: boolean;
    /**
     * Indicates the fully qualified name aliased to a particular property.
     */
    cname?: string;
    /**
     * Descriptive comments for the property.
     */
    comments?: string;
    /**
     * Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
     */
    dynamicTtl?: number;
    /**
     * Specifies the failback delay in seconds.
     */
    failbackDelay?: number;
    /**
     * Specifies the failover delay in seconds.
     */
    failoverDelay?: number;
    /**
     * Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
     */
    ghostDemandReporting?: boolean;
    /**
     * Indicates the limit for the number of live IPs handed out to a DNS request.
     */
    handoutLimit?: number;
    /**
     * Specifies how IPs are returned when more than one IP is alive and available.
     */
    handoutMode?: string;
    /**
     * Defines the absolute limit beyond which IPs are declared unhealthy.
     */
    healthMax?: number;
    /**
     * Configures a cutoff value that is computed from the median scores.
     */
    healthMultiplier?: number;
    /**
     * Configures a cutoff value that is computed from the median scores.
     */
    healthThreshold?: number;
    /**
     * Indicates the type of IP address handed out by a property.
     */
    ipv6?: boolean;
    /**
     * An ISO 8601 timestamp that indicates when the property was last changed.
     */
    lastModified?: string;
    /**
     * Provides a URL path that allows direct navigation to the property.
     */
    links?: inputs.GetGtmDomainPropertyLink[];
    /**
     * Contains information about liveness tests.
     */
    livenessTests?: inputs.GetGtmDomainPropertyLivenessTest[];
    /**
     * Indicates the percent of load imbalance factor for the domain.
     */
    loadImbalancePercentage?: number;
    /**
     * A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
     */
    mapName?: string;
    /**
     * For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     */
    maxUnreachablePenalty?: number;
    /**
     * Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     */
    minLiveFraction?: number;
    /**
     * A descriptive label for the property.
     */
    name?: string;
    /**
     * Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     */
    scoreAggregationType?: string;
    /**
     * Contains static recordsets.
     */
    staticRrSets?: inputs.GetGtmDomainPropertyStaticRrSet[];
    /**
     * Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
     */
    staticTtl?: number;
    /**
     * Specifies a percentage used to configure data center affinity.
     */
    sticknessBonusConstant?: number;
    /**
     * Specifies a percentage used to configure data center affinity.
     */
    sticknessBonusPercentage?: number;
    /**
     * Traffic targets for the property.
     */
    trafficTargets?: inputs.GetGtmDomainPropertyTrafficTarget[];
    /**
     * Specifies the load balancing behvior for the property.
     */
    type?: string;
    /**
     * For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     */
    unreachableThreshold?: number;
    /**
     * For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
     */
    useComputedTargets?: boolean;
    /**
     * For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
     */
    weightedHashBitsForIpv4?: number;
    /**
     * For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
     */
    weightedHashBitsForIpv6?: number;
}

export interface GetGtmDomainPropertyArgs {
    /**
     * Specifies a backup CNAME.
     */
    backupCname?: pulumi.Input<string>;
    /**
     * Specifies a backup IP.
     */
    backupIp?: pulumi.Input<string>;
    /**
     * Indicates whether download score based load balancing is enabled.
     */
    balanceByDownloadScore?: pulumi.Input<boolean>;
    /**
     * Indicates the fully qualified name aliased to a particular property.
     */
    cname?: pulumi.Input<string>;
    /**
     * Descriptive comments for the property.
     */
    comments?: pulumi.Input<string>;
    /**
     * Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
     */
    dynamicTtl?: pulumi.Input<number>;
    /**
     * Specifies the failback delay in seconds.
     */
    failbackDelay?: pulumi.Input<number>;
    /**
     * Specifies the failover delay in seconds.
     */
    failoverDelay?: pulumi.Input<number>;
    /**
     * Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
     */
    ghostDemandReporting?: pulumi.Input<boolean>;
    /**
     * Indicates the limit for the number of live IPs handed out to a DNS request.
     */
    handoutLimit?: pulumi.Input<number>;
    /**
     * Specifies how IPs are returned when more than one IP is alive and available.
     */
    handoutMode?: pulumi.Input<string>;
    /**
     * Defines the absolute limit beyond which IPs are declared unhealthy.
     */
    healthMax?: pulumi.Input<number>;
    /**
     * Configures a cutoff value that is computed from the median scores.
     */
    healthMultiplier?: pulumi.Input<number>;
    /**
     * Configures a cutoff value that is computed from the median scores.
     */
    healthThreshold?: pulumi.Input<number>;
    /**
     * Indicates the type of IP address handed out by a property.
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * An ISO 8601 timestamp that indicates when the property was last changed.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * Provides a URL path that allows direct navigation to the property.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainPropertyLinkArgs>[]>;
    /**
     * Contains information about liveness tests.
     */
    livenessTests?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainPropertyLivenessTestArgs>[]>;
    /**
     * Indicates the percent of load imbalance factor for the domain.
     */
    loadImbalancePercentage?: pulumi.Input<number>;
    /**
     * A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
     */
    mapName?: pulumi.Input<string>;
    /**
     * For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
     */
    maxUnreachablePenalty?: pulumi.Input<number>;
    /**
     * Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
     */
    minLiveFraction?: pulumi.Input<number>;
    /**
     * A descriptive label for the property.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
     */
    scoreAggregationType?: pulumi.Input<string>;
    /**
     * Contains static recordsets.
     */
    staticRrSets?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainPropertyStaticRrSetArgs>[]>;
    /**
     * Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
     */
    staticTtl?: pulumi.Input<number>;
    /**
     * Specifies a percentage used to configure data center affinity.
     */
    sticknessBonusConstant?: pulumi.Input<number>;
    /**
     * Specifies a percentage used to configure data center affinity.
     */
    sticknessBonusPercentage?: pulumi.Input<number>;
    /**
     * Traffic targets for the property.
     */
    trafficTargets?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainPropertyTrafficTargetArgs>[]>;
    /**
     * Specifies the load balancing behvior for the property.
     */
    type?: pulumi.Input<string>;
    /**
     * For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
     */
    unreachableThreshold?: pulumi.Input<number>;
    /**
     * For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
     */
    useComputedTargets?: pulumi.Input<boolean>;
    /**
     * For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
     */
    weightedHashBitsForIpv4?: pulumi.Input<number>;
    /**
     * For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
     */
    weightedHashBitsForIpv6?: pulumi.Input<number>;
}

export interface GetGtmDomainPropertyLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainPropertyLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainPropertyLivenessTest {
    /**
     * List of alternate trust anchors (CA certificates)
     */
    alternateCaCertificates?: string[];
    /**
     * If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
     */
    answersRequired?: boolean;
    /**
     * Disables warnings when non-standard ports are used.
     */
    disableNonstandardPortWarning?: boolean;
    /**
     * Disables the liveness test.
     */
    disabled?: boolean;
    /**
     * Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     */
    errorPenalty?: number;
    /**
     * Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError3xx?: boolean;
    /**
     * Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError4xx?: boolean;
    /**
     * Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError5xx?: boolean;
    /**
     * List of HTTP headers for the liveness test.
     */
    httpHeaders?: inputs.GetGtmDomainPropertyLivenessTestHttpHeader[];
    /**
     * Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
     */
    httpMethod?: string;
    /**
     * Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
     */
    httpRequestBody?: string;
    /**
     * A descriptive name for the liveness test.
     */
    name?: string;
    /**
     * Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
     */
    peerCertificateVerification?: boolean;
    /**
     * Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     */
    pre2023SecurityPosture?: boolean;
    /**
     * Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
     */
    recursionRequested?: boolean;
    /**
     * Specifies a request string.
     */
    requestString?: string;
    /**
     * Specifies the query type, if testObjectProtocol is DNS.
     */
    resourceType?: string;
    /**
     * Specifies a response string.
     */
    responseString?: string;
    /**
     * Indicates a base64-encoded certificate.
     */
    sslClientCertificate?: string;
    /**
     * Indicates a base64-encoded private key.
     */
    sslClientPrivateKey?: string;
    /**
     * Indicates the interval at which the liveness test is run, in seconds.
     */
    testInterval?: number;
    /**
     * Specifies the static text that acts as a stand-in for the data that you're sending on the network.
     */
    testObject?: string;
    /**
     * Specifies the test object's password.
     */
    testObjectPassword?: string;
    /**
     * Specifies the port number for the testObject.
     */
    testObjectPort?: number;
    /**
     * Specifies the test protocol.
     */
    testObjectProtocol?: string;
    /**
     * A descriptive name for the testObject.
     */
    testObjectUsername?: string;
    /**
     * Specifies the duration of the liveness test before it fails.
     */
    testTimeout?: number;
    /**
     * Specifies the timeout penalty score.
     */
    timeoutPenalty?: number;
}

export interface GetGtmDomainPropertyLivenessTestArgs {
    /**
     * List of alternate trust anchors (CA certificates)
     */
    alternateCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
     */
    answersRequired?: pulumi.Input<boolean>;
    /**
     * Disables warnings when non-standard ports are used.
     */
    disableNonstandardPortWarning?: pulumi.Input<boolean>;
    /**
     * Disables the liveness test.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
     */
    errorPenalty?: pulumi.Input<number>;
    /**
     * Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError3xx?: pulumi.Input<boolean>;
    /**
     * Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError4xx?: pulumi.Input<boolean>;
    /**
     * Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
     */
    httpError5xx?: pulumi.Input<boolean>;
    /**
     * List of HTTP headers for the liveness test.
     */
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainPropertyLivenessTestHttpHeaderArgs>[]>;
    /**
     * Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
     */
    httpMethod?: pulumi.Input<string>;
    /**
     * Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
     */
    httpRequestBody?: pulumi.Input<string>;
    /**
     * A descriptive name for the liveness test.
     */
    name?: pulumi.Input<string>;
    /**
     * Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
     */
    peerCertificateVerification?: pulumi.Input<boolean>;
    /**
     * Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     */
    pre2023SecurityPosture?: pulumi.Input<boolean>;
    /**
     * Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
     */
    recursionRequested?: pulumi.Input<boolean>;
    /**
     * Specifies a request string.
     */
    requestString?: pulumi.Input<string>;
    /**
     * Specifies the query type, if testObjectProtocol is DNS.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Specifies a response string.
     */
    responseString?: pulumi.Input<string>;
    /**
     * Indicates a base64-encoded certificate.
     */
    sslClientCertificate?: pulumi.Input<string>;
    /**
     * Indicates a base64-encoded private key.
     */
    sslClientPrivateKey?: pulumi.Input<string>;
    /**
     * Indicates the interval at which the liveness test is run, in seconds.
     */
    testInterval?: pulumi.Input<number>;
    /**
     * Specifies the static text that acts as a stand-in for the data that you're sending on the network.
     */
    testObject?: pulumi.Input<string>;
    /**
     * Specifies the test object's password.
     */
    testObjectPassword?: pulumi.Input<string>;
    /**
     * Specifies the port number for the testObject.
     */
    testObjectPort?: pulumi.Input<number>;
    /**
     * Specifies the test protocol.
     */
    testObjectProtocol?: pulumi.Input<string>;
    /**
     * A descriptive name for the testObject.
     */
    testObjectUsername?: pulumi.Input<string>;
    /**
     * Specifies the duration of the liveness test before it fails.
     */
    testTimeout?: pulumi.Input<number>;
    /**
     * Specifies the timeout penalty score.
     */
    timeoutPenalty?: pulumi.Input<number>;
}

export interface GetGtmDomainPropertyLivenessTestHttpHeader {
    /**
     * Name of the HTTP header.
     */
    name?: string;
    /**
     * Value of the HTTP header.
     */
    value?: string;
}

export interface GetGtmDomainPropertyLivenessTestHttpHeaderArgs {
    /**
     * Name of the HTTP header.
     */
    name?: pulumi.Input<string>;
    /**
     * Value of the HTTP header.
     */
    value?: pulumi.Input<string>;
}

export interface GetGtmDomainPropertyStaticRrSet {
    /**
     * An array of data strings, representing multiple records within a set.
     */
    rdatas?: string[];
    /**
     * The number of seconds that this record should live in a resolver's cache before being refetched.
     */
    ttl?: number;
    /**
     * The record type.
     */
    type?: string;
}

export interface GetGtmDomainPropertyStaticRrSetArgs {
    /**
     * An array of data strings, representing multiple records within a set.
     */
    rdatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of seconds that this record should live in a resolver's cache before being refetched.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record type.
     */
    type?: pulumi.Input<string>;
}

export interface GetGtmDomainPropertyTrafficTarget {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * Indicates whether the traffic target is used.
     */
    enabled?: boolean;
    /**
     * Specifies an optional data center for the property.
     */
    handoutCname?: string;
    /**
     * An alternative label for the traffic target.
     */
    name?: string;
    /**
     * Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     */
    precedence?: number;
    /**
     * Identifies the IP address or the hostnames of the servers.
     */
    servers?: string[];
    /**
     * Specifies the traffic target weight for the target.
     */
    weight?: number;
}

export interface GetGtmDomainPropertyTrafficTargetArgs {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * Indicates whether the traffic target is used.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies an optional data center for the property.
     */
    handoutCname?: pulumi.Input<string>;
    /**
     * An alternative label for the traffic target.
     */
    name?: pulumi.Input<string>;
    /**
     * Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     */
    precedence?: pulumi.Input<number>;
    /**
     * Identifies the IP address or the hostnames of the servers.
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the traffic target weight for the target.
     */
    weight?: pulumi.Input<number>;
}

export interface GetGtmDomainResource {
    /**
     * Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
     */
    aggregationType?: string;
    /**
     * Specifies the name of the property that this resource constraints.
     */
    constrainedProperty?: string;
    /**
     * For internal use only.
     */
    decayRate?: number;
    /**
     * A descriptive note to help you track what the resource constraints.
     */
    description?: string;
    /**
     * Specifies the host header used when fetching the load object.
     */
    hostHeader?: string;
    /**
     * Specifies the text that comes before the loadObject.
     */
    leaderString?: string;
    /**
     * For internal use only.
     */
    leastSquaresDecay?: number;
    /**
     * Specifies the URL path that allows direct navigation to the resource.
     */
    links?: inputs.GetGtmDomainResourceLink[];
    /**
     * Indicates the percent of load imbalance factor for the domain.
     */
    loadImbalancePercentage?: number;
    /**
     * For internal use only.
     */
    maxUMultiplicativeIncrement?: number;
    /**
     * A descriptive label for the resource.
     */
    name?: string;
    /**
     * List of resource instances.
     */
    resourceInstances?: inputs.GetGtmDomainResourceResourceInstance[];
    /**
     * Indicates the kind of loadObject format used to determine the load on the resource.
     */
    type?: string;
    /**
     * An optional sanity check that specifies the maximum allowed value for any component of the load object.
     */
    upperBound?: number;
}

export interface GetGtmDomainResourceArgs {
    /**
     * Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
     */
    aggregationType?: pulumi.Input<string>;
    /**
     * Specifies the name of the property that this resource constraints.
     */
    constrainedProperty?: pulumi.Input<string>;
    /**
     * For internal use only.
     */
    decayRate?: pulumi.Input<number>;
    /**
     * A descriptive note to help you track what the resource constraints.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the host header used when fetching the load object.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * Specifies the text that comes before the loadObject.
     */
    leaderString?: pulumi.Input<string>;
    /**
     * For internal use only.
     */
    leastSquaresDecay?: pulumi.Input<number>;
    /**
     * Specifies the URL path that allows direct navigation to the resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainResourceLinkArgs>[]>;
    /**
     * Indicates the percent of load imbalance factor for the domain.
     */
    loadImbalancePercentage?: pulumi.Input<number>;
    /**
     * For internal use only.
     */
    maxUMultiplicativeIncrement?: pulumi.Input<number>;
    /**
     * A descriptive label for the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * List of resource instances.
     */
    resourceInstances?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainResourceResourceInstanceArgs>[]>;
    /**
     * Indicates the kind of loadObject format used to determine the load on the resource.
     */
    type?: pulumi.Input<string>;
    /**
     * An optional sanity check that specifies the maximum allowed value for any component of the load object.
     */
    upperBound?: pulumi.Input<number>;
}

export interface GetGtmDomainResourceLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainResourceLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainResourceResourceInstance {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: number;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: string[];
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: boolean;
}

export interface GetGtmDomainResourceResourceInstanceArgs {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: pulumi.Input<string>;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: pulumi.Input<number>;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: pulumi.Input<boolean>;
}

export interface GetGtmDomainStatus {
    /**
     * A unique identifier generated when a change occurs to the domain.
     */
    changeId?: string;
    /**
     * Specifies the URL path that allows direct navigation to the domain.
     */
    links?: inputs.GetGtmDomainStatusLink[];
    /**
     * A notification generated when a change occurs to the domain.
     */
    message?: string;
    /**
     * Indicates if the domain validates.
     */
    passingValidation?: boolean;
    /**
     * Tracks the status of the domain's propagation state.
     */
    propagationStatus?: string;
    /**
     * An ISO 8601 timestamp indicating when a change occurs to the domain.
     */
    propagationStatusDate?: string;
}

export interface GetGtmDomainStatusArgs {
    /**
     * A unique identifier generated when a change occurs to the domain.
     */
    changeId?: pulumi.Input<string>;
    /**
     * Specifies the URL path that allows direct navigation to the domain.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainStatusLinkArgs>[]>;
    /**
     * A notification generated when a change occurs to the domain.
     */
    message?: pulumi.Input<string>;
    /**
     * Indicates if the domain validates.
     */
    passingValidation?: pulumi.Input<boolean>;
    /**
     * Tracks the status of the domain's propagation state.
     */
    propagationStatus?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating when a change occurs to the domain.
     */
    propagationStatusDate?: pulumi.Input<string>;
}

export interface GetGtmDomainStatusLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainStatusLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmDomainsDomain {
    /**
     * The contract's identifier, with which the domain is associated.
     */
    acgId?: string;
    /**
     * 'PENDING' when a change has been made but not yet propagated; 'COMPLETE' when the last configuration change has propagated successfully; 'DENIED' if the domain configuration failed validation; 'DELETED' if the domain has been deleted.
     */
    activationState?: string;
    /**
     * UUID that identifies a version of the domain configuration.
     */
    changeId?: string;
    /**
     * UUID for delete request during domain deletion. Null if the domain is not being deleted.
     */
    deleteRequestId?: string;
    /**
     * An ISO 8601 timestamp that indicates the time of the last domain change.
     */
    lastModified?: string;
    /**
     * The email address of the administrator who made the last change to the domain.
     */
    lastModifiedBy?: string;
    /**
     * Provides a URL path that allows direct navigation to the domain.
     */
    links?: inputs.GetGtmDomainsDomainLink[];
    /**
     * A descriptive note about changes to the domain.
     */
    modificationComments?: string;
    /**
     * A unique domain name.
     */
    name?: string;
    /**
     * If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
     */
    signAndServe?: boolean;
    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     */
    signAndServeAlgorithm?: string;
    /**
     * The current status of the domain.
     */
    status?: string;
}

export interface GetGtmDomainsDomainArgs {
    /**
     * The contract's identifier, with which the domain is associated.
     */
    acgId?: pulumi.Input<string>;
    /**
     * 'PENDING' when a change has been made but not yet propagated; 'COMPLETE' when the last configuration change has propagated successfully; 'DENIED' if the domain configuration failed validation; 'DELETED' if the domain has been deleted.
     */
    activationState?: pulumi.Input<string>;
    /**
     * UUID that identifies a version of the domain configuration.
     */
    changeId?: pulumi.Input<string>;
    /**
     * UUID for delete request during domain deletion. Null if the domain is not being deleted.
     */
    deleteRequestId?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp that indicates the time of the last domain change.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * The email address of the administrator who made the last change to the domain.
     */
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Provides a URL path that allows direct navigation to the domain.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmDomainsDomainLinkArgs>[]>;
    /**
     * A descriptive note about changes to the domain.
     */
    modificationComments?: pulumi.Input<string>;
    /**
     * A unique domain name.
     */
    name?: pulumi.Input<string>;
    /**
     * If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
     */
    signAndServe?: pulumi.Input<boolean>;
    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     */
    signAndServeAlgorithm?: pulumi.Input<string>;
    /**
     * The current status of the domain.
     */
    status?: pulumi.Input<string>;
}

export interface GetGtmDomainsDomainLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmDomainsDomainLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmResourceLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmResourceLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmResourceResourceInstance {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: number;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: string[];
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: boolean;
}

export interface GetGtmResourceResourceInstanceArgs {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: pulumi.Input<string>;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: pulumi.Input<number>;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: pulumi.Input<boolean>;
}

export interface GetGtmResourcesResource {
    /**
     * Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
     */
    aggregationType?: string;
    /**
     * Specifies the name of the property that this resource constraints.
     */
    constrainedProperty?: string;
    /**
     * For internal use only.
     */
    decayRate?: number;
    /**
     * A descriptive note which allows to track what is constrained by this resource.
     */
    description?: string;
    /**
     * Specifies the host header used when fetching the load object.
     */
    hostHeader?: string;
    /**
     * Specifies the text that comes before the load object.
     */
    leaderString?: string;
    /**
     * For internal use only.
     */
    leastSquaresDecay?: number;
    /**
     * Specifies the URL path that allows direct navigation to the resource.
     */
    links?: inputs.GetGtmResourcesResourceLink[];
    /**
     * Indicates the percentage of load imbalance for the domain.
     */
    loadImbalancePercentage?: number;
    /**
     * For internal use only.
     */
    maxUMultiplicativeIncrement?: number;
    /**
     * A descriptive label for the resource.
     */
    name: string;
    /**
     * Instances of the resource.
     */
    resourceInstances?: inputs.GetGtmResourcesResourceResourceInstance[];
    /**
     * Indicates the type of load object used to determine the load on the resource.
     */
    type?: string;
    /**
     * An optional sanity check that specifies the maximum allowed value for any component of the load object.
     */
    upperBound?: number;
}

export interface GetGtmResourcesResourceArgs {
    /**
     * Specifies how GTM handles different load numbers when multiple load servers are used for a data center or property.
     */
    aggregationType?: pulumi.Input<string>;
    /**
     * Specifies the name of the property that this resource constraints.
     */
    constrainedProperty?: pulumi.Input<string>;
    /**
     * For internal use only.
     */
    decayRate?: pulumi.Input<number>;
    /**
     * A descriptive note which allows to track what is constrained by this resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the host header used when fetching the load object.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * Specifies the text that comes before the load object.
     */
    leaderString?: pulumi.Input<string>;
    /**
     * For internal use only.
     */
    leastSquaresDecay?: pulumi.Input<number>;
    /**
     * Specifies the URL path that allows direct navigation to the resource.
     */
    links?: pulumi.Input<pulumi.Input<inputs.GetGtmResourcesResourceLinkArgs>[]>;
    /**
     * Indicates the percentage of load imbalance for the domain.
     */
    loadImbalancePercentage?: pulumi.Input<number>;
    /**
     * For internal use only.
     */
    maxUMultiplicativeIncrement?: pulumi.Input<number>;
    /**
     * A descriptive label for the resource.
     */
    name: pulumi.Input<string>;
    /**
     * Instances of the resource.
     */
    resourceInstances?: pulumi.Input<pulumi.Input<inputs.GetGtmResourcesResourceResourceInstanceArgs>[]>;
    /**
     * Indicates the type of load object used to determine the load on the resource.
     */
    type?: pulumi.Input<string>;
    /**
     * An optional sanity check that specifies the maximum allowed value for any component of the load object.
     */
    upperBound?: pulumi.Input<number>;
}

export interface GetGtmResourcesResourceLink {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: string;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: string;
}

export interface GetGtmResourcesResourceLinkArgs {
    /**
     * A hypermedia link to the complete URL that uniquely defines a resource.
     */
    href?: pulumi.Input<string>;
    /**
     * Indicates the link relationship of the object.
     */
    rel?: pulumi.Input<string>;
}

export interface GetGtmResourcesResourceResourceInstance {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: number;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: string;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: number;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: string[];
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: boolean;
}

export interface GetGtmResourcesResourceResourceInstanceArgs {
    /**
     * A unique identifier for an existing data center in the domain.
     */
    datacenterId?: pulumi.Input<number>;
    /**
     * Identifies the load object file used to report real-time information about the current load, maximum allowable load and target load on each resource.
     */
    loadObject?: pulumi.Input<string>;
    /**
     * Specifies the TCP port of the loadObject.
     */
    loadObjectPort?: pulumi.Input<number>;
    /**
     * Specifies the list of servers to requests the load object from.
     */
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to use default loadObject.
     */
    useDefaultLoadObject?: pulumi.Input<boolean>;
}

export interface GetImagingPolicyImagePolicy {
    /**
     * The breakpoint widths (in pixels) to use to create derivative images/videos.
     */
    breakpoints?: inputs.GetImagingPolicyImagePolicyBreakpoints;
    /**
     * Hosts that are allowed for image/video URLs within transformations or variables.
     */
    hosts?: string[];
    /**
     * Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     */
    output?: inputs.GetImagingPolicyImagePolicyOutput;
    /**
     * Post-processing Transformations are applied to the image after image and quality settings have been applied.
     */
    postBreakpointTransformations?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation[];
    /**
     * The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     */
    rolloutDuration?: string;
    /**
     * The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     */
    serveStaleDuration?: string;
    /**
     * Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     */
    transformations?: inputs.GetImagingPolicyImagePolicyTransformation[];
    /**
     * Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
     */
    variables?: inputs.GetImagingPolicyImagePolicyVariable[];
}

export interface GetImagingPolicyImagePolicyArgs {
    /**
     * The breakpoint widths (in pixels) to use to create derivative images/videos.
     */
    breakpoints?: pulumi.Input<inputs.GetImagingPolicyImagePolicyBreakpointsArgs>;
    /**
     * Hosts that are allowed for image/video URLs within transformations or variables.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
     */
    output?: pulumi.Input<inputs.GetImagingPolicyImagePolicyOutputArgs>;
    /**
     * Post-processing Transformations are applied to the image after image and quality settings have been applied.
     */
    postBreakpointTransformations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>[]>;
    /**
     * The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     */
    rolloutDuration?: pulumi.Input<string>;
    /**
     * The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
     */
    serveStaleDuration?: pulumi.Input<string>;
    /**
     * Set of image transformations to apply to the source image. If unspecified, no operations are performed.
     */
    transformations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>[]>;
    /**
     * Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyVariableArgs>[]>;
}

export interface GetImagingPolicyImagePolicyBreakpoints {
    widths?: number[];
}

export interface GetImagingPolicyImagePolicyBreakpointsArgs {
    widths?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface GetImagingPolicyImagePolicyOutput {
    /**
     * Override the quality of image to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
     */
    adaptiveQuality?: string;
    /**
     * Whether a pristine image wider than the requested breakpoint is allowed as a derivative image if it has the fewest bytes. This will not have an affect if transformations are present.
     */
    allowPristineOnDownsize?: string;
    /**
     * The graphics file formats allowed for browser specific results.
     */
    allowedFormats?: string[];
    /**
     * The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
     */
    forcedFormats?: string[];
    /**
     * Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
     */
    perceptualQuality?: string;
    /**
     * Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
     */
    perceptualQualityFloor?: string;
    /**
     * Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
     */
    perceptualQualityVar?: string;
    /**
     * Whether derivative image formats should be selected with a preference for modern formats (such as WebP and Avif) instead the format that results in the fewest bytes.
     */
    preferModernFormats?: string;
    /**
     * Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
     */
    quality?: string;
    /**
     * Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
     */
    qualityVar?: string;
}

export interface GetImagingPolicyImagePolicyOutputArgs {
    /**
     * Override the quality of image to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
     */
    adaptiveQuality?: pulumi.Input<string>;
    /**
     * Whether a pristine image wider than the requested breakpoint is allowed as a derivative image if it has the fewest bytes. This will not have an affect if transformations are present.
     */
    allowPristineOnDownsize?: pulumi.Input<string>;
    /**
     * The graphics file formats allowed for browser specific results.
     */
    allowedFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
     */
    forcedFormats?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
     */
    perceptualQuality?: pulumi.Input<string>;
    /**
     * Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
     */
    perceptualQualityFloor?: pulumi.Input<string>;
    /**
     * Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
     */
    perceptualQualityVar?: pulumi.Input<string>;
    /**
     * Whether derivative image formats should be selected with a preference for modern formats (such as WebP and Avif) instead the format that results in the fewest bytes.
     */
    preferModernFormats?: pulumi.Input<string>;
    /**
     * Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
     */
    quality?: pulumi.Input<string>;
    /**
     * Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
     */
    qualityVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformation {
    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     */
    backgroundColors?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor[];
    /**
     * Applies a Gaussian blur to the image.
     */
    blurs?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlur[];
    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
     */
    chromaKeys?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey[];
    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     */
    composites?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationComposite[];
    compounds?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompound[];
    /**
     * Adjusts both the contrast and brightness of an image.
     */
    contrasts?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrast[];
    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     */
    goops?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoop[];
    /**
     * Restricts image color to shades of gray only.
     */
    grayscales?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale[];
    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     */
    hsls?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsl[];
    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     */
    hsvs?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsv[];
    ifDimensions?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension[];
    ifOrientations?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation[];
    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     */
    maxColors?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor[];
    /**
     * Flips an image horizontally, vertically, or both.
     */
    mirrors?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirror[];
    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     */
    monoHues?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue[];
    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     */
    opacities?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity[];
    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     */
    removeColors?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor[];
    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     */
    unsharpMasks?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationArgs {
    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     */
    backgroundColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs>[]>;
    /**
     * Applies a Gaussian blur to the image.
     */
    blurs?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs>[]>;
    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
     */
    chromaKeys?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs>[]>;
    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     */
    composites?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs>[]>;
    compounds?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs>[]>;
    /**
     * Adjusts both the contrast and brightness of an image.
     */
    contrasts?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs>[]>;
    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     */
    goops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs>[]>;
    /**
     * Restricts image color to shades of gray only.
     */
    grayscales?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs>[]>;
    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     */
    hsls?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs>[]>;
    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     */
    hsvs?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs>[]>;
    ifDimensions?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs>[]>;
    ifOrientations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs>[]>;
    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     */
    maxColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs>[]>;
    /**
     * Flips an image horizontally, vertically, or both.
     */
    mirrors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs>[]>;
    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     */
    monoHues?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs>[]>;
    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     */
    opacities?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs>[]>;
    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     */
    removeColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs>[]>;
    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     */
    unsharpMasks?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs>[]>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor {
    /**
     * The hexadecimal CSS color value for the background.
     */
    color?: string;
    /**
     * The hexadecimal CSS color value for the background.
     */
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorArgs {
    /**
     * The hexadecimal CSS color value for the background.
     */
    color?: pulumi.Input<string>;
    /**
     * The hexadecimal CSS color value for the background.
     */
    colorVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBlur {
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigma?: string;
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationBlurArgs {
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigma?: pulumi.Input<string>;
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigmaVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey {
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hue?: string;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeather?: string;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeatherVar?: string;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueTolerance?: string;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueToleranceVar?: string;
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hueVar?: string;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeather?: string;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeatherVar?: string;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessTolerance?: string;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessToleranceVar?: string;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeather?: string;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeatherVar?: string;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationTolerance?: string;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyArgs {
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hue?: pulumi.Input<string>;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeather?: pulumi.Input<string>;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeatherVar?: pulumi.Input<string>;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueTolerance?: pulumi.Input<string>;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueToleranceVar?: pulumi.Input<string>;
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeather?: pulumi.Input<string>;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeatherVar?: pulumi.Input<string>;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessTolerance?: pulumi.Input<string>;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessToleranceVar?: pulumi.Input<string>;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeather?: pulumi.Input<string>;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeatherVar?: pulumi.Input<string>;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationTolerance?: pulumi.Input<string>;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationToleranceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationComposite {
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravity?: string;
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravityVar?: string;
    image: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImage;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placement?: string;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placementVar?: string;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scale?: string;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimension?: string;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimensionVar?: string;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scaleVar?: string;
    /**
     * The x-axis position of the image to apply.
     */
    xPosition?: string;
    /**
     * The x-axis position of the image to apply.
     */
    xPositionVar?: string;
    /**
     * The y-axis position of the image to apply.
     */
    yPosition?: string;
    /**
     * The y-axis position of the image to apply.
     */
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeArgs {
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravity?: pulumi.Input<string>;
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravityVar?: pulumi.Input<string>;
    image: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs>;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placement?: pulumi.Input<string>;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placementVar?: pulumi.Input<string>;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scale?: pulumi.Input<string>;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimension?: pulumi.Input<string>;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimensionVar?: pulumi.Input<string>;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scaleVar?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to apply.
     */
    xPosition?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to apply.
     */
    xPositionVar?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to apply.
     */
    yPosition?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to apply.
     */
    yPositionVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImage {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImage[];
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage[];
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImage[];
    /**
     * An image loaded from a URL.
     */
    urlImages?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageArgs {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs>[]>;
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs>[]>;
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs>[]>;
    /**
     * An image loaded from a URL.
     */
    urlImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs>[]>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImage {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The height of the box in pixels.
     */
    height?: string;
    /**
     * The height of the box in pixels.
     */
    heightVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageBoxImageArgs {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    height?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    heightVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImageArgs {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImage {
    /**
     * The main fill color of the text.
     */
    fill?: string;
    /**
     * The main fill color of the text.
     */
    fillVar?: string;
    /**
     * The size in pixels to render the text.
     */
    size?: string;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    stroke?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: string;
    /**
     * The line of text to render.
     */
    text?: string;
    /**
     * The line of text to render.
     */
    textVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: string;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageTextImageArgs {
    /**
     * The main fill color of the text.
     */
    fill?: pulumi.Input<string>;
    /**
     * The main fill color of the text.
     */
    fillVar?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    size?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    stroke?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    text?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    textVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: pulumi.Input<string>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImage {
    transformation?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The URL of the image.
     */
    url?: string;
    /**
     * The URL of the image.
     */
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageUrlImageArgs {
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The URL of the image.
     */
    url?: pulumi.Input<string>;
    /**
     * The URL of the image.
     */
    urlVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompound {
    transformations?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation[];
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundArgs {
    transformations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>[]>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationContrast {
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightness?: string;
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightnessVar?: string;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrast?: string;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationContrastArgs {
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightness?: pulumi.Input<string>;
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightnessVar?: pulumi.Input<string>;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrast?: pulumi.Input<string>;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrastVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGoop {
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaos?: string;
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaosVar?: string;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    density?: string;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    densityVar?: string;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    power?: string;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    powerVar?: string;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seed?: string;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGoopArgs {
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaos?: pulumi.Input<string>;
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaosVar?: pulumi.Input<string>;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    density?: pulumi.Input<string>;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    densityVar?: pulumi.Input<string>;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    power?: pulumi.Input<string>;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    powerVar?: pulumi.Input<string>;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seed?: pulumi.Input<string>;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seedVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale {
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    type?: string;
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleArgs {
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    type?: pulumi.Input<string>;
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    typeVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHsl {
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hue?: string;
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hueVar?: string;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightness?: string;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightnessVar?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHslArgs {
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hue?: pulumi.Input<string>;
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightness?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightnessVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHsv {
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hue?: string;
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hueVar?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: string;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    value?: string;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationHsvArgs {
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hue?: pulumi.Input<string>;
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    value?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    valueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension {
    default?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimension?: string;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimensionVar?: string;
    equal?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    greaterThan?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    lessThan?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    value?: string;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionArgs {
    default?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimension?: pulumi.Input<string>;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimensionVar?: pulumi.Input<string>;
    equal?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    greaterThan?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    lessThan?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    value?: pulumi.Input<string>;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    valueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation {
    default?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    landscape?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    portrait?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
    square?: inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationArgs {
    default?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    landscape?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    portrait?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
    square?: pulumi.Input<inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor {
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colors?: string;
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorArgs {
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colors?: pulumi.Input<string>;
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colorsVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMirror {
    /**
     * Flips the image horizontally.
     */
    horizontal?: string;
    /**
     * Flips the image horizontally.
     */
    horizontalVar?: string;
    /**
     * Flips the image vertically.
     */
    vertical?: string;
    /**
     * Flips the image vertically.
     */
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs {
    /**
     * Flips the image horizontally.
     */
    horizontal?: pulumi.Input<string>;
    /**
     * Flips the image horizontally.
     */
    horizontalVar?: pulumi.Input<string>;
    /**
     * Flips the image vertically.
     */
    vertical?: pulumi.Input<string>;
    /**
     * Flips the image vertically.
     */
    verticalVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue {
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hue?: string;
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueArgs {
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hue?: pulumi.Input<string>;
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity {
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacity?: string;
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityArgs {
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacity?: pulumi.Input<string>;
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacityVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor {
    /**
     * The hexadecimal CSS color value to remove.
     */
    color?: string;
    /**
     * The hexadecimal CSS color value to remove.
     */
    colorVar?: string;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    feather?: string;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    featherVar?: string;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    tolerance?: string;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorArgs {
    /**
     * The hexadecimal CSS color value to remove.
     */
    color?: pulumi.Input<string>;
    /**
     * The hexadecimal CSS color value to remove.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    feather?: pulumi.Input<string>;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    featherVar?: pulumi.Input<string>;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    tolerance?: pulumi.Input<string>;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    toleranceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask {
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gain?: string;
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gainVar?: string;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigma?: string;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigmaVar?: string;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    threshold?: string;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskArgs {
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gain?: pulumi.Input<string>;
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gainVar?: pulumi.Input<string>;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigma?: pulumi.Input<string>;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigmaVar?: pulumi.Input<string>;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    threshold?: pulumi.Input<string>;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    thresholdVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformation {
    /**
     * Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
     */
    appends?: inputs.GetImagingPolicyImagePolicyTransformationAppend[];
    /**
     * Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
     */
    aspectCrops?: inputs.GetImagingPolicyImagePolicyTransformationAspectCrop[];
    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     */
    backgroundColors?: inputs.GetImagingPolicyImagePolicyTransformationBackgroundColor[];
    /**
     * Applies a Gaussian blur to the image.
     */
    blurs?: inputs.GetImagingPolicyImagePolicyTransformationBlur[];
    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
     */
    chromaKeys?: inputs.GetImagingPolicyImagePolicyTransformationChromaKey[];
    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     */
    composites?: inputs.GetImagingPolicyImagePolicyTransformationComposite[];
    compounds?: inputs.GetImagingPolicyImagePolicyTransformationCompound[];
    /**
     * Adjusts both the contrast and brightness of an image.
     */
    contrasts?: inputs.GetImagingPolicyImagePolicyTransformationContrast[];
    /**
     * Crops an image.
     */
    crops?: inputs.GetImagingPolicyImagePolicyTransformationCrop[];
    /**
     * Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
     */
    faceCrops?: inputs.GetImagingPolicyImagePolicyTransformationFaceCrop[];
    /**
     * Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
     */
    featureCrops?: inputs.GetImagingPolicyImagePolicyTransformationFeatureCrop[];
    /**
     * Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
     */
    fitAndFills?: inputs.GetImagingPolicyImagePolicyTransformationFitAndFill[];
    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     */
    goops?: inputs.GetImagingPolicyImagePolicyTransformationGoop[];
    /**
     * Restricts image color to shades of gray only.
     */
    grayscales?: inputs.GetImagingPolicyImagePolicyTransformationGrayscale[];
    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     */
    hsls?: inputs.GetImagingPolicyImagePolicyTransformationHsl[];
    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     */
    hsvs?: inputs.GetImagingPolicyImagePolicyTransformationHsv[];
    ifDimensions?: inputs.GetImagingPolicyImagePolicyTransformationIfDimension[];
    ifOrientations?: inputs.GetImagingPolicyImagePolicyTransformationIfOrientation[];
    /**
     * Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
     */
    imQueries?: inputs.GetImagingPolicyImagePolicyTransformationImQuery[];
    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     */
    maxColors?: inputs.GetImagingPolicyImagePolicyTransformationMaxColor[];
    /**
     * Flips an image horizontally, vertically, or both.
     */
    mirrors?: inputs.GetImagingPolicyImagePolicyTransformationMirror[];
    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     */
    monoHues?: inputs.GetImagingPolicyImagePolicyTransformationMonoHue[];
    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     */
    opacities?: inputs.GetImagingPolicyImagePolicyTransformationOpacity[];
    /**
     * Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
     */
    regionOfInterestCrops?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop[];
    /**
     * Shrinks or expands an image relative to the image's specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
     */
    relativeCrops?: inputs.GetImagingPolicyImagePolicyTransformationRelativeCrop[];
    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     */
    removeColors?: inputs.GetImagingPolicyImagePolicyTransformationRemoveColor[];
    /**
     * Resizes an image to a particular, absolute dimension. If you don't enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image's aspect.
     */
    resizes?: inputs.GetImagingPolicyImagePolicyTransformationResize[];
    /**
     * Rotate the image around its center by indicating the degrees of rotation.
     */
    rotates?: inputs.GetImagingPolicyImagePolicyTransformationRotate[];
    /**
     * Changes the image's size to different dimensions relative to its starting size.
     */
    scales?: inputs.GetImagingPolicyImagePolicyTransformationScale[];
    /**
     * Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it's often useful to use a `BackgroundColor` transformation for these areas.
     */
    shears?: inputs.GetImagingPolicyImagePolicyTransformationShears[];
    /**
     * Crops around whatever is most important in the image, to a region around a specified area of interest relative to the specified `width` and `height` values. The crop detects any faces present, otherwise features.
     */
    smartCrops?: inputs.GetImagingPolicyImagePolicyTransformationSmartCrop[];
    /**
     * Automatically crops uniform backgrounds from the edges of an image.
     */
    trims?: inputs.GetImagingPolicyImagePolicyTransformationTrim[];
    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     */
    unsharpMasks?: inputs.GetImagingPolicyImagePolicyTransformationUnsharpMask[];
}

export interface GetImagingPolicyImagePolicyTransformationArgs {
    /**
     * Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
     */
    appends?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendArgs>[]>;
    /**
     * Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
     */
    aspectCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAspectCropArgs>[]>;
    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     */
    backgroundColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationBackgroundColorArgs>[]>;
    /**
     * Applies a Gaussian blur to the image.
     */
    blurs?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationBlurArgs>[]>;
    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a 'green screen' technique commonly used to isolate and remove background colors.
     */
    chromaKeys?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationChromaKeyArgs>[]>;
    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that's underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     */
    composites?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeArgs>[]>;
    compounds?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompoundArgs>[]>;
    /**
     * Adjusts both the contrast and brightness of an image.
     */
    contrasts?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationContrastArgs>[]>;
    /**
     * Crops an image.
     */
    crops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCropArgs>[]>;
    /**
     * Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
     */
    faceCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationFaceCropArgs>[]>;
    /**
     * Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
     */
    featureCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationFeatureCropArgs>[]>;
    /**
     * Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
     */
    fitAndFills?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationFitAndFillArgs>[]>;
    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     */
    goops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationGoopArgs>[]>;
    /**
     * Restricts image color to shades of gray only.
     */
    grayscales?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationGrayscaleArgs>[]>;
    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     */
    hsls?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationHslArgs>[]>;
    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     */
    hsvs?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationHsvArgs>[]>;
    ifDimensions?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationIfDimensionArgs>[]>;
    ifOrientations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationIfOrientationArgs>[]>;
    /**
     * Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
     */
    imQueries?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationImQueryArgs>[]>;
    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     */
    maxColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationMaxColorArgs>[]>;
    /**
     * Flips an image horizontally, vertically, or both.
     */
    mirrors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationMirrorArgs>[]>;
    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     */
    monoHues?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationMonoHueArgs>[]>;
    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     */
    opacities?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationOpacityArgs>[]>;
    /**
     * Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
     */
    regionOfInterestCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs>[]>;
    /**
     * Shrinks or expands an image relative to the image's specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
     */
    relativeCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRelativeCropArgs>[]>;
    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     */
    removeColors?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRemoveColorArgs>[]>;
    /**
     * Resizes an image to a particular, absolute dimension. If you don't enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image's aspect.
     */
    resizes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationResizeArgs>[]>;
    /**
     * Rotate the image around its center by indicating the degrees of rotation.
     */
    rotates?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRotateArgs>[]>;
    /**
     * Changes the image's size to different dimensions relative to its starting size.
     */
    scales?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationScaleArgs>[]>;
    /**
     * Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it's often useful to use a `BackgroundColor` transformation for these areas.
     */
    shears?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationShearsArgs>[]>;
    /**
     * Crops around whatever is most important in the image, to a region around a specified area of interest relative to the specified `width` and `height` values. The crop detects any faces present, otherwise features.
     */
    smartCrops?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationSmartCropArgs>[]>;
    /**
     * Automatically crops uniform backgrounds from the edges of an image.
     */
    trims?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationTrimArgs>[]>;
    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     */
    unsharpMasks?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationAppend {
    /**
     * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     */
    gravity?: string;
    /**
     * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     */
    gravityPriority?: string;
    /**
     * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     */
    gravityPriorityVar?: string;
    /**
     * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     */
    gravityVar?: string;
    image: inputs.GetImagingPolicyImagePolicyTransformationAppendImage;
    /**
     * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
     */
    preserveMinorDimension?: string;
    /**
     * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
     */
    preserveMinorDimensionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendArgs {
    /**
     * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     */
    gravity?: pulumi.Input<string>;
    /**
     * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     */
    gravityPriority?: pulumi.Input<string>;
    /**
     * Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     */
    gravityPriorityVar?: pulumi.Input<string>;
    /**
     * Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     */
    gravityVar?: pulumi.Input<string>;
    image: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendImageArgs>;
    /**
     * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
     */
    preserveMinorDimension?: pulumi.Input<string>;
    /**
     * Whether to preserve the source image's minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &times; 100 pixels. The dimensions of the appending `image` are 50 &times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image's minor dimension vertical. To preserve the source image's minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image's minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &times; 100 pixels.
     */
    preserveMinorDimensionVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImage {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: inputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImage[];
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: inputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImage[];
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: inputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImage[];
    /**
     * An image loaded from a URL.
     */
    urlImages?: inputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageArgs {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs>[]>;
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs>[]>;
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs>[]>;
    /**
     * An image loaded from a URL.
     */
    urlImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImage {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The height of the box in pixels.
     */
    height?: string;
    /**
     * The height of the box in pixels.
     */
    heightVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageBoxImageArgs {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    height?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    heightVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImage {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageCircleImageArgs {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImage {
    /**
     * The main fill color of the text.
     */
    fill?: string;
    /**
     * The main fill color of the text.
     */
    fillVar?: string;
    /**
     * The size in pixels to render the text.
     */
    size?: string;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    stroke?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: string;
    /**
     * The line of text to render.
     */
    text?: string;
    /**
     * The line of text to render.
     */
    textVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: string;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageTextImageArgs {
    /**
     * The main fill color of the text.
     */
    fill?: pulumi.Input<string>;
    /**
     * The main fill color of the text.
     */
    fillVar?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    size?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    stroke?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    text?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    textVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: pulumi.Input<string>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImage {
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The URL of the image.
     */
    url?: string;
    /**
     * The URL of the image.
     */
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAppendImageUrlImageArgs {
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The URL of the image.
     */
    url?: pulumi.Input<string>;
    /**
     * The URL of the image.
     */
    urlVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationAspectCrop {
    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     */
    allowExpansion?: string;
    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     */
    allowExpansionVar?: string;
    /**
     * The height term of the aspect ratio to crop.
     */
    height?: string;
    /**
     * The height term of the aspect ratio to crop.
     */
    heightVar?: string;
    /**
     * The width term of the aspect ratio to crop.
     */
    width?: string;
    /**
     * The width term of the aspect ratio to crop.
     */
    widthVar?: string;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    xPosition?: string;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    xPositionVar?: string;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    yPosition?: string;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationAspectCropArgs {
    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     */
    allowExpansion?: pulumi.Input<string>;
    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     */
    allowExpansionVar?: pulumi.Input<string>;
    /**
     * The height term of the aspect ratio to crop.
     */
    height?: pulumi.Input<string>;
    /**
     * The height term of the aspect ratio to crop.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * The width term of the aspect ratio to crop.
     */
    width?: pulumi.Input<string>;
    /**
     * The width term of the aspect ratio to crop.
     */
    widthVar?: pulumi.Input<string>;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    xPosition?: pulumi.Input<string>;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    xPositionVar?: pulumi.Input<string>;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    yPosition?: pulumi.Input<string>;
    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     */
    yPositionVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationBackgroundColor {
    /**
     * The hexadecimal CSS color value for the background.
     */
    color?: string;
    /**
     * The hexadecimal CSS color value for the background.
     */
    colorVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationBackgroundColorArgs {
    /**
     * The hexadecimal CSS color value for the background.
     */
    color?: pulumi.Input<string>;
    /**
     * The hexadecimal CSS color value for the background.
     */
    colorVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationBlur {
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigma?: string;
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigmaVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationBlurArgs {
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigma?: pulumi.Input<string>;
    /**
     * The number of pixels to scatter the original pixel by to create the blur effect. Resulting images may be larger than the original as pixels at the edge of the image might scatter outside the image's original dimensions.
     */
    sigmaVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationChromaKey {
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hue?: string;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeather?: string;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeatherVar?: string;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueTolerance?: string;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueToleranceVar?: string;
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hueVar?: string;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeather?: string;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeatherVar?: string;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessTolerance?: string;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessToleranceVar?: string;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeather?: string;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeatherVar?: string;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationTolerance?: string;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationToleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationChromaKeyArgs {
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hue?: pulumi.Input<string>;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeather?: pulumi.Input<string>;
    /**
     * How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     */
    hueFeatherVar?: pulumi.Input<string>;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueTolerance?: pulumi.Input<string>;
    /**
     * How close a color's hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     */
    hueToleranceVar?: pulumi.Input<string>;
    /**
     * The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeather?: pulumi.Input<string>;
    /**
     * How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     */
    lightnessFeatherVar?: pulumi.Input<string>;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessTolerance?: pulumi.Input<string>;
    /**
     * How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     */
    lightnessToleranceVar?: pulumi.Input<string>;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeather?: pulumi.Input<string>;
    /**
     * How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     */
    saturationFeatherVar?: pulumi.Input<string>;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationTolerance?: pulumi.Input<string>;
    /**
     * How close a color's saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     */
    saturationToleranceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationComposite {
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravity?: string;
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravityVar?: string;
    image: inputs.GetImagingPolicyImagePolicyTransformationCompositeImage;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placement?: string;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placementVar?: string;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scale?: string;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimension?: string;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimensionVar?: string;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scaleVar?: string;
    /**
     * The x-axis position of the image to apply.
     */
    xPosition?: string;
    /**
     * The x-axis position of the image to apply.
     */
    xPositionVar?: string;
    /**
     * The y-axis position of the image to apply.
     */
    yPosition?: string;
    /**
     * The y-axis position of the image to apply.
     */
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeArgs {
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravity?: pulumi.Input<string>;
    /**
     * Compass direction indicating the corner or edge of the base image to place the applied image. Use Horizontal and Vertical Offset to adjust the applied image's gravity position
     */
    gravityVar?: pulumi.Input<string>;
    image: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeImageArgs>;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placement?: pulumi.Input<string>;
    /**
     * Place applied image on top of or underneath the base image. Watermarks are usually applied over. Backgrounds are usually applied under.
     */
    placementVar?: pulumi.Input<string>;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scale?: pulumi.Input<string>;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimension?: pulumi.Input<string>;
    /**
     * The dimension, either `width` or `height`, of the source image to scale.
     */
    scaleDimensionVar?: pulumi.Input<string>;
    /**
     * A multiplier to resize the applied image relative to the source image and preserve aspect ratio, 1 by default. Set the `scaleDimension` to calculate the `scale` from the source image's width or height.
     */
    scaleVar?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to apply.
     */
    xPosition?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to apply.
     */
    xPositionVar?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to apply.
     */
    yPosition?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to apply.
     */
    yPositionVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImage {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: inputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImage[];
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: inputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImage[];
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: inputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImage[];
    /**
     * An image loaded from a URL.
     */
    urlImages?: inputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImage[];
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageArgs {
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    boxImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs>[]>;
    /**
     * A rectangular box, with a specified color and applied transformation.
     */
    circleImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs>[]>;
    /**
     * A snippet of text. Defines font family and size, fill color, and outline stroke width and color.
     */
    textImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs>[]>;
    /**
     * An image loaded from a URL.
     */
    urlImages?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImage {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The height of the box in pixels.
     */
    height?: string;
    /**
     * The height of the box in pixels.
     */
    heightVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageBoxImageArgs {
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the box, not the edge of the box. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    height?: pulumi.Input<string>;
    /**
     * The height of the box in pixels.
     */
    heightVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImage {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: string;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: string;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The width of the box in pixels.
     */
    width?: string;
    /**
     * The width of the box in pixels.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs {
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    color?: pulumi.Input<string>;
    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameter?: pulumi.Input<string>;
    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     */
    diameterVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The width of the box in pixels.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the box in pixels.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImage {
    /**
     * The main fill color of the text.
     */
    fill?: string;
    /**
     * The main fill color of the text.
     */
    fillVar?: string;
    /**
     * The size in pixels to render the text.
     */
    size?: string;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    stroke?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: string;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: string;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: string;
    /**
     * The line of text to render.
     */
    text?: string;
    /**
     * The line of text to render.
     */
    textVar?: string;
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: string;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageTextImageArgs {
    /**
     * The main fill color of the text.
     */
    fill?: pulumi.Input<string>;
    /**
     * The main fill color of the text.
     */
    fillVar?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    size?: pulumi.Input<string>;
    /**
     * The size in pixels to render the text.
     */
    sizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    stroke?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSize?: pulumi.Input<string>;
    /**
     * The thickness in points for the outline of the text.
     */
    strokeSizeVar?: pulumi.Input<string>;
    /**
     * The color for the outline of the text.
     */
    strokeVar?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    text?: pulumi.Input<string>;
    /**
     * The line of text to render.
     */
    textVar?: pulumi.Input<string>;
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typeface?: pulumi.Input<string>;
    /**
     * The font family to apply to the text image. This may be a URL to a TrueType or WOFF (v1) typeface, or a string that refers to one of the standard built-in browser fonts.
     */
    typefaceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImage {
    transformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The URL of the image.
     */
    url?: string;
    /**
     * The URL of the image.
     */
    urlVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCompositeImageUrlImageArgs {
    transformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The URL of the image.
     */
    url?: pulumi.Input<string>;
    /**
     * The URL of the image.
     */
    urlVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCompound {
    transformations?: inputs.GetImagingPolicyImagePolicyTransformation[];
}

export interface GetImagingPolicyImagePolicyTransformationCompoundArgs {
    transformations?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationContrast {
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightness?: string;
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightnessVar?: string;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrast?: string;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrastVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationContrastArgs {
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightness?: pulumi.Input<string>;
    /**
     * Adjusts the brightness of the image. Positive values increase brightness and negative values decrease brightness. A value of  `1` produces a white image. A value of  `-1` produces a black image. The default value is `0`, which leaves the image unchanged. The acceptable value range is `-1.0` to `1.0`. Values outside of the acceptable range clamp to this range.
     */
    brightnessVar?: pulumi.Input<string>;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrast?: pulumi.Input<string>;
    /**
     * Adjusts the contrast of the image. Expressed as a range from `-1` to `1`, positive values increase contrast, negative values decrease it, while `0` leaves the image unchanged. Values outside of the `-1` to `1` range clamp to this range.
     */
    contrastVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationCrop {
    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     */
    allowExpansion?: string;
    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     */
    allowExpansionVar?: string;
    /**
     * Frame of reference for X and Y Positions.
     */
    gravity?: string;
    /**
     * Frame of reference for X and Y Positions.
     */
    gravityVar?: string;
    /**
     * The number of pixels to crop along the y-axis.
     */
    height?: string;
    /**
     * The number of pixels to crop along the y-axis.
     */
    heightVar?: string;
    /**
     * The number of pixels to crop along the x-axis.
     */
    width?: string;
    /**
     * The number of pixels to crop along the x-axis.
     */
    widthVar?: string;
    /**
     * The x-axis position of the image to crop from.
     */
    xPosition?: string;
    /**
     * The x-axis position of the image to crop from.
     */
    xPositionVar?: string;
    /**
     * The y-axis position of the image to crop from.
     */
    yPosition?: string;
    /**
     * The y-axis position of the image to crop from.
     */
    yPositionVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationCropArgs {
    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     */
    allowExpansion?: pulumi.Input<string>;
    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     */
    allowExpansionVar?: pulumi.Input<string>;
    /**
     * Frame of reference for X and Y Positions.
     */
    gravity?: pulumi.Input<string>;
    /**
     * Frame of reference for X and Y Positions.
     */
    gravityVar?: pulumi.Input<string>;
    /**
     * The number of pixels to crop along the y-axis.
     */
    height?: pulumi.Input<string>;
    /**
     * The number of pixels to crop along the y-axis.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * The number of pixels to crop along the x-axis.
     */
    width?: pulumi.Input<string>;
    /**
     * The number of pixels to crop along the x-axis.
     */
    widthVar?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to crop from.
     */
    xPosition?: pulumi.Input<string>;
    /**
     * The x-axis position of the image to crop from.
     */
    xPositionVar?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to crop from.
     */
    yPosition?: pulumi.Input<string>;
    /**
     * The y-axis position of the image to crop from.
     */
    yPositionVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationFaceCrop {
    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     */
    algorithm?: string;
    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     */
    algorithmVar?: string;
    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     */
    confidence?: string;
    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     */
    confidenceVar?: string;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravity?: string;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravityVar?: string;
    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     */
    focus?: string;
    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     */
    focusVar?: string;
    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     */
    gravity?: string;
    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     */
    gravityVar?: string;
    /**
     * The height of the output image in pixels relative to the specified `style` value.
     */
    height?: string;
    /**
     * The height of the output image in pixels relative to the specified `style` value.
     */
    heightVar?: string;
    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     */
    padding?: string;
    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     */
    paddingVar?: string;
    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    style?: string;
    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    styleVar?: string;
    /**
     * The width of the output image in pixels relative to the specified `style` value.
     */
    width?: string;
    /**
     * The width of the output image in pixels relative to the specified `style` value.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFaceCropArgs {
    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     */
    algorithmVar?: pulumi.Input<string>;
    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     */
    confidence?: pulumi.Input<string>;
    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     */
    confidenceVar?: pulumi.Input<string>;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravity?: pulumi.Input<string>;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravityVar?: pulumi.Input<string>;
    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     */
    focus?: pulumi.Input<string>;
    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     */
    focusVar?: pulumi.Input<string>;
    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     */
    gravity?: pulumi.Input<string>;
    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     */
    gravityVar?: pulumi.Input<string>;
    /**
     * The height of the output image in pixels relative to the specified `style` value.
     */
    height?: pulumi.Input<string>;
    /**
     * The height of the output image in pixels relative to the specified `style` value.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     */
    padding?: pulumi.Input<string>;
    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     */
    paddingVar?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    style?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    styleVar?: pulumi.Input<string>;
    /**
     * The width of the output image in pixels relative to the specified `style` value.
     */
    width?: pulumi.Input<string>;
    /**
     * The width of the output image in pixels relative to the specified `style` value.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationFeatureCrop {
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravity?: string;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravityVar?: string;
    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     */
    featureRadius?: string;
    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     */
    featureRadiusVar?: string;
    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     */
    gravity?: string;
    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     */
    gravityVar?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: string;
    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     */
    maxFeatures?: string;
    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     */
    maxFeaturesVar?: string;
    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     */
    minFeatureQuality?: string;
    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     */
    minFeatureQualityVar?: string;
    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     */
    padding?: string;
    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     */
    paddingVar?: string;
    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    style?: string;
    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    styleVar?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFeatureCropArgs {
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravity?: pulumi.Input<string>;
    /**
     * Controls placement of the crop if Image and Video Manager does not detect any features in the image. Directions are relative to the edges of the image being transformed.
     */
    failGravityVar?: pulumi.Input<string>;
    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     */
    featureRadius?: pulumi.Input<string>;
    /**
     * The size in pixels of the important features to search for. If identified, two features never appear closer together than this value, `8.0` by default.
     */
    featureRadiusVar?: pulumi.Input<string>;
    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     */
    gravity?: pulumi.Input<string>;
    /**
     * Controls placement of the crop. Directions are relative to the region of interest plus padding.
     */
    gravityVar?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     */
    maxFeatures?: pulumi.Input<string>;
    /**
     * The maximum number of features to identify as important features, `32` by default. The strongest features are always chosen.
     */
    maxFeaturesVar?: pulumi.Input<string>;
    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     */
    minFeatureQuality?: pulumi.Input<string>;
    /**
     * Determines the minimum quality level of the feature identified. To consider a feature important, the feature needs to surpass this value.  Image and Video Manager measures quality on a scale from `0` for the lowest quality to `1` for the highest quality, `.1` by default.
     */
    minFeatureQualityVar?: pulumi.Input<string>;
    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     */
    padding?: pulumi.Input<string>;
    /**
     * Adds space around the region of interest. The amount of padding added is directly related to the size of the bounding box of the selected features. Specifically, the region of interest is expanded in all directions by the largest dimension of the bounding box of the selected features multiplied by this value.
     */
    paddingVar?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    style?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the features identified in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` performs a raw crop around the features, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and features as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the features, relative to the specified `width` and `height` values. Allows Variable substitution.
     */
    styleVar?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFill {
    fillTransformation?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The height value of the resized image.
     */
    height?: string;
    /**
     * The height value of the resized image.
     */
    heightVar?: string;
    /**
     * The width value of the resized image.
     */
    width?: string;
    /**
     * The width value of the resized image.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationFitAndFillArgs {
    fillTransformation?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The height value of the resized image.
     */
    height?: pulumi.Input<string>;
    /**
     * The height value of the resized image.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * The width value of the resized image.
     */
    width?: pulumi.Input<string>;
    /**
     * The width value of the resized image.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationGoop {
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaos?: string;
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaosVar?: string;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    density?: string;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    densityVar?: string;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    power?: string;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    powerVar?: string;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seed?: string;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seedVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationGoopArgs {
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaos?: pulumi.Input<string>;
    /**
     * Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     */
    chaosVar?: pulumi.Input<string>;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    density?: pulumi.Input<string>;
    /**
     * Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     */
    densityVar?: pulumi.Input<string>;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    power?: pulumi.Input<string>;
    /**
     * By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     */
    powerVar?: pulumi.Input<string>;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seed?: pulumi.Input<string>;
    /**
     * Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     */
    seedVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationGrayscale {
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    type?: string;
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    typeVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationGrayscaleArgs {
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    type?: pulumi.Input<string>;
    /**
     * The algorithm used to transform colors to grays, either `Brightness`, `Lightness`, `Rec601`, or the default `Rec709`.
     */
    typeVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationHsl {
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hue?: string;
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hueVar?: string;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightness?: string;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightnessVar?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationHslArgs {
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hue?: pulumi.Input<string>;
    /**
     * The number of degrees to rotate colors around the color wheel, `0` by default.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightness?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness of colors in the image. Note that lightness is distinct from brightness. For example, reducing the lightness of a light green might give you a lime green whereas reducing the brightness of a light green might give you a darker shade of the same green. Values less than `1.0` decrease the lightness of colors in the image. Values greater than `1.0` increase the lightness of colors in the image.
     */
    lightnessVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationHsv {
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hue?: string;
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hueVar?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: string;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: string;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    value?: string;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationHsvArgs {
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hue?: pulumi.Input<string>;
    /**
     * The number of degrees to rotate colors around the color wheel, `0.0` by default.
     */
    hueVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturation?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the saturation of colors in the image. Values less than `1.0` decrease saturation and values greater than `1.0` increase the saturation. A value of `0.0` removes all color from the image.
     */
    saturationVar?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    value?: pulumi.Input<string>;
    /**
     * A multiplier to adjust the lightness or darkness of the images base color. Values less than 1.0 decrease the base colors in the image, making them appear darker. Values greater than 1.0 increase the base colors in the image, making them appear lighter.
     */
    valueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimension {
    default?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimension?: string;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimensionVar?: string;
    equal?: inputs.GetImagingPolicyImagePolicyTransformation;
    greaterThan?: inputs.GetImagingPolicyImagePolicyTransformation;
    lessThan?: inputs.GetImagingPolicyImagePolicyTransformation;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    value?: string;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    valueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationIfDimensionArgs {
    default?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimension?: pulumi.Input<string>;
    /**
     * The dimension to use to select the transformation, either `height`, `width`, or `both`.
     */
    dimensionVar?: pulumi.Input<string>;
    equal?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    greaterThan?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    lessThan?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    value?: pulumi.Input<string>;
    /**
     * The value to compare against the source image dimension. For example, if the image dimension is less than the value the lessThan transformation is applied.
     */
    valueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientation {
    default?: inputs.GetImagingPolicyImagePolicyTransformation;
    landscape?: inputs.GetImagingPolicyImagePolicyTransformation;
    portrait?: inputs.GetImagingPolicyImagePolicyTransformation;
    square?: inputs.GetImagingPolicyImagePolicyTransformation;
}

export interface GetImagingPolicyImagePolicyTransformationIfOrientationArgs {
    default?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    landscape?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    portrait?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
    square?: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationArgs>;
}

export interface GetImagingPolicyImagePolicyTransformationImQuery {
    /**
     * Specifies the transformations that can be applied using the query string parameter.
     */
    allowedTransformations: string[];
    queryVar: string;
}

export interface GetImagingPolicyImagePolicyTransformationImQueryArgs {
    /**
     * Specifies the transformations that can be applied using the query string parameter.
     */
    allowedTransformations: pulumi.Input<pulumi.Input<string>[]>;
    queryVar: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationMaxColor {
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colors?: string;
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colorsVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationMaxColorArgs {
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colors?: pulumi.Input<string>;
    /**
     * The value representing the maximum number of colors to use with the source image.
     */
    colorsVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationMirror {
    /**
     * Flips the image horizontally.
     */
    horizontal?: string;
    /**
     * Flips the image horizontally.
     */
    horizontalVar?: string;
    /**
     * Flips the image vertically.
     */
    vertical?: string;
    /**
     * Flips the image vertically.
     */
    verticalVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationMirrorArgs {
    /**
     * Flips the image horizontally.
     */
    horizontal?: pulumi.Input<string>;
    /**
     * Flips the image horizontally.
     */
    horizontalVar?: pulumi.Input<string>;
    /**
     * Flips the image vertically.
     */
    vertical?: pulumi.Input<string>;
    /**
     * Flips the image vertically.
     */
    verticalVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationMonoHue {
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hue?: string;
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hueVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationMonoHueArgs {
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hue?: pulumi.Input<string>;
    /**
     * Specify a hue by indicating the degree of rotation between 0 and 360 degrees around the color wheel. By default Mono Hue applies a red hue, 0.0 on the color wheel.
     */
    hueVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationOpacity {
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacity?: string;
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacityVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationOpacityArgs {
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacity?: pulumi.Input<string>;
    /**
     * Represents alpha values on a scale of `0` to `1`. Values below `1` increase transparency, and `0` is invisible. For images that have some transparency, values above `1` increase the opacity of the transparent portions.
     */
    opacityVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop {
    /**
     * The placement of the crop area relative to the specified area of interest.
     */
    gravity?: string;
    /**
     * The placement of the crop area relative to the specified area of interest.
     */
    gravityVar?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: string;
    regionOfInterest: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    style?: string;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    styleVar?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs {
    /**
     * The placement of the crop area relative to the specified area of interest.
     */
    gravity?: pulumi.Input<string>;
    /**
     * The placement of the crop area relative to the specified area of interest.
     */
    gravityVar?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: pulumi.Input<string>;
    regionOfInterest: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs>;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    style?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    styleVar?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest {
    /**
     * Defines a circle with a specified `radius` from its `center` point.
     */
    circleShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape[];
    pointShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape[];
    /**
     * Defines a polygon from a series of connected points.
     */
    polygonShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape[];
    /**
     * Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
     */
    rectangleShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape[];
    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     */
    unionShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs {
    /**
     * Defines a circle with a specified `radius` from its `center` point.
     */
    circleShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs>[]>;
    pointShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs>[]>;
    /**
     * Defines a polygon from a series of connected points.
     */
    polygonShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs>[]>;
    /**
     * Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
     */
    rectangleShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs>[]>;
    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     */
    unionShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape {
    /**
     * Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     */
    center: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter;
    /**
     * The radius of the circle measured in pixels.
     */
    radius?: string;
    /**
     * The radius of the circle measured in pixels.
     */
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs {
    /**
     * Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     */
    center: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs>;
    /**
     * The radius of the circle measured in pixels.
     */
    radius?: pulumi.Input<string>;
    /**
     * The radius of the circle measured in pixels.
     */
    radiusVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenter {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeCenterArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape {
    /**
     * Series of PointShapeType objects. The last and first points connect to close the shape automatically.
     */
    points: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs {
    /**
     * Series of PointShapeType objects. The last and first points connect to close the shape automatically.
     */
    points: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePoint {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapePointArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape {
    anchor: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    height?: string;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    heightVar?: string;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    width?: string;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs {
    anchor: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs>;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    height?: pulumi.Input<string>;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    width?: pulumi.Input<string>;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchor {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeAnchorArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape {
    shapes: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs {
    shapes: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShape {
    /**
     * Defines a circle with a specified `radius` from its `center` point.
     */
    circleShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape[];
    pointShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShape[];
    /**
     * Defines a polygon from a series of connected points.
     */
    polygonShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShape[];
    /**
     * Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
     */
    rectangleShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShape[];
    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     */
    unionShapes?: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeArgs {
    /**
     * Defines a circle with a specified `radius` from its `center` point.
     */
    circleShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs>[]>;
    pointShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs>[]>;
    /**
     * Defines a polygon from a series of connected points.
     */
    polygonShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs>[]>;
    /**
     * Defines a rectangle's `width` and `height` relative to an `anchor` point at the top left corner.
     */
    rectangleShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs>[]>;
    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     */
    unionShapes?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShape {
    /**
     * Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     */
    center: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter;
    /**
     * The radius of the circle measured in pixels.
     */
    radius?: string;
    /**
     * The radius of the circle measured in pixels.
     */
    radiusVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeArgs {
    /**
     * Defines coordinates for a single point, to help define polygons and rectangles. Each point may be an object with `x`and `y` members, or a two-element array.
     */
    center: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs>;
    /**
     * The radius of the circle measured in pixels.
     */
    radius?: pulumi.Input<string>;
    /**
     * The radius of the circle measured in pixels.
     */
    radiusVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenter {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeCircleShapeCenterArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShape {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePointShapeArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShape {
    /**
     * Series of PointShapeType objects. The last and first points connect to close the shape automatically.
     */
    points: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePoint[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapeArgs {
    /**
     * Series of PointShapeType objects. The last and first points connect to close the shape automatically.
     */
    points: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePoint {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapePolygonShapePointArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShape {
    anchor: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchor;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    height?: string;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    heightVar?: string;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    width?: string;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeArgs {
    anchor: pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs>;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    height?: pulumi.Input<string>;
    /**
     * Extends the rectangle down from the `anchor` point.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    width?: pulumi.Input<string>;
    /**
     * Extends the rectangle right from the `anchor` point.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchor {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: string;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: string;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeRectangleShapeAnchorArgs {
    /**
     * The horizontal position of the point, measured in pixels.
     */
    x?: pulumi.Input<string>;
    /**
     * The horizontal position of the point, measured in pixels.
     */
    xVar?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    y?: pulumi.Input<string>;
    /**
     * The vertical position of the point, measured in pixels.
     */
    yVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShape {
    shapes: inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShape[];
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeArgs {
    shapes: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs>[]>;
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShape {
}

export interface GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeShapeUnionShapeShapeArgs {
}

export interface GetImagingPolicyImagePolicyTransformationRelativeCrop {
    /**
     * The number of pixels to shrink or expand the right side of the image.
     */
    east?: string;
    /**
     * The number of pixels to shrink or expand the right side of the image.
     */
    eastVar?: string;
    /**
     * The number of pixels to shrink or expand the top side of the image.
     */
    north?: string;
    /**
     * The number of pixels to shrink or expand the top side of the image.
     */
    northVar?: string;
    /**
     * The number of pixels to shrink or expand the bottom side of the image.
     */
    south?: string;
    /**
     * The number of pixels to shrink or expand the bottom side of the image.
     */
    southVar?: string;
    /**
     * The number of pixels to shrink or expand the left side of the image.
     */
    west?: string;
    /**
     * The number of pixels to shrink or expand the left side of the image.
     */
    westVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRelativeCropArgs {
    /**
     * The number of pixels to shrink or expand the right side of the image.
     */
    east?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the right side of the image.
     */
    eastVar?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the top side of the image.
     */
    north?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the top side of the image.
     */
    northVar?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the bottom side of the image.
     */
    south?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the bottom side of the image.
     */
    southVar?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the left side of the image.
     */
    west?: pulumi.Input<string>;
    /**
     * The number of pixels to shrink or expand the left side of the image.
     */
    westVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRemoveColor {
    /**
     * The hexadecimal CSS color value to remove.
     */
    color?: string;
    /**
     * The hexadecimal CSS color value to remove.
     */
    colorVar?: string;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    feather?: string;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    featherVar?: string;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    tolerance?: string;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    toleranceVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRemoveColorArgs {
    /**
     * The hexadecimal CSS color value to remove.
     */
    color?: pulumi.Input<string>;
    /**
     * The hexadecimal CSS color value to remove.
     */
    colorVar?: pulumi.Input<string>;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    feather?: pulumi.Input<string>;
    /**
     * The RemoveColor transformation may create a hard edge around an image. To minimize these hard edges and make the removal of the color more gradual in appearance, use the Feather option. This option allows you to extend the color removal beyond the specified Tolerance. The pixels in this extended tolerance become semi-transparent - creating a softer edge.  The first realtime request for an image using the feather option may result in a slow transformation time. Subsequent requests are not impacted as they are served directly out of cache.
     */
    featherVar?: pulumi.Input<string>;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    tolerance?: pulumi.Input<string>;
    /**
     * The Tolerance option defines how close the color needs to be to the selected color before it's changed to fully transparent. Set the Tolerance to 0.0 to remove only the exact color specified.
     */
    toleranceVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationResize {
    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     */
    aspect?: string;
    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     */
    aspectVar?: string;
    /**
     * The height to resize the source image to. Must be set if height is not specified.
     */
    height?: string;
    /**
     * The height to resize the source image to. Must be set if height is not specified.
     */
    heightVar?: string;
    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     */
    type?: string;
    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     */
    typeVar?: string;
    /**
     * The width to resize the source image to. Must be set if width is not specified.
     */
    width?: string;
    /**
     * The width to resize the source image to. Must be set if width is not specified.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationResizeArgs {
    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     */
    aspect?: pulumi.Input<string>;
    /**
     * Preserves the aspect ratio. Select `fit` to make the image fit entirely within the selected width and height. When using `fit`, the resulting image has the largest possible size for the specified dimensions. Select `fill` to size the image so it both completely fills the dimensions and has the smallest possible file size. Otherwise `ignore` changes the original aspect ratio to fit within an arbitrarily shaped rectangle.
     */
    aspectVar?: pulumi.Input<string>;
    /**
     * The height to resize the source image to. Must be set if height is not specified.
     */
    height?: pulumi.Input<string>;
    /**
     * The height to resize the source image to. Must be set if height is not specified.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     */
    type?: pulumi.Input<string>;
    /**
     * Sets constraints for the image resize. Select `normal` to resize in all cases, either increasing or decreasing the dimensions. Select `downsize` to ignore this transformation if the result would be larger than the original. Select `upsize` to ignore this transformation if the result would be smaller.
     */
    typeVar?: pulumi.Input<string>;
    /**
     * The width to resize the source image to. Must be set if width is not specified.
     */
    width?: pulumi.Input<string>;
    /**
     * The width to resize the source image to. Must be set if width is not specified.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationRotate {
    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     */
    degrees?: string;
    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     */
    degreesVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationRotateArgs {
    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     */
    degrees?: pulumi.Input<string>;
    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     */
    degreesVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationScale {
    /**
     * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
     */
    height?: string;
    /**
     * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
     */
    heightVar?: string;
    /**
     * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
     */
    width?: string;
    /**
     * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationScaleArgs {
    /**
     * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
     */
    height?: pulumi.Input<string>;
    /**
     * Scaling factor for the input height to determine the output height of the image, where values between `0` and `1` decrease size. Image dimensions need to be non-zero positive numbers.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
     */
    width?: pulumi.Input<string>;
    /**
     * Scaling factor for the input width to determine the output width of the image, where `1` leaves the width unchanged. Values greater than `1` increase the image size. Image dimensions need to be non-zero positive numbers.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationShears {
    /**
     * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
     */
    xShear?: string;
    /**
     * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
     */
    xShearVar?: string;
    /**
     * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
     */
    yShear?: string;
    /**
     * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
     */
    yShearVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationShearsArgs {
    /**
     * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
     */
    xShear?: pulumi.Input<string>;
    /**
     * The amount to shear along the x-axis, measured in multiples of the image's width. Must be set if yShear is not specified.
     */
    xShearVar?: pulumi.Input<string>;
    /**
     * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
     */
    yShear?: pulumi.Input<string>;
    /**
     * The amount to shear along the y-axis, measured in multiples of the image's height. Must be set if xShear is not specified.
     */
    yShearVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationSmartCrop {
    /**
     * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     */
    debug?: string;
    /**
     * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     */
    debugVar?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: string;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: string;
    /**
     * Whether to sacrifice any image fidelity for transformation performance.
     */
    sloppy?: string;
    /**
     * Whether to sacrifice any image fidelity for transformation performance.
     */
    sloppyVar?: string;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    style?: string;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    styleVar?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: string;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationSmartCropArgs {
    /**
     * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     */
    debug?: pulumi.Input<string>;
    /**
     * When enabled, the SmartCrop transformation doesn't actually execute. Instead, it outlines found faces or features, the region of interest, and the crop area.
     */
    debugVar?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    height?: pulumi.Input<string>;
    /**
     * The height in pixels of the output image relative to the specified `style` value.
     */
    heightVar?: pulumi.Input<string>;
    /**
     * Whether to sacrifice any image fidelity for transformation performance.
     */
    sloppy?: pulumi.Input<string>;
    /**
     * Whether to sacrifice any image fidelity for transformation performance.
     */
    sloppyVar?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    style?: pulumi.Input<string>;
    /**
     * Specifies how to crop or scale a crop area for the specified area of interest in the source image, `fill` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places raw crop around the point of interest.  A value of `fill` scales the crop area to include as much of the image and point of interest as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the point of interest, relative to the specified `width` and `height` values.
     */
    styleVar?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    width?: pulumi.Input<string>;
    /**
     * The width in pixels of the output image relative to the specified `style` value.
     */
    widthVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationTrim {
    /**
     * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
     */
    fuzz?: string;
    /**
     * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
     */
    fuzzVar?: string;
    /**
     * The amount of padding in pixels to add to the trimmed image.
     */
    padding?: string;
    /**
     * The amount of padding in pixels to add to the trimmed image.
     */
    paddingVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationTrimArgs {
    /**
     * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
     */
    fuzz?: pulumi.Input<string>;
    /**
     * The fuzz tolerance of the trim, a value between `0` and `1` that determines the acceptable amount of background variation before trimming stops.
     */
    fuzzVar?: pulumi.Input<string>;
    /**
     * The amount of padding in pixels to add to the trimmed image.
     */
    padding?: pulumi.Input<string>;
    /**
     * The amount of padding in pixels to add to the trimmed image.
     */
    paddingVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyTransformationUnsharpMask {
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gain?: string;
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gainVar?: string;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigma?: string;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigmaVar?: string;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    threshold?: string;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    thresholdVar?: string;
}

export interface GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs {
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gain?: pulumi.Input<string>;
    /**
     * Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
     */
    gainVar?: pulumi.Input<string>;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigma?: pulumi.Input<string>;
    /**
     * The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
     */
    sigmaVar?: pulumi.Input<string>;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    threshold?: pulumi.Input<string>;
    /**
     * Set the minimum change required to include a detail in the filter. Higher values discard more changes.
     */
    thresholdVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyVariable {
    /**
     * The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
     */
    defaultValue: string;
    enumOptions?: inputs.GetImagingPolicyImagePolicyVariableEnumOption[];
    /**
     * The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
     */
    name: string;
    /**
     * A postfix added to the value provided for the variable, or to the default value.
     */
    postfix?: string;
    /**
     * A prefix added to the value provided for the variable, or to the default value.
     */
    prefix?: string;
    /**
     * The type of value for the variable.
     */
    type: string;
}

export interface GetImagingPolicyImagePolicyVariableArgs {
    /**
     * The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
     */
    defaultValue: pulumi.Input<string>;
    enumOptions?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyImagePolicyVariableEnumOptionArgs>[]>;
    /**
     * The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
     */
    name: pulumi.Input<string>;
    /**
     * A postfix added to the value provided for the variable, or to the default value.
     */
    postfix?: pulumi.Input<string>;
    /**
     * A prefix added to the value provided for the variable, or to the default value.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The type of value for the variable.
     */
    type: pulumi.Input<string>;
}

export interface GetImagingPolicyImagePolicyVariableEnumOption {
    /**
     * The unique identifier for each enum value, up to 50 alphanumeric characters.
     */
    id: string;
    /**
     * The value of the variable when the `id` is provided.
     */
    value: string;
}

export interface GetImagingPolicyImagePolicyVariableEnumOptionArgs {
    /**
     * The unique identifier for each enum value, up to 50 alphanumeric characters.
     */
    id: pulumi.Input<string>;
    /**
     * The value of the variable when the `id` is provided.
     */
    value: pulumi.Input<string>;
}

export interface GetImagingPolicyVideoPolicy {
    /**
     * The breakpoint widths (in pixels) to use to create derivative images/videos.
     */
    breakpoints?: inputs.GetImagingPolicyVideoPolicyBreakpoints;
    /**
     * Hosts that are allowed for image/video URLs within transformations or variables.
     */
    hosts?: string[];
    /**
     * Dictates the output quality that are created for each resized video.
     */
    output?: inputs.GetImagingPolicyVideoPolicyOutput;
    /**
     * The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     */
    rolloutDuration?: string;
    /**
     * Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
     */
    variables?: inputs.GetImagingPolicyVideoPolicyVariable[];
}

export interface GetImagingPolicyVideoPolicyArgs {
    /**
     * The breakpoint widths (in pixels) to use to create derivative images/videos.
     */
    breakpoints?: pulumi.Input<inputs.GetImagingPolicyVideoPolicyBreakpointsArgs>;
    /**
     * Hosts that are allowed for image/video URLs within transformations or variables.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Dictates the output quality that are created for each resized video.
     */
    output?: pulumi.Input<inputs.GetImagingPolicyVideoPolicyOutputArgs>;
    /**
     * The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
     */
    rolloutDuration?: pulumi.Input<string>;
    /**
     * Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyVideoPolicyVariableArgs>[]>;
}

export interface GetImagingPolicyVideoPolicyBreakpoints {
    widths?: number[];
}

export interface GetImagingPolicyVideoPolicyBreakpointsArgs {
    widths?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface GetImagingPolicyVideoPolicyOutput {
    /**
     * The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     */
    perceptualQuality?: string;
    /**
     * The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     */
    perceptualQualityVar?: string;
    /**
     * Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
     */
    placeholderVideoUrl?: string;
    /**
     * Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
     */
    placeholderVideoUrlVar?: string;
    /**
     * Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     */
    videoAdaptiveQuality?: string;
    /**
     * Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     */
    videoAdaptiveQualityVar?: string;
}

export interface GetImagingPolicyVideoPolicyOutputArgs {
    /**
     * The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     */
    perceptualQuality?: pulumi.Input<string>;
    /**
     * The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     */
    perceptualQualityVar?: pulumi.Input<string>;
    /**
     * Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
     */
    placeholderVideoUrl?: pulumi.Input<string>;
    /**
     * Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image & Video Manager processes the video. If not specified the original video plays during the processing time.
     */
    placeholderVideoUrlVar?: pulumi.Input<string>;
    /**
     * Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     */
    videoAdaptiveQuality?: pulumi.Input<string>;
    /**
     * Override the quality of video to serve when Image & Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     */
    videoAdaptiveQualityVar?: pulumi.Input<string>;
}

export interface GetImagingPolicyVideoPolicyVariable {
    /**
     * The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
     */
    defaultValue: string;
    enumOptions?: inputs.GetImagingPolicyVideoPolicyVariableEnumOption[];
    /**
     * The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
     */
    name: string;
    /**
     * A postfix added to the value provided for the variable, or to the default value.
     */
    postfix?: string;
    /**
     * A prefix added to the value provided for the variable, or to the default value.
     */
    prefix?: string;
    /**
     * The type of value for the variable.
     */
    type: string;
}

export interface GetImagingPolicyVideoPolicyVariableArgs {
    /**
     * The default value of the variable if no query parameter is provided. It needs to be one of the `enumOptions` if any are provided.
     */
    defaultValue: pulumi.Input<string>;
    enumOptions?: pulumi.Input<pulumi.Input<inputs.GetImagingPolicyVideoPolicyVariableEnumOptionArgs>[]>;
    /**
     * The name of the variable, also available as the query parameter name to set the variable's value dynamically. Use up to 50 alphanumeric characters.
     */
    name: pulumi.Input<string>;
    /**
     * A postfix added to the value provided for the variable, or to the default value.
     */
    postfix?: pulumi.Input<string>;
    /**
     * A prefix added to the value provided for the variable, or to the default value.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The type of value for the variable.
     */
    type: pulumi.Input<string>;
}

export interface GetImagingPolicyVideoPolicyVariableEnumOption {
    /**
     * The unique identifier for each enum value, up to 50 alphanumeric characters.
     */
    id: string;
    /**
     * The value of the variable when the `id` is provided.
     */
    value: string;
}

export interface GetImagingPolicyVideoPolicyVariableEnumOptionArgs {
    /**
     * The unique identifier for each enum value, up to 50 alphanumeric characters.
     */
    id: pulumi.Input<string>;
    /**
     * The value of the variable when the `id` is provided.
     */
    value: pulumi.Input<string>;
}

export interface GetPropertyIncludesParentProperty {
    /**
     * The property's unique identifier
     */
    id: string;
    /**
     * The property's version for which the data is requested
     */
    version: number;
}

export interface GetPropertyIncludesParentPropertyArgs {
    /**
     * The property's unique identifier
     */
    id: pulumi.Input<string>;
    /**
     * The property's version for which the data is requested
     */
    version: pulumi.Input<number>;
}

export interface GetPropertyRulesTemplateTemplate {
    /**
     * Content of the template as string
     */
    templateData: string;
    /**
     * Directory points to a folder, which contains snippets to include into template.
     */
    templateDir: string;
}

export interface GetPropertyRulesTemplateTemplateArgs {
    /**
     * Content of the template as string
     */
    templateData: pulumi.Input<string>;
    /**
     * Directory points to a folder, which contains snippets to include into template.
     */
    templateDir: pulumi.Input<string>;
}

export interface GetPropertyRulesTemplateVariable {
    name: string;
    type?: string;
    value: string;
}

export interface GetPropertyRulesTemplateVariableArgs {
    name: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface GtmAsmapAssignment {
    asNumbers: pulumi.Input<pulumi.Input<number>[]>;
    datacenterId: pulumi.Input<number>;
    nickname: pulumi.Input<string>;
}

export interface GtmAsmapDefaultDatacenter {
    datacenterId: pulumi.Input<number>;
    nickname?: pulumi.Input<string>;
}

export interface GtmCidrmapAssignment {
    blocks?: pulumi.Input<pulumi.Input<string>[]>;
    datacenterId: pulumi.Input<number>;
    nickname: pulumi.Input<string>;
}

export interface GtmCidrmapDefaultDatacenter {
    datacenterId: pulumi.Input<number>;
    nickname?: pulumi.Input<string>;
}

export interface GtmDatacenterDefaultLoadObject {
    loadObject?: pulumi.Input<string>;
    loadObjectPort?: pulumi.Input<number>;
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GtmGeomapAssignment {
    countries?: pulumi.Input<pulumi.Input<string>[]>;
    datacenterId: pulumi.Input<number>;
    nickname: pulumi.Input<string>;
}

export interface GtmGeomapDefaultDatacenter {
    datacenterId: pulumi.Input<number>;
    nickname?: pulumi.Input<string>;
}

export interface GtmPropertyLivenessTest {
    alternateCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    answersRequired?: pulumi.Input<boolean>;
    disableNonstandardPortWarning?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    errorPenalty?: pulumi.Input<number>;
    httpError3xx?: pulumi.Input<boolean>;
    httpError4xx?: pulumi.Input<boolean>;
    httpError5xx?: pulumi.Input<boolean>;
    httpHeaders?: pulumi.Input<pulumi.Input<inputs.GtmPropertyLivenessTestHttpHeader>[]>;
    httpMethod?: pulumi.Input<string>;
    httpRequestBody?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    peerCertificateVerification?: pulumi.Input<boolean>;
    /**
     * Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     */
    pre2023SecurityPosture?: pulumi.Input<boolean>;
    recursionRequested?: pulumi.Input<boolean>;
    requestString?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    responseString?: pulumi.Input<string>;
    sslClientCertificate?: pulumi.Input<string>;
    sslClientPrivateKey?: pulumi.Input<string>;
    testInterval: pulumi.Input<number>;
    testObject?: pulumi.Input<string>;
    testObjectPassword?: pulumi.Input<string>;
    testObjectPort?: pulumi.Input<number>;
    testObjectProtocol: pulumi.Input<string>;
    testObjectUsername?: pulumi.Input<string>;
    testTimeout: pulumi.Input<number>;
    timeoutPenalty?: pulumi.Input<number>;
}

export interface GtmPropertyLivenessTestHttpHeader {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GtmPropertyStaticRrSet {
    rdatas?: pulumi.Input<pulumi.Input<string>[]>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GtmPropertyTrafficTarget {
    datacenterId?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    handoutCname?: pulumi.Input<string>;
    precedence?: pulumi.Input<number>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface GtmResourceResourceInstance {
    datacenterId: pulumi.Input<number>;
    loadObject?: pulumi.Input<string>;
    loadObjectPort?: pulumi.Input<number>;
    loadServers?: pulumi.Input<pulumi.Input<string>[]>;
    useDefaultLoadObject?: pulumi.Input<boolean>;
}

export interface IamApiClientActions {
    /**
     * Whether you can deactivate the API client's credentials.
     */
    deactivateAll?: pulumi.Input<boolean>;
    /**
     * Whether you can remove the API client.
     */
    delete?: pulumi.Input<boolean>;
    /**
     * Whether you can update the API client.
     */
    edit?: pulumi.Input<boolean>;
    /**
     * Whether you can update the `apis` the API client can access, same as `editAuth`.
     */
    editApis?: pulumi.Input<boolean>;
    /**
     * Whether you can update the `apis` the API client can access, same as `editApis`.
     */
    editAuth?: pulumi.Input<boolean>;
    /**
     * Whether you can update the `groups` the API client can access.
     */
    editGroups?: pulumi.Input<boolean>;
    /**
     * Whether you can update the 'ip acl' the API client can access.
     */
    editIpAcl?: pulumi.Input<boolean>;
    /**
     * Whether you can update the API client's option to manage many accounts.
     */
    editSwitchAccount?: pulumi.Input<boolean>;
    /**
     * Whether you can lock the API client.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * Whether you can transfer the API client to a new owner.
     */
    transfer?: pulumi.Input<boolean>;
    /**
     * Whether you can unlock the API client.
     */
    unlock?: pulumi.Input<boolean>;
}

export interface IamApiClientApiAccess {
    /**
     * Enables the API client to access a full set of available APIs.
     */
    allAccessibleApis: pulumi.Input<boolean>;
    /**
     * The set of APIs the API client can access when `allAccessibleApis` is `false`.
     */
    apis?: pulumi.Input<pulumi.Input<inputs.IamApiClientApiAccessApi>[]>;
}

export interface IamApiClientApiAccessApi {
    /**
     * The API client's access level on an API basis, either 'READ-ONLY', 'READ-WRITE', 'CREDENTIAL-READ-ONLY', or 'CREDENTIAL-READ-WRITE'.
     */
    accessLevel: pulumi.Input<string>;
    /**
     * A unique identifier of the API.
     */
    apiId: pulumi.Input<number>;
    /**
     * A human-readable name for the API.
     */
    apiName?: pulumi.Input<string>;
    /**
     * A human-readable description for the API.
     */
    description?: pulumi.Input<string>;
    /**
     * A link to more information about the API.
     */
    documentationUrl?: pulumi.Input<string>;
    /**
     * Specifies where the API can access resources.
     */
    endpoint?: pulumi.Input<string>;
}

export interface IamApiClientCredential {
    /**
     * Actions available on the API client's credentials.
     */
    actions?: pulumi.Input<inputs.IamApiClientCredentialActions>;
    /**
     * The client secret.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The part of the credential that identifies the API client.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The ISO 8601 timestamp indicating when the credential was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * A unique identifier of the credential.
     */
    credentialId?: pulumi.Input<number>;
    /**
     * A human-readable description for the credential.
     */
    description?: pulumi.Input<string>;
    /**
     * The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * Whether a credential is 'ACTIVE', 'INACTIVE', or 'DELETED'. Can be updated to 'ACTIVE' or 'INACTIVE' only.
     */
    status?: pulumi.Input<string>;
}

export interface IamApiClientCredentialActions {
    /**
     * Whether you can activate the credential.
     */
    activate?: pulumi.Input<boolean>;
    /**
     * Whether you can deactivate the credential.
     */
    deactivate?: pulumi.Input<boolean>;
    /**
     * Whether you can remove the credential.
     */
    delete?: pulumi.Input<boolean>;
    /**
     * Whether you can modify the credential's description.
     */
    editDescription?: pulumi.Input<boolean>;
    /**
     * Whether you can modify the credential's expiration date.
     */
    editExpiration?: pulumi.Input<boolean>;
}

export interface IamApiClientGroupAccess {
    /**
     * Sets the API client's group access the same as the authorized user.
     */
    cloneAuthorizedUserGroups: pulumi.Input<boolean>;
    /**
     * Groups the API client can access.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.IamApiClientGroupAccessGroup>[]>;
}

export interface IamApiClientGroupAccessGroup {
    /**
     * A unique identifier for the group.
     */
    groupId: pulumi.Input<number>;
    /**
     * A human-readable name for the group.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Blocks the API client access to the group's child groups.
     */
    isBlocked?: pulumi.Input<boolean>;
    /**
     * A unique identifier for the parent group within the group tree.
     */
    parentGroupId?: pulumi.Input<number>;
    /**
     * A human-readable description for the role to convey its use.
     */
    roleDescription?: pulumi.Input<string>;
    /**
     * A unique identifier for the role.
     */
    roleId: pulumi.Input<number>;
    /**
     * A human-readable name for the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * Groups the API client can access.
     */
    subGroups?: pulumi.Input<pulumi.Input<inputs.IamApiClientGroupAccessGroupSubGroup>[]>;
}

export interface IamApiClientGroupAccessGroupSubGroup {
    /**
     * A unique identifier for the group.
     */
    groupId: pulumi.Input<number>;
    /**
     * A human-readable name for the group.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Blocks the API client access to the group's child groups.
     */
    isBlocked?: pulumi.Input<boolean>;
    /**
     * A unique identifier for the parent group within the group tree.
     */
    parentGroupId?: pulumi.Input<number>;
    /**
     * A human-readable description for the role to convey its use.
     */
    roleDescription?: pulumi.Input<string>;
    /**
     * A unique identifier for the role.
     */
    roleId: pulumi.Input<number>;
    /**
     * A human-readable name for the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * Groups the API client can access.
     */
    subGroups?: pulumi.Input<pulumi.Input<inputs.IamApiClientGroupAccessGroupSubGroup>[]>;
}

export interface IamApiClientIpAcl {
    /**
     * IP addresses or CIDR blocks the API client can access.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables the API client to access the IP access control list (ACL).
     */
    enable: pulumi.Input<boolean>;
}

export interface IamApiClientPurgeOptions {
    /**
     * Whether the API client can purge content by cache tag.
     */
    canPurgeByCacheTag: pulumi.Input<boolean>;
    /**
     * Whether the API client can purge content by CP code.
     */
    canPurgeByCpCode: pulumi.Input<boolean>;
    /**
     * CP codes the API client can purge.
     */
    cpCodeAccess: pulumi.Input<inputs.IamApiClientPurgeOptionsCpCodeAccess>;
}

export interface IamApiClientPurgeOptionsCpCodeAccess {
    /**
     * Whether the API can purge content by all current and new CP codes.
     */
    allCurrentAndNewCpCodes: pulumi.Input<boolean>;
    /**
     * CP codes the API client can purge.
     */
    cpCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface IamCidrBlockActions {
    /**
     * Whether you can delete this CIDR block. You can't delete a CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
     */
    delete?: pulumi.Input<boolean>;
    /**
     * Whether you can edit this CIDR block. You can't edit CIDR block from an IP address not on the allowlist, or if the CIDR block is the only one on the allowlist.
     */
    edit?: pulumi.Input<boolean>;
}

export interface IamUserUserNotifications {
    /**
     * Enables notifications for expiring API client credentials.
     */
    apiClientCredentialExpiryNotification?: pulumi.Input<boolean>;
    /**
     * Enables email notifications.
     */
    enableEmailNotifications: pulumi.Input<boolean>;
    /**
     * Enables notifications for group administrators when the user creates other new users.
     */
    newUserNotification?: pulumi.Input<boolean>;
    /**
     * Enables notifications for expiring passwords.
     */
    passwordExpiry: pulumi.Input<boolean>;
    /**
     * Products for which the user gets notifications for service issues.
     */
    proactives: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Products for which the user receives notifications for upgrades.
     */
    upgrades: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MtlskeystoreClientCertificateAkamaiVersion {
    /**
     * Details of the certificate block for the client certificate version.
     */
    certificateBlock?: pulumi.Input<inputs.MtlskeystoreClientCertificateAkamaiVersionCertificateBlock>;
    /**
     * The user who created the client certificate version.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's creation.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's deletion request. Appears as null if there's no request.
     */
    deleteRequestedDate?: pulumi.Input<string>;
    /**
     * Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     */
    ellipticCurve?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating when the client certificate version expires.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's availability.
     */
    issuedDate?: pulumi.Input<string>;
    /**
     * The signing entity of the client certificate version.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Identifies the client certificate version's encryption algorithm. Supported values are `RSA` and `ECDSA`.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The private key length of the client certificate version when key algorithm `RSA` is used.
     */
    keySizeInBytes?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's deletion. Appears as null if there's no request.
     */
    scheduledDeleteDate?: pulumi.Input<string>;
    /**
     * Specifies the algorithm that secures the data exchange between the edge server and origin.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The client certificate version status. Possible values: `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     */
    status?: pulumi.Input<string>;
    /**
     * The public key's entity stored in the client certificate version's subject public key field.
     */
    subject?: pulumi.Input<string>;
    /**
     * The unique identifier of the client certificate version.
     */
    version?: pulumi.Input<number>;
    /**
     * Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager's Mutual TLS Origin Keystore behavior.
     */
    versionGuid?: pulumi.Input<string>;
}

export interface MtlskeystoreClientCertificateAkamaiVersionCertificateBlock {
    /**
     * A text representation of the client certificate in PEM format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * A text representation of the trust chain in PEM format.
     */
    trustChain?: pulumi.Input<string>;
}

export interface MtlskeystoreClientCertificateThirdPartyVersions {
    /**
     * Details of the certificate block for the client certificate version.
     */
    certificateBlock?: pulumi.Input<inputs.MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlock>;
    /**
     * The user who uploaded the THIRD_PARTY client certificate version. Appears as null if not specified.
     */
    certificateSubmittedBy?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating when the THIRD_PARTY signer client certificate version was uploaded. Appears as null if not specified.
     */
    certificateSubmittedDate?: pulumi.Input<string>;
    /**
     * The user who created the client certificate version.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's creation.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * Details of the Certificate Signing Request (CSR) for the client certificate version.
     */
    csrBlock?: pulumi.Input<inputs.MtlskeystoreClientCertificateThirdPartyVersionsCsrBlock>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's deletion request. Appears as null if there's no request.
     */
    deleteRequestedDate?: pulumi.Input<string>;
    /**
     * Specifies the key elliptic curve when key algorithm `ECDSA` is used.
     */
    ellipticCurve?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating when the client certificate version expires.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's availability.
     */
    issuedDate?: pulumi.Input<string>;
    /**
     * The signing entity of the client certificate version.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Identifies the client certificate version's encryption algorithm. Supported values are `RSA` and `ECDSA`.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The private key length of the client certificate version when key algorithm `RSA` is used.
     */
    keySizeInBytes?: pulumi.Input<string>;
    /**
     * An ISO 8601 timestamp indicating the client certificate version's deletion. Appears as null if there's no request.
     */
    scheduledDeleteDate?: pulumi.Input<string>;
    /**
     * Specifies the algorithm that secures the data exchange between the edge server and origin.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     */
    status?: pulumi.Input<string>;
    /**
     * The public key's entity stored in the client certificate version's subject public key field.
     */
    subject?: pulumi.Input<string>;
    /**
     * The unique identifier of the client certificate version.
     */
    version?: pulumi.Input<number>;
    /**
     * Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager's Mutual TLS Origin Keystore behavior.
     */
    versionGuid?: pulumi.Input<string>;
}

export interface MtlskeystoreClientCertificateThirdPartyVersionsCertificateBlock {
    /**
     * A text representation of the client certificate in PEM format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * A text representation of the trust chain in PEM format.
     */
    trustChain?: pulumi.Input<string>;
}

export interface MtlskeystoreClientCertificateThirdPartyVersionsCsrBlock {
    /**
     * Text of the certificate signing request.
     */
    csr?: pulumi.Input<string>;
    /**
     * Identifies the client certificate's encryption algorithm.
     */
    keyAlgorithm?: pulumi.Input<string>;
}

export interface MtlskeystoreClientCertificateUploadTimeouts {
    /**
     * Optional configurable resource create timeout. By default it's 30m.
     */
    create?: pulumi.Input<string>;
    /**
     * Optional configurable resource update timeout. By default it's 30m.
     */
    update?: pulumi.Input<string>;
}

export interface PropertyActivationComplianceRecord {
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
     */
    noncomplianceReasonEmergency?: pulumi.Input<inputs.PropertyActivationComplianceRecordNoncomplianceReasonEmergency>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
     */
    noncomplianceReasonNoProductionTraffic?: pulumi.Input<inputs.PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `NONE`
     */
    noncomplianceReasonNone?: pulumi.Input<inputs.PropertyActivationComplianceRecordNoncomplianceReasonNone>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
     */
    noncomplianceReasonOther?: pulumi.Input<inputs.PropertyActivationComplianceRecordNoncomplianceReasonOther>;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonEmergency {
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonNoProductionTraffic {
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonNone {
    /**
     * Identifies the customer
     */
    customerEmail?: pulumi.Input<string>;
    /**
     * Identifies person who has independently approved the activation request
     */
    peerReviewedBy?: pulumi.Input<string>;
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
    /**
     * Whether the metadata to activate has been fully tested
     */
    unitTested?: pulumi.Input<boolean>;
}

export interface PropertyActivationComplianceRecordNoncomplianceReasonOther {
    /**
     * Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
     */
    otherNoncomplianceReason?: pulumi.Input<string>;
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyActivationRuleError {
    behaviorName?: pulumi.Input<string>;
    detail?: pulumi.Input<string>;
    errorLocation?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    statusCode?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface PropertyActivationTimeouts {
    default?: pulumi.Input<string>;
}

export interface PropertyHostname {
    certProvisioningType: pulumi.Input<string>;
    certStatuses?: pulumi.Input<pulumi.Input<inputs.PropertyHostnameCertStatus>[]>;
    cnameFrom: pulumi.Input<string>;
    cnameTo: pulumi.Input<string>;
    cnameType?: pulumi.Input<string>;
    edgeHostnameId?: pulumi.Input<string>;
}

export interface PropertyHostnameBucketHostnames {
    /**
     * Indicates the type of the certificate used in the property hostname. Either `CPS_MANAGED` for certificates you create with the Certificate Provisioning System (CPS) API, or `DEFAULT` for Domain Validation (DV) certificates deployed automatically.
     */
    certProvisioningType: pulumi.Input<string>;
    /**
     * The edge hostname you point the property hostname to so that you can start serving traffic through Akamai servers. This member corresponds to the edge hostname object's `edgeHostnameDomain` member.
     */
    cnameTo?: pulumi.Input<string>;
    /**
     * Identifies the edge hostname you mapped your traffic to on the production network.
     */
    edgeHostnameId: pulumi.Input<string>;
}

export interface PropertyHostnameCertStatus {
    /**
     * The hostname part of the CNAME record used to validate the certificate's domain.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The certificate's deployment status on the production network.
     */
    productionStatus?: pulumi.Input<string>;
    /**
     * The certificate's deployment status on the staging network.
     */
    stagingStatus?: pulumi.Input<string>;
    /**
     * The destination part of the CNAME record used to validate the certificate's domain.
     */
    target?: pulumi.Input<string>;
}

export interface PropertyIncludeActivationComplianceRecord {
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
     */
    noncomplianceReasonEmergency?: pulumi.Input<inputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
     */
    noncomplianceReasonNoProductionTraffic?: pulumi.Input<inputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `NONE`
     */
    noncomplianceReasonNone?: pulumi.Input<inputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone>;
    /**
     * Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
     */
    noncomplianceReasonOther?: pulumi.Input<inputs.PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther>;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonEmergency {
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonNoProductionTraffic {
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonNone {
    /**
     * Identifies the customer
     */
    customerEmail?: pulumi.Input<string>;
    /**
     * Identifies person who has independently approved the activation request
     */
    peerReviewedBy?: pulumi.Input<string>;
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
    /**
     * Whether the metadata to activate has been fully tested
     */
    unitTested?: pulumi.Input<boolean>;
}

export interface PropertyIncludeActivationComplianceRecordNoncomplianceReasonOther {
    /**
     * Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
     */
    otherNoncomplianceReason?: pulumi.Input<string>;
    /**
     * Identifies the ticket that describes the need for the activation
     */
    ticketId?: pulumi.Input<string>;
}

export interface PropertyIncludeActivationTimeouts {
    default?: pulumi.Input<string>;
}

export interface PropertyRuleError {
    behaviorName?: pulumi.Input<string>;
    detail?: pulumi.Input<string>;
    errorLocation?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    statusCode?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface PropertyRuleWarning {
    behaviorName?: pulumi.Input<string>;
    detail?: pulumi.Input<string>;
    errorLocation?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    statusCode?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ProviderConfig {
    accessToken: pulumi.Input<string>;
    accountKey?: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    clientToken: pulumi.Input<string>;
    host: pulumi.Input<string>;
    maxBody?: pulumi.Input<number>;
}
export namespace config {
}
