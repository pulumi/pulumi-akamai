// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use the `akamai.GtmAsmap` resource to create, configure, and import a GTM Autonomous System (AS) map. AS mapping lets you configure a GTM property that returns a CNAME based on the AS number associated with the requester's IP address.
 *
 * You can reuse maps for multiple properties or create new ones. AS maps split the Internet into multiple AS block zones. Properties that use AS maps can specify handout integers for each zone. AS mapping lets you configure a property that directs users to a specific environment or to the origin.
 *
 * > **Note** Import requires an ID with this format: `existingDomainName`:`existingMapName`.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const demoAsmap = new akamai.GtmAsmap("demo_asmap", {
 *     defaultDatacenter: {
 *         datacenterId: 5400,
 *         nickname: "All Other AS numbers",
 *     },
 *     domain: "demo_domain.akadns.net",
 * });
 * ```
 * ## Schema reference
 *
 * You can download the GTM AS Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#asmap) page.
 *
 * @deprecated akamai.trafficmanagement.GtmASmap has been deprecated in favor of akamai.GtmAsmap
 */
export class GtmASmap extends pulumi.CustomResource {
    /**
     * Get an existing GtmASmap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmASmapState, opts?: pulumi.CustomResourceOptions): GtmASmap {
        pulumi.log.warn("GtmASmap is deprecated: akamai.trafficmanagement.GtmASmap has been deprecated in favor of akamai.GtmAsmap")
        return new GtmASmap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:trafficmanagement/gtmASmap:GtmASmap';

    /**
     * Returns true if the given object is an instance of GtmASmap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmASmap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmASmap.__pulumiType;
    }

    /**
     * Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
     */
    public readonly assignments!: pulumi.Output<outputs.trafficmanagement.GtmASmapAssignment[] | undefined>;
    /**
     * A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
     */
    public readonly defaultDatacenter!: pulumi.Output<outputs.trafficmanagement.GtmASmapDefaultDatacenter>;
    /**
     * The GTM Domain name for the AS map.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A boolean that, if `true`, waits for transaction to complete.
     */
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmASmap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated akamai.trafficmanagement.GtmASmap has been deprecated in favor of akamai.GtmAsmap */
    constructor(name: string, args: GtmASmapArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated akamai.trafficmanagement.GtmASmap has been deprecated in favor of akamai.GtmAsmap */
    constructor(name: string, argsOrState?: GtmASmapArgs | GtmASmapState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("GtmASmap is deprecated: akamai.trafficmanagement.GtmASmap has been deprecated in favor of akamai.GtmAsmap")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmASmapState | undefined;
            resourceInputs["assignments"] = state ? state.assignments : undefined;
            resourceInputs["defaultDatacenter"] = state ? state.defaultDatacenter : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
        } else {
            const args = argsOrState as GtmASmapArgs | undefined;
            if ((!args || args.defaultDatacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultDatacenter'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["assignments"] = args ? args.assignments : undefined;
            resourceInputs["defaultDatacenter"] = args ? args.defaultDatacenter : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GtmASmap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmASmap resources.
 */
export interface GtmASmapState {
    /**
     * Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.trafficmanagement.GtmASmapAssignment>[]>;
    /**
     * A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
     */
    defaultDatacenter?: pulumi.Input<inputs.trafficmanagement.GtmASmapDefaultDatacenter>;
    /**
     * The GTM Domain name for the AS map.
     */
    domain?: pulumi.Input<string>;
    /**
     * A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean that, if `true`, waits for transaction to complete.
     */
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmASmap resource.
 */
export interface GtmASmapArgs {
    /**
     * Contains information about the AS zone groupings of AS IDs. You can have multiple entries with this argument. If used, requires these arguments:
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.trafficmanagement.GtmASmapAssignment>[]>;
    /**
     * A placeholder for all other AS zones not found in these AS zones. Requires these additional arguments:
     */
    defaultDatacenter: pulumi.Input<inputs.trafficmanagement.GtmASmapDefaultDatacenter>;
    /**
     * The GTM Domain name for the AS map.
     */
    domain: pulumi.Input<string>;
    /**
     * A descriptive label for the AS map. Properties set up for  AS mapping can use this as reference.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean that, if `true`, waits for transaction to complete.
     */
    waitOnComplete?: pulumi.Input<boolean>;
}
