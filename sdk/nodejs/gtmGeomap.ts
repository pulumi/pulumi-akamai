// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use the `akamai.GtmGeomap` resource to create, configure, and import a GTM Geographic map. Geographic mapping lets you configure a property that returns a CNAME based on the geographic location of the request.
 *
 * You can reuse maps for multiple properties or create new ones. To configure a property for geographic mapping, you need to define at least one geographic map for your domain. Each map needs at least two definitions. For example, you can have one definition that maps a set of countries to a specific data center, and a second definition that routes all other traffic.
 *
 * > **Note** Import requires an ID with this format: `existingDomainName`:`existingMapName`.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const demoGeomap = new akamai.GtmGeomap("demo_geomap", {
 *     defaultDatacenter: {
 *         datacenterId: 5400,
 *         nickname: "All Others",
 *     },
 *     domain: "demo_domain.akadns.net",
 * });
 * ```
 * ## Schema reference
 *
 * You can download the GTM Geographic Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#geographicmap) page.
 */
export class GtmGeomap extends pulumi.CustomResource {
    /**
     * Get an existing GtmGeomap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmGeomapState, opts?: pulumi.CustomResourceOptions): GtmGeomap {
        return new GtmGeomap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmGeomap:GtmGeomap';

    /**
     * Returns true if the given object is an instance of GtmGeomap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmGeomap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmGeomap.__pulumiType;
    }

    /**
     * Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
     */
    public readonly assignments!: pulumi.Output<outputs.GtmGeomapAssignment[] | undefined>;
    /**
     * A placeholder for all other geographic zones. Requires these additional arguments:
     */
    public readonly defaultDatacenter!: pulumi.Output<outputs.GtmGeomapDefaultDatacenter>;
    /**
     * GTM Domain name for the Geographic Map.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * A descriptive label for the Geographic map.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     */
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmGeomap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmGeomapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmGeomapArgs | GtmGeomapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmGeomapState | undefined;
            resourceInputs["assignments"] = state ? state.assignments : undefined;
            resourceInputs["defaultDatacenter"] = state ? state.defaultDatacenter : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
        } else {
            const args = argsOrState as GtmGeomapArgs | undefined;
            if ((!args || args.defaultDatacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultDatacenter'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["assignments"] = args ? args.assignments : undefined;
            resourceInputs["defaultDatacenter"] = args ? args.defaultDatacenter : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmGeomap:GtmGeomap" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmGeomap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmGeomap resources.
 */
export interface GtmGeomapState {
    /**
     * Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmGeomapAssignment>[]>;
    /**
     * A placeholder for all other geographic zones. Requires these additional arguments:
     */
    defaultDatacenter?: pulumi.Input<inputs.GtmGeomapDefaultDatacenter>;
    /**
     * GTM Domain name for the Geographic Map.
     */
    domain?: pulumi.Input<string>;
    /**
     * A descriptive label for the Geographic map.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     */
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmGeomap resource.
 */
export interface GtmGeomapArgs {
    /**
     * Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmGeomapAssignment>[]>;
    /**
     * A placeholder for all other geographic zones. Requires these additional arguments:
     */
    defaultDatacenter: pulumi.Input<inputs.GtmGeomapDefaultDatacenter>;
    /**
     * GTM Domain name for the Geographic Map.
     */
    domain: pulumi.Input<string>;
    /**
     * A descriptive label for the Geographic map.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
     */
    waitOnComplete?: pulumi.Input<boolean>;
}
