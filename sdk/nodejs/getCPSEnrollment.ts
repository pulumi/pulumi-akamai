// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCPSEnrollment(args: GetCPSEnrollmentArgs, opts?: pulumi.InvokeOptions): Promise<GetCPSEnrollmentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getCPSEnrollment:getCPSEnrollment", {
        "enrollmentId": args.enrollmentId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCPSEnrollment.
 */
export interface GetCPSEnrollmentArgs {
    enrollmentId: number;
}

/**
 * A collection of values returned by getCPSEnrollment.
 */
export interface GetCPSEnrollmentResult {
    readonly adminContacts: outputs.GetCPSEnrollmentAdminContact[];
    readonly certificateChainType: string;
    readonly certificateType: string;
    readonly commonName: string;
    readonly contractId: string;
    readonly csrs: outputs.GetCPSEnrollmentCsr[];
    readonly dnsChallenges: outputs.GetCPSEnrollmentDnsChallenge[];
    readonly enableMultiStackedCertificates: boolean;
    readonly enrollmentId: number;
    readonly httpChallenges: outputs.GetCPSEnrollmentHttpChallenge[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly networkConfigurations: outputs.GetCPSEnrollmentNetworkConfiguration[];
    readonly organizations: outputs.GetCPSEnrollmentOrganization[];
    readonly pendingChanges: boolean;
    readonly registrationAuthority: string;
    readonly sans: string[];
    readonly secureNetwork: string;
    readonly signatureAlgorithm: string;
    readonly sniOnly: boolean;
    readonly techContacts: outputs.GetCPSEnrollmentTechContact[];
    readonly validationType: string;
}
export function getCPSEnrollmentOutput(args: GetCPSEnrollmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCPSEnrollmentResult> {
    return pulumi.output(args).apply((a: any) => getCPSEnrollment(a, opts))
}

/**
 * A collection of arguments for invoking getCPSEnrollment.
 */
export interface GetCPSEnrollmentOutputArgs {
    enrollmentId: pulumi.Input<number>;
}
