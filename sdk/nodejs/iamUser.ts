// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamUser extends pulumi.CustomResource {
    /**
     * Get an existing IamUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamUserState, opts?: pulumi.CustomResourceOptions): IamUser {
        return new IamUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/iamUser:IamUser';

    /**
     * Returns true if the given object is an instance of IamUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamUser.__pulumiType;
    }

    /**
     * The user's street address.
     */
    declare public readonly address: pulumi.Output<string>;
    /**
     * A user's per-group role assignments, in JSON form.
     */
    declare public readonly authGrantsJson: pulumi.Output<string>;
    /**
     * The user's city.
     */
    declare public readonly city: pulumi.Output<string | undefined>;
    /**
     * To help characterize the user, the value can be any that are available from the view-contact-types operation.
     */
    declare public readonly contactType: pulumi.Output<string>;
    /**
     * As part of the user's location, the value can be any that are available from the view-supported-countries operation.
     */
    declare public readonly country: pulumi.Output<string>;
    /**
     * The user's email address.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * Indicates whether email update is pending.
     */
    declare public /*out*/ readonly emailUpdatePending: pulumi.Output<boolean>;
    /**
     * Indicates whether multi-factor authentication is allowed.
     */
    declare public readonly enableMfa: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether two-factor authentication is allowed.
     */
    declare public readonly enableTfa: pulumi.Output<boolean | undefined>;
    /**
     * The user's first name.
     */
    declare public readonly firstName: pulumi.Output<string>;
    /**
     * The user's position at your company.
     */
    declare public readonly jobTitle: pulumi.Output<string | undefined>;
    /**
     * ISO 8601 timestamp indicating when the user last logged in.
     */
    declare public /*out*/ readonly lastLogin: pulumi.Output<string>;
    /**
     * The user's surname.
     */
    declare public readonly lastName: pulumi.Output<string>;
    /**
     * Flag to block a user account.
     */
    declare public readonly lock: pulumi.Output<boolean | undefined>;
    /**
     * The user's mobile phone number.
     */
    declare public readonly mobilePhone: pulumi.Output<string | undefined>;
    /**
     * New password for a user.
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * The date a user's password expires.
     */
    declare public /*out*/ readonly passwordExpiredAfter: pulumi.Output<string>;
    /**
     * The user's main phone number.
     */
    declare public readonly phone: pulumi.Output<string | undefined>;
    /**
     * The value can be any that are available from the view-languages operation.
     */
    declare public readonly preferredLanguage: pulumi.Output<string>;
    /**
     * The user's secondary email address.
     */
    declare public readonly secondaryEmail: pulumi.Output<string | undefined>;
    /**
     * The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
     */
    declare public readonly sessionTimeout: pulumi.Output<number>;
    /**
     * The user's state.
     */
    declare public readonly state: pulumi.Output<string | undefined>;
    /**
     * Indicates whether two-factor authentication is configured.
     */
    declare public /*out*/ readonly tfaConfigured: pulumi.Output<boolean>;
    /**
     * The user's time zone. The value can be any that are available from the view-time-zones operation.
     */
    declare public readonly timeZone: pulumi.Output<string>;
    /**
     * A user's `loginId`. Typically, a user's email address.
     */
    declare public /*out*/ readonly userName: pulumi.Output<string>;
    /**
     * Specifies email notifications the user receives for products.
     */
    declare public readonly userNotifications: pulumi.Output<outputs.IamUserUserNotifications>;
    /**
     * The user's five-digit ZIP code.
     */
    declare public readonly zipCode: pulumi.Output<string | undefined>;

    /**
     * Create a IamUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamUserArgs | IamUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamUserState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["authGrantsJson"] = state?.authGrantsJson;
            resourceInputs["city"] = state?.city;
            resourceInputs["contactType"] = state?.contactType;
            resourceInputs["country"] = state?.country;
            resourceInputs["email"] = state?.email;
            resourceInputs["emailUpdatePending"] = state?.emailUpdatePending;
            resourceInputs["enableMfa"] = state?.enableMfa;
            resourceInputs["enableTfa"] = state?.enableTfa;
            resourceInputs["firstName"] = state?.firstName;
            resourceInputs["jobTitle"] = state?.jobTitle;
            resourceInputs["lastLogin"] = state?.lastLogin;
            resourceInputs["lastName"] = state?.lastName;
            resourceInputs["lock"] = state?.lock;
            resourceInputs["mobilePhone"] = state?.mobilePhone;
            resourceInputs["password"] = state?.password;
            resourceInputs["passwordExpiredAfter"] = state?.passwordExpiredAfter;
            resourceInputs["phone"] = state?.phone;
            resourceInputs["preferredLanguage"] = state?.preferredLanguage;
            resourceInputs["secondaryEmail"] = state?.secondaryEmail;
            resourceInputs["sessionTimeout"] = state?.sessionTimeout;
            resourceInputs["state"] = state?.state;
            resourceInputs["tfaConfigured"] = state?.tfaConfigured;
            resourceInputs["timeZone"] = state?.timeZone;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["userNotifications"] = state?.userNotifications;
            resourceInputs["zipCode"] = state?.zipCode;
        } else {
            const args = argsOrState as IamUserArgs | undefined;
            if (args?.authGrantsJson === undefined && !opts.urn) {
                throw new Error("Missing required property 'authGrantsJson'");
            }
            if (args?.country === undefined && !opts.urn) {
                throw new Error("Missing required property 'country'");
            }
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.firstName === undefined && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if (args?.lastName === undefined && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            resourceInputs["address"] = args?.address;
            resourceInputs["authGrantsJson"] = args?.authGrantsJson;
            resourceInputs["city"] = args?.city;
            resourceInputs["contactType"] = args?.contactType;
            resourceInputs["country"] = args?.country;
            resourceInputs["email"] = args?.email;
            resourceInputs["enableMfa"] = args?.enableMfa;
            resourceInputs["enableTfa"] = args?.enableTfa;
            resourceInputs["firstName"] = args?.firstName;
            resourceInputs["jobTitle"] = args?.jobTitle;
            resourceInputs["lastName"] = args?.lastName;
            resourceInputs["lock"] = args?.lock;
            resourceInputs["mobilePhone"] = args?.mobilePhone;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["phone"] = args?.phone;
            resourceInputs["preferredLanguage"] = args?.preferredLanguage;
            resourceInputs["secondaryEmail"] = args?.secondaryEmail;
            resourceInputs["sessionTimeout"] = args?.sessionTimeout;
            resourceInputs["state"] = args?.state;
            resourceInputs["timeZone"] = args?.timeZone;
            resourceInputs["userNotifications"] = args?.userNotifications;
            resourceInputs["zipCode"] = args?.zipCode;
            resourceInputs["emailUpdatePending"] = undefined /*out*/;
            resourceInputs["lastLogin"] = undefined /*out*/;
            resourceInputs["passwordExpiredAfter"] = undefined /*out*/;
            resourceInputs["tfaConfigured"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IamUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamUser resources.
 */
export interface IamUserState {
    /**
     * The user's street address.
     */
    address?: pulumi.Input<string>;
    /**
     * A user's per-group role assignments, in JSON form.
     */
    authGrantsJson?: pulumi.Input<string>;
    /**
     * The user's city.
     */
    city?: pulumi.Input<string>;
    /**
     * To help characterize the user, the value can be any that are available from the view-contact-types operation.
     */
    contactType?: pulumi.Input<string>;
    /**
     * As part of the user's location, the value can be any that are available from the view-supported-countries operation.
     */
    country?: pulumi.Input<string>;
    /**
     * The user's email address.
     */
    email?: pulumi.Input<string>;
    /**
     * Indicates whether email update is pending.
     */
    emailUpdatePending?: pulumi.Input<boolean>;
    /**
     * Indicates whether multi-factor authentication is allowed.
     */
    enableMfa?: pulumi.Input<boolean>;
    /**
     * Indicates whether two-factor authentication is allowed.
     */
    enableTfa?: pulumi.Input<boolean>;
    /**
     * The user's first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * The user's position at your company.
     */
    jobTitle?: pulumi.Input<string>;
    /**
     * ISO 8601 timestamp indicating when the user last logged in.
     */
    lastLogin?: pulumi.Input<string>;
    /**
     * The user's surname.
     */
    lastName?: pulumi.Input<string>;
    /**
     * Flag to block a user account.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * The user's mobile phone number.
     */
    mobilePhone?: pulumi.Input<string>;
    /**
     * New password for a user.
     */
    password?: pulumi.Input<string>;
    /**
     * The date a user's password expires.
     */
    passwordExpiredAfter?: pulumi.Input<string>;
    /**
     * The user's main phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * The value can be any that are available from the view-languages operation.
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * The user's secondary email address.
     */
    secondaryEmail?: pulumi.Input<string>;
    /**
     * The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * The user's state.
     */
    state?: pulumi.Input<string>;
    /**
     * Indicates whether two-factor authentication is configured.
     */
    tfaConfigured?: pulumi.Input<boolean>;
    /**
     * The user's time zone. The value can be any that are available from the view-time-zones operation.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * A user's `loginId`. Typically, a user's email address.
     */
    userName?: pulumi.Input<string>;
    /**
     * Specifies email notifications the user receives for products.
     */
    userNotifications?: pulumi.Input<inputs.IamUserUserNotifications>;
    /**
     * The user's five-digit ZIP code.
     */
    zipCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamUser resource.
 */
export interface IamUserArgs {
    /**
     * The user's street address.
     */
    address?: pulumi.Input<string>;
    /**
     * A user's per-group role assignments, in JSON form.
     */
    authGrantsJson: pulumi.Input<string>;
    /**
     * The user's city.
     */
    city?: pulumi.Input<string>;
    /**
     * To help characterize the user, the value can be any that are available from the view-contact-types operation.
     */
    contactType?: pulumi.Input<string>;
    /**
     * As part of the user's location, the value can be any that are available from the view-supported-countries operation.
     */
    country: pulumi.Input<string>;
    /**
     * The user's email address.
     */
    email: pulumi.Input<string>;
    /**
     * Indicates whether multi-factor authentication is allowed.
     */
    enableMfa?: pulumi.Input<boolean>;
    /**
     * Indicates whether two-factor authentication is allowed.
     */
    enableTfa?: pulumi.Input<boolean>;
    /**
     * The user's first name.
     */
    firstName: pulumi.Input<string>;
    /**
     * The user's position at your company.
     */
    jobTitle?: pulumi.Input<string>;
    /**
     * The user's surname.
     */
    lastName: pulumi.Input<string>;
    /**
     * Flag to block a user account.
     */
    lock?: pulumi.Input<boolean>;
    /**
     * The user's mobile phone number.
     */
    mobilePhone?: pulumi.Input<string>;
    /**
     * New password for a user.
     */
    password?: pulumi.Input<string>;
    /**
     * The user's main phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * The value can be any that are available from the view-languages operation.
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * The user's secondary email address.
     */
    secondaryEmail?: pulumi.Input<string>;
    /**
     * The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * The user's state.
     */
    state?: pulumi.Input<string>;
    /**
     * The user's time zone. The value can be any that are available from the view-time-zones operation.
     */
    timeZone?: pulumi.Input<string>;
    /**
     * Specifies email notifications the user receives for products.
     */
    userNotifications?: pulumi.Input<inputs.IamUserUserNotifications>;
    /**
     * The user's five-digit ZIP code.
     */
    zipCode?: pulumi.Input<string>;
}
