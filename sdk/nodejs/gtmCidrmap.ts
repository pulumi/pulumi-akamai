// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use the `akamai.GtmCidrmap` resource to create, configure, and import a GTM Classless Inter-Domain Routing (CIDR) map. CIDR mapping uses the IP addresses of the requesting name server to provide IP-specific CNAME entries. CNAMEs let you direct internal users to a specific environment or direct them to the origin. This lets you provide different responses to an internal corporate DNS infrastructure, such as internal test environments and another answer for all other name servers (`defaultDatacenter`).
 *
 *  CIDR maps split the Internet into multiple CIDR block zones. Properties that use a map can specify a handout CNAME for each zone on the property's editing page. To configure a property for CIDR mapping, your domain needs at least one CIDR map defined.
 *
 * > **Note** Import requires an ID with this format: `existingDomainName`:`existingMapName`.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const demoCidrmap = new akamai.GtmCidrmap("demo_cidrmap", {
 *     defaultDatacenter: {
 *         datacenterId: 5400,
 *         nickname: "All Other CIDR Blocks",
 *     },
 *     domain: "demo_domain.akadns.net",
 * });
 * ```
 * ## Argument reference
 *
 * This resource supports these arguments:
 *
 * * `domain` - (Required) GTM Domain name for the AS Map.
 * * `name` - (Required) A descriptive label for the CIDR map, up to 255 characters.
 * * `defaultDatacenter` - (Required) A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
 *   * `datacenterId` - (Required) For each property, an identifier for all other CIDR zones.
 *   * `nickname` - (Required) A descriptive label for the all other CIDR blocks.
 * * `waitOnComplete` - (Optional) A boolean that, if set to `true`, waits for transaction to complete.
 * * `assignment` - (Optional) Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
 *   * `datacenterId` - (Optional) A unique identifier for an existing data center in the domain.
 *   * `nickname` - (Optional) A descriptive label for the CIDR zone group, up to 256 characters.
 *   * `blocks` - (Optional, list) Specifies an array of CIDR blocks.
 *
 * ## Schema reference
 *
 * You can download the GTM CIDR Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#cidrmap) page.
 */
export class GtmCidrmap extends pulumi.CustomResource {
    /**
     * Get an existing GtmCidrmap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmCidrmapState, opts?: pulumi.CustomResourceOptions): GtmCidrmap {
        return new GtmCidrmap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmCidrmap:GtmCidrmap';

    /**
     * Returns true if the given object is an instance of GtmCidrmap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmCidrmap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmCidrmap.__pulumiType;
    }

    public readonly assignments!: pulumi.Output<outputs.GtmCidrmapAssignment[] | undefined>;
    public readonly defaultDatacenter!: pulumi.Output<outputs.GtmCidrmapDefaultDatacenter>;
    public readonly domain!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmCidrmap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmCidrmapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmCidrmapArgs | GtmCidrmapState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmCidrmapState | undefined;
            inputs["assignments"] = state ? state.assignments : undefined;
            inputs["defaultDatacenter"] = state ? state.defaultDatacenter : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
        } else {
            const args = argsOrState as GtmCidrmapArgs | undefined;
            if ((!args || args.defaultDatacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultDatacenter'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            inputs["assignments"] = args ? args.assignments : undefined;
            inputs["defaultDatacenter"] = args ? args.defaultDatacenter : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmCidrmap:GtmCidrmap" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmCidrmap.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmCidrmap resources.
 */
export interface GtmCidrmapState {
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmCidrmapAssignment>[]>;
    defaultDatacenter?: pulumi.Input<inputs.GtmCidrmapDefaultDatacenter>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmCidrmap resource.
 */
export interface GtmCidrmapArgs {
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmCidrmapAssignment>[]>;
    defaultDatacenter: pulumi.Input<inputs.GtmCidrmapDefaultDatacenter>;
    domain: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}
