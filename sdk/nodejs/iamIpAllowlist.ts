// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IamIpAllowlist extends pulumi.CustomResource {
    /**
     * Get an existing IamIpAllowlist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamIpAllowlistState, opts?: pulumi.CustomResourceOptions): IamIpAllowlist {
        return new IamIpAllowlist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/iamIpAllowlist:IamIpAllowlist';

    /**
     * Returns true if the given object is an instance of IamIpAllowlist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamIpAllowlist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamIpAllowlist.__pulumiType;
    }

    /**
     * Whether to enable or disable the allowlist.
     */
    declare public readonly enable: pulumi.Output<boolean>;

    /**
     * Create a IamIpAllowlist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamIpAllowlistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamIpAllowlistArgs | IamIpAllowlistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamIpAllowlistState | undefined;
            resourceInputs["enable"] = state?.enable;
        } else {
            const args = argsOrState as IamIpAllowlistArgs | undefined;
            if (args?.enable === undefined && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            resourceInputs["enable"] = args?.enable;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamIpAllowlist.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamIpAllowlist resources.
 */
export interface IamIpAllowlistState {
    /**
     * Whether to enable or disable the allowlist.
     */
    enable?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IamIpAllowlist resource.
 */
export interface IamIpAllowlistArgs {
    /**
     * Whether to enable or disable the allowlist.
     */
    enable: pulumi.Input<boolean>;
}
