// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GtmAsmap extends pulumi.CustomResource {
    /**
     * Get an existing GtmAsmap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmAsmapState, opts?: pulumi.CustomResourceOptions): GtmAsmap {
        return new GtmAsmap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmAsmap:GtmAsmap';

    /**
     * Returns true if the given object is an instance of GtmAsmap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmAsmap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmAsmap.__pulumiType;
    }

    declare public readonly assignments: pulumi.Output<outputs.GtmAsmapAssignment[] | undefined>;
    declare public readonly defaultDatacenter: pulumi.Output<outputs.GtmAsmapDefaultDatacenter>;
    declare public readonly domain: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly waitOnComplete: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmAsmap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmAsmapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmAsmapArgs | GtmAsmapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmAsmapState | undefined;
            resourceInputs["assignments"] = state?.assignments;
            resourceInputs["defaultDatacenter"] = state?.defaultDatacenter;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["name"] = state?.name;
            resourceInputs["waitOnComplete"] = state?.waitOnComplete;
        } else {
            const args = argsOrState as GtmAsmapArgs | undefined;
            if (args?.defaultDatacenter === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultDatacenter'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["assignments"] = args?.assignments;
            resourceInputs["defaultDatacenter"] = args?.defaultDatacenter;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["name"] = args?.name;
            resourceInputs["waitOnComplete"] = args?.waitOnComplete;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmASmap:GtmASmap" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmAsmap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmAsmap resources.
 */
export interface GtmAsmapState {
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmAsmapAssignment>[]>;
    defaultDatacenter?: pulumi.Input<inputs.GtmAsmapDefaultDatacenter>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmAsmap resource.
 */
export interface GtmAsmapArgs {
    assignments?: pulumi.Input<pulumi.Input<inputs.GtmAsmapAssignment>[]>;
    defaultDatacenter: pulumi.Input<inputs.GtmAsmapDefaultDatacenter>;
    domain: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}
