// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `akamai.PropertyActivation` resource lets you activate a property version. An activation deploys the version to either the Akamai staging or production network. You can activate a specific version multiple times if you need to.
 *
 * Before activating on production, activate on staging first. This way you can detect any problems in staging before your changes progress to production.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * import * from "fs";
 *
 * const email = "user@example.org";
 * const ruleFormat = "v2020-03-04";
 * const example = new akamai.Property("example", {
 *     productId: "prd_SPM",
 *     contractId: _var.contractid,
 *     groupId: _var.groupid,
 *     hostnames: {
 *         "example.org": "example.org.edgesuite.net",
 *         "www.example.org": "example.org.edgesuite.net",
 *         "sub.example.org": "sub.example.org.edgesuite.net",
 *     },
 *     ruleFormat: ruleFormat,
 *     rules: fs.readFileSync(`${path.module}/main.json`),
 * });
 * const exampleStaging = new akamai.PropertyActivation("exampleStaging", {
 *     propertyId: example.id,
 *     contacts: [email],
 *     version: example.latestVersion,
 *     note: "Sample activation",
 * });
 * const exampleProd = new akamai.PropertyActivation("exampleProd", {
 *     propertyId: example.id,
 *     network: "PRODUCTION",
 *     version: 3,
 *     contacts: [email],
 * }, {
 *     dependsOn: [exampleStaging],
 * });
 * ```
 * ## Argument reference
 *
 * The following arguments are supported:
 *
 * * `propertyId` - (Required) The property's unique identifier, including the `prp_` prefix.
 * * `contact` - (Required) One or more email addresses to send activation status changes to.
 * * `version` - (Required) The property version to activate. Previously this field was optional. It now depends on the `akamai.Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `akamai.Property` resource labeled `example`.
 * * `network` - (Optional) Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
 * * `note` - (Optional) A log message you can assign to the activation request.
 * * `autoAcknowledgeRuleWarnings` - (Optional) Whether the activation should proceed despite any warnings. By default set to `true`.
 *
 * ### Deprecated arguments
 *
 * * `property` - (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
 *
 * ## Attribute reference
 *
 * The following attributes are returned:
 *
 * * `id` - The unique identifier for this activation.
 * * `warnings` - The contents of `warnings` field returned by the API. For more information see [Errors](https://developer.akamai.com/api/core_features/property_manager/v1.html#errors) in the PAPI documentation.
 * * `errors` - The contents of `errors` field returned by the API. For more information see [Errors](https://developer.akamai.com/api/core_features/property_manager/v1.html#errors) in the PAPI documentation.
 * * `activationId` - The ID given to the activation event while it's in progress.
 * * `status` - The property version's activation status on the selected network.
 *
 * ### Deprecated attributes
 *
 * * `ruleWarnings` - (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
 */
export class PropertyActivation extends pulumi.CustomResource {
    /**
     * Get an existing PropertyActivation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyActivationState, opts?: pulumi.CustomResourceOptions): PropertyActivation {
        return new PropertyActivation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/propertyActivation:PropertyActivation';

    /**
     * Returns true if the given object is an instance of PropertyActivation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PropertyActivation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PropertyActivation.__pulumiType;
    }

    public readonly activationId!: pulumi.Output<string>;
    /**
     * automatically acknowledge all rule warnings for activation to continue. default is true
     */
    public readonly autoAcknowledgeRuleWarnings!: pulumi.Output<boolean | undefined>;
    public readonly contacts!: pulumi.Output<string[]>;
    public /*out*/ readonly errors!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string | undefined>;
    /**
     * assigns a log message to the activation request
     */
    public readonly note!: pulumi.Output<string | undefined>;
    /**
     * @deprecated The setting "property" has been deprecated.
     */
    public readonly property!: pulumi.Output<string>;
    public readonly propertyId!: pulumi.Output<string>;
    public readonly ruleErrors!: pulumi.Output<outputs.PropertyActivationRuleError[]>;
    /**
     * @deprecated Rule warnings will not be set in state anymore
     */
    public readonly ruleWarnings!: pulumi.Output<outputs.PropertyActivationRuleWarning[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<number>;
    public /*out*/ readonly warnings!: pulumi.Output<string>;

    /**
     * Create a PropertyActivation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PropertyActivationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyActivationArgs | PropertyActivationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PropertyActivationState | undefined;
            inputs["activationId"] = state ? state.activationId : undefined;
            inputs["autoAcknowledgeRuleWarnings"] = state ? state.autoAcknowledgeRuleWarnings : undefined;
            inputs["contacts"] = state ? state.contacts : undefined;
            inputs["errors"] = state ? state.errors : undefined;
            inputs["network"] = state ? state.network : undefined;
            inputs["note"] = state ? state.note : undefined;
            inputs["property"] = state ? state.property : undefined;
            inputs["propertyId"] = state ? state.propertyId : undefined;
            inputs["ruleErrors"] = state ? state.ruleErrors : undefined;
            inputs["ruleWarnings"] = state ? state.ruleWarnings : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["warnings"] = state ? state.warnings : undefined;
        } else {
            const args = argsOrState as PropertyActivationArgs | undefined;
            if ((!args || args.contacts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contacts'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            inputs["activationId"] = args ? args.activationId : undefined;
            inputs["autoAcknowledgeRuleWarnings"] = args ? args.autoAcknowledgeRuleWarnings : undefined;
            inputs["contacts"] = args ? args.contacts : undefined;
            inputs["network"] = args ? args.network : undefined;
            inputs["note"] = args ? args.note : undefined;
            inputs["property"] = args ? args.property : undefined;
            inputs["propertyId"] = args ? args.propertyId : undefined;
            inputs["ruleErrors"] = args ? args.ruleErrors : undefined;
            inputs["ruleWarnings"] = args ? args.ruleWarnings : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["errors"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["warnings"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "akamai:properties/propertyActivation:PropertyActivation" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PropertyActivation.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PropertyActivation resources.
 */
export interface PropertyActivationState {
    activationId?: pulumi.Input<string>;
    /**
     * automatically acknowledge all rule warnings for activation to continue. default is true
     */
    autoAcknowledgeRuleWarnings?: pulumi.Input<boolean>;
    contacts?: pulumi.Input<pulumi.Input<string>[]>;
    errors?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    /**
     * assigns a log message to the activation request
     */
    note?: pulumi.Input<string>;
    /**
     * @deprecated The setting "property" has been deprecated.
     */
    property?: pulumi.Input<string>;
    propertyId?: pulumi.Input<string>;
    ruleErrors?: pulumi.Input<pulumi.Input<inputs.PropertyActivationRuleError>[]>;
    /**
     * @deprecated Rule warnings will not be set in state anymore
     */
    ruleWarnings?: pulumi.Input<pulumi.Input<inputs.PropertyActivationRuleWarning>[]>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    warnings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PropertyActivation resource.
 */
export interface PropertyActivationArgs {
    activationId?: pulumi.Input<string>;
    /**
     * automatically acknowledge all rule warnings for activation to continue. default is true
     */
    autoAcknowledgeRuleWarnings?: pulumi.Input<boolean>;
    contacts: pulumi.Input<pulumi.Input<string>[]>;
    network?: pulumi.Input<string>;
    /**
     * assigns a log message to the activation request
     */
    note?: pulumi.Input<string>;
    /**
     * @deprecated The setting "property" has been deprecated.
     */
    property?: pulumi.Input<string>;
    propertyId?: pulumi.Input<string>;
    ruleErrors?: pulumi.Input<pulumi.Input<inputs.PropertyActivationRuleError>[]>;
    /**
     * @deprecated Rule warnings will not be set in state anymore
     */
    ruleWarnings?: pulumi.Input<pulumi.Input<inputs.PropertyActivationRuleWarning>[]>;
    version: pulumi.Input<number>;
}
