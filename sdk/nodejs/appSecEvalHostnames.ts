// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration
 *
 * **Note**: This data source is deprecated and may be removed in a future release.
 *
 * Modifies the list of hostnames evaluated while a security configuration is in evaluation mode.
 * During evaluation mode, hosts take no action of any kind when responding to traffic.
 * Instead, these hosts simply maintain a record of the actions they *would* have taken if they had been responding to live traffic in your production network.
 *
 * **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/selected-hostnames/eval-hostnames](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevaluationhostnames)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const evalHostnames = new akamai.AppSecEvalHostnames("evalHostnames", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     hostnames: [
 *         "documentation.akamai.com",
 *         "training.akamai.com",
 *         "videos.akamai.com",
 *     ],
 * });
 * ```
 */
export class AppSecEvalHostnames extends pulumi.CustomResource {
    /**
     * Get an existing AppSecEvalHostnames resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecEvalHostnamesState, opts?: pulumi.CustomResourceOptions): AppSecEvalHostnames {
        return new AppSecEvalHostnames(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecEvalHostnames:AppSecEvalHostnames';

    /**
     * Returns true if the given object is an instance of AppSecEvalHostnames.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecEvalHostnames {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecEvalHostnames.__pulumiType;
    }

    /**
     * . Unique identifier of the security configuration in evaluation mode.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * . JSON array of hostnames to be used in the evaluation process. Note that this list replaces your existing list of evaluation hosts.
     */
    public readonly hostnames!: pulumi.Output<string[]>;

    /**
     * Create a AppSecEvalHostnames resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecEvalHostnamesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecEvalHostnamesArgs | AppSecEvalHostnamesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecEvalHostnamesState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
        } else {
            const args = argsOrState as AppSecEvalHostnamesArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.hostnames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnames'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["hostnames"] = args ? args.hostnames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSecEvalHostnames.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecEvalHostnames resources.
 */
export interface AppSecEvalHostnamesState {
    /**
     * . Unique identifier of the security configuration in evaluation mode.
     */
    configId?: pulumi.Input<number>;
    /**
     * . JSON array of hostnames to be used in the evaluation process. Note that this list replaces your existing list of evaluation hosts.
     */
    hostnames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AppSecEvalHostnames resource.
 */
export interface AppSecEvalHostnamesArgs {
    /**
     * . Unique identifier of the security configuration in evaluation mode.
     */
    configId: pulumi.Input<number>;
    /**
     * . JSON array of hostnames to be used in the evaluation process. Note that this list replaces your existing list of evaluation hosts.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
}
