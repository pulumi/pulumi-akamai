// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PropertyHostnameBucket extends pulumi.CustomResource {
    /**
     * Get an existing PropertyHostnameBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyHostnameBucketState, opts?: pulumi.CustomResourceOptions): PropertyHostnameBucket {
        return new PropertyHostnameBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/propertyHostnameBucket:PropertyHostnameBucket';

    /**
     * Returns true if the given object is an instance of PropertyHostnameBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PropertyHostnameBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PropertyHostnameBucket.__pulumiType;
    }

    /**
     * The ID of the latest hostname bucket activation.
     */
    declare public /*out*/ readonly activationId: pulumi.Output<string>;
    /**
     * The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
     */
    declare public readonly hostnameCount: pulumi.Output<number>;
    /**
     * The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
     */
    declare public readonly hostnames: pulumi.Output<{[key: string]: outputs.PropertyHostnameBucketHostnames}>;
    /**
     * The network to activate on, either `STAGING` or `PRODUCTION`.
     */
    declare public readonly network: pulumi.Output<string>;
    /**
     * Assigns a log message to the request.
     */
    declare public readonly note: pulumi.Output<string>;
    /**
     * Email addresses to notify when the activation status changes.
     */
    declare public readonly notifyEmails: pulumi.Output<string[]>;
    /**
     * The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
     */
    declare public /*out*/ readonly pendingDefaultCerts: pulumi.Output<number>;
    /**
     * The unique identifier for the property.
     */
    declare public readonly propertyId: pulumi.Output<string>;
    /**
     * The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
     */
    declare public readonly timeoutForActivation: pulumi.Output<number>;

    /**
     * Create a PropertyHostnameBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PropertyHostnameBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyHostnameBucketArgs | PropertyHostnameBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PropertyHostnameBucketState | undefined;
            resourceInputs["activationId"] = state?.activationId;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["hostnameCount"] = state?.hostnameCount;
            resourceInputs["hostnames"] = state?.hostnames;
            resourceInputs["network"] = state?.network;
            resourceInputs["note"] = state?.note;
            resourceInputs["notifyEmails"] = state?.notifyEmails;
            resourceInputs["pendingDefaultCerts"] = state?.pendingDefaultCerts;
            resourceInputs["propertyId"] = state?.propertyId;
            resourceInputs["timeoutForActivation"] = state?.timeoutForActivation;
        } else {
            const args = argsOrState as PropertyHostnameBucketArgs | undefined;
            if (args?.hostnames === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostnames'");
            }
            if (args?.network === undefined && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if (args?.propertyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'propertyId'");
            }
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["hostnameCount"] = args?.hostnameCount;
            resourceInputs["hostnames"] = args?.hostnames;
            resourceInputs["network"] = args?.network;
            resourceInputs["note"] = args?.note;
            resourceInputs["notifyEmails"] = args?.notifyEmails;
            resourceInputs["propertyId"] = args?.propertyId;
            resourceInputs["timeoutForActivation"] = args?.timeoutForActivation;
            resourceInputs["activationId"] = undefined /*out*/;
            resourceInputs["pendingDefaultCerts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PropertyHostnameBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PropertyHostnameBucket resources.
 */
export interface PropertyHostnameBucketState {
    /**
     * The ID of the latest hostname bucket activation.
     */
    activationId?: pulumi.Input<string>;
    /**
     * The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    contractId?: pulumi.Input<string>;
    /**
     * The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    groupId?: pulumi.Input<string>;
    /**
     * The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
     */
    hostnameCount?: pulumi.Input<number>;
    /**
     * The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
     */
    hostnames?: pulumi.Input<{[key: string]: pulumi.Input<inputs.PropertyHostnameBucketHostnames>}>;
    /**
     * The network to activate on, either `STAGING` or `PRODUCTION`.
     */
    network?: pulumi.Input<string>;
    /**
     * Assigns a log message to the request.
     */
    note?: pulumi.Input<string>;
    /**
     * Email addresses to notify when the activation status changes.
     */
    notifyEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
     */
    pendingDefaultCerts?: pulumi.Input<number>;
    /**
     * The unique identifier for the property.
     */
    propertyId?: pulumi.Input<string>;
    /**
     * The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
     */
    timeoutForActivation?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PropertyHostnameBucket resource.
 */
export interface PropertyHostnameBucketArgs {
    /**
     * The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    contractId?: pulumi.Input<string>;
    /**
     * The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not possible
     */
    groupId?: pulumi.Input<string>;
    /**
     * The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
     */
    hostnameCount?: pulumi.Input<number>;
    /**
     * The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
     */
    hostnames: pulumi.Input<{[key: string]: pulumi.Input<inputs.PropertyHostnameBucketHostnames>}>;
    /**
     * The network to activate on, either `STAGING` or `PRODUCTION`.
     */
    network: pulumi.Input<string>;
    /**
     * Assigns a log message to the request.
     */
    note?: pulumi.Input<string>;
    /**
     * Email addresses to notify when the activation status changes.
     */
    notifyEmails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier for the property.
     */
    propertyId: pulumi.Input<string>;
    /**
     * The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
     */
    timeoutForActivation?: pulumi.Input<number>;
}
