// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppSecActivationsArgs, AppSecActivationsState } from "./appSecActivations";
export type AppSecActivations = import("./appSecActivations").AppSecActivations;
export const AppSecActivations: typeof import("./appSecActivations").AppSecActivations = null as any;
utilities.lazyLoad(exports, ["AppSecActivations"], () => require("./appSecActivations"));

export { AppSecAdvancedSettingsEvasivePathMatchArgs, AppSecAdvancedSettingsEvasivePathMatchState } from "./appSecAdvancedSettingsEvasivePathMatch";
export type AppSecAdvancedSettingsEvasivePathMatch = import("./appSecAdvancedSettingsEvasivePathMatch").AppSecAdvancedSettingsEvasivePathMatch;
export const AppSecAdvancedSettingsEvasivePathMatch: typeof import("./appSecAdvancedSettingsEvasivePathMatch").AppSecAdvancedSettingsEvasivePathMatch = null as any;
utilities.lazyLoad(exports, ["AppSecAdvancedSettingsEvasivePathMatch"], () => require("./appSecAdvancedSettingsEvasivePathMatch"));

export { AppSecAdvancedSettingsLoggingArgs, AppSecAdvancedSettingsLoggingState } from "./appSecAdvancedSettingsLogging";
export type AppSecAdvancedSettingsLogging = import("./appSecAdvancedSettingsLogging").AppSecAdvancedSettingsLogging;
export const AppSecAdvancedSettingsLogging: typeof import("./appSecAdvancedSettingsLogging").AppSecAdvancedSettingsLogging = null as any;
utilities.lazyLoad(exports, ["AppSecAdvancedSettingsLogging"], () => require("./appSecAdvancedSettingsLogging"));

export { AppSecAdvancedSettingsPragmaHeaderArgs, AppSecAdvancedSettingsPragmaHeaderState } from "./appSecAdvancedSettingsPragmaHeader";
export type AppSecAdvancedSettingsPragmaHeader = import("./appSecAdvancedSettingsPragmaHeader").AppSecAdvancedSettingsPragmaHeader;
export const AppSecAdvancedSettingsPragmaHeader: typeof import("./appSecAdvancedSettingsPragmaHeader").AppSecAdvancedSettingsPragmaHeader = null as any;
utilities.lazyLoad(exports, ["AppSecAdvancedSettingsPragmaHeader"], () => require("./appSecAdvancedSettingsPragmaHeader"));

export { AppSecAdvancedSettingsPrefetchArgs, AppSecAdvancedSettingsPrefetchState } from "./appSecAdvancedSettingsPrefetch";
export type AppSecAdvancedSettingsPrefetch = import("./appSecAdvancedSettingsPrefetch").AppSecAdvancedSettingsPrefetch;
export const AppSecAdvancedSettingsPrefetch: typeof import("./appSecAdvancedSettingsPrefetch").AppSecAdvancedSettingsPrefetch = null as any;
utilities.lazyLoad(exports, ["AppSecAdvancedSettingsPrefetch"], () => require("./appSecAdvancedSettingsPrefetch"));

export { AppSecApiConstraintsProtectionArgs, AppSecApiConstraintsProtectionState } from "./appSecApiConstraintsProtection";
export type AppSecApiConstraintsProtection = import("./appSecApiConstraintsProtection").AppSecApiConstraintsProtection;
export const AppSecApiConstraintsProtection: typeof import("./appSecApiConstraintsProtection").AppSecApiConstraintsProtection = null as any;
utilities.lazyLoad(exports, ["AppSecApiConstraintsProtection"], () => require("./appSecApiConstraintsProtection"));

export { AppSecApiRequestConstraintsArgs, AppSecApiRequestConstraintsState } from "./appSecApiRequestConstraints";
export type AppSecApiRequestConstraints = import("./appSecApiRequestConstraints").AppSecApiRequestConstraints;
export const AppSecApiRequestConstraints: typeof import("./appSecApiRequestConstraints").AppSecApiRequestConstraints = null as any;
utilities.lazyLoad(exports, ["AppSecApiRequestConstraints"], () => require("./appSecApiRequestConstraints"));

export { AppSecAttackGroupArgs, AppSecAttackGroupState } from "./appSecAttackGroup";
export type AppSecAttackGroup = import("./appSecAttackGroup").AppSecAttackGroup;
export const AppSecAttackGroup: typeof import("./appSecAttackGroup").AppSecAttackGroup = null as any;
utilities.lazyLoad(exports, ["AppSecAttackGroup"], () => require("./appSecAttackGroup"));

export { AppSecByPassNetworkListArgs, AppSecByPassNetworkListState } from "./appSecByPassNetworkList";
export type AppSecByPassNetworkList = import("./appSecByPassNetworkList").AppSecByPassNetworkList;
export const AppSecByPassNetworkList: typeof import("./appSecByPassNetworkList").AppSecByPassNetworkList = null as any;
utilities.lazyLoad(exports, ["AppSecByPassNetworkList"], () => require("./appSecByPassNetworkList"));

export { AppSecConfigurationArgs, AppSecConfigurationState } from "./appSecConfiguration";
export type AppSecConfiguration = import("./appSecConfiguration").AppSecConfiguration;
export const AppSecConfiguration: typeof import("./appSecConfiguration").AppSecConfiguration = null as any;
utilities.lazyLoad(exports, ["AppSecConfiguration"], () => require("./appSecConfiguration"));

export { AppSecConfigurationRenameArgs, AppSecConfigurationRenameState } from "./appSecConfigurationRename";
export type AppSecConfigurationRename = import("./appSecConfigurationRename").AppSecConfigurationRename;
export const AppSecConfigurationRename: typeof import("./appSecConfigurationRename").AppSecConfigurationRename = null as any;
utilities.lazyLoad(exports, ["AppSecConfigurationRename"], () => require("./appSecConfigurationRename"));

export { AppSecCustomDenyArgs, AppSecCustomDenyState } from "./appSecCustomDeny";
export type AppSecCustomDeny = import("./appSecCustomDeny").AppSecCustomDeny;
export const AppSecCustomDeny: typeof import("./appSecCustomDeny").AppSecCustomDeny = null as any;
utilities.lazyLoad(exports, ["AppSecCustomDeny"], () => require("./appSecCustomDeny"));

export { AppSecCustomRuleArgs, AppSecCustomRuleState } from "./appSecCustomRule";
export type AppSecCustomRule = import("./appSecCustomRule").AppSecCustomRule;
export const AppSecCustomRule: typeof import("./appSecCustomRule").AppSecCustomRule = null as any;
utilities.lazyLoad(exports, ["AppSecCustomRule"], () => require("./appSecCustomRule"));

export { AppSecCustomRuleActionArgs, AppSecCustomRuleActionState } from "./appSecCustomRuleAction";
export type AppSecCustomRuleAction = import("./appSecCustomRuleAction").AppSecCustomRuleAction;
export const AppSecCustomRuleAction: typeof import("./appSecCustomRuleAction").AppSecCustomRuleAction = null as any;
utilities.lazyLoad(exports, ["AppSecCustomRuleAction"], () => require("./appSecCustomRuleAction"));

export { AppSecEvalArgs, AppSecEvalState } from "./appSecEval";
export type AppSecEval = import("./appSecEval").AppSecEval;
export const AppSecEval: typeof import("./appSecEval").AppSecEval = null as any;
utilities.lazyLoad(exports, ["AppSecEval"], () => require("./appSecEval"));

export { AppSecEvalGroupArgs, AppSecEvalGroupState } from "./appSecEvalGroup";
export type AppSecEvalGroup = import("./appSecEvalGroup").AppSecEvalGroup;
export const AppSecEvalGroup: typeof import("./appSecEvalGroup").AppSecEvalGroup = null as any;
utilities.lazyLoad(exports, ["AppSecEvalGroup"], () => require("./appSecEvalGroup"));

export { AppSecEvalPenaltyBoxArgs, AppSecEvalPenaltyBoxState } from "./appSecEvalPenaltyBox";
export type AppSecEvalPenaltyBox = import("./appSecEvalPenaltyBox").AppSecEvalPenaltyBox;
export const AppSecEvalPenaltyBox: typeof import("./appSecEvalPenaltyBox").AppSecEvalPenaltyBox = null as any;
utilities.lazyLoad(exports, ["AppSecEvalPenaltyBox"], () => require("./appSecEvalPenaltyBox"));

export { AppSecEvalRuleArgs, AppSecEvalRuleState } from "./appSecEvalRule";
export type AppSecEvalRule = import("./appSecEvalRule").AppSecEvalRule;
export const AppSecEvalRule: typeof import("./appSecEvalRule").AppSecEvalRule = null as any;
utilities.lazyLoad(exports, ["AppSecEvalRule"], () => require("./appSecEvalRule"));

export { AppSecIPGeoArgs, AppSecIPGeoState } from "./appSecIPGeo";
export type AppSecIPGeo = import("./appSecIPGeo").AppSecIPGeo;
export const AppSecIPGeo: typeof import("./appSecIPGeo").AppSecIPGeo = null as any;
utilities.lazyLoad(exports, ["AppSecIPGeo"], () => require("./appSecIPGeo"));

export { AppSecIPGeoProtectionArgs, AppSecIPGeoProtectionState } from "./appSecIPGeoProtection";
export type AppSecIPGeoProtection = import("./appSecIPGeoProtection").AppSecIPGeoProtection;
export const AppSecIPGeoProtection: typeof import("./appSecIPGeoProtection").AppSecIPGeoProtection = null as any;
utilities.lazyLoad(exports, ["AppSecIPGeoProtection"], () => require("./appSecIPGeoProtection"));

export { AppSecMalwarePolicyArgs, AppSecMalwarePolicyState } from "./appSecMalwarePolicy";
export type AppSecMalwarePolicy = import("./appSecMalwarePolicy").AppSecMalwarePolicy;
export const AppSecMalwarePolicy: typeof import("./appSecMalwarePolicy").AppSecMalwarePolicy = null as any;
utilities.lazyLoad(exports, ["AppSecMalwarePolicy"], () => require("./appSecMalwarePolicy"));

export { AppSecMalwarePolicyActionArgs, AppSecMalwarePolicyActionState } from "./appSecMalwarePolicyAction";
export type AppSecMalwarePolicyAction = import("./appSecMalwarePolicyAction").AppSecMalwarePolicyAction;
export const AppSecMalwarePolicyAction: typeof import("./appSecMalwarePolicyAction").AppSecMalwarePolicyAction = null as any;
utilities.lazyLoad(exports, ["AppSecMalwarePolicyAction"], () => require("./appSecMalwarePolicyAction"));

export { AppSecMalwarePolicyActionsArgs, AppSecMalwarePolicyActionsState } from "./appSecMalwarePolicyActions";
export type AppSecMalwarePolicyActions = import("./appSecMalwarePolicyActions").AppSecMalwarePolicyActions;
export const AppSecMalwarePolicyActions: typeof import("./appSecMalwarePolicyActions").AppSecMalwarePolicyActions = null as any;
utilities.lazyLoad(exports, ["AppSecMalwarePolicyActions"], () => require("./appSecMalwarePolicyActions"));

export { AppSecMalwareProtectionArgs, AppSecMalwareProtectionState } from "./appSecMalwareProtection";
export type AppSecMalwareProtection = import("./appSecMalwareProtection").AppSecMalwareProtection;
export const AppSecMalwareProtection: typeof import("./appSecMalwareProtection").AppSecMalwareProtection = null as any;
utilities.lazyLoad(exports, ["AppSecMalwareProtection"], () => require("./appSecMalwareProtection"));

export { AppSecMatchTargetArgs, AppSecMatchTargetState } from "./appSecMatchTarget";
export type AppSecMatchTarget = import("./appSecMatchTarget").AppSecMatchTarget;
export const AppSecMatchTarget: typeof import("./appSecMatchTarget").AppSecMatchTarget = null as any;
utilities.lazyLoad(exports, ["AppSecMatchTarget"], () => require("./appSecMatchTarget"));

export { AppSecMatchTargetSequenceArgs, AppSecMatchTargetSequenceState } from "./appSecMatchTargetSequence";
export type AppSecMatchTargetSequence = import("./appSecMatchTargetSequence").AppSecMatchTargetSequence;
export const AppSecMatchTargetSequence: typeof import("./appSecMatchTargetSequence").AppSecMatchTargetSequence = null as any;
utilities.lazyLoad(exports, ["AppSecMatchTargetSequence"], () => require("./appSecMatchTargetSequence"));

export { AppSecPenaltyBoxArgs, AppSecPenaltyBoxState } from "./appSecPenaltyBox";
export type AppSecPenaltyBox = import("./appSecPenaltyBox").AppSecPenaltyBox;
export const AppSecPenaltyBox: typeof import("./appSecPenaltyBox").AppSecPenaltyBox = null as any;
utilities.lazyLoad(exports, ["AppSecPenaltyBox"], () => require("./appSecPenaltyBox"));

export { AppSecRatePolicyArgs, AppSecRatePolicyState } from "./appSecRatePolicy";
export type AppSecRatePolicy = import("./appSecRatePolicy").AppSecRatePolicy;
export const AppSecRatePolicy: typeof import("./appSecRatePolicy").AppSecRatePolicy = null as any;
utilities.lazyLoad(exports, ["AppSecRatePolicy"], () => require("./appSecRatePolicy"));

export { AppSecRatePolicyActionArgs, AppSecRatePolicyActionState } from "./appSecRatePolicyAction";
export type AppSecRatePolicyAction = import("./appSecRatePolicyAction").AppSecRatePolicyAction;
export const AppSecRatePolicyAction: typeof import("./appSecRatePolicyAction").AppSecRatePolicyAction = null as any;
utilities.lazyLoad(exports, ["AppSecRatePolicyAction"], () => require("./appSecRatePolicyAction"));

export { AppSecRateProtectionArgs, AppSecRateProtectionState } from "./appSecRateProtection";
export type AppSecRateProtection = import("./appSecRateProtection").AppSecRateProtection;
export const AppSecRateProtection: typeof import("./appSecRateProtection").AppSecRateProtection = null as any;
utilities.lazyLoad(exports, ["AppSecRateProtection"], () => require("./appSecRateProtection"));

export { AppSecReputationProfileArgs, AppSecReputationProfileState } from "./appSecReputationProfile";
export type AppSecReputationProfile = import("./appSecReputationProfile").AppSecReputationProfile;
export const AppSecReputationProfile: typeof import("./appSecReputationProfile").AppSecReputationProfile = null as any;
utilities.lazyLoad(exports, ["AppSecReputationProfile"], () => require("./appSecReputationProfile"));

export { AppSecReputationProfileActionArgs, AppSecReputationProfileActionState } from "./appSecReputationProfileAction";
export type AppSecReputationProfileAction = import("./appSecReputationProfileAction").AppSecReputationProfileAction;
export const AppSecReputationProfileAction: typeof import("./appSecReputationProfileAction").AppSecReputationProfileAction = null as any;
utilities.lazyLoad(exports, ["AppSecReputationProfileAction"], () => require("./appSecReputationProfileAction"));

export { AppSecReputationProfileAnalysisArgs, AppSecReputationProfileAnalysisState } from "./appSecReputationProfileAnalysis";
export type AppSecReputationProfileAnalysis = import("./appSecReputationProfileAnalysis").AppSecReputationProfileAnalysis;
export const AppSecReputationProfileAnalysis: typeof import("./appSecReputationProfileAnalysis").AppSecReputationProfileAnalysis = null as any;
utilities.lazyLoad(exports, ["AppSecReputationProfileAnalysis"], () => require("./appSecReputationProfileAnalysis"));

export { AppSecReputationProtectionArgs, AppSecReputationProtectionState } from "./appSecReputationProtection";
export type AppSecReputationProtection = import("./appSecReputationProtection").AppSecReputationProtection;
export const AppSecReputationProtection: typeof import("./appSecReputationProtection").AppSecReputationProtection = null as any;
utilities.lazyLoad(exports, ["AppSecReputationProtection"], () => require("./appSecReputationProtection"));

export { AppSecRuleArgs, AppSecRuleState } from "./appSecRule";
export type AppSecRule = import("./appSecRule").AppSecRule;
export const AppSecRule: typeof import("./appSecRule").AppSecRule = null as any;
utilities.lazyLoad(exports, ["AppSecRule"], () => require("./appSecRule"));

export { AppSecRuleUpgradeArgs, AppSecRuleUpgradeState } from "./appSecRuleUpgrade";
export type AppSecRuleUpgrade = import("./appSecRuleUpgrade").AppSecRuleUpgrade;
export const AppSecRuleUpgrade: typeof import("./appSecRuleUpgrade").AppSecRuleUpgrade = null as any;
utilities.lazyLoad(exports, ["AppSecRuleUpgrade"], () => require("./appSecRuleUpgrade"));

export { AppSecSecurityPolicyArgs, AppSecSecurityPolicyState } from "./appSecSecurityPolicy";
export type AppSecSecurityPolicy = import("./appSecSecurityPolicy").AppSecSecurityPolicy;
export const AppSecSecurityPolicy: typeof import("./appSecSecurityPolicy").AppSecSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["AppSecSecurityPolicy"], () => require("./appSecSecurityPolicy"));

export { AppSecSecurityPolicyRenameArgs, AppSecSecurityPolicyRenameState } from "./appSecSecurityPolicyRename";
export type AppSecSecurityPolicyRename = import("./appSecSecurityPolicyRename").AppSecSecurityPolicyRename;
export const AppSecSecurityPolicyRename: typeof import("./appSecSecurityPolicyRename").AppSecSecurityPolicyRename = null as any;
utilities.lazyLoad(exports, ["AppSecSecurityPolicyRename"], () => require("./appSecSecurityPolicyRename"));

export { AppSecSelectedHostnamesArgs, AppSecSelectedHostnamesState } from "./appSecSelectedHostnames";
export type AppSecSelectedHostnames = import("./appSecSelectedHostnames").AppSecSelectedHostnames;
export const AppSecSelectedHostnames: typeof import("./appSecSelectedHostnames").AppSecSelectedHostnames = null as any;
utilities.lazyLoad(exports, ["AppSecSelectedHostnames"], () => require("./appSecSelectedHostnames"));

export { AppSecSiemSettingsArgs, AppSecSiemSettingsState } from "./appSecSiemSettings";
export type AppSecSiemSettings = import("./appSecSiemSettings").AppSecSiemSettings;
export const AppSecSiemSettings: typeof import("./appSecSiemSettings").AppSecSiemSettings = null as any;
utilities.lazyLoad(exports, ["AppSecSiemSettings"], () => require("./appSecSiemSettings"));

export { AppSecSlowPostArgs, AppSecSlowPostState } from "./appSecSlowPost";
export type AppSecSlowPost = import("./appSecSlowPost").AppSecSlowPost;
export const AppSecSlowPost: typeof import("./appSecSlowPost").AppSecSlowPost = null as any;
utilities.lazyLoad(exports, ["AppSecSlowPost"], () => require("./appSecSlowPost"));

export { AppSecSlowPostProtectionArgs, AppSecSlowPostProtectionState } from "./appSecSlowPostProtection";
export type AppSecSlowPostProtection = import("./appSecSlowPostProtection").AppSecSlowPostProtection;
export const AppSecSlowPostProtection: typeof import("./appSecSlowPostProtection").AppSecSlowPostProtection = null as any;
utilities.lazyLoad(exports, ["AppSecSlowPostProtection"], () => require("./appSecSlowPostProtection"));

export { AppSecThreatIntelArgs, AppSecThreatIntelState } from "./appSecThreatIntel";
export type AppSecThreatIntel = import("./appSecThreatIntel").AppSecThreatIntel;
export const AppSecThreatIntel: typeof import("./appSecThreatIntel").AppSecThreatIntel = null as any;
utilities.lazyLoad(exports, ["AppSecThreatIntel"], () => require("./appSecThreatIntel"));

export { AppSecVersionNodesArgs, AppSecVersionNodesState } from "./appSecVersionNodes";
export type AppSecVersionNodes = import("./appSecVersionNodes").AppSecVersionNodes;
export const AppSecVersionNodes: typeof import("./appSecVersionNodes").AppSecVersionNodes = null as any;
utilities.lazyLoad(exports, ["AppSecVersionNodes"], () => require("./appSecVersionNodes"));

export { AppSecWafModeArgs, AppSecWafModeState } from "./appSecWafMode";
export type AppSecWafMode = import("./appSecWafMode").AppSecWafMode;
export const AppSecWafMode: typeof import("./appSecWafMode").AppSecWafMode = null as any;
utilities.lazyLoad(exports, ["AppSecWafMode"], () => require("./appSecWafMode"));

export { AppSecWafProtectionArgs, AppSecWafProtectionState } from "./appSecWafProtection";
export type AppSecWafProtection = import("./appSecWafProtection").AppSecWafProtection;
export const AppSecWafProtection: typeof import("./appSecWafProtection").AppSecWafProtection = null as any;
utilities.lazyLoad(exports, ["AppSecWafProtection"], () => require("./appSecWafProtection"));

export { AppSecWapSelectedHostnamesArgs, AppSecWapSelectedHostnamesState } from "./appSecWapSelectedHostnames";
export type AppSecWapSelectedHostnames = import("./appSecWapSelectedHostnames").AppSecWapSelectedHostnames;
export const AppSecWapSelectedHostnames: typeof import("./appSecWapSelectedHostnames").AppSecWapSelectedHostnames = null as any;
utilities.lazyLoad(exports, ["AppSecWapSelectedHostnames"], () => require("./appSecWapSelectedHostnames"));

export { AppsecAdvancedSettingsAttackPayloadLoggingArgs, AppsecAdvancedSettingsAttackPayloadLoggingState } from "./appsecAdvancedSettingsAttackPayloadLogging";
export type AppsecAdvancedSettingsAttackPayloadLogging = import("./appsecAdvancedSettingsAttackPayloadLogging").AppsecAdvancedSettingsAttackPayloadLogging;
export const AppsecAdvancedSettingsAttackPayloadLogging: typeof import("./appsecAdvancedSettingsAttackPayloadLogging").AppsecAdvancedSettingsAttackPayloadLogging = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsAttackPayloadLogging"], () => require("./appsecAdvancedSettingsAttackPayloadLogging"));

export { AppsecAdvancedSettingsRequestBodyArgs, AppsecAdvancedSettingsRequestBodyState } from "./appsecAdvancedSettingsRequestBody";
export type AppsecAdvancedSettingsRequestBody = import("./appsecAdvancedSettingsRequestBody").AppsecAdvancedSettingsRequestBody;
export const AppsecAdvancedSettingsRequestBody: typeof import("./appsecAdvancedSettingsRequestBody").AppsecAdvancedSettingsRequestBody = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsRequestBody"], () => require("./appsecAdvancedSettingsRequestBody"));

export { BotmanAkamaiBotCategoryActionArgs, BotmanAkamaiBotCategoryActionState } from "./botmanAkamaiBotCategoryAction";
export type BotmanAkamaiBotCategoryAction = import("./botmanAkamaiBotCategoryAction").BotmanAkamaiBotCategoryAction;
export const BotmanAkamaiBotCategoryAction: typeof import("./botmanAkamaiBotCategoryAction").BotmanAkamaiBotCategoryAction = null as any;
utilities.lazyLoad(exports, ["BotmanAkamaiBotCategoryAction"], () => require("./botmanAkamaiBotCategoryAction"));

export { BotmanBotAnalyticsCookieArgs, BotmanBotAnalyticsCookieState } from "./botmanBotAnalyticsCookie";
export type BotmanBotAnalyticsCookie = import("./botmanBotAnalyticsCookie").BotmanBotAnalyticsCookie;
export const BotmanBotAnalyticsCookie: typeof import("./botmanBotAnalyticsCookie").BotmanBotAnalyticsCookie = null as any;
utilities.lazyLoad(exports, ["BotmanBotAnalyticsCookie"], () => require("./botmanBotAnalyticsCookie"));

export { BotmanBotCategoryExceptionArgs, BotmanBotCategoryExceptionState } from "./botmanBotCategoryException";
export type BotmanBotCategoryException = import("./botmanBotCategoryException").BotmanBotCategoryException;
export const BotmanBotCategoryException: typeof import("./botmanBotCategoryException").BotmanBotCategoryException = null as any;
utilities.lazyLoad(exports, ["BotmanBotCategoryException"], () => require("./botmanBotCategoryException"));

export { BotmanBotDetectionActionArgs, BotmanBotDetectionActionState } from "./botmanBotDetectionAction";
export type BotmanBotDetectionAction = import("./botmanBotDetectionAction").BotmanBotDetectionAction;
export const BotmanBotDetectionAction: typeof import("./botmanBotDetectionAction").BotmanBotDetectionAction = null as any;
utilities.lazyLoad(exports, ["BotmanBotDetectionAction"], () => require("./botmanBotDetectionAction"));

export { BotmanBotManagementSettingsArgs, BotmanBotManagementSettingsState } from "./botmanBotManagementSettings";
export type BotmanBotManagementSettings = import("./botmanBotManagementSettings").BotmanBotManagementSettings;
export const BotmanBotManagementSettings: typeof import("./botmanBotManagementSettings").BotmanBotManagementSettings = null as any;
utilities.lazyLoad(exports, ["BotmanBotManagementSettings"], () => require("./botmanBotManagementSettings"));

export { BotmanChallengeActionArgs, BotmanChallengeActionState } from "./botmanChallengeAction";
export type BotmanChallengeAction = import("./botmanChallengeAction").BotmanChallengeAction;
export const BotmanChallengeAction: typeof import("./botmanChallengeAction").BotmanChallengeAction = null as any;
utilities.lazyLoad(exports, ["BotmanChallengeAction"], () => require("./botmanChallengeAction"));

export { BotmanChallengeInterceptionRulesArgs, BotmanChallengeInterceptionRulesState } from "./botmanChallengeInterceptionRules";
export type BotmanChallengeInterceptionRules = import("./botmanChallengeInterceptionRules").BotmanChallengeInterceptionRules;
export const BotmanChallengeInterceptionRules: typeof import("./botmanChallengeInterceptionRules").BotmanChallengeInterceptionRules = null as any;
utilities.lazyLoad(exports, ["BotmanChallengeInterceptionRules"], () => require("./botmanChallengeInterceptionRules"));

export { BotmanClientSideSecurityArgs, BotmanClientSideSecurityState } from "./botmanClientSideSecurity";
export type BotmanClientSideSecurity = import("./botmanClientSideSecurity").BotmanClientSideSecurity;
export const BotmanClientSideSecurity: typeof import("./botmanClientSideSecurity").BotmanClientSideSecurity = null as any;
utilities.lazyLoad(exports, ["BotmanClientSideSecurity"], () => require("./botmanClientSideSecurity"));

export { BotmanConditionalActionArgs, BotmanConditionalActionState } from "./botmanConditionalAction";
export type BotmanConditionalAction = import("./botmanConditionalAction").BotmanConditionalAction;
export const BotmanConditionalAction: typeof import("./botmanConditionalAction").BotmanConditionalAction = null as any;
utilities.lazyLoad(exports, ["BotmanConditionalAction"], () => require("./botmanConditionalAction"));

export { BotmanCustomBotCategoryArgs, BotmanCustomBotCategoryState } from "./botmanCustomBotCategory";
export type BotmanCustomBotCategory = import("./botmanCustomBotCategory").BotmanCustomBotCategory;
export const BotmanCustomBotCategory: typeof import("./botmanCustomBotCategory").BotmanCustomBotCategory = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategory"], () => require("./botmanCustomBotCategory"));

export { BotmanCustomBotCategoryActionArgs, BotmanCustomBotCategoryActionState } from "./botmanCustomBotCategoryAction";
export type BotmanCustomBotCategoryAction = import("./botmanCustomBotCategoryAction").BotmanCustomBotCategoryAction;
export const BotmanCustomBotCategoryAction: typeof import("./botmanCustomBotCategoryAction").BotmanCustomBotCategoryAction = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategoryAction"], () => require("./botmanCustomBotCategoryAction"));

export { BotmanCustomBotCategorySequenceArgs, BotmanCustomBotCategorySequenceState } from "./botmanCustomBotCategorySequence";
export type BotmanCustomBotCategorySequence = import("./botmanCustomBotCategorySequence").BotmanCustomBotCategorySequence;
export const BotmanCustomBotCategorySequence: typeof import("./botmanCustomBotCategorySequence").BotmanCustomBotCategorySequence = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategorySequence"], () => require("./botmanCustomBotCategorySequence"));

export { BotmanCustomClientArgs, BotmanCustomClientState } from "./botmanCustomClient";
export type BotmanCustomClient = import("./botmanCustomClient").BotmanCustomClient;
export const BotmanCustomClient: typeof import("./botmanCustomClient").BotmanCustomClient = null as any;
utilities.lazyLoad(exports, ["BotmanCustomClient"], () => require("./botmanCustomClient"));

export { BotmanCustomDefinedBotArgs, BotmanCustomDefinedBotState } from "./botmanCustomDefinedBot";
export type BotmanCustomDefinedBot = import("./botmanCustomDefinedBot").BotmanCustomDefinedBot;
export const BotmanCustomDefinedBot: typeof import("./botmanCustomDefinedBot").BotmanCustomDefinedBot = null as any;
utilities.lazyLoad(exports, ["BotmanCustomDefinedBot"], () => require("./botmanCustomDefinedBot"));

export { BotmanCustomDenyActionArgs, BotmanCustomDenyActionState } from "./botmanCustomDenyAction";
export type BotmanCustomDenyAction = import("./botmanCustomDenyAction").BotmanCustomDenyAction;
export const BotmanCustomDenyAction: typeof import("./botmanCustomDenyAction").BotmanCustomDenyAction = null as any;
utilities.lazyLoad(exports, ["BotmanCustomDenyAction"], () => require("./botmanCustomDenyAction"));

export { BotmanJavascriptInjectionArgs, BotmanJavascriptInjectionState } from "./botmanJavascriptInjection";
export type BotmanJavascriptInjection = import("./botmanJavascriptInjection").BotmanJavascriptInjection;
export const BotmanJavascriptInjection: typeof import("./botmanJavascriptInjection").BotmanJavascriptInjection = null as any;
utilities.lazyLoad(exports, ["BotmanJavascriptInjection"], () => require("./botmanJavascriptInjection"));

export { BotmanRecategorizedAkamaiDefinedBotArgs, BotmanRecategorizedAkamaiDefinedBotState } from "./botmanRecategorizedAkamaiDefinedBot";
export type BotmanRecategorizedAkamaiDefinedBot = import("./botmanRecategorizedAkamaiDefinedBot").BotmanRecategorizedAkamaiDefinedBot;
export const BotmanRecategorizedAkamaiDefinedBot: typeof import("./botmanRecategorizedAkamaiDefinedBot").BotmanRecategorizedAkamaiDefinedBot = null as any;
utilities.lazyLoad(exports, ["BotmanRecategorizedAkamaiDefinedBot"], () => require("./botmanRecategorizedAkamaiDefinedBot"));

export { BotmanServeAlternateActionArgs, BotmanServeAlternateActionState } from "./botmanServeAlternateAction";
export type BotmanServeAlternateAction = import("./botmanServeAlternateAction").BotmanServeAlternateAction;
export const BotmanServeAlternateAction: typeof import("./botmanServeAlternateAction").BotmanServeAlternateAction = null as any;
utilities.lazyLoad(exports, ["BotmanServeAlternateAction"], () => require("./botmanServeAlternateAction"));

export { BotmanTransactionalEndpointArgs, BotmanTransactionalEndpointState } from "./botmanTransactionalEndpoint";
export type BotmanTransactionalEndpoint = import("./botmanTransactionalEndpoint").BotmanTransactionalEndpoint;
export const BotmanTransactionalEndpoint: typeof import("./botmanTransactionalEndpoint").BotmanTransactionalEndpoint = null as any;
utilities.lazyLoad(exports, ["BotmanTransactionalEndpoint"], () => require("./botmanTransactionalEndpoint"));

export { BotmanTransactionalEndpointProtectionArgs, BotmanTransactionalEndpointProtectionState } from "./botmanTransactionalEndpointProtection";
export type BotmanTransactionalEndpointProtection = import("./botmanTransactionalEndpointProtection").BotmanTransactionalEndpointProtection;
export const BotmanTransactionalEndpointProtection: typeof import("./botmanTransactionalEndpointProtection").BotmanTransactionalEndpointProtection = null as any;
utilities.lazyLoad(exports, ["BotmanTransactionalEndpointProtection"], () => require("./botmanTransactionalEndpointProtection"));

export { CloudletsApplicationLoadBalancerArgs, CloudletsApplicationLoadBalancerState } from "./cloudletsApplicationLoadBalancer";
export type CloudletsApplicationLoadBalancer = import("./cloudletsApplicationLoadBalancer").CloudletsApplicationLoadBalancer;
export const CloudletsApplicationLoadBalancer: typeof import("./cloudletsApplicationLoadBalancer").CloudletsApplicationLoadBalancer = null as any;
utilities.lazyLoad(exports, ["CloudletsApplicationLoadBalancer"], () => require("./cloudletsApplicationLoadBalancer"));

export { CloudletsApplicationLoadBalancerActivationArgs, CloudletsApplicationLoadBalancerActivationState } from "./cloudletsApplicationLoadBalancerActivation";
export type CloudletsApplicationLoadBalancerActivation = import("./cloudletsApplicationLoadBalancerActivation").CloudletsApplicationLoadBalancerActivation;
export const CloudletsApplicationLoadBalancerActivation: typeof import("./cloudletsApplicationLoadBalancerActivation").CloudletsApplicationLoadBalancerActivation = null as any;
utilities.lazyLoad(exports, ["CloudletsApplicationLoadBalancerActivation"], () => require("./cloudletsApplicationLoadBalancerActivation"));

export { CloudletsPolicyArgs, CloudletsPolicyState } from "./cloudletsPolicy";
export type CloudletsPolicy = import("./cloudletsPolicy").CloudletsPolicy;
export const CloudletsPolicy: typeof import("./cloudletsPolicy").CloudletsPolicy = null as any;
utilities.lazyLoad(exports, ["CloudletsPolicy"], () => require("./cloudletsPolicy"));

export { CloudletsPolicyActivationArgs, CloudletsPolicyActivationState } from "./cloudletsPolicyActivation";
export type CloudletsPolicyActivation = import("./cloudletsPolicyActivation").CloudletsPolicyActivation;
export const CloudletsPolicyActivation: typeof import("./cloudletsPolicyActivation").CloudletsPolicyActivation = null as any;
utilities.lazyLoad(exports, ["CloudletsPolicyActivation"], () => require("./cloudletsPolicyActivation"));

export { CpCodeArgs, CpCodeState } from "./cpCode";
export type CpCode = import("./cpCode").CpCode;
export const CpCode: typeof import("./cpCode").CpCode = null as any;
utilities.lazyLoad(exports, ["CpCode"], () => require("./cpCode"));

export { CpsDvEnrollmentArgs, CpsDvEnrollmentState } from "./cpsDvEnrollment";
export type CpsDvEnrollment = import("./cpsDvEnrollment").CpsDvEnrollment;
export const CpsDvEnrollment: typeof import("./cpsDvEnrollment").CpsDvEnrollment = null as any;
utilities.lazyLoad(exports, ["CpsDvEnrollment"], () => require("./cpsDvEnrollment"));

export { CpsDvValidationArgs, CpsDvValidationState } from "./cpsDvValidation";
export type CpsDvValidation = import("./cpsDvValidation").CpsDvValidation;
export const CpsDvValidation: typeof import("./cpsDvValidation").CpsDvValidation = null as any;
utilities.lazyLoad(exports, ["CpsDvValidation"], () => require("./cpsDvValidation"));

export { CpsThirdPartyEnrollmentArgs, CpsThirdPartyEnrollmentState } from "./cpsThirdPartyEnrollment";
export type CpsThirdPartyEnrollment = import("./cpsThirdPartyEnrollment").CpsThirdPartyEnrollment;
export const CpsThirdPartyEnrollment: typeof import("./cpsThirdPartyEnrollment").CpsThirdPartyEnrollment = null as any;
utilities.lazyLoad(exports, ["CpsThirdPartyEnrollment"], () => require("./cpsThirdPartyEnrollment"));

export { CpsUploadCertificateArgs, CpsUploadCertificateState } from "./cpsUploadCertificate";
export type CpsUploadCertificate = import("./cpsUploadCertificate").CpsUploadCertificate;
export const CpsUploadCertificate: typeof import("./cpsUploadCertificate").CpsUploadCertificate = null as any;
utilities.lazyLoad(exports, ["CpsUploadCertificate"], () => require("./cpsUploadCertificate"));

export { DatastreamArgs, DatastreamState } from "./datastream";
export type Datastream = import("./datastream").Datastream;
export const Datastream: typeof import("./datastream").Datastream = null as any;
utilities.lazyLoad(exports, ["Datastream"], () => require("./datastream"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { EdgeHostNameArgs, EdgeHostNameState } from "./edgeHostName";
export type EdgeHostName = import("./edgeHostName").EdgeHostName;
export const EdgeHostName: typeof import("./edgeHostName").EdgeHostName = null as any;
utilities.lazyLoad(exports, ["EdgeHostName"], () => require("./edgeHostName"));

export { EdgeKvArgs, EdgeKvState } from "./edgeKv";
export type EdgeKv = import("./edgeKv").EdgeKv;
export const EdgeKv: typeof import("./edgeKv").EdgeKv = null as any;
utilities.lazyLoad(exports, ["EdgeKv"], () => require("./edgeKv"));

export { EdgeWorkerArgs, EdgeWorkerState } from "./edgeWorker";
export type EdgeWorker = import("./edgeWorker").EdgeWorker;
export const EdgeWorker: typeof import("./edgeWorker").EdgeWorker = null as any;
utilities.lazyLoad(exports, ["EdgeWorker"], () => require("./edgeWorker"));

export { EdgeWorkersActivationArgs, EdgeWorkersActivationState } from "./edgeWorkersActivation";
export type EdgeWorkersActivation = import("./edgeWorkersActivation").EdgeWorkersActivation;
export const EdgeWorkersActivation: typeof import("./edgeWorkersActivation").EdgeWorkersActivation = null as any;
utilities.lazyLoad(exports, ["EdgeWorkersActivation"], () => require("./edgeWorkersActivation"));

export { EdgekvGroupItemsArgs, EdgekvGroupItemsState } from "./edgekvGroupItems";
export type EdgekvGroupItems = import("./edgekvGroupItems").EdgekvGroupItems;
export const EdgekvGroupItems: typeof import("./edgekvGroupItems").EdgekvGroupItems = null as any;
utilities.lazyLoad(exports, ["EdgekvGroupItems"], () => require("./edgekvGroupItems"));

export { GetAppSecAdvancedSettingsEvasivePathMatchArgs, GetAppSecAdvancedSettingsEvasivePathMatchResult, GetAppSecAdvancedSettingsEvasivePathMatchOutputArgs } from "./getAppSecAdvancedSettingsEvasivePathMatch";
export const getAppSecAdvancedSettingsEvasivePathMatch: typeof import("./getAppSecAdvancedSettingsEvasivePathMatch").getAppSecAdvancedSettingsEvasivePathMatch = null as any;
export const getAppSecAdvancedSettingsEvasivePathMatchOutput: typeof import("./getAppSecAdvancedSettingsEvasivePathMatch").getAppSecAdvancedSettingsEvasivePathMatchOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecAdvancedSettingsEvasivePathMatch","getAppSecAdvancedSettingsEvasivePathMatchOutput"], () => require("./getAppSecAdvancedSettingsEvasivePathMatch"));

export { GetAppSecAdvancedSettingsLoggingArgs, GetAppSecAdvancedSettingsLoggingResult, GetAppSecAdvancedSettingsLoggingOutputArgs } from "./getAppSecAdvancedSettingsLogging";
export const getAppSecAdvancedSettingsLogging: typeof import("./getAppSecAdvancedSettingsLogging").getAppSecAdvancedSettingsLogging = null as any;
export const getAppSecAdvancedSettingsLoggingOutput: typeof import("./getAppSecAdvancedSettingsLogging").getAppSecAdvancedSettingsLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecAdvancedSettingsLogging","getAppSecAdvancedSettingsLoggingOutput"], () => require("./getAppSecAdvancedSettingsLogging"));

export { GetAppSecAdvancedSettingsPragmaHeaderArgs, GetAppSecAdvancedSettingsPragmaHeaderResult, GetAppSecAdvancedSettingsPragmaHeaderOutputArgs } from "./getAppSecAdvancedSettingsPragmaHeader";
export const getAppSecAdvancedSettingsPragmaHeader: typeof import("./getAppSecAdvancedSettingsPragmaHeader").getAppSecAdvancedSettingsPragmaHeader = null as any;
export const getAppSecAdvancedSettingsPragmaHeaderOutput: typeof import("./getAppSecAdvancedSettingsPragmaHeader").getAppSecAdvancedSettingsPragmaHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecAdvancedSettingsPragmaHeader","getAppSecAdvancedSettingsPragmaHeaderOutput"], () => require("./getAppSecAdvancedSettingsPragmaHeader"));

export { GetAppSecAdvancedSettingsPrefetchArgs, GetAppSecAdvancedSettingsPrefetchResult, GetAppSecAdvancedSettingsPrefetchOutputArgs } from "./getAppSecAdvancedSettingsPrefetch";
export const getAppSecAdvancedSettingsPrefetch: typeof import("./getAppSecAdvancedSettingsPrefetch").getAppSecAdvancedSettingsPrefetch = null as any;
export const getAppSecAdvancedSettingsPrefetchOutput: typeof import("./getAppSecAdvancedSettingsPrefetch").getAppSecAdvancedSettingsPrefetchOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecAdvancedSettingsPrefetch","getAppSecAdvancedSettingsPrefetchOutput"], () => require("./getAppSecAdvancedSettingsPrefetch"));

export { GetAppSecApiEndpointsArgs, GetAppSecApiEndpointsResult, GetAppSecApiEndpointsOutputArgs } from "./getAppSecApiEndpoints";
export const getAppSecApiEndpoints: typeof import("./getAppSecApiEndpoints").getAppSecApiEndpoints = null as any;
export const getAppSecApiEndpointsOutput: typeof import("./getAppSecApiEndpoints").getAppSecApiEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecApiEndpoints","getAppSecApiEndpointsOutput"], () => require("./getAppSecApiEndpoints"));

export { GetAppSecApiRequestConstraintsArgs, GetAppSecApiRequestConstraintsResult, GetAppSecApiRequestConstraintsOutputArgs } from "./getAppSecApiRequestConstraints";
export const getAppSecApiRequestConstraints: typeof import("./getAppSecApiRequestConstraints").getAppSecApiRequestConstraints = null as any;
export const getAppSecApiRequestConstraintsOutput: typeof import("./getAppSecApiRequestConstraints").getAppSecApiRequestConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecApiRequestConstraints","getAppSecApiRequestConstraintsOutput"], () => require("./getAppSecApiRequestConstraints"));

export { GetAppSecAttackGroupsArgs, GetAppSecAttackGroupsResult, GetAppSecAttackGroupsOutputArgs } from "./getAppSecAttackGroups";
export const getAppSecAttackGroups: typeof import("./getAppSecAttackGroups").getAppSecAttackGroups = null as any;
export const getAppSecAttackGroupsOutput: typeof import("./getAppSecAttackGroups").getAppSecAttackGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecAttackGroups","getAppSecAttackGroupsOutput"], () => require("./getAppSecAttackGroups"));

export { GetAppSecBypassNetworkListsArgs, GetAppSecBypassNetworkListsResult, GetAppSecBypassNetworkListsOutputArgs } from "./getAppSecBypassNetworkLists";
export const getAppSecBypassNetworkLists: typeof import("./getAppSecBypassNetworkLists").getAppSecBypassNetworkLists = null as any;
export const getAppSecBypassNetworkListsOutput: typeof import("./getAppSecBypassNetworkLists").getAppSecBypassNetworkListsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecBypassNetworkLists","getAppSecBypassNetworkListsOutput"], () => require("./getAppSecBypassNetworkLists"));

export { GetAppSecConfigurationArgs, GetAppSecConfigurationResult, GetAppSecConfigurationOutputArgs } from "./getAppSecConfiguration";
export const getAppSecConfiguration: typeof import("./getAppSecConfiguration").getAppSecConfiguration = null as any;
export const getAppSecConfigurationOutput: typeof import("./getAppSecConfiguration").getAppSecConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecConfiguration","getAppSecConfigurationOutput"], () => require("./getAppSecConfiguration"));

export { GetAppSecConfigurationVersionArgs, GetAppSecConfigurationVersionResult, GetAppSecConfigurationVersionOutputArgs } from "./getAppSecConfigurationVersion";
export const getAppSecConfigurationVersion: typeof import("./getAppSecConfigurationVersion").getAppSecConfigurationVersion = null as any;
export const getAppSecConfigurationVersionOutput: typeof import("./getAppSecConfigurationVersion").getAppSecConfigurationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecConfigurationVersion","getAppSecConfigurationVersionOutput"], () => require("./getAppSecConfigurationVersion"));

export { GetAppSecContractsGroupsArgs, GetAppSecContractsGroupsResult, GetAppSecContractsGroupsOutputArgs } from "./getAppSecContractsGroups";
export const getAppSecContractsGroups: typeof import("./getAppSecContractsGroups").getAppSecContractsGroups = null as any;
export const getAppSecContractsGroupsOutput: typeof import("./getAppSecContractsGroups").getAppSecContractsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecContractsGroups","getAppSecContractsGroupsOutput"], () => require("./getAppSecContractsGroups"));

export { GetAppSecCustomDenyArgs, GetAppSecCustomDenyResult, GetAppSecCustomDenyOutputArgs } from "./getAppSecCustomDeny";
export const getAppSecCustomDeny: typeof import("./getAppSecCustomDeny").getAppSecCustomDeny = null as any;
export const getAppSecCustomDenyOutput: typeof import("./getAppSecCustomDeny").getAppSecCustomDenyOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecCustomDeny","getAppSecCustomDenyOutput"], () => require("./getAppSecCustomDeny"));

export { GetAppSecCustomRuleActionsArgs, GetAppSecCustomRuleActionsResult, GetAppSecCustomRuleActionsOutputArgs } from "./getAppSecCustomRuleActions";
export const getAppSecCustomRuleActions: typeof import("./getAppSecCustomRuleActions").getAppSecCustomRuleActions = null as any;
export const getAppSecCustomRuleActionsOutput: typeof import("./getAppSecCustomRuleActions").getAppSecCustomRuleActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecCustomRuleActions","getAppSecCustomRuleActionsOutput"], () => require("./getAppSecCustomRuleActions"));

export { GetAppSecCustomRulesArgs, GetAppSecCustomRulesResult, GetAppSecCustomRulesOutputArgs } from "./getAppSecCustomRules";
export const getAppSecCustomRules: typeof import("./getAppSecCustomRules").getAppSecCustomRules = null as any;
export const getAppSecCustomRulesOutput: typeof import("./getAppSecCustomRules").getAppSecCustomRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecCustomRules","getAppSecCustomRulesOutput"], () => require("./getAppSecCustomRules"));

export { GetAppSecEvalArgs, GetAppSecEvalResult, GetAppSecEvalOutputArgs } from "./getAppSecEval";
export const getAppSecEval: typeof import("./getAppSecEval").getAppSecEval = null as any;
export const getAppSecEvalOutput: typeof import("./getAppSecEval").getAppSecEvalOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecEval","getAppSecEvalOutput"], () => require("./getAppSecEval"));

export { GetAppSecEvalGroupsArgs, GetAppSecEvalGroupsResult, GetAppSecEvalGroupsOutputArgs } from "./getAppSecEvalGroups";
export const getAppSecEvalGroups: typeof import("./getAppSecEvalGroups").getAppSecEvalGroups = null as any;
export const getAppSecEvalGroupsOutput: typeof import("./getAppSecEvalGroups").getAppSecEvalGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecEvalGroups","getAppSecEvalGroupsOutput"], () => require("./getAppSecEvalGroups"));

export { GetAppSecEvalPenaltyBoxArgs, GetAppSecEvalPenaltyBoxResult, GetAppSecEvalPenaltyBoxOutputArgs } from "./getAppSecEvalPenaltyBox";
export const getAppSecEvalPenaltyBox: typeof import("./getAppSecEvalPenaltyBox").getAppSecEvalPenaltyBox = null as any;
export const getAppSecEvalPenaltyBoxOutput: typeof import("./getAppSecEvalPenaltyBox").getAppSecEvalPenaltyBoxOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecEvalPenaltyBox","getAppSecEvalPenaltyBoxOutput"], () => require("./getAppSecEvalPenaltyBox"));

export { GetAppSecEvalRulesArgs, GetAppSecEvalRulesResult, GetAppSecEvalRulesOutputArgs } from "./getAppSecEvalRules";
export const getAppSecEvalRules: typeof import("./getAppSecEvalRules").getAppSecEvalRules = null as any;
export const getAppSecEvalRulesOutput: typeof import("./getAppSecEvalRules").getAppSecEvalRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecEvalRules","getAppSecEvalRulesOutput"], () => require("./getAppSecEvalRules"));

export { GetAppSecExportConfigurationArgs, GetAppSecExportConfigurationResult, GetAppSecExportConfigurationOutputArgs } from "./getAppSecExportConfiguration";
export const getAppSecExportConfiguration: typeof import("./getAppSecExportConfiguration").getAppSecExportConfiguration = null as any;
export const getAppSecExportConfigurationOutput: typeof import("./getAppSecExportConfiguration").getAppSecExportConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecExportConfiguration","getAppSecExportConfigurationOutput"], () => require("./getAppSecExportConfiguration"));

export { GetAppSecFailoverHostnamesArgs, GetAppSecFailoverHostnamesResult, GetAppSecFailoverHostnamesOutputArgs } from "./getAppSecFailoverHostnames";
export const getAppSecFailoverHostnames: typeof import("./getAppSecFailoverHostnames").getAppSecFailoverHostnames = null as any;
export const getAppSecFailoverHostnamesOutput: typeof import("./getAppSecFailoverHostnames").getAppSecFailoverHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecFailoverHostnames","getAppSecFailoverHostnamesOutput"], () => require("./getAppSecFailoverHostnames"));

export { GetAppSecHostnameCoverageResult } from "./getAppSecHostnameCoverage";
export const getAppSecHostnameCoverage: typeof import("./getAppSecHostnameCoverage").getAppSecHostnameCoverage = null as any;
utilities.lazyLoad(exports, ["getAppSecHostnameCoverage"], () => require("./getAppSecHostnameCoverage"));

export { GetAppSecHostnameCoverageMatchTargetsArgs, GetAppSecHostnameCoverageMatchTargetsResult, GetAppSecHostnameCoverageMatchTargetsOutputArgs } from "./getAppSecHostnameCoverageMatchTargets";
export const getAppSecHostnameCoverageMatchTargets: typeof import("./getAppSecHostnameCoverageMatchTargets").getAppSecHostnameCoverageMatchTargets = null as any;
export const getAppSecHostnameCoverageMatchTargetsOutput: typeof import("./getAppSecHostnameCoverageMatchTargets").getAppSecHostnameCoverageMatchTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecHostnameCoverageMatchTargets","getAppSecHostnameCoverageMatchTargetsOutput"], () => require("./getAppSecHostnameCoverageMatchTargets"));

export { GetAppSecHostnameCoverageOverlappingArgs, GetAppSecHostnameCoverageOverlappingResult, GetAppSecHostnameCoverageOverlappingOutputArgs } from "./getAppSecHostnameCoverageOverlapping";
export const getAppSecHostnameCoverageOverlapping: typeof import("./getAppSecHostnameCoverageOverlapping").getAppSecHostnameCoverageOverlapping = null as any;
export const getAppSecHostnameCoverageOverlappingOutput: typeof import("./getAppSecHostnameCoverageOverlapping").getAppSecHostnameCoverageOverlappingOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecHostnameCoverageOverlapping","getAppSecHostnameCoverageOverlappingOutput"], () => require("./getAppSecHostnameCoverageOverlapping"));

export { GetAppSecIPGeoArgs, GetAppSecIPGeoResult, GetAppSecIPGeoOutputArgs } from "./getAppSecIPGeo";
export const getAppSecIPGeo: typeof import("./getAppSecIPGeo").getAppSecIPGeo = null as any;
export const getAppSecIPGeoOutput: typeof import("./getAppSecIPGeo").getAppSecIPGeoOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecIPGeo","getAppSecIPGeoOutput"], () => require("./getAppSecIPGeo"));

export { GetAppSecMalwareContentTypesArgs, GetAppSecMalwareContentTypesResult, GetAppSecMalwareContentTypesOutputArgs } from "./getAppSecMalwareContentTypes";
export const getAppSecMalwareContentTypes: typeof import("./getAppSecMalwareContentTypes").getAppSecMalwareContentTypes = null as any;
export const getAppSecMalwareContentTypesOutput: typeof import("./getAppSecMalwareContentTypes").getAppSecMalwareContentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecMalwareContentTypes","getAppSecMalwareContentTypesOutput"], () => require("./getAppSecMalwareContentTypes"));

export { GetAppSecMalwarePoliciesArgs, GetAppSecMalwarePoliciesResult, GetAppSecMalwarePoliciesOutputArgs } from "./getAppSecMalwarePolicies";
export const getAppSecMalwarePolicies: typeof import("./getAppSecMalwarePolicies").getAppSecMalwarePolicies = null as any;
export const getAppSecMalwarePoliciesOutput: typeof import("./getAppSecMalwarePolicies").getAppSecMalwarePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecMalwarePolicies","getAppSecMalwarePoliciesOutput"], () => require("./getAppSecMalwarePolicies"));

export { GetAppSecMalwarePolicyActionsArgs, GetAppSecMalwarePolicyActionsResult, GetAppSecMalwarePolicyActionsOutputArgs } from "./getAppSecMalwarePolicyActions";
export const getAppSecMalwarePolicyActions: typeof import("./getAppSecMalwarePolicyActions").getAppSecMalwarePolicyActions = null as any;
export const getAppSecMalwarePolicyActionsOutput: typeof import("./getAppSecMalwarePolicyActions").getAppSecMalwarePolicyActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecMalwarePolicyActions","getAppSecMalwarePolicyActionsOutput"], () => require("./getAppSecMalwarePolicyActions"));

export { GetAppSecMatchTargetsArgs, GetAppSecMatchTargetsResult, GetAppSecMatchTargetsOutputArgs } from "./getAppSecMatchTargets";
export const getAppSecMatchTargets: typeof import("./getAppSecMatchTargets").getAppSecMatchTargets = null as any;
export const getAppSecMatchTargetsOutput: typeof import("./getAppSecMatchTargets").getAppSecMatchTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecMatchTargets","getAppSecMatchTargetsOutput"], () => require("./getAppSecMatchTargets"));

export { GetAppSecPenaltyBoxArgs, GetAppSecPenaltyBoxResult, GetAppSecPenaltyBoxOutputArgs } from "./getAppSecPenaltyBox";
export const getAppSecPenaltyBox: typeof import("./getAppSecPenaltyBox").getAppSecPenaltyBox = null as any;
export const getAppSecPenaltyBoxOutput: typeof import("./getAppSecPenaltyBox").getAppSecPenaltyBoxOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecPenaltyBox","getAppSecPenaltyBoxOutput"], () => require("./getAppSecPenaltyBox"));

export { GetAppSecRatePoliciesArgs, GetAppSecRatePoliciesResult, GetAppSecRatePoliciesOutputArgs } from "./getAppSecRatePolicies";
export const getAppSecRatePolicies: typeof import("./getAppSecRatePolicies").getAppSecRatePolicies = null as any;
export const getAppSecRatePoliciesOutput: typeof import("./getAppSecRatePolicies").getAppSecRatePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecRatePolicies","getAppSecRatePoliciesOutput"], () => require("./getAppSecRatePolicies"));

export { GetAppSecRatePolicyActionsArgs, GetAppSecRatePolicyActionsResult, GetAppSecRatePolicyActionsOutputArgs } from "./getAppSecRatePolicyActions";
export const getAppSecRatePolicyActions: typeof import("./getAppSecRatePolicyActions").getAppSecRatePolicyActions = null as any;
export const getAppSecRatePolicyActionsOutput: typeof import("./getAppSecRatePolicyActions").getAppSecRatePolicyActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecRatePolicyActions","getAppSecRatePolicyActionsOutput"], () => require("./getAppSecRatePolicyActions"));

export { GetAppSecReputationProfileActionsArgs, GetAppSecReputationProfileActionsResult, GetAppSecReputationProfileActionsOutputArgs } from "./getAppSecReputationProfileActions";
export const getAppSecReputationProfileActions: typeof import("./getAppSecReputationProfileActions").getAppSecReputationProfileActions = null as any;
export const getAppSecReputationProfileActionsOutput: typeof import("./getAppSecReputationProfileActions").getAppSecReputationProfileActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecReputationProfileActions","getAppSecReputationProfileActionsOutput"], () => require("./getAppSecReputationProfileActions"));

export { GetAppSecReputationProfileAnalysisArgs, GetAppSecReputationProfileAnalysisResult, GetAppSecReputationProfileAnalysisOutputArgs } from "./getAppSecReputationProfileAnalysis";
export const getAppSecReputationProfileAnalysis: typeof import("./getAppSecReputationProfileAnalysis").getAppSecReputationProfileAnalysis = null as any;
export const getAppSecReputationProfileAnalysisOutput: typeof import("./getAppSecReputationProfileAnalysis").getAppSecReputationProfileAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecReputationProfileAnalysis","getAppSecReputationProfileAnalysisOutput"], () => require("./getAppSecReputationProfileAnalysis"));

export { GetAppSecReputationProfilesArgs, GetAppSecReputationProfilesResult, GetAppSecReputationProfilesOutputArgs } from "./getAppSecReputationProfiles";
export const getAppSecReputationProfiles: typeof import("./getAppSecReputationProfiles").getAppSecReputationProfiles = null as any;
export const getAppSecReputationProfilesOutput: typeof import("./getAppSecReputationProfiles").getAppSecReputationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecReputationProfiles","getAppSecReputationProfilesOutput"], () => require("./getAppSecReputationProfiles"));

export { GetAppSecRuleUpgradeDetailsArgs, GetAppSecRuleUpgradeDetailsResult, GetAppSecRuleUpgradeDetailsOutputArgs } from "./getAppSecRuleUpgradeDetails";
export const getAppSecRuleUpgradeDetails: typeof import("./getAppSecRuleUpgradeDetails").getAppSecRuleUpgradeDetails = null as any;
export const getAppSecRuleUpgradeDetailsOutput: typeof import("./getAppSecRuleUpgradeDetails").getAppSecRuleUpgradeDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecRuleUpgradeDetails","getAppSecRuleUpgradeDetailsOutput"], () => require("./getAppSecRuleUpgradeDetails"));

export { GetAppSecRulesArgs, GetAppSecRulesResult, GetAppSecRulesOutputArgs } from "./getAppSecRules";
export const getAppSecRules: typeof import("./getAppSecRules").getAppSecRules = null as any;
export const getAppSecRulesOutput: typeof import("./getAppSecRules").getAppSecRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecRules","getAppSecRulesOutput"], () => require("./getAppSecRules"));

export { GetAppSecSecurityPolicyArgs, GetAppSecSecurityPolicyResult, GetAppSecSecurityPolicyOutputArgs } from "./getAppSecSecurityPolicy";
export const getAppSecSecurityPolicy: typeof import("./getAppSecSecurityPolicy").getAppSecSecurityPolicy = null as any;
export const getAppSecSecurityPolicyOutput: typeof import("./getAppSecSecurityPolicy").getAppSecSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSecurityPolicy","getAppSecSecurityPolicyOutput"], () => require("./getAppSecSecurityPolicy"));

export { GetAppSecSecurityPolicyProtectionsArgs, GetAppSecSecurityPolicyProtectionsResult, GetAppSecSecurityPolicyProtectionsOutputArgs } from "./getAppSecSecurityPolicyProtections";
export const getAppSecSecurityPolicyProtections: typeof import("./getAppSecSecurityPolicyProtections").getAppSecSecurityPolicyProtections = null as any;
export const getAppSecSecurityPolicyProtectionsOutput: typeof import("./getAppSecSecurityPolicyProtections").getAppSecSecurityPolicyProtectionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSecurityPolicyProtections","getAppSecSecurityPolicyProtectionsOutput"], () => require("./getAppSecSecurityPolicyProtections"));

export { GetAppSecSelectableHostnamesArgs, GetAppSecSelectableHostnamesResult, GetAppSecSelectableHostnamesOutputArgs } from "./getAppSecSelectableHostnames";
export const getAppSecSelectableHostnames: typeof import("./getAppSecSelectableHostnames").getAppSecSelectableHostnames = null as any;
export const getAppSecSelectableHostnamesOutput: typeof import("./getAppSecSelectableHostnames").getAppSecSelectableHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSelectableHostnames","getAppSecSelectableHostnamesOutput"], () => require("./getAppSecSelectableHostnames"));

export { GetAppSecSelectedHostnamesArgs, GetAppSecSelectedHostnamesResult, GetAppSecSelectedHostnamesOutputArgs } from "./getAppSecSelectedHostnames";
export const getAppSecSelectedHostnames: typeof import("./getAppSecSelectedHostnames").getAppSecSelectedHostnames = null as any;
export const getAppSecSelectedHostnamesOutput: typeof import("./getAppSecSelectedHostnames").getAppSecSelectedHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSelectedHostnames","getAppSecSelectedHostnamesOutput"], () => require("./getAppSecSelectedHostnames"));

export { GetAppSecSiemDefinitionsArgs, GetAppSecSiemDefinitionsResult, GetAppSecSiemDefinitionsOutputArgs } from "./getAppSecSiemDefinitions";
export const getAppSecSiemDefinitions: typeof import("./getAppSecSiemDefinitions").getAppSecSiemDefinitions = null as any;
export const getAppSecSiemDefinitionsOutput: typeof import("./getAppSecSiemDefinitions").getAppSecSiemDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSiemDefinitions","getAppSecSiemDefinitionsOutput"], () => require("./getAppSecSiemDefinitions"));

export { GetAppSecSiemSettingsArgs, GetAppSecSiemSettingsResult, GetAppSecSiemSettingsOutputArgs } from "./getAppSecSiemSettings";
export const getAppSecSiemSettings: typeof import("./getAppSecSiemSettings").getAppSecSiemSettings = null as any;
export const getAppSecSiemSettingsOutput: typeof import("./getAppSecSiemSettings").getAppSecSiemSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSiemSettings","getAppSecSiemSettingsOutput"], () => require("./getAppSecSiemSettings"));

export { GetAppSecSlowPostArgs, GetAppSecSlowPostResult, GetAppSecSlowPostOutputArgs } from "./getAppSecSlowPost";
export const getAppSecSlowPost: typeof import("./getAppSecSlowPost").getAppSecSlowPost = null as any;
export const getAppSecSlowPostOutput: typeof import("./getAppSecSlowPost").getAppSecSlowPostOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecSlowPost","getAppSecSlowPostOutput"], () => require("./getAppSecSlowPost"));

export { GetAppSecThreatIntelArgs, GetAppSecThreatIntelResult, GetAppSecThreatIntelOutputArgs } from "./getAppSecThreatIntel";
export const getAppSecThreatIntel: typeof import("./getAppSecThreatIntel").getAppSecThreatIntel = null as any;
export const getAppSecThreatIntelOutput: typeof import("./getAppSecThreatIntel").getAppSecThreatIntelOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecThreatIntel","getAppSecThreatIntelOutput"], () => require("./getAppSecThreatIntel"));

export { GetAppSecTuningRecommendationsArgs, GetAppSecTuningRecommendationsResult, GetAppSecTuningRecommendationsOutputArgs } from "./getAppSecTuningRecommendations";
export const getAppSecTuningRecommendations: typeof import("./getAppSecTuningRecommendations").getAppSecTuningRecommendations = null as any;
export const getAppSecTuningRecommendationsOutput: typeof import("./getAppSecTuningRecommendations").getAppSecTuningRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecTuningRecommendations","getAppSecTuningRecommendationsOutput"], () => require("./getAppSecTuningRecommendations"));

export { GetAppSecVersionNotesArgs, GetAppSecVersionNotesResult, GetAppSecVersionNotesOutputArgs } from "./getAppSecVersionNotes";
export const getAppSecVersionNotes: typeof import("./getAppSecVersionNotes").getAppSecVersionNotes = null as any;
export const getAppSecVersionNotesOutput: typeof import("./getAppSecVersionNotes").getAppSecVersionNotesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecVersionNotes","getAppSecVersionNotesOutput"], () => require("./getAppSecVersionNotes"));

export { GetAppSecWafModeArgs, GetAppSecWafModeResult, GetAppSecWafModeOutputArgs } from "./getAppSecWafMode";
export const getAppSecWafMode: typeof import("./getAppSecWafMode").getAppSecWafMode = null as any;
export const getAppSecWafModeOutput: typeof import("./getAppSecWafMode").getAppSecWafModeOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecWafMode","getAppSecWafModeOutput"], () => require("./getAppSecWafMode"));

export { GetAppSecWapSelectedHostnamesArgs, GetAppSecWapSelectedHostnamesResult, GetAppSecWapSelectedHostnamesOutputArgs } from "./getAppSecWapSelectedHostnames";
export const getAppSecWapSelectedHostnames: typeof import("./getAppSecWapSelectedHostnames").getAppSecWapSelectedHostnames = null as any;
export const getAppSecWapSelectedHostnamesOutput: typeof import("./getAppSecWapSelectedHostnames").getAppSecWapSelectedHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppSecWapSelectedHostnames","getAppSecWapSelectedHostnamesOutput"], () => require("./getAppSecWapSelectedHostnames"));

export { GetAppsecAdvancedSettingsAttackPayloadLoggingArgs, GetAppsecAdvancedSettingsAttackPayloadLoggingResult, GetAppsecAdvancedSettingsAttackPayloadLoggingOutputArgs } from "./getAppsecAdvancedSettingsAttackPayloadLogging";
export const getAppsecAdvancedSettingsAttackPayloadLogging: typeof import("./getAppsecAdvancedSettingsAttackPayloadLogging").getAppsecAdvancedSettingsAttackPayloadLogging = null as any;
export const getAppsecAdvancedSettingsAttackPayloadLoggingOutput: typeof import("./getAppsecAdvancedSettingsAttackPayloadLogging").getAppsecAdvancedSettingsAttackPayloadLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsAttackPayloadLogging","getAppsecAdvancedSettingsAttackPayloadLoggingOutput"], () => require("./getAppsecAdvancedSettingsAttackPayloadLogging"));

export { GetAppsecAdvancedSettingsRequestBodyArgs, GetAppsecAdvancedSettingsRequestBodyResult, GetAppsecAdvancedSettingsRequestBodyOutputArgs } from "./getAppsecAdvancedSettingsRequestBody";
export const getAppsecAdvancedSettingsRequestBody: typeof import("./getAppsecAdvancedSettingsRequestBody").getAppsecAdvancedSettingsRequestBody = null as any;
export const getAppsecAdvancedSettingsRequestBodyOutput: typeof import("./getAppsecAdvancedSettingsRequestBody").getAppsecAdvancedSettingsRequestBodyOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsRequestBody","getAppsecAdvancedSettingsRequestBodyOutput"], () => require("./getAppsecAdvancedSettingsRequestBody"));

export { GetAuthoritiesSetArgs, GetAuthoritiesSetResult, GetAuthoritiesSetOutputArgs } from "./getAuthoritiesSet";
export const getAuthoritiesSet: typeof import("./getAuthoritiesSet").getAuthoritiesSet = null as any;
export const getAuthoritiesSetOutput: typeof import("./getAuthoritiesSet").getAuthoritiesSetOutput = null as any;
utilities.lazyLoad(exports, ["getAuthoritiesSet","getAuthoritiesSetOutput"], () => require("./getAuthoritiesSet"));

export { GetBotmanAkamaiBotCategoryArgs, GetBotmanAkamaiBotCategoryResult, GetBotmanAkamaiBotCategoryOutputArgs } from "./getBotmanAkamaiBotCategory";
export const getBotmanAkamaiBotCategory: typeof import("./getBotmanAkamaiBotCategory").getBotmanAkamaiBotCategory = null as any;
export const getBotmanAkamaiBotCategoryOutput: typeof import("./getBotmanAkamaiBotCategory").getBotmanAkamaiBotCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiBotCategory","getBotmanAkamaiBotCategoryOutput"], () => require("./getBotmanAkamaiBotCategory"));

export { GetBotmanAkamaiBotCategoryActionArgs, GetBotmanAkamaiBotCategoryActionResult, GetBotmanAkamaiBotCategoryActionOutputArgs } from "./getBotmanAkamaiBotCategoryAction";
export const getBotmanAkamaiBotCategoryAction: typeof import("./getBotmanAkamaiBotCategoryAction").getBotmanAkamaiBotCategoryAction = null as any;
export const getBotmanAkamaiBotCategoryActionOutput: typeof import("./getBotmanAkamaiBotCategoryAction").getBotmanAkamaiBotCategoryActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiBotCategoryAction","getBotmanAkamaiBotCategoryActionOutput"], () => require("./getBotmanAkamaiBotCategoryAction"));

export { GetBotmanAkamaiDefinedBotArgs, GetBotmanAkamaiDefinedBotResult, GetBotmanAkamaiDefinedBotOutputArgs } from "./getBotmanAkamaiDefinedBot";
export const getBotmanAkamaiDefinedBot: typeof import("./getBotmanAkamaiDefinedBot").getBotmanAkamaiDefinedBot = null as any;
export const getBotmanAkamaiDefinedBotOutput: typeof import("./getBotmanAkamaiDefinedBot").getBotmanAkamaiDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiDefinedBot","getBotmanAkamaiDefinedBotOutput"], () => require("./getBotmanAkamaiDefinedBot"));

export { GetBotmanBotAnalyticsCookieArgs, GetBotmanBotAnalyticsCookieResult, GetBotmanBotAnalyticsCookieOutputArgs } from "./getBotmanBotAnalyticsCookie";
export const getBotmanBotAnalyticsCookie: typeof import("./getBotmanBotAnalyticsCookie").getBotmanBotAnalyticsCookie = null as any;
export const getBotmanBotAnalyticsCookieOutput: typeof import("./getBotmanBotAnalyticsCookie").getBotmanBotAnalyticsCookieOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotAnalyticsCookie","getBotmanBotAnalyticsCookieOutput"], () => require("./getBotmanBotAnalyticsCookie"));

export { GetBotmanBotAnalyticsCookieValuesResult } from "./getBotmanBotAnalyticsCookieValues";
export const getBotmanBotAnalyticsCookieValues: typeof import("./getBotmanBotAnalyticsCookieValues").getBotmanBotAnalyticsCookieValues = null as any;
utilities.lazyLoad(exports, ["getBotmanBotAnalyticsCookieValues"], () => require("./getBotmanBotAnalyticsCookieValues"));

export { GetBotmanBotCategoryExceptionArgs, GetBotmanBotCategoryExceptionResult, GetBotmanBotCategoryExceptionOutputArgs } from "./getBotmanBotCategoryException";
export const getBotmanBotCategoryException: typeof import("./getBotmanBotCategoryException").getBotmanBotCategoryException = null as any;
export const getBotmanBotCategoryExceptionOutput: typeof import("./getBotmanBotCategoryException").getBotmanBotCategoryExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotCategoryException","getBotmanBotCategoryExceptionOutput"], () => require("./getBotmanBotCategoryException"));

export { GetBotmanBotDetectionArgs, GetBotmanBotDetectionResult, GetBotmanBotDetectionOutputArgs } from "./getBotmanBotDetection";
export const getBotmanBotDetection: typeof import("./getBotmanBotDetection").getBotmanBotDetection = null as any;
export const getBotmanBotDetectionOutput: typeof import("./getBotmanBotDetection").getBotmanBotDetectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotDetection","getBotmanBotDetectionOutput"], () => require("./getBotmanBotDetection"));

export { GetBotmanBotDetectionActionArgs, GetBotmanBotDetectionActionResult, GetBotmanBotDetectionActionOutputArgs } from "./getBotmanBotDetectionAction";
export const getBotmanBotDetectionAction: typeof import("./getBotmanBotDetectionAction").getBotmanBotDetectionAction = null as any;
export const getBotmanBotDetectionActionOutput: typeof import("./getBotmanBotDetectionAction").getBotmanBotDetectionActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotDetectionAction","getBotmanBotDetectionActionOutput"], () => require("./getBotmanBotDetectionAction"));

export { GetBotmanBotEndpointCoverageReportArgs, GetBotmanBotEndpointCoverageReportResult, GetBotmanBotEndpointCoverageReportOutputArgs } from "./getBotmanBotEndpointCoverageReport";
export const getBotmanBotEndpointCoverageReport: typeof import("./getBotmanBotEndpointCoverageReport").getBotmanBotEndpointCoverageReport = null as any;
export const getBotmanBotEndpointCoverageReportOutput: typeof import("./getBotmanBotEndpointCoverageReport").getBotmanBotEndpointCoverageReportOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotEndpointCoverageReport","getBotmanBotEndpointCoverageReportOutput"], () => require("./getBotmanBotEndpointCoverageReport"));

export { GetBotmanBotManagementSettingsArgs, GetBotmanBotManagementSettingsResult, GetBotmanBotManagementSettingsOutputArgs } from "./getBotmanBotManagementSettings";
export const getBotmanBotManagementSettings: typeof import("./getBotmanBotManagementSettings").getBotmanBotManagementSettings = null as any;
export const getBotmanBotManagementSettingsOutput: typeof import("./getBotmanBotManagementSettings").getBotmanBotManagementSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotManagementSettings","getBotmanBotManagementSettingsOutput"], () => require("./getBotmanBotManagementSettings"));

export { GetBotmanChallengeActionArgs, GetBotmanChallengeActionResult, GetBotmanChallengeActionOutputArgs } from "./getBotmanChallengeAction";
export const getBotmanChallengeAction: typeof import("./getBotmanChallengeAction").getBotmanChallengeAction = null as any;
export const getBotmanChallengeActionOutput: typeof import("./getBotmanChallengeAction").getBotmanChallengeActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanChallengeAction","getBotmanChallengeActionOutput"], () => require("./getBotmanChallengeAction"));

export { GetBotmanChallengeInterceptionRulesArgs, GetBotmanChallengeInterceptionRulesResult, GetBotmanChallengeInterceptionRulesOutputArgs } from "./getBotmanChallengeInterceptionRules";
export const getBotmanChallengeInterceptionRules: typeof import("./getBotmanChallengeInterceptionRules").getBotmanChallengeInterceptionRules = null as any;
export const getBotmanChallengeInterceptionRulesOutput: typeof import("./getBotmanChallengeInterceptionRules").getBotmanChallengeInterceptionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanChallengeInterceptionRules","getBotmanChallengeInterceptionRulesOutput"], () => require("./getBotmanChallengeInterceptionRules"));

export { GetBotmanClientSideSecurityArgs, GetBotmanClientSideSecurityResult, GetBotmanClientSideSecurityOutputArgs } from "./getBotmanClientSideSecurity";
export const getBotmanClientSideSecurity: typeof import("./getBotmanClientSideSecurity").getBotmanClientSideSecurity = null as any;
export const getBotmanClientSideSecurityOutput: typeof import("./getBotmanClientSideSecurity").getBotmanClientSideSecurityOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanClientSideSecurity","getBotmanClientSideSecurityOutput"], () => require("./getBotmanClientSideSecurity"));

export { GetBotmanConditionalActionArgs, GetBotmanConditionalActionResult, GetBotmanConditionalActionOutputArgs } from "./getBotmanConditionalAction";
export const getBotmanConditionalAction: typeof import("./getBotmanConditionalAction").getBotmanConditionalAction = null as any;
export const getBotmanConditionalActionOutput: typeof import("./getBotmanConditionalAction").getBotmanConditionalActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanConditionalAction","getBotmanConditionalActionOutput"], () => require("./getBotmanConditionalAction"));

export { GetBotmanCustomBotCategoryArgs, GetBotmanCustomBotCategoryResult, GetBotmanCustomBotCategoryOutputArgs } from "./getBotmanCustomBotCategory";
export const getBotmanCustomBotCategory: typeof import("./getBotmanCustomBotCategory").getBotmanCustomBotCategory = null as any;
export const getBotmanCustomBotCategoryOutput: typeof import("./getBotmanCustomBotCategory").getBotmanCustomBotCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategory","getBotmanCustomBotCategoryOutput"], () => require("./getBotmanCustomBotCategory"));

export { GetBotmanCustomBotCategoryActionArgs, GetBotmanCustomBotCategoryActionResult, GetBotmanCustomBotCategoryActionOutputArgs } from "./getBotmanCustomBotCategoryAction";
export const getBotmanCustomBotCategoryAction: typeof import("./getBotmanCustomBotCategoryAction").getBotmanCustomBotCategoryAction = null as any;
export const getBotmanCustomBotCategoryActionOutput: typeof import("./getBotmanCustomBotCategoryAction").getBotmanCustomBotCategoryActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategoryAction","getBotmanCustomBotCategoryActionOutput"], () => require("./getBotmanCustomBotCategoryAction"));

export { GetBotmanCustomBotCategorySequenceArgs, GetBotmanCustomBotCategorySequenceResult, GetBotmanCustomBotCategorySequenceOutputArgs } from "./getBotmanCustomBotCategorySequence";
export const getBotmanCustomBotCategorySequence: typeof import("./getBotmanCustomBotCategorySequence").getBotmanCustomBotCategorySequence = null as any;
export const getBotmanCustomBotCategorySequenceOutput: typeof import("./getBotmanCustomBotCategorySequence").getBotmanCustomBotCategorySequenceOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategorySequence","getBotmanCustomBotCategorySequenceOutput"], () => require("./getBotmanCustomBotCategorySequence"));

export { GetBotmanCustomClientArgs, GetBotmanCustomClientResult, GetBotmanCustomClientOutputArgs } from "./getBotmanCustomClient";
export const getBotmanCustomClient: typeof import("./getBotmanCustomClient").getBotmanCustomClient = null as any;
export const getBotmanCustomClientOutput: typeof import("./getBotmanCustomClient").getBotmanCustomClientOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomClient","getBotmanCustomClientOutput"], () => require("./getBotmanCustomClient"));

export { GetBotmanCustomDefinedBotArgs, GetBotmanCustomDefinedBotResult, GetBotmanCustomDefinedBotOutputArgs } from "./getBotmanCustomDefinedBot";
export const getBotmanCustomDefinedBot: typeof import("./getBotmanCustomDefinedBot").getBotmanCustomDefinedBot = null as any;
export const getBotmanCustomDefinedBotOutput: typeof import("./getBotmanCustomDefinedBot").getBotmanCustomDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomDefinedBot","getBotmanCustomDefinedBotOutput"], () => require("./getBotmanCustomDefinedBot"));

export { GetBotmanCustomDenyActionArgs, GetBotmanCustomDenyActionResult, GetBotmanCustomDenyActionOutputArgs } from "./getBotmanCustomDenyAction";
export const getBotmanCustomDenyAction: typeof import("./getBotmanCustomDenyAction").getBotmanCustomDenyAction = null as any;
export const getBotmanCustomDenyActionOutput: typeof import("./getBotmanCustomDenyAction").getBotmanCustomDenyActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomDenyAction","getBotmanCustomDenyActionOutput"], () => require("./getBotmanCustomDenyAction"));

export { GetBotmanJavascriptInjectionArgs, GetBotmanJavascriptInjectionResult, GetBotmanJavascriptInjectionOutputArgs } from "./getBotmanJavascriptInjection";
export const getBotmanJavascriptInjection: typeof import("./getBotmanJavascriptInjection").getBotmanJavascriptInjection = null as any;
export const getBotmanJavascriptInjectionOutput: typeof import("./getBotmanJavascriptInjection").getBotmanJavascriptInjectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanJavascriptInjection","getBotmanJavascriptInjectionOutput"], () => require("./getBotmanJavascriptInjection"));

export { GetBotmanRecategorizedAkamaiDefinedBotArgs, GetBotmanRecategorizedAkamaiDefinedBotResult, GetBotmanRecategorizedAkamaiDefinedBotOutputArgs } from "./getBotmanRecategorizedAkamaiDefinedBot";
export const getBotmanRecategorizedAkamaiDefinedBot: typeof import("./getBotmanRecategorizedAkamaiDefinedBot").getBotmanRecategorizedAkamaiDefinedBot = null as any;
export const getBotmanRecategorizedAkamaiDefinedBotOutput: typeof import("./getBotmanRecategorizedAkamaiDefinedBot").getBotmanRecategorizedAkamaiDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanRecategorizedAkamaiDefinedBot","getBotmanRecategorizedAkamaiDefinedBotOutput"], () => require("./getBotmanRecategorizedAkamaiDefinedBot"));

export { GetBotmanResponseActionArgs, GetBotmanResponseActionResult, GetBotmanResponseActionOutputArgs } from "./getBotmanResponseAction";
export const getBotmanResponseAction: typeof import("./getBotmanResponseAction").getBotmanResponseAction = null as any;
export const getBotmanResponseActionOutput: typeof import("./getBotmanResponseAction").getBotmanResponseActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanResponseAction","getBotmanResponseActionOutput"], () => require("./getBotmanResponseAction"));

export { GetBotmanServeAlternateActionArgs, GetBotmanServeAlternateActionResult, GetBotmanServeAlternateActionOutputArgs } from "./getBotmanServeAlternateAction";
export const getBotmanServeAlternateAction: typeof import("./getBotmanServeAlternateAction").getBotmanServeAlternateAction = null as any;
export const getBotmanServeAlternateActionOutput: typeof import("./getBotmanServeAlternateAction").getBotmanServeAlternateActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanServeAlternateAction","getBotmanServeAlternateActionOutput"], () => require("./getBotmanServeAlternateAction"));

export { GetBotmanTransactionalEndpointArgs, GetBotmanTransactionalEndpointResult, GetBotmanTransactionalEndpointOutputArgs } from "./getBotmanTransactionalEndpoint";
export const getBotmanTransactionalEndpoint: typeof import("./getBotmanTransactionalEndpoint").getBotmanTransactionalEndpoint = null as any;
export const getBotmanTransactionalEndpointOutput: typeof import("./getBotmanTransactionalEndpoint").getBotmanTransactionalEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanTransactionalEndpoint","getBotmanTransactionalEndpointOutput"], () => require("./getBotmanTransactionalEndpoint"));

export { GetBotmanTransactionalEndpointProtectionArgs, GetBotmanTransactionalEndpointProtectionResult, GetBotmanTransactionalEndpointProtectionOutputArgs } from "./getBotmanTransactionalEndpointProtection";
export const getBotmanTransactionalEndpointProtection: typeof import("./getBotmanTransactionalEndpointProtection").getBotmanTransactionalEndpointProtection = null as any;
export const getBotmanTransactionalEndpointProtectionOutput: typeof import("./getBotmanTransactionalEndpointProtection").getBotmanTransactionalEndpointProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanTransactionalEndpointProtection","getBotmanTransactionalEndpointProtectionOutput"], () => require("./getBotmanTransactionalEndpointProtection"));

export { GetCPSEnrollmentArgs, GetCPSEnrollmentResult, GetCPSEnrollmentOutputArgs } from "./getCPSEnrollment";
export const getCPSEnrollment: typeof import("./getCPSEnrollment").getCPSEnrollment = null as any;
export const getCPSEnrollmentOutput: typeof import("./getCPSEnrollment").getCPSEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getCPSEnrollment","getCPSEnrollmentOutput"], () => require("./getCPSEnrollment"));

export { GetCPSEnrollmentsArgs, GetCPSEnrollmentsResult, GetCPSEnrollmentsOutputArgs } from "./getCPSEnrollments";
export const getCPSEnrollments: typeof import("./getCPSEnrollments").getCPSEnrollments = null as any;
export const getCPSEnrollmentsOutput: typeof import("./getCPSEnrollments").getCPSEnrollmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCPSEnrollments","getCPSEnrollmentsOutput"], () => require("./getCPSEnrollments"));

export { GetCloudletsApiPrioritizationMatchRuleArgs, GetCloudletsApiPrioritizationMatchRuleResult, GetCloudletsApiPrioritizationMatchRuleOutputArgs } from "./getCloudletsApiPrioritizationMatchRule";
export const getCloudletsApiPrioritizationMatchRule: typeof import("./getCloudletsApiPrioritizationMatchRule").getCloudletsApiPrioritizationMatchRule = null as any;
export const getCloudletsApiPrioritizationMatchRuleOutput: typeof import("./getCloudletsApiPrioritizationMatchRule").getCloudletsApiPrioritizationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApiPrioritizationMatchRule","getCloudletsApiPrioritizationMatchRuleOutput"], () => require("./getCloudletsApiPrioritizationMatchRule"));

export { GetCloudletsApplicationLoadBalancerArgs, GetCloudletsApplicationLoadBalancerResult, GetCloudletsApplicationLoadBalancerOutputArgs } from "./getCloudletsApplicationLoadBalancer";
export const getCloudletsApplicationLoadBalancer: typeof import("./getCloudletsApplicationLoadBalancer").getCloudletsApplicationLoadBalancer = null as any;
export const getCloudletsApplicationLoadBalancerOutput: typeof import("./getCloudletsApplicationLoadBalancer").getCloudletsApplicationLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApplicationLoadBalancer","getCloudletsApplicationLoadBalancerOutput"], () => require("./getCloudletsApplicationLoadBalancer"));

export { GetCloudletsApplicationLoadBalancerMatchRuleArgs, GetCloudletsApplicationLoadBalancerMatchRuleResult, GetCloudletsApplicationLoadBalancerMatchRuleOutputArgs } from "./getCloudletsApplicationLoadBalancerMatchRule";
export const getCloudletsApplicationLoadBalancerMatchRule: typeof import("./getCloudletsApplicationLoadBalancerMatchRule").getCloudletsApplicationLoadBalancerMatchRule = null as any;
export const getCloudletsApplicationLoadBalancerMatchRuleOutput: typeof import("./getCloudletsApplicationLoadBalancerMatchRule").getCloudletsApplicationLoadBalancerMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApplicationLoadBalancerMatchRule","getCloudletsApplicationLoadBalancerMatchRuleOutput"], () => require("./getCloudletsApplicationLoadBalancerMatchRule"));

export { GetCloudletsAudienceSegmentationMatchRuleArgs, GetCloudletsAudienceSegmentationMatchRuleResult, GetCloudletsAudienceSegmentationMatchRuleOutputArgs } from "./getCloudletsAudienceSegmentationMatchRule";
export const getCloudletsAudienceSegmentationMatchRule: typeof import("./getCloudletsAudienceSegmentationMatchRule").getCloudletsAudienceSegmentationMatchRule = null as any;
export const getCloudletsAudienceSegmentationMatchRuleOutput: typeof import("./getCloudletsAudienceSegmentationMatchRule").getCloudletsAudienceSegmentationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsAudienceSegmentationMatchRule","getCloudletsAudienceSegmentationMatchRuleOutput"], () => require("./getCloudletsAudienceSegmentationMatchRule"));

export { GetCloudletsEdgeRedirectorMatchRuleArgs, GetCloudletsEdgeRedirectorMatchRuleResult, GetCloudletsEdgeRedirectorMatchRuleOutputArgs } from "./getCloudletsEdgeRedirectorMatchRule";
export const getCloudletsEdgeRedirectorMatchRule: typeof import("./getCloudletsEdgeRedirectorMatchRule").getCloudletsEdgeRedirectorMatchRule = null as any;
export const getCloudletsEdgeRedirectorMatchRuleOutput: typeof import("./getCloudletsEdgeRedirectorMatchRule").getCloudletsEdgeRedirectorMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsEdgeRedirectorMatchRule","getCloudletsEdgeRedirectorMatchRuleOutput"], () => require("./getCloudletsEdgeRedirectorMatchRule"));

export { GetCloudletsForwardRewriteMatchRuleArgs, GetCloudletsForwardRewriteMatchRuleResult, GetCloudletsForwardRewriteMatchRuleOutputArgs } from "./getCloudletsForwardRewriteMatchRule";
export const getCloudletsForwardRewriteMatchRule: typeof import("./getCloudletsForwardRewriteMatchRule").getCloudletsForwardRewriteMatchRule = null as any;
export const getCloudletsForwardRewriteMatchRuleOutput: typeof import("./getCloudletsForwardRewriteMatchRule").getCloudletsForwardRewriteMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsForwardRewriteMatchRule","getCloudletsForwardRewriteMatchRuleOutput"], () => require("./getCloudletsForwardRewriteMatchRule"));

export { GetCloudletsPhasedReleaseMatchRuleArgs, GetCloudletsPhasedReleaseMatchRuleResult, GetCloudletsPhasedReleaseMatchRuleOutputArgs } from "./getCloudletsPhasedReleaseMatchRule";
export const getCloudletsPhasedReleaseMatchRule: typeof import("./getCloudletsPhasedReleaseMatchRule").getCloudletsPhasedReleaseMatchRule = null as any;
export const getCloudletsPhasedReleaseMatchRuleOutput: typeof import("./getCloudletsPhasedReleaseMatchRule").getCloudletsPhasedReleaseMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsPhasedReleaseMatchRule","getCloudletsPhasedReleaseMatchRuleOutput"], () => require("./getCloudletsPhasedReleaseMatchRule"));

export { GetCloudletsPolicyArgs, GetCloudletsPolicyResult, GetCloudletsPolicyOutputArgs } from "./getCloudletsPolicy";
export const getCloudletsPolicy: typeof import("./getCloudletsPolicy").getCloudletsPolicy = null as any;
export const getCloudletsPolicyOutput: typeof import("./getCloudletsPolicy").getCloudletsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsPolicy","getCloudletsPolicyOutput"], () => require("./getCloudletsPolicy"));

export { GetCloudletsRequestControlMatchRuleArgs, GetCloudletsRequestControlMatchRuleResult, GetCloudletsRequestControlMatchRuleOutputArgs } from "./getCloudletsRequestControlMatchRule";
export const getCloudletsRequestControlMatchRule: typeof import("./getCloudletsRequestControlMatchRule").getCloudletsRequestControlMatchRule = null as any;
export const getCloudletsRequestControlMatchRuleOutput: typeof import("./getCloudletsRequestControlMatchRule").getCloudletsRequestControlMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsRequestControlMatchRule","getCloudletsRequestControlMatchRuleOutput"], () => require("./getCloudletsRequestControlMatchRule"));

export { GetCloudletsVisitorPrioritizationMatchRuleArgs, GetCloudletsVisitorPrioritizationMatchRuleResult, GetCloudletsVisitorPrioritizationMatchRuleOutputArgs } from "./getCloudletsVisitorPrioritizationMatchRule";
export const getCloudletsVisitorPrioritizationMatchRule: typeof import("./getCloudletsVisitorPrioritizationMatchRule").getCloudletsVisitorPrioritizationMatchRule = null as any;
export const getCloudletsVisitorPrioritizationMatchRuleOutput: typeof import("./getCloudletsVisitorPrioritizationMatchRule").getCloudletsVisitorPrioritizationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsVisitorPrioritizationMatchRule","getCloudletsVisitorPrioritizationMatchRuleOutput"], () => require("./getCloudletsVisitorPrioritizationMatchRule"));

export { GetContractArgs, GetContractResult, GetContractOutputArgs } from "./getContract";
export const getContract: typeof import("./getContract").getContract = null as any;
export const getContractOutput: typeof import("./getContract").getContractOutput = null as any;
utilities.lazyLoad(exports, ["getContract","getContractOutput"], () => require("./getContract"));

export { GetContractsResult } from "./getContracts";
export const getContracts: typeof import("./getContracts").getContracts = null as any;
utilities.lazyLoad(exports, ["getContracts"], () => require("./getContracts"));

export { GetCpCodeArgs, GetCpCodeResult, GetCpCodeOutputArgs } from "./getCpCode";
export const getCpCode: typeof import("./getCpCode").getCpCode = null as any;
export const getCpCodeOutput: typeof import("./getCpCode").getCpCodeOutput = null as any;
utilities.lazyLoad(exports, ["getCpCode","getCpCodeOutput"], () => require("./getCpCode"));

export { GetCpsCsrArgs, GetCpsCsrResult, GetCpsCsrOutputArgs } from "./getCpsCsr";
export const getCpsCsr: typeof import("./getCpsCsr").getCpsCsr = null as any;
export const getCpsCsrOutput: typeof import("./getCpsCsr").getCpsCsrOutput = null as any;
utilities.lazyLoad(exports, ["getCpsCsr","getCpsCsrOutput"], () => require("./getCpsCsr"));

export { GetCpsDeploymentsArgs, GetCpsDeploymentsResult, GetCpsDeploymentsOutputArgs } from "./getCpsDeployments";
export const getCpsDeployments: typeof import("./getCpsDeployments").getCpsDeployments = null as any;
export const getCpsDeploymentsOutput: typeof import("./getCpsDeployments").getCpsDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getCpsDeployments","getCpsDeploymentsOutput"], () => require("./getCpsDeployments"));

export { GetCpsWarningsResult } from "./getCpsWarnings";
export const getCpsWarnings: typeof import("./getCpsWarnings").getCpsWarnings = null as any;
utilities.lazyLoad(exports, ["getCpsWarnings"], () => require("./getCpsWarnings"));

export { GetDatastreamActivationHistoryArgs, GetDatastreamActivationHistoryResult, GetDatastreamActivationHistoryOutputArgs } from "./getDatastreamActivationHistory";
export const getDatastreamActivationHistory: typeof import("./getDatastreamActivationHistory").getDatastreamActivationHistory = null as any;
export const getDatastreamActivationHistoryOutput: typeof import("./getDatastreamActivationHistory").getDatastreamActivationHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreamActivationHistory","getDatastreamActivationHistoryOutput"], () => require("./getDatastreamActivationHistory"));

export { GetDatastreamDatasetFieldsArgs, GetDatastreamDatasetFieldsResult, GetDatastreamDatasetFieldsOutputArgs } from "./getDatastreamDatasetFields";
export const getDatastreamDatasetFields: typeof import("./getDatastreamDatasetFields").getDatastreamDatasetFields = null as any;
export const getDatastreamDatasetFieldsOutput: typeof import("./getDatastreamDatasetFields").getDatastreamDatasetFieldsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreamDatasetFields","getDatastreamDatasetFieldsOutput"], () => require("./getDatastreamDatasetFields"));

export { GetDatastreamsArgs, GetDatastreamsResult, GetDatastreamsOutputArgs } from "./getDatastreams";
export const getDatastreams: typeof import("./getDatastreams").getDatastreams = null as any;
export const getDatastreamsOutput: typeof import("./getDatastreams").getDatastreamsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreams","getDatastreamsOutput"], () => require("./getDatastreams"));

export { GetDnsRecordSetArgs, GetDnsRecordSetResult, GetDnsRecordSetOutputArgs } from "./getDnsRecordSet";
export const getDnsRecordSet: typeof import("./getDnsRecordSet").getDnsRecordSet = null as any;
export const getDnsRecordSetOutput: typeof import("./getDnsRecordSet").getDnsRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecordSet","getDnsRecordSetOutput"], () => require("./getDnsRecordSet"));

export { GetEdgeWorkerArgs, GetEdgeWorkerResult, GetEdgeWorkerOutputArgs } from "./getEdgeWorker";
export const getEdgeWorker: typeof import("./getEdgeWorker").getEdgeWorker = null as any;
export const getEdgeWorkerOutput: typeof import("./getEdgeWorker").getEdgeWorkerOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeWorker","getEdgeWorkerOutput"], () => require("./getEdgeWorker"));

export { GetEdgeWorkerActivationArgs, GetEdgeWorkerActivationResult, GetEdgeWorkerActivationOutputArgs } from "./getEdgeWorkerActivation";
export const getEdgeWorkerActivation: typeof import("./getEdgeWorkerActivation").getEdgeWorkerActivation = null as any;
export const getEdgeWorkerActivationOutput: typeof import("./getEdgeWorkerActivation").getEdgeWorkerActivationOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeWorkerActivation","getEdgeWorkerActivationOutput"], () => require("./getEdgeWorkerActivation"));

export { GetEdgeWorkersPropertyRulesArgs, GetEdgeWorkersPropertyRulesResult, GetEdgeWorkersPropertyRulesOutputArgs } from "./getEdgeWorkersPropertyRules";
export const getEdgeWorkersPropertyRules: typeof import("./getEdgeWorkersPropertyRules").getEdgeWorkersPropertyRules = null as any;
export const getEdgeWorkersPropertyRulesOutput: typeof import("./getEdgeWorkersPropertyRules").getEdgeWorkersPropertyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeWorkersPropertyRules","getEdgeWorkersPropertyRulesOutput"], () => require("./getEdgeWorkersPropertyRules"));

export { GetEdgeWorkersResourceTierArgs, GetEdgeWorkersResourceTierResult, GetEdgeWorkersResourceTierOutputArgs } from "./getEdgeWorkersResourceTier";
export const getEdgeWorkersResourceTier: typeof import("./getEdgeWorkersResourceTier").getEdgeWorkersResourceTier = null as any;
export const getEdgeWorkersResourceTierOutput: typeof import("./getEdgeWorkersResourceTier").getEdgeWorkersResourceTierOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeWorkersResourceTier","getEdgeWorkersResourceTierOutput"], () => require("./getEdgeWorkersResourceTier"));

export { GetEdgekvGroupItemsArgs, GetEdgekvGroupItemsResult, GetEdgekvGroupItemsOutputArgs } from "./getEdgekvGroupItems";
export const getEdgekvGroupItems: typeof import("./getEdgekvGroupItems").getEdgekvGroupItems = null as any;
export const getEdgekvGroupItemsOutput: typeof import("./getEdgekvGroupItems").getEdgekvGroupItemsOutput = null as any;
utilities.lazyLoad(exports, ["getEdgekvGroupItems","getEdgekvGroupItemsOutput"], () => require("./getEdgekvGroupItems"));

export { GetEdgekvGroupsArgs, GetEdgekvGroupsResult, GetEdgekvGroupsOutputArgs } from "./getEdgekvGroups";
export const getEdgekvGroups: typeof import("./getEdgekvGroups").getEdgekvGroups = null as any;
export const getEdgekvGroupsOutput: typeof import("./getEdgekvGroups").getEdgekvGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEdgekvGroups","getEdgekvGroupsOutput"], () => require("./getEdgekvGroups"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsResult } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
utilities.lazyLoad(exports, ["getGroups"], () => require("./getGroups"));

export { GetGtmDatacenterArgs, GetGtmDatacenterResult, GetGtmDatacenterOutputArgs } from "./getGtmDatacenter";
export const getGtmDatacenter: typeof import("./getGtmDatacenter").getGtmDatacenter = null as any;
export const getGtmDatacenterOutput: typeof import("./getGtmDatacenter").getGtmDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDatacenter","getGtmDatacenterOutput"], () => require("./getGtmDatacenter"));

export { GetGtmDatacentersArgs, GetGtmDatacentersResult, GetGtmDatacentersOutputArgs } from "./getGtmDatacenters";
export const getGtmDatacenters: typeof import("./getGtmDatacenters").getGtmDatacenters = null as any;
export const getGtmDatacentersOutput: typeof import("./getGtmDatacenters").getGtmDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDatacenters","getGtmDatacentersOutput"], () => require("./getGtmDatacenters"));

export { GetGtmDefaultDatacenterArgs, GetGtmDefaultDatacenterResult, GetGtmDefaultDatacenterOutputArgs } from "./getGtmDefaultDatacenter";
export const getGtmDefaultDatacenter: typeof import("./getGtmDefaultDatacenter").getGtmDefaultDatacenter = null as any;
export const getGtmDefaultDatacenterOutput: typeof import("./getGtmDefaultDatacenter").getGtmDefaultDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDefaultDatacenter","getGtmDefaultDatacenterOutput"], () => require("./getGtmDefaultDatacenter"));

export { GetIamContactTypesResult } from "./getIamContactTypes";
export const getIamContactTypes: typeof import("./getIamContactTypes").getIamContactTypes = null as any;
utilities.lazyLoad(exports, ["getIamContactTypes"], () => require("./getIamContactTypes"));

export { GetIamCountriesResult } from "./getIamCountries";
export const getIamCountries: typeof import("./getIamCountries").getIamCountries = null as any;
utilities.lazyLoad(exports, ["getIamCountries"], () => require("./getIamCountries"));

export { GetIamGrantableRolesResult } from "./getIamGrantableRoles";
export const getIamGrantableRoles: typeof import("./getIamGrantableRoles").getIamGrantableRoles = null as any;
utilities.lazyLoad(exports, ["getIamGrantableRoles"], () => require("./getIamGrantableRoles"));

export { GetIamRolesResult } from "./getIamRoles";
export const getIamRoles: typeof import("./getIamRoles").getIamRoles = null as any;
utilities.lazyLoad(exports, ["getIamRoles"], () => require("./getIamRoles"));

export { GetIamStatesArgs, GetIamStatesResult, GetIamStatesOutputArgs } from "./getIamStates";
export const getIamStates: typeof import("./getIamStates").getIamStates = null as any;
export const getIamStatesOutput: typeof import("./getIamStates").getIamStatesOutput = null as any;
utilities.lazyLoad(exports, ["getIamStates","getIamStatesOutput"], () => require("./getIamStates"));

export { GetIamSupportedLangsResult } from "./getIamSupportedLangs";
export const getIamSupportedLangs: typeof import("./getIamSupportedLangs").getIamSupportedLangs = null as any;
utilities.lazyLoad(exports, ["getIamSupportedLangs"], () => require("./getIamSupportedLangs"));

export { GetIamTimeoutPoliciesResult } from "./getIamTimeoutPolicies";
export const getIamTimeoutPolicies: typeof import("./getIamTimeoutPolicies").getIamTimeoutPolicies = null as any;
utilities.lazyLoad(exports, ["getIamTimeoutPolicies"], () => require("./getIamTimeoutPolicies"));

export { GetIamTimezonesResult } from "./getIamTimezones";
export const getIamTimezones: typeof import("./getIamTimezones").getIamTimezones = null as any;
utilities.lazyLoad(exports, ["getIamTimezones"], () => require("./getIamTimezones"));

export { GetNetworkListsArgs, GetNetworkListsResult, GetNetworkListsOutputArgs } from "./getNetworkLists";
export const getNetworkLists: typeof import("./getNetworkLists").getNetworkLists = null as any;
export const getNetworkListsOutput: typeof import("./getNetworkLists").getNetworkListsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLists","getNetworkListsOutput"], () => require("./getNetworkLists"));

export { GetPropertiesArgs, GetPropertiesResult, GetPropertiesOutputArgs } from "./getProperties";
export const getProperties: typeof import("./getProperties").getProperties = null as any;
export const getPropertiesOutput: typeof import("./getProperties").getPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getProperties","getPropertiesOutput"], () => require("./getProperties"));

export { GetPropertiesSearchArgs, GetPropertiesSearchResult, GetPropertiesSearchOutputArgs } from "./getPropertiesSearch";
export const getPropertiesSearch: typeof import("./getPropertiesSearch").getPropertiesSearch = null as any;
export const getPropertiesSearchOutput: typeof import("./getPropertiesSearch").getPropertiesSearchOutput = null as any;
utilities.lazyLoad(exports, ["getPropertiesSearch","getPropertiesSearchOutput"], () => require("./getPropertiesSearch"));

export { GetPropertyArgs, GetPropertyResult, GetPropertyOutputArgs } from "./getProperty";
export const getProperty: typeof import("./getProperty").getProperty = null as any;
export const getPropertyOutput: typeof import("./getProperty").getPropertyOutput = null as any;
utilities.lazyLoad(exports, ["getProperty","getPropertyOutput"], () => require("./getProperty"));

export { GetPropertyActivationArgs, GetPropertyActivationResult, GetPropertyActivationOutputArgs } from "./getPropertyActivation";
export const getPropertyActivation: typeof import("./getPropertyActivation").getPropertyActivation = null as any;
export const getPropertyActivationOutput: typeof import("./getPropertyActivation").getPropertyActivationOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyActivation","getPropertyActivationOutput"], () => require("./getPropertyActivation"));

export { GetPropertyHostnamesArgs, GetPropertyHostnamesResult, GetPropertyHostnamesOutputArgs } from "./getPropertyHostnames";
export const getPropertyHostnames: typeof import("./getPropertyHostnames").getPropertyHostnames = null as any;
export const getPropertyHostnamesOutput: typeof import("./getPropertyHostnames").getPropertyHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyHostnames","getPropertyHostnamesOutput"], () => require("./getPropertyHostnames"));

export { GetPropertyIncludeArgs, GetPropertyIncludeResult, GetPropertyIncludeOutputArgs } from "./getPropertyInclude";
export const getPropertyInclude: typeof import("./getPropertyInclude").getPropertyInclude = null as any;
export const getPropertyIncludeOutput: typeof import("./getPropertyInclude").getPropertyIncludeOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyInclude","getPropertyIncludeOutput"], () => require("./getPropertyInclude"));

export { GetPropertyIncludeActivationArgs, GetPropertyIncludeActivationResult, GetPropertyIncludeActivationOutputArgs } from "./getPropertyIncludeActivation";
export const getPropertyIncludeActivation: typeof import("./getPropertyIncludeActivation").getPropertyIncludeActivation = null as any;
export const getPropertyIncludeActivationOutput: typeof import("./getPropertyIncludeActivation").getPropertyIncludeActivationOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeActivation","getPropertyIncludeActivationOutput"], () => require("./getPropertyIncludeActivation"));

export { GetPropertyIncludeParentsArgs, GetPropertyIncludeParentsResult, GetPropertyIncludeParentsOutputArgs } from "./getPropertyIncludeParents";
export const getPropertyIncludeParents: typeof import("./getPropertyIncludeParents").getPropertyIncludeParents = null as any;
export const getPropertyIncludeParentsOutput: typeof import("./getPropertyIncludeParents").getPropertyIncludeParentsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeParents","getPropertyIncludeParentsOutput"], () => require("./getPropertyIncludeParents"));

export { GetPropertyIncludeRulesArgs, GetPropertyIncludeRulesResult, GetPropertyIncludeRulesOutputArgs } from "./getPropertyIncludeRules";
export const getPropertyIncludeRules: typeof import("./getPropertyIncludeRules").getPropertyIncludeRules = null as any;
export const getPropertyIncludeRulesOutput: typeof import("./getPropertyIncludeRules").getPropertyIncludeRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeRules","getPropertyIncludeRulesOutput"], () => require("./getPropertyIncludeRules"));

export { GetPropertyIncludesArgs, GetPropertyIncludesResult, GetPropertyIncludesOutputArgs } from "./getPropertyIncludes";
export const getPropertyIncludes: typeof import("./getPropertyIncludes").getPropertyIncludes = null as any;
export const getPropertyIncludesOutput: typeof import("./getPropertyIncludes").getPropertyIncludesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludes","getPropertyIncludesOutput"], () => require("./getPropertyIncludes"));

export { GetPropertyProductsArgs, GetPropertyProductsResult, GetPropertyProductsOutputArgs } from "./getPropertyProducts";
export const getPropertyProducts: typeof import("./getPropertyProducts").getPropertyProducts = null as any;
export const getPropertyProductsOutput: typeof import("./getPropertyProducts").getPropertyProductsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyProducts","getPropertyProductsOutput"], () => require("./getPropertyProducts"));

export { GetPropertyRuleFormatsResult } from "./getPropertyRuleFormats";
export const getPropertyRuleFormats: typeof import("./getPropertyRuleFormats").getPropertyRuleFormats = null as any;
utilities.lazyLoad(exports, ["getPropertyRuleFormats"], () => require("./getPropertyRuleFormats"));

export { GetPropertyRulesArgs, GetPropertyRulesResult, GetPropertyRulesOutputArgs } from "./getPropertyRules";
export const getPropertyRules: typeof import("./getPropertyRules").getPropertyRules = null as any;
export const getPropertyRulesOutput: typeof import("./getPropertyRules").getPropertyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRules","getPropertyRulesOutput"], () => require("./getPropertyRules"));

export { GetPropertyRulesBuilderArgs, GetPropertyRulesBuilderResult, GetPropertyRulesBuilderOutputArgs } from "./getPropertyRulesBuilder";
export const getPropertyRulesBuilder: typeof import("./getPropertyRulesBuilder").getPropertyRulesBuilder = null as any;
export const getPropertyRulesBuilderOutput: typeof import("./getPropertyRulesBuilder").getPropertyRulesBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRulesBuilder","getPropertyRulesBuilderOutput"], () => require("./getPropertyRulesBuilder"));

export { GetPropertyRulesTemplateArgs, GetPropertyRulesTemplateResult, GetPropertyRulesTemplateOutputArgs } from "./getPropertyRulesTemplate";
export const getPropertyRulesTemplate: typeof import("./getPropertyRulesTemplate").getPropertyRulesTemplate = null as any;
export const getPropertyRulesTemplateOutput: typeof import("./getPropertyRulesTemplate").getPropertyRulesTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRulesTemplate","getPropertyRulesTemplateOutput"], () => require("./getPropertyRulesTemplate"));

export { GtmAsmapArgs, GtmAsmapState } from "./gtmAsmap";
export type GtmAsmap = import("./gtmAsmap").GtmAsmap;
export const GtmAsmap: typeof import("./gtmAsmap").GtmAsmap = null as any;
utilities.lazyLoad(exports, ["GtmAsmap"], () => require("./gtmAsmap"));

export { GtmCidrmapArgs, GtmCidrmapState } from "./gtmCidrmap";
export type GtmCidrmap = import("./gtmCidrmap").GtmCidrmap;
export const GtmCidrmap: typeof import("./gtmCidrmap").GtmCidrmap = null as any;
utilities.lazyLoad(exports, ["GtmCidrmap"], () => require("./gtmCidrmap"));

export { GtmDatacenterArgs, GtmDatacenterState } from "./gtmDatacenter";
export type GtmDatacenter = import("./gtmDatacenter").GtmDatacenter;
export const GtmDatacenter: typeof import("./gtmDatacenter").GtmDatacenter = null as any;
utilities.lazyLoad(exports, ["GtmDatacenter"], () => require("./gtmDatacenter"));

export { GtmDomainArgs, GtmDomainState } from "./gtmDomain";
export type GtmDomain = import("./gtmDomain").GtmDomain;
export const GtmDomain: typeof import("./gtmDomain").GtmDomain = null as any;
utilities.lazyLoad(exports, ["GtmDomain"], () => require("./gtmDomain"));

export { GtmGeomapArgs, GtmGeomapState } from "./gtmGeomap";
export type GtmGeomap = import("./gtmGeomap").GtmGeomap;
export const GtmGeomap: typeof import("./gtmGeomap").GtmGeomap = null as any;
utilities.lazyLoad(exports, ["GtmGeomap"], () => require("./gtmGeomap"));

export { GtmPropertyArgs, GtmPropertyState } from "./gtmProperty";
export type GtmProperty = import("./gtmProperty").GtmProperty;
export const GtmProperty: typeof import("./gtmProperty").GtmProperty = null as any;
utilities.lazyLoad(exports, ["GtmProperty"], () => require("./gtmProperty"));

export { GtmResourceArgs, GtmResourceState } from "./gtmResource";
export type GtmResource = import("./gtmResource").GtmResource;
export const GtmResource: typeof import("./gtmResource").GtmResource = null as any;
utilities.lazyLoad(exports, ["GtmResource"], () => require("./gtmResource"));

export { IamBlockedUserPropertiesArgs, IamBlockedUserPropertiesState } from "./iamBlockedUserProperties";
export type IamBlockedUserProperties = import("./iamBlockedUserProperties").IamBlockedUserProperties;
export const IamBlockedUserProperties: typeof import("./iamBlockedUserProperties").IamBlockedUserProperties = null as any;
utilities.lazyLoad(exports, ["IamBlockedUserProperties"], () => require("./iamBlockedUserProperties"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { NetworkListArgs, NetworkListState } from "./networkList";
export type NetworkList = import("./networkList").NetworkList;
export const NetworkList: typeof import("./networkList").NetworkList = null as any;
utilities.lazyLoad(exports, ["NetworkList"], () => require("./networkList"));

export { NetworkListActivationsArgs, NetworkListActivationsState } from "./networkListActivations";
export type NetworkListActivations = import("./networkListActivations").NetworkListActivations;
export const NetworkListActivations: typeof import("./networkListActivations").NetworkListActivations = null as any;
utilities.lazyLoad(exports, ["NetworkListActivations"], () => require("./networkListActivations"));

export { NetworkListDescriptionArgs, NetworkListDescriptionState } from "./networkListDescription";
export type NetworkListDescription = import("./networkListDescription").NetworkListDescription;
export const NetworkListDescription: typeof import("./networkListDescription").NetworkListDescription = null as any;
utilities.lazyLoad(exports, ["NetworkListDescription"], () => require("./networkListDescription"));

export { NetworkListSubscriptionArgs, NetworkListSubscriptionState } from "./networkListSubscription";
export type NetworkListSubscription = import("./networkListSubscription").NetworkListSubscription;
export const NetworkListSubscription: typeof import("./networkListSubscription").NetworkListSubscription = null as any;
utilities.lazyLoad(exports, ["NetworkListSubscription"], () => require("./networkListSubscription"));

export { PropertyArgs, PropertyState } from "./property";
export type Property = import("./property").Property;
export const Property: typeof import("./property").Property = null as any;
utilities.lazyLoad(exports, ["Property"], () => require("./property"));

export { PropertyActivationArgs, PropertyActivationState } from "./propertyActivation";
export type PropertyActivation = import("./propertyActivation").PropertyActivation;
export const PropertyActivation: typeof import("./propertyActivation").PropertyActivation = null as any;
utilities.lazyLoad(exports, ["PropertyActivation"], () => require("./propertyActivation"));

export { PropertyIncludeArgs, PropertyIncludeState } from "./propertyInclude";
export type PropertyInclude = import("./propertyInclude").PropertyInclude;
export const PropertyInclude: typeof import("./propertyInclude").PropertyInclude = null as any;
utilities.lazyLoad(exports, ["PropertyInclude"], () => require("./propertyInclude"));

export { PropertyIncludeActivationArgs, PropertyIncludeActivationState } from "./propertyIncludeActivation";
export type PropertyIncludeActivation = import("./propertyIncludeActivation").PropertyIncludeActivation;
export const PropertyIncludeActivation: typeof import("./propertyIncludeActivation").PropertyIncludeActivation = null as any;
utilities.lazyLoad(exports, ["PropertyIncludeActivation"], () => require("./propertyIncludeActivation"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as edgedns from "./edgedns";
import * as properties from "./properties";
import * as trafficmanagement from "./trafficmanagement";
import * as types from "./types";

export {
    config,
    edgedns,
    properties,
    trafficmanagement,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "akamai:index/appSecActivations:AppSecActivations":
                return new AppSecActivations(name, <any>undefined, { urn })
            case "akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch":
                return new AppSecAdvancedSettingsEvasivePathMatch(name, <any>undefined, { urn })
            case "akamai:index/appSecAdvancedSettingsLogging:AppSecAdvancedSettingsLogging":
                return new AppSecAdvancedSettingsLogging(name, <any>undefined, { urn })
            case "akamai:index/appSecAdvancedSettingsPragmaHeader:AppSecAdvancedSettingsPragmaHeader":
                return new AppSecAdvancedSettingsPragmaHeader(name, <any>undefined, { urn })
            case "akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch":
                return new AppSecAdvancedSettingsPrefetch(name, <any>undefined, { urn })
            case "akamai:index/appSecApiConstraintsProtection:AppSecApiConstraintsProtection":
                return new AppSecApiConstraintsProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecApiRequestConstraints:AppSecApiRequestConstraints":
                return new AppSecApiRequestConstraints(name, <any>undefined, { urn })
            case "akamai:index/appSecAttackGroup:AppSecAttackGroup":
                return new AppSecAttackGroup(name, <any>undefined, { urn })
            case "akamai:index/appSecByPassNetworkList:AppSecByPassNetworkList":
                return new AppSecByPassNetworkList(name, <any>undefined, { urn })
            case "akamai:index/appSecConfiguration:AppSecConfiguration":
                return new AppSecConfiguration(name, <any>undefined, { urn })
            case "akamai:index/appSecConfigurationRename:AppSecConfigurationRename":
                return new AppSecConfigurationRename(name, <any>undefined, { urn })
            case "akamai:index/appSecCustomDeny:AppSecCustomDeny":
                return new AppSecCustomDeny(name, <any>undefined, { urn })
            case "akamai:index/appSecCustomRule:AppSecCustomRule":
                return new AppSecCustomRule(name, <any>undefined, { urn })
            case "akamai:index/appSecCustomRuleAction:AppSecCustomRuleAction":
                return new AppSecCustomRuleAction(name, <any>undefined, { urn })
            case "akamai:index/appSecEval:AppSecEval":
                return new AppSecEval(name, <any>undefined, { urn })
            case "akamai:index/appSecEvalGroup:AppSecEvalGroup":
                return new AppSecEvalGroup(name, <any>undefined, { urn })
            case "akamai:index/appSecEvalPenaltyBox:AppSecEvalPenaltyBox":
                return new AppSecEvalPenaltyBox(name, <any>undefined, { urn })
            case "akamai:index/appSecEvalRule:AppSecEvalRule":
                return new AppSecEvalRule(name, <any>undefined, { urn })
            case "akamai:index/appSecIPGeo:AppSecIPGeo":
                return new AppSecIPGeo(name, <any>undefined, { urn })
            case "akamai:index/appSecIPGeoProtection:AppSecIPGeoProtection":
                return new AppSecIPGeoProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecMalwarePolicy:AppSecMalwarePolicy":
                return new AppSecMalwarePolicy(name, <any>undefined, { urn })
            case "akamai:index/appSecMalwarePolicyAction:AppSecMalwarePolicyAction":
                return new AppSecMalwarePolicyAction(name, <any>undefined, { urn })
            case "akamai:index/appSecMalwarePolicyActions:AppSecMalwarePolicyActions":
                return new AppSecMalwarePolicyActions(name, <any>undefined, { urn })
            case "akamai:index/appSecMalwareProtection:AppSecMalwareProtection":
                return new AppSecMalwareProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecMatchTarget:AppSecMatchTarget":
                return new AppSecMatchTarget(name, <any>undefined, { urn })
            case "akamai:index/appSecMatchTargetSequence:AppSecMatchTargetSequence":
                return new AppSecMatchTargetSequence(name, <any>undefined, { urn })
            case "akamai:index/appSecPenaltyBox:AppSecPenaltyBox":
                return new AppSecPenaltyBox(name, <any>undefined, { urn })
            case "akamai:index/appSecRatePolicy:AppSecRatePolicy":
                return new AppSecRatePolicy(name, <any>undefined, { urn })
            case "akamai:index/appSecRatePolicyAction:AppSecRatePolicyAction":
                return new AppSecRatePolicyAction(name, <any>undefined, { urn })
            case "akamai:index/appSecRateProtection:AppSecRateProtection":
                return new AppSecRateProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecReputationProfile:AppSecReputationProfile":
                return new AppSecReputationProfile(name, <any>undefined, { urn })
            case "akamai:index/appSecReputationProfileAction:AppSecReputationProfileAction":
                return new AppSecReputationProfileAction(name, <any>undefined, { urn })
            case "akamai:index/appSecReputationProfileAnalysis:AppSecReputationProfileAnalysis":
                return new AppSecReputationProfileAnalysis(name, <any>undefined, { urn })
            case "akamai:index/appSecReputationProtection:AppSecReputationProtection":
                return new AppSecReputationProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecRule:AppSecRule":
                return new AppSecRule(name, <any>undefined, { urn })
            case "akamai:index/appSecRuleUpgrade:AppSecRuleUpgrade":
                return new AppSecRuleUpgrade(name, <any>undefined, { urn })
            case "akamai:index/appSecSecurityPolicy:AppSecSecurityPolicy":
                return new AppSecSecurityPolicy(name, <any>undefined, { urn })
            case "akamai:index/appSecSecurityPolicyRename:AppSecSecurityPolicyRename":
                return new AppSecSecurityPolicyRename(name, <any>undefined, { urn })
            case "akamai:index/appSecSelectedHostnames:AppSecSelectedHostnames":
                return new AppSecSelectedHostnames(name, <any>undefined, { urn })
            case "akamai:index/appSecSiemSettings:AppSecSiemSettings":
                return new AppSecSiemSettings(name, <any>undefined, { urn })
            case "akamai:index/appSecSlowPost:AppSecSlowPost":
                return new AppSecSlowPost(name, <any>undefined, { urn })
            case "akamai:index/appSecSlowPostProtection:AppSecSlowPostProtection":
                return new AppSecSlowPostProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecThreatIntel:AppSecThreatIntel":
                return new AppSecThreatIntel(name, <any>undefined, { urn })
            case "akamai:index/appSecVersionNodes:AppSecVersionNodes":
                return new AppSecVersionNodes(name, <any>undefined, { urn })
            case "akamai:index/appSecWafMode:AppSecWafMode":
                return new AppSecWafMode(name, <any>undefined, { urn })
            case "akamai:index/appSecWafProtection:AppSecWafProtection":
                return new AppSecWafProtection(name, <any>undefined, { urn })
            case "akamai:index/appSecWapSelectedHostnames:AppSecWapSelectedHostnames":
                return new AppSecWapSelectedHostnames(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsAttackPayloadLogging:AppsecAdvancedSettingsAttackPayloadLogging":
                return new AppsecAdvancedSettingsAttackPayloadLogging(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsRequestBody:AppsecAdvancedSettingsRequestBody":
                return new AppsecAdvancedSettingsRequestBody(name, <any>undefined, { urn })
            case "akamai:index/botmanAkamaiBotCategoryAction:BotmanAkamaiBotCategoryAction":
                return new BotmanAkamaiBotCategoryAction(name, <any>undefined, { urn })
            case "akamai:index/botmanBotAnalyticsCookie:BotmanBotAnalyticsCookie":
                return new BotmanBotAnalyticsCookie(name, <any>undefined, { urn })
            case "akamai:index/botmanBotCategoryException:BotmanBotCategoryException":
                return new BotmanBotCategoryException(name, <any>undefined, { urn })
            case "akamai:index/botmanBotDetectionAction:BotmanBotDetectionAction":
                return new BotmanBotDetectionAction(name, <any>undefined, { urn })
            case "akamai:index/botmanBotManagementSettings:BotmanBotManagementSettings":
                return new BotmanBotManagementSettings(name, <any>undefined, { urn })
            case "akamai:index/botmanChallengeAction:BotmanChallengeAction":
                return new BotmanChallengeAction(name, <any>undefined, { urn })
            case "akamai:index/botmanChallengeInterceptionRules:BotmanChallengeInterceptionRules":
                return new BotmanChallengeInterceptionRules(name, <any>undefined, { urn })
            case "akamai:index/botmanClientSideSecurity:BotmanClientSideSecurity":
                return new BotmanClientSideSecurity(name, <any>undefined, { urn })
            case "akamai:index/botmanConditionalAction:BotmanConditionalAction":
                return new BotmanConditionalAction(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategory:BotmanCustomBotCategory":
                return new BotmanCustomBotCategory(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategoryAction:BotmanCustomBotCategoryAction":
                return new BotmanCustomBotCategoryAction(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategorySequence:BotmanCustomBotCategorySequence":
                return new BotmanCustomBotCategorySequence(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomClient:BotmanCustomClient":
                return new BotmanCustomClient(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomDefinedBot:BotmanCustomDefinedBot":
                return new BotmanCustomDefinedBot(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomDenyAction:BotmanCustomDenyAction":
                return new BotmanCustomDenyAction(name, <any>undefined, { urn })
            case "akamai:index/botmanJavascriptInjection:BotmanJavascriptInjection":
                return new BotmanJavascriptInjection(name, <any>undefined, { urn })
            case "akamai:index/botmanRecategorizedAkamaiDefinedBot:BotmanRecategorizedAkamaiDefinedBot":
                return new BotmanRecategorizedAkamaiDefinedBot(name, <any>undefined, { urn })
            case "akamai:index/botmanServeAlternateAction:BotmanServeAlternateAction":
                return new BotmanServeAlternateAction(name, <any>undefined, { urn })
            case "akamai:index/botmanTransactionalEndpoint:BotmanTransactionalEndpoint":
                return new BotmanTransactionalEndpoint(name, <any>undefined, { urn })
            case "akamai:index/botmanTransactionalEndpointProtection:BotmanTransactionalEndpointProtection":
                return new BotmanTransactionalEndpointProtection(name, <any>undefined, { urn })
            case "akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer":
                return new CloudletsApplicationLoadBalancer(name, <any>undefined, { urn })
            case "akamai:index/cloudletsApplicationLoadBalancerActivation:CloudletsApplicationLoadBalancerActivation":
                return new CloudletsApplicationLoadBalancerActivation(name, <any>undefined, { urn })
            case "akamai:index/cloudletsPolicy:CloudletsPolicy":
                return new CloudletsPolicy(name, <any>undefined, { urn })
            case "akamai:index/cloudletsPolicyActivation:CloudletsPolicyActivation":
                return new CloudletsPolicyActivation(name, <any>undefined, { urn })
            case "akamai:index/cpCode:CpCode":
                return new CpCode(name, <any>undefined, { urn })
            case "akamai:index/cpsDvEnrollment:CpsDvEnrollment":
                return new CpsDvEnrollment(name, <any>undefined, { urn })
            case "akamai:index/cpsDvValidation:CpsDvValidation":
                return new CpsDvValidation(name, <any>undefined, { urn })
            case "akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment":
                return new CpsThirdPartyEnrollment(name, <any>undefined, { urn })
            case "akamai:index/cpsUploadCertificate:CpsUploadCertificate":
                return new CpsUploadCertificate(name, <any>undefined, { urn })
            case "akamai:index/datastream:Datastream":
                return new Datastream(name, <any>undefined, { urn })
            case "akamai:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "akamai:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "akamai:index/edgeHostName:EdgeHostName":
                return new EdgeHostName(name, <any>undefined, { urn })
            case "akamai:index/edgeKv:EdgeKv":
                return new EdgeKv(name, <any>undefined, { urn })
            case "akamai:index/edgeWorker:EdgeWorker":
                return new EdgeWorker(name, <any>undefined, { urn })
            case "akamai:index/edgeWorkersActivation:EdgeWorkersActivation":
                return new EdgeWorkersActivation(name, <any>undefined, { urn })
            case "akamai:index/edgekvGroupItems:EdgekvGroupItems":
                return new EdgekvGroupItems(name, <any>undefined, { urn })
            case "akamai:index/gtmAsmap:GtmAsmap":
                return new GtmAsmap(name, <any>undefined, { urn })
            case "akamai:index/gtmCidrmap:GtmCidrmap":
                return new GtmCidrmap(name, <any>undefined, { urn })
            case "akamai:index/gtmDatacenter:GtmDatacenter":
                return new GtmDatacenter(name, <any>undefined, { urn })
            case "akamai:index/gtmDomain:GtmDomain":
                return new GtmDomain(name, <any>undefined, { urn })
            case "akamai:index/gtmGeomap:GtmGeomap":
                return new GtmGeomap(name, <any>undefined, { urn })
            case "akamai:index/gtmProperty:GtmProperty":
                return new GtmProperty(name, <any>undefined, { urn })
            case "akamai:index/gtmResource:GtmResource":
                return new GtmResource(name, <any>undefined, { urn })
            case "akamai:index/iamBlockedUserProperties:IamBlockedUserProperties":
                return new IamBlockedUserProperties(name, <any>undefined, { urn })
            case "akamai:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "akamai:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "akamai:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "akamai:index/networkList:NetworkList":
                return new NetworkList(name, <any>undefined, { urn })
            case "akamai:index/networkListActivations:NetworkListActivations":
                return new NetworkListActivations(name, <any>undefined, { urn })
            case "akamai:index/networkListDescription:NetworkListDescription":
                return new NetworkListDescription(name, <any>undefined, { urn })
            case "akamai:index/networkListSubscription:NetworkListSubscription":
                return new NetworkListSubscription(name, <any>undefined, { urn })
            case "akamai:index/property:Property":
                return new Property(name, <any>undefined, { urn })
            case "akamai:index/propertyActivation:PropertyActivation":
                return new PropertyActivation(name, <any>undefined, { urn })
            case "akamai:index/propertyInclude:PropertyInclude":
                return new PropertyInclude(name, <any>undefined, { urn })
            case "akamai:index/propertyIncludeActivation:PropertyIncludeActivation":
                return new PropertyIncludeActivation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("akamai", "index/appSecActivations", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecAdvancedSettingsEvasivePathMatch", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecAdvancedSettingsLogging", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecAdvancedSettingsPragmaHeader", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecAdvancedSettingsPrefetch", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecApiConstraintsProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecApiRequestConstraints", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecAttackGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecByPassNetworkList", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecConfiguration", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecConfigurationRename", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecCustomDeny", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecCustomRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecCustomRuleAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecEval", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecEvalGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecEvalPenaltyBox", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecEvalRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecIPGeo", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecIPGeoProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMalwarePolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMalwarePolicyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMalwarePolicyActions", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMalwareProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMatchTarget", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecMatchTargetSequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecPenaltyBox", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecRatePolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecRatePolicyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecRateProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecReputationProfile", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecReputationProfileAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecReputationProfileAnalysis", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecReputationProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecRuleUpgrade", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSecurityPolicyRename", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSelectedHostnames", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSiemSettings", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSlowPost", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecSlowPostProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecThreatIntel", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecVersionNodes", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecWafMode", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecWafProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appSecWapSelectedHostnames", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsAttackPayloadLogging", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsRequestBody", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanAkamaiBotCategoryAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotAnalyticsCookie", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotCategoryException", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotDetectionAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotManagementSettings", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanChallengeAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanChallengeInterceptionRules", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanClientSideSecurity", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanConditionalAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategory", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategoryAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategorySequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomClient", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomDefinedBot", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomDenyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanJavascriptInjection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanRecategorizedAkamaiDefinedBot", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanServeAlternateAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanTransactionalEndpoint", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanTransactionalEndpointProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsApplicationLoadBalancer", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsApplicationLoadBalancerActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsPolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsPolicyActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpCode", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsDvEnrollment", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsDvValidation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsThirdPartyEnrollment", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsUploadCertificate", _module)
pulumi.runtime.registerResourceModule("akamai", "index/datastream", _module)
pulumi.runtime.registerResourceModule("akamai", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("akamai", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeHostName", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeKv", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeWorker", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeWorkersActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgekvGroupItems", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmAsmap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmCidrmap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmDatacenter", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmDomain", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmGeomap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmProperty", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmResource", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamBlockedUserProperties", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networkList", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networkListActivations", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networkListDescription", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networkListSubscription", _module)
pulumi.runtime.registerResourceModule("akamai", "index/property", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyInclude", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyIncludeActivation", _module)
pulumi.runtime.registerResourcePackage("akamai", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:akamai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
