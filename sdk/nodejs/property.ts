// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Property extends pulumi.CustomResource {
    /**
     * Get an existing Property resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyState, opts?: pulumi.CustomResourceOptions): Property {
        return new Property(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/property:Property';

    /**
     * Returns true if the given object is an instance of Property.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Property {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Property.__pulumiType;
    }

    /**
     * ID of the property in the Identity and Access Management API.
     */
    public /*out*/ readonly assetId!: pulumi.Output<string>;
    /**
     * Contract ID to be assigned to the Property
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * Group ID to be assigned to the Property
     */
    public readonly groupId!: pulumi.Output<string>;
    public readonly hostnames!: pulumi.Output<outputs.PropertyHostname[] | undefined>;
    /**
     * Property's current latest version number
     */
    public /*out*/ readonly latestVersion!: pulumi.Output<number>;
    /**
     * Name to give to the Property (must be unique)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Product ID to be assigned to the Property
     */
    public readonly productId!: pulumi.Output<string>;
    /**
     * Property's version currently activated in production (zero when not active in production)
     */
    public /*out*/ readonly productionVersion!: pulumi.Output<number>;
    /**
     * Property ID
     */
    public readonly propertyId!: pulumi.Output<string | undefined>;
    /**
     * Required property's version to be read
     */
    public /*out*/ readonly readVersion!: pulumi.Output<number>;
    public /*out*/ readonly ruleErrors!: pulumi.Output<outputs.PropertyRuleError[]>;
    /**
     * Specify the rule format version (defaults to latest version available when created)
     */
    public readonly ruleFormat!: pulumi.Output<string>;
    /**
     * Rule validation warnings
     */
    public /*out*/ readonly ruleWarnings!: pulumi.Output<outputs.PropertyRuleWarning[]>;
    /**
     * Property Rules as JSON
     */
    public readonly rules!: pulumi.Output<string>;
    /**
     * Property's version currently activated in staging (zero when not active in staging)
     */
    public /*out*/ readonly stagingVersion!: pulumi.Output<number>;
    /**
     * Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
     * incrementing property versions.
     */
    public readonly useHostnameBucket!: pulumi.Output<boolean | undefined>;
    /**
     * Property version notes
     */
    public readonly versionNotes!: pulumi.Output<string>;

    /**
     * Create a Property resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyArgs | PropertyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PropertyState | undefined;
            resourceInputs["assetId"] = state ? state.assetId : undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["productionVersion"] = state ? state.productionVersion : undefined;
            resourceInputs["propertyId"] = state ? state.propertyId : undefined;
            resourceInputs["readVersion"] = state ? state.readVersion : undefined;
            resourceInputs["ruleErrors"] = state ? state.ruleErrors : undefined;
            resourceInputs["ruleFormat"] = state ? state.ruleFormat : undefined;
            resourceInputs["ruleWarnings"] = state ? state.ruleWarnings : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["stagingVersion"] = state ? state.stagingVersion : undefined;
            resourceInputs["useHostnameBucket"] = state ? state.useHostnameBucket : undefined;
            resourceInputs["versionNotes"] = state ? state.versionNotes : undefined;
        } else {
            const args = argsOrState as PropertyArgs | undefined;
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["hostnames"] = args ? args.hostnames : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["propertyId"] = args ? args.propertyId : undefined;
            resourceInputs["ruleFormat"] = args ? args.ruleFormat : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["useHostnameBucket"] = args ? args.useHostnameBucket : undefined;
            resourceInputs["versionNotes"] = args ? args.versionNotes : undefined;
            resourceInputs["assetId"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["productionVersion"] = undefined /*out*/;
            resourceInputs["readVersion"] = undefined /*out*/;
            resourceInputs["ruleErrors"] = undefined /*out*/;
            resourceInputs["ruleWarnings"] = undefined /*out*/;
            resourceInputs["stagingVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:properties/property:Property" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Property.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Property resources.
 */
export interface PropertyState {
    /**
     * ID of the property in the Identity and Access Management API.
     */
    assetId?: pulumi.Input<string>;
    /**
     * Contract ID to be assigned to the Property
     */
    contractId?: pulumi.Input<string>;
    /**
     * Group ID to be assigned to the Property
     */
    groupId?: pulumi.Input<string>;
    hostnames?: pulumi.Input<pulumi.Input<inputs.PropertyHostname>[]>;
    /**
     * Property's current latest version number
     */
    latestVersion?: pulumi.Input<number>;
    /**
     * Name to give to the Property (must be unique)
     */
    name?: pulumi.Input<string>;
    /**
     * Product ID to be assigned to the Property
     */
    productId?: pulumi.Input<string>;
    /**
     * Property's version currently activated in production (zero when not active in production)
     */
    productionVersion?: pulumi.Input<number>;
    /**
     * Property ID
     */
    propertyId?: pulumi.Input<string>;
    /**
     * Required property's version to be read
     */
    readVersion?: pulumi.Input<number>;
    ruleErrors?: pulumi.Input<pulumi.Input<inputs.PropertyRuleError>[]>;
    /**
     * Specify the rule format version (defaults to latest version available when created)
     */
    ruleFormat?: pulumi.Input<string>;
    /**
     * Rule validation warnings
     */
    ruleWarnings?: pulumi.Input<pulumi.Input<inputs.PropertyRuleWarning>[]>;
    /**
     * Property Rules as JSON
     */
    rules?: pulumi.Input<string>;
    /**
     * Property's version currently activated in staging (zero when not active in staging)
     */
    stagingVersion?: pulumi.Input<number>;
    /**
     * Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
     * incrementing property versions.
     */
    useHostnameBucket?: pulumi.Input<boolean>;
    /**
     * Property version notes
     */
    versionNotes?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Property resource.
 */
export interface PropertyArgs {
    /**
     * Contract ID to be assigned to the Property
     */
    contractId: pulumi.Input<string>;
    /**
     * Group ID to be assigned to the Property
     */
    groupId: pulumi.Input<string>;
    hostnames?: pulumi.Input<pulumi.Input<inputs.PropertyHostname>[]>;
    /**
     * Name to give to the Property (must be unique)
     */
    name?: pulumi.Input<string>;
    /**
     * Product ID to be assigned to the Property
     */
    productId: pulumi.Input<string>;
    /**
     * Property ID
     */
    propertyId?: pulumi.Input<string>;
    /**
     * Specify the rule format version (defaults to latest version available when created)
     */
    ruleFormat?: pulumi.Input<string>;
    /**
     * Property Rules as JSON
     */
    rules?: pulumi.Input<string>;
    /**
     * Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
     * incrementing property versions.
     */
    useHostnameBucket?: pulumi.Input<boolean>;
    /**
     * Property version notes
     */
    versionNotes?: pulumi.Input<string>;
}
