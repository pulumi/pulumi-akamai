// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppSecReputationProfileAction extends pulumi.CustomResource {
    /**
     * Get an existing AppSecReputationProfileAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecReputationProfileActionState, opts?: pulumi.CustomResourceOptions): AppSecReputationProfileAction {
        return new AppSecReputationProfileAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecReputationProfileAction:AppSecReputationProfileAction';

    /**
     * Returns true if the given object is an instance of AppSecReputationProfileAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecReputationProfileAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecReputationProfileAction.__pulumiType;
    }

    /**
     * Action to be taken when the reputation profile is triggered
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * Unique identifier of the security configuration
     */
    declare public readonly configId: pulumi.Output<number>;
    /**
     * Unique identifier of the reputation profile
     */
    declare public readonly reputationProfileId: pulumi.Output<number>;
    /**
     * Unique identifier of the security policy
     */
    declare public readonly securityPolicyId: pulumi.Output<string>;

    /**
     * Create a AppSecReputationProfileAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecReputationProfileActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecReputationProfileActionArgs | AppSecReputationProfileActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecReputationProfileActionState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["configId"] = state?.configId;
            resourceInputs["reputationProfileId"] = state?.reputationProfileId;
            resourceInputs["securityPolicyId"] = state?.securityPolicyId;
        } else {
            const args = argsOrState as AppSecReputationProfileActionArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.configId === undefined && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if (args?.reputationProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'reputationProfileId'");
            }
            if (args?.securityPolicyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["configId"] = args?.configId;
            resourceInputs["reputationProfileId"] = args?.reputationProfileId;
            resourceInputs["securityPolicyId"] = args?.securityPolicyId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSecReputationProfileAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecReputationProfileAction resources.
 */
export interface AppSecReputationProfileActionState {
    /**
     * Action to be taken when the reputation profile is triggered
     */
    action?: pulumi.Input<string>;
    /**
     * Unique identifier of the security configuration
     */
    configId?: pulumi.Input<number>;
    /**
     * Unique identifier of the reputation profile
     */
    reputationProfileId?: pulumi.Input<number>;
    /**
     * Unique identifier of the security policy
     */
    securityPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecReputationProfileAction resource.
 */
export interface AppSecReputationProfileActionArgs {
    /**
     * Action to be taken when the reputation profile is triggered
     */
    action: pulumi.Input<string>;
    /**
     * Unique identifier of the security configuration
     */
    configId: pulumi.Input<number>;
    /**
     * Unique identifier of the reputation profile
     */
    reputationProfileId: pulumi.Input<number>;
    /**
     * Unique identifier of the security policy
     */
    securityPolicyId: pulumi.Input<string>;
}
