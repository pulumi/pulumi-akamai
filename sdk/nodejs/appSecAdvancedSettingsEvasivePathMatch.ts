// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `resourceAkamaiAppsecAdvancedSettingsEvasivePathMatch` resource allows you to enable, disable, or update the evasive path match setting for a configuration. This setting determines whether fuzzy matching is used to make URL matching more inclusive.
 * This operation applies at the configuration level, and therefore applies to all policies within a configuration. You may override this setting for a particular policy by specifying the policy using the securityPolicyId parameter.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: _var.security_configuration,
 * });
 * const configEvasivePathMatch = new akamai.AppSecAdvancedSettingsEvasivePathMatch("configEvasivePathMatch", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     enablePathMatch: true,
 * });
 * // USE CASE: user wants to override the evasive path match setting for a security policy
 * const policyOverride = new akamai.AppSecAdvancedSettingsEvasivePathMatch("policyOverride", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     securityPolicyId: _var.security_policy_id,
 *     enablePathMatch: true,
 * });
 * ```
 */
export class AppSecAdvancedSettingsEvasivePathMatch extends pulumi.CustomResource {
    /**
     * Get an existing AppSecAdvancedSettingsEvasivePathMatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecAdvancedSettingsEvasivePathMatchState, opts?: pulumi.CustomResourceOptions): AppSecAdvancedSettingsEvasivePathMatch {
        return new AppSecAdvancedSettingsEvasivePathMatch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch';

    /**
     * Returns true if the given object is an instance of AppSecAdvancedSettingsEvasivePathMatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecAdvancedSettingsEvasivePathMatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecAdvancedSettingsEvasivePathMatch.__pulumiType;
    }

    /**
     * The ID of the security configuration to use.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * Whether to enable path match.
     */
    public readonly enablePathMatch!: pulumi.Output<boolean>;
    /**
     * The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
     */
    public readonly securityPolicyId!: pulumi.Output<string | undefined>;

    /**
     * Create a AppSecAdvancedSettingsEvasivePathMatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecAdvancedSettingsEvasivePathMatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecAdvancedSettingsEvasivePathMatchArgs | AppSecAdvancedSettingsEvasivePathMatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecAdvancedSettingsEvasivePathMatchState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["enablePathMatch"] = state ? state.enablePathMatch : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
        } else {
            const args = argsOrState as AppSecAdvancedSettingsEvasivePathMatchArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.enablePathMatch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enablePathMatch'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["enablePathMatch"] = args ? args.enablePathMatch : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppSecAdvancedSettingsEvasivePathMatch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecAdvancedSettingsEvasivePathMatch resources.
 */
export interface AppSecAdvancedSettingsEvasivePathMatchState {
    /**
     * The ID of the security configuration to use.
     */
    configId?: pulumi.Input<number>;
    /**
     * Whether to enable path match.
     */
    enablePathMatch?: pulumi.Input<boolean>;
    /**
     * The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
     */
    securityPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecAdvancedSettingsEvasivePathMatch resource.
 */
export interface AppSecAdvancedSettingsEvasivePathMatchArgs {
    /**
     * The ID of the security configuration to use.
     */
    configId: pulumi.Input<number>;
    /**
     * Whether to enable path match.
     */
    enablePathMatch: pulumi.Input<boolean>;
    /**
     * The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
     */
    securityPolicyId?: pulumi.Input<string>;
}
