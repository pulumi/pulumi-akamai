// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Scopes**: Security configuration; hostname
 *
 * Returns information about any other configuration versions that contain a hostname found in the current configuration version. The returned information is described in the [List hostname overlaps](https://developer.akamai.com/api/cloud_security/application_security/v1.html#gethostnamecoverageoverlapping) section of the Application Security API.
 *
 * **Related API Endpoint**:[/appsec/v1/configs/{configId}/versions/{versionNumber}/hostname-coverage/overlapping?hostname={host}](https://developer.akamai.com/api/cloud_security/application_security/v1.html#gethostnamecoverageoverlapping)
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Documentation",
 * });
 * const test = configuration.then(configuration => akamai.getAppSecHostnameCoverageOverlapping({
 *     configId: configuration.configId,
 *     hostname: "documentation.akamai.com",
 * }));
 * ```
 * ## Output Options
 *
 * The following options can be used to determine the information returned, and how that returned information is formatted:
 *
 * - `json`. JSON-formatted list of the overlap information.
 * - `outputText`. Tabular report of the overlap information.
 */
export function getAppSecHostnameCoverageOverlapping(args: GetAppSecHostnameCoverageOverlappingArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecHostnameCoverageOverlappingResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("akamai:index/getAppSecHostnameCoverageOverlapping:getAppSecHostnameCoverageOverlapping", {
        "configId": args.configId,
        "hostname": args.hostname,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecHostnameCoverageOverlapping.
 */
export interface GetAppSecHostnameCoverageOverlappingArgs {
    /**
     * . Unique identifier of the security configuration you want to return information for.
     */
    configId: number;
    /**
     * . Name of the host you want to return information for.
     */
    hostname: string;
}

/**
 * A collection of values returned by getAppSecHostnameCoverageOverlapping.
 */
export interface GetAppSecHostnameCoverageOverlappingResult {
    readonly configId: number;
    readonly hostname: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly json: string;
    readonly outputText: string;
}

export function getAppSecHostnameCoverageOverlappingOutput(args: GetAppSecHostnameCoverageOverlappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSecHostnameCoverageOverlappingResult> {
    return pulumi.output(args).apply(a => getAppSecHostnameCoverageOverlapping(a, opts))
}

/**
 * A collection of arguments for invoking getAppSecHostnameCoverageOverlapping.
 */
export interface GetAppSecHostnameCoverageOverlappingOutputArgs {
    /**
     * . Unique identifier of the security configuration you want to return information for.
     */
    configId: pulumi.Input<number>;
    /**
     * . Name of the host you want to return information for.
     */
    hostname: pulumi.Input<string>;
}
