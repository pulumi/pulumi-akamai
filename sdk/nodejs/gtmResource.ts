// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GtmResource extends pulumi.CustomResource {
    /**
     * Get an existing GtmResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmResourceState, opts?: pulumi.CustomResourceOptions): GtmResource {
        return new GtmResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmResource:GtmResource';

    /**
     * Returns true if the given object is an instance of GtmResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmResource.__pulumiType;
    }

    declare public readonly aggregationType: pulumi.Output<string>;
    declare public readonly constrainedProperty: pulumi.Output<string | undefined>;
    declare public readonly decayRate: pulumi.Output<number | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly domain: pulumi.Output<string>;
    declare public readonly hostHeader: pulumi.Output<string | undefined>;
    declare public readonly leaderString: pulumi.Output<string | undefined>;
    declare public readonly leastSquaresDecay: pulumi.Output<number | undefined>;
    declare public readonly loadImbalancePercentage: pulumi.Output<number | undefined>;
    declare public readonly maxUMultiplicativeIncrement: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly resourceInstances: pulumi.Output<outputs.GtmResourceResourceInstance[] | undefined>;
    declare public readonly type: pulumi.Output<string>;
    declare public readonly upperBound: pulumi.Output<number | undefined>;
    declare public readonly waitOnComplete: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmResourceArgs | GtmResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmResourceState | undefined;
            resourceInputs["aggregationType"] = state?.aggregationType;
            resourceInputs["constrainedProperty"] = state?.constrainedProperty;
            resourceInputs["decayRate"] = state?.decayRate;
            resourceInputs["description"] = state?.description;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["hostHeader"] = state?.hostHeader;
            resourceInputs["leaderString"] = state?.leaderString;
            resourceInputs["leastSquaresDecay"] = state?.leastSquaresDecay;
            resourceInputs["loadImbalancePercentage"] = state?.loadImbalancePercentage;
            resourceInputs["maxUMultiplicativeIncrement"] = state?.maxUMultiplicativeIncrement;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceInstances"] = state?.resourceInstances;
            resourceInputs["type"] = state?.type;
            resourceInputs["upperBound"] = state?.upperBound;
            resourceInputs["waitOnComplete"] = state?.waitOnComplete;
        } else {
            const args = argsOrState as GtmResourceArgs | undefined;
            if (args?.aggregationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'aggregationType'");
            }
            if (args?.domain === undefined && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["aggregationType"] = args?.aggregationType;
            resourceInputs["constrainedProperty"] = args?.constrainedProperty;
            resourceInputs["decayRate"] = args?.decayRate;
            resourceInputs["description"] = args?.description;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["hostHeader"] = args?.hostHeader;
            resourceInputs["leaderString"] = args?.leaderString;
            resourceInputs["leastSquaresDecay"] = args?.leastSquaresDecay;
            resourceInputs["loadImbalancePercentage"] = args?.loadImbalancePercentage;
            resourceInputs["maxUMultiplicativeIncrement"] = args?.maxUMultiplicativeIncrement;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceInstances"] = args?.resourceInstances;
            resourceInputs["type"] = args?.type;
            resourceInputs["upperBound"] = args?.upperBound;
            resourceInputs["waitOnComplete"] = args?.waitOnComplete;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmResource:GtmResource" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmResource resources.
 */
export interface GtmResourceState {
    aggregationType?: pulumi.Input<string>;
    constrainedProperty?: pulumi.Input<string>;
    decayRate?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    hostHeader?: pulumi.Input<string>;
    leaderString?: pulumi.Input<string>;
    leastSquaresDecay?: pulumi.Input<number>;
    loadImbalancePercentage?: pulumi.Input<number>;
    maxUMultiplicativeIncrement?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    resourceInstances?: pulumi.Input<pulumi.Input<inputs.GtmResourceResourceInstance>[]>;
    type?: pulumi.Input<string>;
    upperBound?: pulumi.Input<number>;
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmResource resource.
 */
export interface GtmResourceArgs {
    aggregationType: pulumi.Input<string>;
    constrainedProperty?: pulumi.Input<string>;
    decayRate?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    hostHeader?: pulumi.Input<string>;
    leaderString?: pulumi.Input<string>;
    leastSquaresDecay?: pulumi.Input<number>;
    loadImbalancePercentage?: pulumi.Input<number>;
    maxUMultiplicativeIncrement?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    resourceInstances?: pulumi.Input<pulumi.Input<inputs.GtmResourceResourceInstance>[]>;
    type: pulumi.Input<string>;
    upperBound?: pulumi.Input<number>;
    waitOnComplete?: pulumi.Input<boolean>;
}
