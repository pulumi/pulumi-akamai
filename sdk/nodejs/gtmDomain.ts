// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GtmDomain extends pulumi.CustomResource {
    /**
     * Get an existing GtmDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmDomainState, opts?: pulumi.CustomResourceOptions): GtmDomain {
        return new GtmDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmDomain:GtmDomain';

    /**
     * Returns true if the given object is an instance of GtmDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmDomain.__pulumiType;
    }

    declare public readonly cnameCoalescingEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly contract: pulumi.Output<string | undefined>;
    declare public readonly defaultErrorPenalty: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly defaultHealthMax: pulumi.Output<number>;
    declare public /*out*/ readonly defaultHealthMultiplier: pulumi.Output<number>;
    declare public /*out*/ readonly defaultHealthThreshold: pulumi.Output<number>;
    declare public /*out*/ readonly defaultMaxUnreachablePenalty: pulumi.Output<number>;
    declare public readonly defaultSslClientCertificate: pulumi.Output<string | undefined>;
    declare public readonly defaultSslClientPrivateKey: pulumi.Output<string | undefined>;
    declare public readonly defaultTimeoutPenalty: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly defaultUnreachableThreshold: pulumi.Output<number>;
    declare public readonly emailNotificationLists: pulumi.Output<string[] | undefined>;
    declare public readonly endUserMappingEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly group: pulumi.Output<string | undefined>;
    declare public readonly loadFeedback: pulumi.Output<boolean | undefined>;
    declare public readonly loadImbalancePercentage: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly mapUpdateInterval: pulumi.Output<number>;
    declare public /*out*/ readonly maxProperties: pulumi.Output<number>;
    declare public /*out*/ readonly maxResources: pulumi.Output<number>;
    declare public /*out*/ readonly maxTestTimeout: pulumi.Output<number>;
    declare public /*out*/ readonly maxTtl: pulumi.Output<number>;
    declare public /*out*/ readonly minPingableRegionFraction: pulumi.Output<number>;
    declare public /*out*/ readonly minTestInterval: pulumi.Output<number>;
    declare public /*out*/ readonly minTtl: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly pingInterval: pulumi.Output<number>;
    declare public /*out*/ readonly pingPacketSize: pulumi.Output<number>;
    declare public /*out*/ readonly roundRobinPrefix: pulumi.Output<string>;
    declare public /*out*/ readonly servermonitorLivenessCount: pulumi.Output<number>;
    declare public /*out*/ readonly servermonitorLoadCount: pulumi.Output<number>;
    declare public /*out*/ readonly servermonitorPool: pulumi.Output<string>;
    /**
     * If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
     */
    declare public readonly signAndServe: pulumi.Output<boolean | undefined>;
    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     */
    declare public readonly signAndServeAlgorithm: pulumi.Output<string | undefined>;
    declare public readonly type: pulumi.Output<string>;
    declare public readonly waitOnComplete: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmDomainArgs | GtmDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmDomainState | undefined;
            resourceInputs["cnameCoalescingEnabled"] = state?.cnameCoalescingEnabled;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["contract"] = state?.contract;
            resourceInputs["defaultErrorPenalty"] = state?.defaultErrorPenalty;
            resourceInputs["defaultHealthMax"] = state?.defaultHealthMax;
            resourceInputs["defaultHealthMultiplier"] = state?.defaultHealthMultiplier;
            resourceInputs["defaultHealthThreshold"] = state?.defaultHealthThreshold;
            resourceInputs["defaultMaxUnreachablePenalty"] = state?.defaultMaxUnreachablePenalty;
            resourceInputs["defaultSslClientCertificate"] = state?.defaultSslClientCertificate;
            resourceInputs["defaultSslClientPrivateKey"] = state?.defaultSslClientPrivateKey;
            resourceInputs["defaultTimeoutPenalty"] = state?.defaultTimeoutPenalty;
            resourceInputs["defaultUnreachableThreshold"] = state?.defaultUnreachableThreshold;
            resourceInputs["emailNotificationLists"] = state?.emailNotificationLists;
            resourceInputs["endUserMappingEnabled"] = state?.endUserMappingEnabled;
            resourceInputs["group"] = state?.group;
            resourceInputs["loadFeedback"] = state?.loadFeedback;
            resourceInputs["loadImbalancePercentage"] = state?.loadImbalancePercentage;
            resourceInputs["mapUpdateInterval"] = state?.mapUpdateInterval;
            resourceInputs["maxProperties"] = state?.maxProperties;
            resourceInputs["maxResources"] = state?.maxResources;
            resourceInputs["maxTestTimeout"] = state?.maxTestTimeout;
            resourceInputs["maxTtl"] = state?.maxTtl;
            resourceInputs["minPingableRegionFraction"] = state?.minPingableRegionFraction;
            resourceInputs["minTestInterval"] = state?.minTestInterval;
            resourceInputs["minTtl"] = state?.minTtl;
            resourceInputs["name"] = state?.name;
            resourceInputs["pingInterval"] = state?.pingInterval;
            resourceInputs["pingPacketSize"] = state?.pingPacketSize;
            resourceInputs["roundRobinPrefix"] = state?.roundRobinPrefix;
            resourceInputs["servermonitorLivenessCount"] = state?.servermonitorLivenessCount;
            resourceInputs["servermonitorLoadCount"] = state?.servermonitorLoadCount;
            resourceInputs["servermonitorPool"] = state?.servermonitorPool;
            resourceInputs["signAndServe"] = state?.signAndServe;
            resourceInputs["signAndServeAlgorithm"] = state?.signAndServeAlgorithm;
            resourceInputs["type"] = state?.type;
            resourceInputs["waitOnComplete"] = state?.waitOnComplete;
        } else {
            const args = argsOrState as GtmDomainArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cnameCoalescingEnabled"] = args?.cnameCoalescingEnabled;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["contract"] = args?.contract;
            resourceInputs["defaultErrorPenalty"] = args?.defaultErrorPenalty;
            resourceInputs["defaultSslClientCertificate"] = args?.defaultSslClientCertificate;
            resourceInputs["defaultSslClientPrivateKey"] = args?.defaultSslClientPrivateKey;
            resourceInputs["defaultTimeoutPenalty"] = args?.defaultTimeoutPenalty;
            resourceInputs["emailNotificationLists"] = args?.emailNotificationLists;
            resourceInputs["endUserMappingEnabled"] = args?.endUserMappingEnabled;
            resourceInputs["group"] = args?.group;
            resourceInputs["loadFeedback"] = args?.loadFeedback;
            resourceInputs["loadImbalancePercentage"] = args?.loadImbalancePercentage;
            resourceInputs["name"] = args?.name;
            resourceInputs["signAndServe"] = args?.signAndServe;
            resourceInputs["signAndServeAlgorithm"] = args?.signAndServeAlgorithm;
            resourceInputs["type"] = args?.type;
            resourceInputs["waitOnComplete"] = args?.waitOnComplete;
            resourceInputs["defaultHealthMax"] = undefined /*out*/;
            resourceInputs["defaultHealthMultiplier"] = undefined /*out*/;
            resourceInputs["defaultHealthThreshold"] = undefined /*out*/;
            resourceInputs["defaultMaxUnreachablePenalty"] = undefined /*out*/;
            resourceInputs["defaultUnreachableThreshold"] = undefined /*out*/;
            resourceInputs["mapUpdateInterval"] = undefined /*out*/;
            resourceInputs["maxProperties"] = undefined /*out*/;
            resourceInputs["maxResources"] = undefined /*out*/;
            resourceInputs["maxTestTimeout"] = undefined /*out*/;
            resourceInputs["maxTtl"] = undefined /*out*/;
            resourceInputs["minPingableRegionFraction"] = undefined /*out*/;
            resourceInputs["minTestInterval"] = undefined /*out*/;
            resourceInputs["minTtl"] = undefined /*out*/;
            resourceInputs["pingInterval"] = undefined /*out*/;
            resourceInputs["pingPacketSize"] = undefined /*out*/;
            resourceInputs["roundRobinPrefix"] = undefined /*out*/;
            resourceInputs["servermonitorLivenessCount"] = undefined /*out*/;
            resourceInputs["servermonitorLoadCount"] = undefined /*out*/;
            resourceInputs["servermonitorPool"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmDomain:GtmDomain" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmDomain resources.
 */
export interface GtmDomainState {
    cnameCoalescingEnabled?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    contract?: pulumi.Input<string>;
    defaultErrorPenalty?: pulumi.Input<number>;
    defaultHealthMax?: pulumi.Input<number>;
    defaultHealthMultiplier?: pulumi.Input<number>;
    defaultHealthThreshold?: pulumi.Input<number>;
    defaultMaxUnreachablePenalty?: pulumi.Input<number>;
    defaultSslClientCertificate?: pulumi.Input<string>;
    defaultSslClientPrivateKey?: pulumi.Input<string>;
    defaultTimeoutPenalty?: pulumi.Input<number>;
    defaultUnreachableThreshold?: pulumi.Input<number>;
    emailNotificationLists?: pulumi.Input<pulumi.Input<string>[]>;
    endUserMappingEnabled?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    loadFeedback?: pulumi.Input<boolean>;
    loadImbalancePercentage?: pulumi.Input<number>;
    mapUpdateInterval?: pulumi.Input<number>;
    maxProperties?: pulumi.Input<number>;
    maxResources?: pulumi.Input<number>;
    maxTestTimeout?: pulumi.Input<number>;
    maxTtl?: pulumi.Input<number>;
    minPingableRegionFraction?: pulumi.Input<number>;
    minTestInterval?: pulumi.Input<number>;
    minTtl?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pingInterval?: pulumi.Input<number>;
    pingPacketSize?: pulumi.Input<number>;
    roundRobinPrefix?: pulumi.Input<string>;
    servermonitorLivenessCount?: pulumi.Input<number>;
    servermonitorLoadCount?: pulumi.Input<number>;
    servermonitorPool?: pulumi.Input<string>;
    /**
     * If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
     */
    signAndServe?: pulumi.Input<boolean>;
    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     */
    signAndServeAlgorithm?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmDomain resource.
 */
export interface GtmDomainArgs {
    cnameCoalescingEnabled?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    contract?: pulumi.Input<string>;
    defaultErrorPenalty?: pulumi.Input<number>;
    defaultSslClientCertificate?: pulumi.Input<string>;
    defaultSslClientPrivateKey?: pulumi.Input<string>;
    defaultTimeoutPenalty?: pulumi.Input<number>;
    emailNotificationLists?: pulumi.Input<pulumi.Input<string>[]>;
    endUserMappingEnabled?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    loadFeedback?: pulumi.Input<boolean>;
    loadImbalancePercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * If set (true) we will sign the domain's resource records so that they can be validated by a validating resolver.
     */
    signAndServe?: pulumi.Input<boolean>;
    /**
     * The signing algorithm to use for signAndServe. One of the following values: RSA_SHA1, RSA_SHA256, RSA_SHA512, ECDSA_P256_SHA256, ECDSA_P384_SHA384, ED25519, ED448.
     */
    signAndServeAlgorithm?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    waitOnComplete?: pulumi.Input<boolean>;
}
