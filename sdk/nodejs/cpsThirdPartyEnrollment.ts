// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CpsThirdPartyEnrollment extends pulumi.CustomResource {
    /**
     * Get an existing CpsThirdPartyEnrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions): CpsThirdPartyEnrollment {
        return new CpsThirdPartyEnrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment';

    /**
     * Returns true if the given object is an instance of CpsThirdPartyEnrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CpsThirdPartyEnrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CpsThirdPartyEnrollment.__pulumiType;
    }

    /**
     * Whether acknowledge warnings before certificate verification
     */
    public readonly acknowledgePreVerificationWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    public readonly adminContact!: pulumi.Output<outputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name
     */
    public readonly allowDuplicateCommonName!: pulumi.Output<boolean | undefined>;
    /**
     * List of warnings to be automatically approved
     */
    public readonly autoApproveWarnings!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate trust chain type
     */
    public readonly certificateChainType!: pulumi.Output<string | undefined>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    public readonly changeManagement!: pulumi.Output<boolean | undefined>;
    /**
     * Common name used for enrollment
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    public readonly csr!: pulumi.Output<outputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    public readonly excludeSans!: pulumi.Output<boolean | undefined>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    public readonly networkConfiguration!: pulumi.Output<outputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    public readonly organization!: pulumi.Output<outputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    public readonly sans!: pulumi.Output<string[] | undefined>;
    /**
     * Type of TLS deployment network
     */
    public readonly secureNetwork!: pulumi.Output<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    public readonly sniOnly!: pulumi.Output<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    public readonly techContact!: pulumi.Output<outputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    public readonly timeouts!: pulumi.Output<outputs.CpsThirdPartyEnrollmentTimeouts | undefined>;

    /**
     * Create a CpsThirdPartyEnrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CpsThirdPartyEnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CpsThirdPartyEnrollmentArgs | CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CpsThirdPartyEnrollmentState | undefined;
            resourceInputs["acknowledgePreVerificationWarnings"] = state ? state.acknowledgePreVerificationWarnings : undefined;
            resourceInputs["adminContact"] = state ? state.adminContact : undefined;
            resourceInputs["allowDuplicateCommonName"] = state ? state.allowDuplicateCommonName : undefined;
            resourceInputs["autoApproveWarnings"] = state ? state.autoApproveWarnings : undefined;
            resourceInputs["certificateChainType"] = state ? state.certificateChainType : undefined;
            resourceInputs["changeManagement"] = state ? state.changeManagement : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["excludeSans"] = state ? state.excludeSans : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["sans"] = state ? state.sans : undefined;
            resourceInputs["secureNetwork"] = state ? state.secureNetwork : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["sniOnly"] = state ? state.sniOnly : undefined;
            resourceInputs["techContact"] = state ? state.techContact : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CpsThirdPartyEnrollmentArgs | undefined;
            if ((!args || args.adminContact === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminContact'");
            }
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.csr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.secureNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secureNetwork'");
            }
            if ((!args || args.sniOnly === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sniOnly'");
            }
            if ((!args || args.techContact === undefined) && !opts.urn) {
                throw new Error("Missing required property 'techContact'");
            }
            resourceInputs["acknowledgePreVerificationWarnings"] = args ? args.acknowledgePreVerificationWarnings : undefined;
            resourceInputs["adminContact"] = args ? args.adminContact : undefined;
            resourceInputs["allowDuplicateCommonName"] = args ? args.allowDuplicateCommonName : undefined;
            resourceInputs["autoApproveWarnings"] = args ? args.autoApproveWarnings : undefined;
            resourceInputs["certificateChainType"] = args ? args.certificateChainType : undefined;
            resourceInputs["changeManagement"] = args ? args.changeManagement : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["excludeSans"] = args ? args.excludeSans : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["sans"] = args ? args.sans : undefined;
            resourceInputs["secureNetwork"] = args ? args.secureNetwork : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["sniOnly"] = args ? args.sniOnly : undefined;
            resourceInputs["techContact"] = args ? args.techContact : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CpsThirdPartyEnrollment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CpsThirdPartyEnrollment resources.
 */
export interface CpsThirdPartyEnrollmentState {
    /**
     * Whether acknowledge warnings before certificate verification
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    adminContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * List of warnings to be automatically approved
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * Common name used for enrollment
     */
    commonName?: pulumi.Input<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    contractId?: pulumi.Input<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    csr?: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    networkConfiguration?: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    organization?: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of TLS deployment network
     */
    secureNetwork?: pulumi.Input<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    sniOnly?: pulumi.Input<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    techContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTimeouts>;
}

/**
 * The set of arguments for constructing a CpsThirdPartyEnrollment resource.
 */
export interface CpsThirdPartyEnrollmentArgs {
    /**
     * Whether acknowledge warnings before certificate verification
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    adminContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * List of warnings to be automatically approved
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * Common name used for enrollment
     */
    commonName: pulumi.Input<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    contractId: pulumi.Input<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    csr: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    networkConfiguration: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    organization: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of TLS deployment network
     */
    secureNetwork: pulumi.Input<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    sniOnly: pulumi.Input<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    techContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTimeouts>;
}
