// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const enrollment = new akamai.CpsThirdPartyEnrollment("enrollment", {
 *     contractId: "C-0N7RAC7",
 *     commonName: "*.example.com",
 *     secureNetwork: "enhanced-tls",
 *     sniOnly: true,
 *     autoApproveWarnings: [
 *         "DNS_NAME_LONGER_THEN_255_CHARS",
 *         "CERTIFICATE_EXPIRATION_DATE_BEYOND_MAX_DAYS",
 *         "TRUST_CHAIN_EMPTY_AND_CERTIFICATE_SIGNED_BY_NON_STANDARD_ROOT",
 *     ],
 *     signatureAlgorithm: "SHA-256",
 *     adminContact: {
 *         firstName: "Mario",
 *         lastName: "Rossi",
 *         phone: "+1-311-555-2368",
 *         email: "mrossi@example.com",
 *         addressLineOne: "150 Broadway",
 *         city: "Cambridge",
 *         countryCode: "US",
 *         organization: "Example Corp.",
 *         postalCode: "02142",
 *         region: "MA",
 *         title: "Administrator",
 *     },
 *     techContact: {
 *         firstName: "Juan",
 *         lastName: "Perez",
 *         phone: "+1-311-555-2369",
 *         email: "jperez@example.com",
 *         addressLineOne: "150 Broadway",
 *         city: "Cambridge",
 *         countryCode: "US",
 *         organization: "Example Corp.",
 *         postalCode: "02142",
 *         region: "MA",
 *         title: "Administrator",
 *     },
 *     csr: {
 *         countryCode: "US",
 *         city: "Cambridge",
 *         organization: "Example Corp.",
 *         organizationalUnit: "Corp IT",
 *         state: "MA",
 *     },
 *     networkConfiguration: {
 *         disallowedTlsVersions: [
 *             "TLSv1",
 *             "TLSv1_1",
 *         ],
 *         cloneDnsNames: false,
 *         geography: "core",
 *         ocspStapling: "on",
 *         preferredCiphers: "ak-akamai-default",
 *         mustHaveCiphers: "ak-akamai-default",
 *         quicEnabled: false,
 *     },
 *     organization: {
 *         name: "Example Corp.",
 *         phone: "+1-311-555-2370",
 *         addressLineOne: "150 Broadway",
 *         city: "Cambridge",
 *         countryCode: "US",
 *         postalCode: "02142",
 *         region: "MA",
 *     },
 * });
 * export const enrollmentId = enrollment.id;
 * ```
 * ## Attributes reference
 *
 * The resource returns this attribute:
 *
 * * `id` - The unique identifier for this enrollment.
 *
 * ## Import
 *
 * Basic Usagehcl resource "akamai_cps_third_party_enrollment" "example" { (resource arguments) } You can import your Akamai third-party enrollment using a comma-delimited string of the enrollment ID and
 *
 *  contract ID, optionally with the `ctr_` prefix. You have to enter the IDs in this order`enrollment_id,contract_id` For example
 *
 * ```sh
 *  $ pulumi import akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment example 12345,1-AB123
 * ```
 */
export class CpsThirdPartyEnrollment extends pulumi.CustomResource {
    /**
     * Get an existing CpsThirdPartyEnrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions): CpsThirdPartyEnrollment {
        return new CpsThirdPartyEnrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment';

    /**
     * Returns true if the given object is an instance of CpsThirdPartyEnrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CpsThirdPartyEnrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CpsThirdPartyEnrollment.__pulumiType;
    }

    /**
     * Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
     */
    public readonly acknowledgePreVerificationWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Contact information for the certificate administrator at your company.
     */
    public readonly adminContact!: pulumi.Output<outputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
     */
    public readonly allowDuplicateCommonName!: pulumi.Output<boolean | undefined>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    public readonly autoApproveWarnings!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate trust chain type.
     */
    public readonly certificateChainType!: pulumi.Output<string | undefined>;
    /**
     * Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledgeChangeManagement` argument in the `akamai.CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
     */
    public readonly changeManagement!: pulumi.Output<boolean | undefined>;
    /**
     * (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * (Required) A contract's ID, optionally with the `ctr_` prefix.
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     */
    public readonly csr!: pulumi.Output<outputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
     */
    public readonly excludeSans!: pulumi.Output<boolean | undefined>;
    /**
     * The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     */
    public readonly networkConfiguration!: pulumi.Output<outputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Your organization information.
     */
    public readonly organization!: pulumi.Output<outputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * Additional common names to create a Subject Alternative Names (SAN) list.
     */
    public readonly sans!: pulumi.Output<string[] | undefined>;
    /**
     * The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
     */
    public readonly secureNetwork!: pulumi.Output<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
     */
    public readonly sniOnly!: pulumi.Output<boolean>;
    /**
     * The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
     */
    public readonly techContact!: pulumi.Output<outputs.CpsThirdPartyEnrollmentTechContact>;

    /**
     * Create a CpsThirdPartyEnrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CpsThirdPartyEnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CpsThirdPartyEnrollmentArgs | CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CpsThirdPartyEnrollmentState | undefined;
            resourceInputs["acknowledgePreVerificationWarnings"] = state ? state.acknowledgePreVerificationWarnings : undefined;
            resourceInputs["adminContact"] = state ? state.adminContact : undefined;
            resourceInputs["allowDuplicateCommonName"] = state ? state.allowDuplicateCommonName : undefined;
            resourceInputs["autoApproveWarnings"] = state ? state.autoApproveWarnings : undefined;
            resourceInputs["certificateChainType"] = state ? state.certificateChainType : undefined;
            resourceInputs["changeManagement"] = state ? state.changeManagement : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["excludeSans"] = state ? state.excludeSans : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["sans"] = state ? state.sans : undefined;
            resourceInputs["secureNetwork"] = state ? state.secureNetwork : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["sniOnly"] = state ? state.sniOnly : undefined;
            resourceInputs["techContact"] = state ? state.techContact : undefined;
        } else {
            const args = argsOrState as CpsThirdPartyEnrollmentArgs | undefined;
            if ((!args || args.adminContact === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminContact'");
            }
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.csr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.secureNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secureNetwork'");
            }
            if ((!args || args.sniOnly === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sniOnly'");
            }
            if ((!args || args.techContact === undefined) && !opts.urn) {
                throw new Error("Missing required property 'techContact'");
            }
            resourceInputs["acknowledgePreVerificationWarnings"] = args ? args.acknowledgePreVerificationWarnings : undefined;
            resourceInputs["adminContact"] = args ? args.adminContact : undefined;
            resourceInputs["allowDuplicateCommonName"] = args ? args.allowDuplicateCommonName : undefined;
            resourceInputs["autoApproveWarnings"] = args ? args.autoApproveWarnings : undefined;
            resourceInputs["certificateChainType"] = args ? args.certificateChainType : undefined;
            resourceInputs["changeManagement"] = args ? args.changeManagement : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["excludeSans"] = args ? args.excludeSans : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["sans"] = args ? args.sans : undefined;
            resourceInputs["secureNetwork"] = args ? args.secureNetwork : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["sniOnly"] = args ? args.sniOnly : undefined;
            resourceInputs["techContact"] = args ? args.techContact : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CpsThirdPartyEnrollment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CpsThirdPartyEnrollment resources.
 */
export interface CpsThirdPartyEnrollmentState {
    /**
     * Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator at your company.
     */
    adminContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type.
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledgeChangeManagement` argument in the `akamai.CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     */
    commonName?: pulumi.Input<string>;
    /**
     * (Required) A contract's ID, optionally with the `ctr_` prefix.
     */
    contractId?: pulumi.Input<string>;
    /**
     * When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     */
    csr?: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     */
    networkConfiguration?: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Your organization information.
     */
    organization?: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * Additional common names to create a Subject Alternative Names (SAN) list.
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
     */
    secureNetwork?: pulumi.Input<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
     */
    sniOnly?: pulumi.Input<boolean>;
    /**
     * The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
     */
    techContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
}

/**
 * The set of arguments for constructing a CpsThirdPartyEnrollment resource.
 */
export interface CpsThirdPartyEnrollmentArgs {
    /**
     * Whether you want to automatically acknowledge the validation warnings related to the current job state and proceed with the change.
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator at your company.
     */
    adminContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * (Optional) Boolean. Set to `true` if you want to reuse a common name that's part of an existing enrollment.
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the `akamai.getCpsWarnings` data source.
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type.
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * Boolean. Set to `true` to have CPS deploy first to staging for testing purposes. To deploy the certificate to production, use the `acknowledgeChangeManagement` argument in the `akamai.CpsUploadCertificate` resource. <br> If you don't use this option, CPS will automatically deploy the certificate to both networks.
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     */
    commonName: pulumi.Input<string>;
    /**
     * (Required) A contract's ID, optionally with the `ctr_` prefix.
     */
    contractId: pulumi.Input<string>;
    /**
     * When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     */
    csr: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * If set to `true`, then the SANs in the enrollment don't appear in the CSR that you send to your CA.
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     */
    networkConfiguration: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Your organization information.
     */
    organization: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * Additional common names to create a Subject Alternative Names (SAN) list.
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
     */
    secureNetwork: pulumi.Input<string>;
    /**
     * The SHA function. Changing this value may require running terraform destroy, terraform apply
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
     */
    sniOnly: pulumi.Input<boolean>;
    /**
     * The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
     */
    techContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
}
