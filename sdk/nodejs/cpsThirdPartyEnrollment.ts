// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CpsThirdPartyEnrollment extends pulumi.CustomResource {
    /**
     * Get an existing CpsThirdPartyEnrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions): CpsThirdPartyEnrollment {
        return new CpsThirdPartyEnrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment';

    /**
     * Returns true if the given object is an instance of CpsThirdPartyEnrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CpsThirdPartyEnrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CpsThirdPartyEnrollment.__pulumiType;
    }

    /**
     * Whether acknowledge warnings before certificate verification. Default is false
     */
    declare public readonly acknowledgePreVerificationWarnings: pulumi.Output<boolean | undefined>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    declare public readonly adminContact: pulumi.Output<outputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name. Default is false
     */
    declare public readonly allowDuplicateCommonName: pulumi.Output<boolean | undefined>;
    /**
     * List of warnings to be automatically approved
     */
    declare public readonly autoApproveWarnings: pulumi.Output<string[] | undefined>;
    /**
     * Certificate trust chain type. Default is 'default'
     */
    declare public readonly certificateChainType: pulumi.Output<string | undefined>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    declare public readonly changeManagement: pulumi.Output<boolean | undefined>;
    /**
     * Common name used for enrollment
     */
    declare public readonly commonName: pulumi.Output<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    declare public readonly contractId: pulumi.Output<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    declare public readonly csr: pulumi.Output<outputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    declare public readonly excludeSans: pulumi.Output<boolean | undefined>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    declare public readonly networkConfiguration: pulumi.Output<outputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    declare public readonly organization: pulumi.Output<outputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    declare public readonly sans: pulumi.Output<string[] | undefined>;
    /**
     * Type of TLS deployment network
     */
    declare public readonly secureNetwork: pulumi.Output<string>;
    declare public readonly signatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    declare public readonly sniOnly: pulumi.Output<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    declare public readonly techContact: pulumi.Output<outputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    declare public readonly timeouts: pulumi.Output<outputs.CpsThirdPartyEnrollmentTimeouts | undefined>;

    /**
     * Create a CpsThirdPartyEnrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CpsThirdPartyEnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CpsThirdPartyEnrollmentArgs | CpsThirdPartyEnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CpsThirdPartyEnrollmentState | undefined;
            resourceInputs["acknowledgePreVerificationWarnings"] = state?.acknowledgePreVerificationWarnings;
            resourceInputs["adminContact"] = state?.adminContact;
            resourceInputs["allowDuplicateCommonName"] = state?.allowDuplicateCommonName;
            resourceInputs["autoApproveWarnings"] = state?.autoApproveWarnings;
            resourceInputs["certificateChainType"] = state?.certificateChainType;
            resourceInputs["changeManagement"] = state?.changeManagement;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["contractId"] = state?.contractId;
            resourceInputs["csr"] = state?.csr;
            resourceInputs["excludeSans"] = state?.excludeSans;
            resourceInputs["networkConfiguration"] = state?.networkConfiguration;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["sans"] = state?.sans;
            resourceInputs["secureNetwork"] = state?.secureNetwork;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["sniOnly"] = state?.sniOnly;
            resourceInputs["techContact"] = state?.techContact;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as CpsThirdPartyEnrollmentArgs | undefined;
            if (args?.adminContact === undefined && !opts.urn) {
                throw new Error("Missing required property 'adminContact'");
            }
            if (args?.commonName === undefined && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if (args?.contractId === undefined && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if (args?.csr === undefined && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            if (args?.networkConfiguration === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if (args?.organization === undefined && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if (args?.secureNetwork === undefined && !opts.urn) {
                throw new Error("Missing required property 'secureNetwork'");
            }
            if (args?.sniOnly === undefined && !opts.urn) {
                throw new Error("Missing required property 'sniOnly'");
            }
            if (args?.techContact === undefined && !opts.urn) {
                throw new Error("Missing required property 'techContact'");
            }
            resourceInputs["acknowledgePreVerificationWarnings"] = args?.acknowledgePreVerificationWarnings;
            resourceInputs["adminContact"] = args?.adminContact;
            resourceInputs["allowDuplicateCommonName"] = args?.allowDuplicateCommonName;
            resourceInputs["autoApproveWarnings"] = args?.autoApproveWarnings;
            resourceInputs["certificateChainType"] = args?.certificateChainType;
            resourceInputs["changeManagement"] = args?.changeManagement;
            resourceInputs["commonName"] = args?.commonName;
            resourceInputs["contractId"] = args?.contractId;
            resourceInputs["csr"] = args?.csr;
            resourceInputs["excludeSans"] = args?.excludeSans;
            resourceInputs["networkConfiguration"] = args?.networkConfiguration;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["sans"] = args?.sans;
            resourceInputs["secureNetwork"] = args?.secureNetwork;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["sniOnly"] = args?.sniOnly;
            resourceInputs["techContact"] = args?.techContact;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CpsThirdPartyEnrollment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CpsThirdPartyEnrollment resources.
 */
export interface CpsThirdPartyEnrollmentState {
    /**
     * Whether acknowledge warnings before certificate verification. Default is false
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    adminContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name. Default is false
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * List of warnings to be automatically approved
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type. Default is 'default'
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * Common name used for enrollment
     */
    commonName?: pulumi.Input<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    contractId?: pulumi.Input<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    csr?: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    networkConfiguration?: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    organization?: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of TLS deployment network
     */
    secureNetwork?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    sniOnly?: pulumi.Input<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    techContact?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTimeouts>;
}

/**
 * The set of arguments for constructing a CpsThirdPartyEnrollment resource.
 */
export interface CpsThirdPartyEnrollmentArgs {
    /**
     * Whether acknowledge warnings before certificate verification. Default is false
     */
    acknowledgePreVerificationWarnings?: pulumi.Input<boolean>;
    /**
     * Contact information for the certificate administrator to use at organization
     */
    adminContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentAdminContact>;
    /**
     * Allow to duplicate common name. Default is false
     */
    allowDuplicateCommonName?: pulumi.Input<boolean>;
    /**
     * List of warnings to be automatically approved
     */
    autoApproveWarnings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate trust chain type. Default is 'default'
     */
    certificateChainType?: pulumi.Input<string>;
    /**
     * When set to false, the certificate will be deployed to both staging and production networks
     */
    changeManagement?: pulumi.Input<boolean>;
    /**
     * Common name used for enrollment
     */
    commonName: pulumi.Input<string>;
    /**
     * Contract ID for which enrollment is retrieved
     */
    contractId: pulumi.Input<string>;
    /**
     * Data used for generation of Certificate Signing Request
     */
    csr: pulumi.Input<inputs.CpsThirdPartyEnrollmentCsr>;
    /**
     * When true, SANs are excluded from the CSR
     */
    excludeSans?: pulumi.Input<boolean>;
    /**
     * Settings containing network information and TLS metadata used by CPS
     */
    networkConfiguration: pulumi.Input<inputs.CpsThirdPartyEnrollmentNetworkConfiguration>;
    /**
     * Organization information
     */
    organization: pulumi.Input<inputs.CpsThirdPartyEnrollmentOrganization>;
    /**
     * List of SANs
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of TLS deployment network
     */
    secureNetwork: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Whether Server Name Indication is used for enrollment
     */
    sniOnly: pulumi.Input<boolean>;
    /**
     * Contact information for an administrator at Akamai
     */
    techContact: pulumi.Input<inputs.CpsThirdPartyEnrollmentTechContact>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CpsThirdPartyEnrollmentTimeouts>;
}
