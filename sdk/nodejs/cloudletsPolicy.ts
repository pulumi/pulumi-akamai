// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudletsPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CloudletsPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudletsPolicyState, opts?: pulumi.CustomResourceOptions): CloudletsPolicy {
        return new CloudletsPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudletsPolicy:CloudletsPolicy';

    /**
     * Returns true if the given object is an instance of CloudletsPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudletsPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudletsPolicy.__pulumiType;
    }

    /**
     * Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
     */
    public readonly cloudletCode!: pulumi.Output<string>;
    /**
     * An integer that corresponds to a Cloudlets policy type (0 or 9)
     */
    public /*out*/ readonly cloudletId!: pulumi.Output<number>;
    /**
     * The description of this specific policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Defines the group association for the policy. You must have edit privileges for the group
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The version of the Cloudlet specific matchRules
     */
    public readonly matchRuleFormat!: pulumi.Output<string | undefined>;
    /**
     * A JSON structure that defines the rules for this policy
     */
    public readonly matchRules!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy. The name must be unique
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enables to set timeout for processing
     */
    public readonly timeouts!: pulumi.Output<outputs.CloudletsPolicyTimeouts | undefined>;
    /**
     * The version number of the policy
     */
    public /*out*/ readonly version!: pulumi.Output<number>;
    /**
     * A JSON encoded list of warnings
     */
    public /*out*/ readonly warnings!: pulumi.Output<string>;

    /**
     * Create a CloudletsPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudletsPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudletsPolicyArgs | CloudletsPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudletsPolicyState | undefined;
            resourceInputs["cloudletCode"] = state ? state.cloudletCode : undefined;
            resourceInputs["cloudletId"] = state ? state.cloudletId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["matchRuleFormat"] = state ? state.matchRuleFormat : undefined;
            resourceInputs["matchRules"] = state ? state.matchRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["warnings"] = state ? state.warnings : undefined;
        } else {
            const args = argsOrState as CloudletsPolicyArgs | undefined;
            if ((!args || args.cloudletCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudletCode'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["cloudletCode"] = args ? args.cloudletCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["matchRuleFormat"] = args ? args.matchRuleFormat : undefined;
            resourceInputs["matchRules"] = args ? args.matchRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cloudletId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["warnings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudletsPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudletsPolicy resources.
 */
export interface CloudletsPolicyState {
    /**
     * Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
     */
    cloudletCode?: pulumi.Input<string>;
    /**
     * An integer that corresponds to a Cloudlets policy type (0 or 9)
     */
    cloudletId?: pulumi.Input<number>;
    /**
     * The description of this specific policy
     */
    description?: pulumi.Input<string>;
    /**
     * Defines the group association for the policy. You must have edit privileges for the group
     */
    groupId?: pulumi.Input<string>;
    /**
     * The version of the Cloudlet specific matchRules
     */
    matchRuleFormat?: pulumi.Input<string>;
    /**
     * A JSON structure that defines the rules for this policy
     */
    matchRules?: pulumi.Input<string>;
    /**
     * The name of the policy. The name must be unique
     */
    name?: pulumi.Input<string>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CloudletsPolicyTimeouts>;
    /**
     * The version number of the policy
     */
    version?: pulumi.Input<number>;
    /**
     * A JSON encoded list of warnings
     */
    warnings?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudletsPolicy resource.
 */
export interface CloudletsPolicyArgs {
    /**
     * Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP)
     */
    cloudletCode: pulumi.Input<string>;
    /**
     * The description of this specific policy
     */
    description?: pulumi.Input<string>;
    /**
     * Defines the group association for the policy. You must have edit privileges for the group
     */
    groupId: pulumi.Input<string>;
    /**
     * The version of the Cloudlet specific matchRules
     */
    matchRuleFormat?: pulumi.Input<string>;
    /**
     * A JSON structure that defines the rules for this policy
     */
    matchRules?: pulumi.Input<string>;
    /**
     * The name of the policy. The name must be unique
     */
    name?: pulumi.Input<string>;
    /**
     * Enables to set timeout for processing
     */
    timeouts?: pulumi.Input<inputs.CloudletsPolicyTimeouts>;
}
