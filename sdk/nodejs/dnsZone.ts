// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    declare public /*out*/ readonly activationState: pulumi.Output<string>;
    declare public /*out*/ readonly aliasCount: pulumi.Output<number>;
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly contract: pulumi.Output<string>;
    declare public readonly endCustomerId: pulumi.Output<string | undefined>;
    declare public readonly group: pulumi.Output<string | undefined>;
    declare public readonly masters: pulumi.Output<string[] | undefined>;
    /**
     * Outbound zone transfer properties.
     */
    declare public readonly outboundZoneTransfer: pulumi.Output<outputs.DnsZoneOutboundZoneTransfer | undefined>;
    declare public readonly signAndServe: pulumi.Output<boolean | undefined>;
    declare public readonly signAndServeAlgorithm: pulumi.Output<string | undefined>;
    declare public readonly target: pulumi.Output<string | undefined>;
    declare public readonly tsigKey: pulumi.Output<outputs.DnsZoneTsigKey | undefined>;
    declare public readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly versionId: pulumi.Output<string>;
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["activationState"] = state?.activationState;
            resourceInputs["aliasCount"] = state?.aliasCount;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["contract"] = state?.contract;
            resourceInputs["endCustomerId"] = state?.endCustomerId;
            resourceInputs["group"] = state?.group;
            resourceInputs["masters"] = state?.masters;
            resourceInputs["outboundZoneTransfer"] = state?.outboundZoneTransfer;
            resourceInputs["signAndServe"] = state?.signAndServe;
            resourceInputs["signAndServeAlgorithm"] = state?.signAndServeAlgorithm;
            resourceInputs["target"] = state?.target;
            resourceInputs["tsigKey"] = state?.tsigKey;
            resourceInputs["type"] = state?.type;
            resourceInputs["versionId"] = state?.versionId;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if (args?.contract === undefined && !opts.urn) {
                throw new Error("Missing required property 'contract'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["contract"] = args?.contract;
            resourceInputs["endCustomerId"] = args?.endCustomerId;
            resourceInputs["group"] = args?.group;
            resourceInputs["masters"] = args?.masters;
            resourceInputs["outboundZoneTransfer"] = args?.outboundZoneTransfer;
            resourceInputs["signAndServe"] = args?.signAndServe;
            resourceInputs["signAndServeAlgorithm"] = args?.signAndServeAlgorithm;
            resourceInputs["target"] = args?.target;
            resourceInputs["tsigKey"] = args?.tsigKey;
            resourceInputs["type"] = args?.type;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["activationState"] = undefined /*out*/;
            resourceInputs["aliasCount"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "akamai:edgedns/dnsZone:DnsZone" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    activationState?: pulumi.Input<string>;
    aliasCount?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    contract?: pulumi.Input<string>;
    endCustomerId?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outbound zone transfer properties.
     */
    outboundZoneTransfer?: pulumi.Input<inputs.DnsZoneOutboundZoneTransfer>;
    signAndServe?: pulumi.Input<boolean>;
    signAndServeAlgorithm?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<inputs.DnsZoneTsigKey>;
    type?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    comment?: pulumi.Input<string>;
    contract: pulumi.Input<string>;
    endCustomerId?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Outbound zone transfer properties.
     */
    outboundZoneTransfer?: pulumi.Input<inputs.DnsZoneOutboundZoneTransfer>;
    signAndServe?: pulumi.Input<boolean>;
    signAndServeAlgorithm?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<inputs.DnsZoneTsigKey>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
