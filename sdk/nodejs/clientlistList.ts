// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClientlistList extends pulumi.CustomResource {
    /**
     * Get an existing ClientlistList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientlistListState, opts?: pulumi.CustomResourceOptions): ClientlistList {
        return new ClientlistList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/clientlistList:ClientlistList';

    /**
     * Returns true if the given object is an instance of ClientlistList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientlistList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientlistList.__pulumiType;
    }

    /**
     * Contract ID for which client list is assigned.
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * Group ID for which client list is assigned.
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * Set of items containing item information.
     */
    public readonly items!: pulumi.Output<outputs.ClientlistListItem[] | undefined>;
    /**
     * The number of items that a client list contains.
     */
    public /*out*/ readonly itemsCount!: pulumi.Output<number>;
    /**
     * The ID of the client list.
     */
    public /*out*/ readonly listId!: pulumi.Output<string>;
    /**
     * The name of the client list.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The client list notes.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * The client list tags.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The current version of the client list.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a ClientlistList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientlistListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientlistListArgs | ClientlistListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientlistListState | undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
            resourceInputs["itemsCount"] = state ? state.itemsCount : undefined;
            resourceInputs["listId"] = state ? state.listId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ClientlistListArgs | undefined;
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["items"] = args ? args.items : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["itemsCount"] = undefined /*out*/;
            resourceInputs["listId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientlistList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientlistList resources.
 */
export interface ClientlistListState {
    /**
     * Contract ID for which client list is assigned.
     */
    contractId?: pulumi.Input<string>;
    /**
     * Group ID for which client list is assigned.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Set of items containing item information.
     */
    items?: pulumi.Input<pulumi.Input<inputs.ClientlistListItem>[]>;
    /**
     * The number of items that a client list contains.
     */
    itemsCount?: pulumi.Input<number>;
    /**
     * The ID of the client list.
     */
    listId?: pulumi.Input<string>;
    /**
     * The name of the client list.
     */
    name?: pulumi.Input<string>;
    /**
     * The client list notes.
     */
    notes?: pulumi.Input<string>;
    /**
     * The client list tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
     */
    type?: pulumi.Input<string>;
    /**
     * The current version of the client list.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ClientlistList resource.
 */
export interface ClientlistListArgs {
    /**
     * Contract ID for which client list is assigned.
     */
    contractId: pulumi.Input<string>;
    /**
     * Group ID for which client list is assigned.
     */
    groupId: pulumi.Input<number>;
    /**
     * Set of items containing item information.
     */
    items?: pulumi.Input<pulumi.Input<inputs.ClientlistListItem>[]>;
    /**
     * The name of the client list.
     */
    name?: pulumi.Input<string>;
    /**
     * The client list notes.
     */
    notes?: pulumi.Input<string>;
    /**
     * The client list tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
     */
    type: pulumi.Input<string>;
}
