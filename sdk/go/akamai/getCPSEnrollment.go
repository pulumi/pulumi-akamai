// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func GetCPSEnrollment(ctx *pulumi.Context, args *GetCPSEnrollmentArgs, opts ...pulumi.InvokeOption) (*GetCPSEnrollmentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCPSEnrollmentResult
	err := ctx.Invoke("akamai:index/getCPSEnrollment:getCPSEnrollment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCPSEnrollment.
type GetCPSEnrollmentArgs struct {
	EnrollmentId int `pulumi:"enrollmentId"`
}

// A collection of values returned by getCPSEnrollment.
type GetCPSEnrollmentResult struct {
	AdminContacts                  []GetCPSEnrollmentAdminContact  `pulumi:"adminContacts"`
	CertificateChainType           string                          `pulumi:"certificateChainType"`
	CertificateType                string                          `pulumi:"certificateType"`
	CommonName                     string                          `pulumi:"commonName"`
	ContractId                     string                          `pulumi:"contractId"`
	Csrs                           []GetCPSEnrollmentCsr           `pulumi:"csrs"`
	DnsChallenges                  []GetCPSEnrollmentDnsChallenge  `pulumi:"dnsChallenges"`
	EnableMultiStackedCertificates bool                            `pulumi:"enableMultiStackedCertificates"`
	EnrollmentId                   int                             `pulumi:"enrollmentId"`
	HttpChallenges                 []GetCPSEnrollmentHttpChallenge `pulumi:"httpChallenges"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                                 `pulumi:"id"`
	NetworkConfigurations []GetCPSEnrollmentNetworkConfiguration `pulumi:"networkConfigurations"`
	Organizations         []GetCPSEnrollmentOrganization         `pulumi:"organizations"`
	PendingChanges        bool                                   `pulumi:"pendingChanges"`
	RegistrationAuthority string                                 `pulumi:"registrationAuthority"`
	Sans                  []string                               `pulumi:"sans"`
	SecureNetwork         string                                 `pulumi:"secureNetwork"`
	SignatureAlgorithm    string                                 `pulumi:"signatureAlgorithm"`
	SniOnly               bool                                   `pulumi:"sniOnly"`
	TechContacts          []GetCPSEnrollmentTechContact          `pulumi:"techContacts"`
	ValidationType        string                                 `pulumi:"validationType"`
}

func GetCPSEnrollmentOutput(ctx *pulumi.Context, args GetCPSEnrollmentOutputArgs, opts ...pulumi.InvokeOption) GetCPSEnrollmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCPSEnrollmentResult, error) {
			args := v.(GetCPSEnrollmentArgs)
			r, err := GetCPSEnrollment(ctx, &args, opts...)
			var s GetCPSEnrollmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCPSEnrollmentResultOutput)
}

// A collection of arguments for invoking getCPSEnrollment.
type GetCPSEnrollmentOutputArgs struct {
	EnrollmentId pulumi.IntInput `pulumi:"enrollmentId"`
}

func (GetCPSEnrollmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCPSEnrollmentArgs)(nil)).Elem()
}

// A collection of values returned by getCPSEnrollment.
type GetCPSEnrollmentResultOutput struct{ *pulumi.OutputState }

func (GetCPSEnrollmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCPSEnrollmentResult)(nil)).Elem()
}

func (o GetCPSEnrollmentResultOutput) ToGetCPSEnrollmentResultOutput() GetCPSEnrollmentResultOutput {
	return o
}

func (o GetCPSEnrollmentResultOutput) ToGetCPSEnrollmentResultOutputWithContext(ctx context.Context) GetCPSEnrollmentResultOutput {
	return o
}

func (o GetCPSEnrollmentResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetCPSEnrollmentResult] {
	return pulumix.Output[GetCPSEnrollmentResult]{
		OutputState: o.OutputState,
	}
}

func (o GetCPSEnrollmentResultOutput) AdminContacts() GetCPSEnrollmentAdminContactArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentAdminContact { return v.AdminContacts }).(GetCPSEnrollmentAdminContactArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) CertificateChainType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.CertificateChainType }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.CertificateType }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.CommonName }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.ContractId }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) Csrs() GetCPSEnrollmentCsrArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentCsr { return v.Csrs }).(GetCPSEnrollmentCsrArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) DnsChallenges() GetCPSEnrollmentDnsChallengeArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentDnsChallenge { return v.DnsChallenges }).(GetCPSEnrollmentDnsChallengeArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) EnableMultiStackedCertificates() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) bool { return v.EnableMultiStackedCertificates }).(pulumi.BoolOutput)
}

func (o GetCPSEnrollmentResultOutput) EnrollmentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) int { return v.EnrollmentId }).(pulumi.IntOutput)
}

func (o GetCPSEnrollmentResultOutput) HttpChallenges() GetCPSEnrollmentHttpChallengeArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentHttpChallenge { return v.HttpChallenges }).(GetCPSEnrollmentHttpChallengeArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCPSEnrollmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) NetworkConfigurations() GetCPSEnrollmentNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentNetworkConfiguration { return v.NetworkConfigurations }).(GetCPSEnrollmentNetworkConfigurationArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) Organizations() GetCPSEnrollmentOrganizationArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentOrganization { return v.Organizations }).(GetCPSEnrollmentOrganizationArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) PendingChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) bool { return v.PendingChanges }).(pulumi.BoolOutput)
}

func (o GetCPSEnrollmentResultOutput) RegistrationAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.RegistrationAuthority }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) Sans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []string { return v.Sans }).(pulumi.StringArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) SecureNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.SecureNetwork }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

func (o GetCPSEnrollmentResultOutput) SniOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) bool { return v.SniOnly }).(pulumi.BoolOutput)
}

func (o GetCPSEnrollmentResultOutput) TechContacts() GetCPSEnrollmentTechContactArrayOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) []GetCPSEnrollmentTechContact { return v.TechContacts }).(GetCPSEnrollmentTechContactArrayOutput)
}

func (o GetCPSEnrollmentResultOutput) ValidationType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCPSEnrollmentResult) string { return v.ValidationType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCPSEnrollmentResultOutput{})
}
