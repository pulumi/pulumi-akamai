// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudwrapperActivation struct {
	pulumi.CustomResourceState

	// The configuration you want to activate.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Unique hash value of the configuration.
	Revision pulumi.StringOutput                     `pulumi:"revision"`
	Timeouts CloudwrapperActivationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewCloudwrapperActivation registers a new resource with the given unique name, arguments, and options.
func NewCloudwrapperActivation(ctx *pulumi.Context,
	name string, args *CloudwrapperActivationArgs, opts ...pulumi.ResourceOption) (*CloudwrapperActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Revision == nil {
		return nil, errors.New("invalid value for required argument 'Revision'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudwrapperActivation
	err := ctx.RegisterResource("akamai:index/cloudwrapperActivation:CloudwrapperActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudwrapperActivation gets an existing CloudwrapperActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudwrapperActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudwrapperActivationState, opts ...pulumi.ResourceOption) (*CloudwrapperActivation, error) {
	var resource CloudwrapperActivation
	err := ctx.ReadResource("akamai:index/cloudwrapperActivation:CloudwrapperActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudwrapperActivation resources.
type cloudwrapperActivationState struct {
	// The configuration you want to activate.
	ConfigId *int `pulumi:"configId"`
	// Unique hash value of the configuration.
	Revision *string                         `pulumi:"revision"`
	Timeouts *CloudwrapperActivationTimeouts `pulumi:"timeouts"`
}

type CloudwrapperActivationState struct {
	// The configuration you want to activate.
	ConfigId pulumi.IntPtrInput
	// Unique hash value of the configuration.
	Revision pulumi.StringPtrInput
	Timeouts CloudwrapperActivationTimeoutsPtrInput
}

func (CloudwrapperActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudwrapperActivationState)(nil)).Elem()
}

type cloudwrapperActivationArgs struct {
	// The configuration you want to activate.
	ConfigId int `pulumi:"configId"`
	// Unique hash value of the configuration.
	Revision string                          `pulumi:"revision"`
	Timeouts *CloudwrapperActivationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a CloudwrapperActivation resource.
type CloudwrapperActivationArgs struct {
	// The configuration you want to activate.
	ConfigId pulumi.IntInput
	// Unique hash value of the configuration.
	Revision pulumi.StringInput
	Timeouts CloudwrapperActivationTimeoutsPtrInput
}

func (CloudwrapperActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudwrapperActivationArgs)(nil)).Elem()
}

type CloudwrapperActivationInput interface {
	pulumi.Input

	ToCloudwrapperActivationOutput() CloudwrapperActivationOutput
	ToCloudwrapperActivationOutputWithContext(ctx context.Context) CloudwrapperActivationOutput
}

func (*CloudwrapperActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudwrapperActivation)(nil)).Elem()
}

func (i *CloudwrapperActivation) ToCloudwrapperActivationOutput() CloudwrapperActivationOutput {
	return i.ToCloudwrapperActivationOutputWithContext(context.Background())
}

func (i *CloudwrapperActivation) ToCloudwrapperActivationOutputWithContext(ctx context.Context) CloudwrapperActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwrapperActivationOutput)
}

// CloudwrapperActivationArrayInput is an input type that accepts CloudwrapperActivationArray and CloudwrapperActivationArrayOutput values.
// You can construct a concrete instance of `CloudwrapperActivationArrayInput` via:
//
//	CloudwrapperActivationArray{ CloudwrapperActivationArgs{...} }
type CloudwrapperActivationArrayInput interface {
	pulumi.Input

	ToCloudwrapperActivationArrayOutput() CloudwrapperActivationArrayOutput
	ToCloudwrapperActivationArrayOutputWithContext(context.Context) CloudwrapperActivationArrayOutput
}

type CloudwrapperActivationArray []CloudwrapperActivationInput

func (CloudwrapperActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudwrapperActivation)(nil)).Elem()
}

func (i CloudwrapperActivationArray) ToCloudwrapperActivationArrayOutput() CloudwrapperActivationArrayOutput {
	return i.ToCloudwrapperActivationArrayOutputWithContext(context.Background())
}

func (i CloudwrapperActivationArray) ToCloudwrapperActivationArrayOutputWithContext(ctx context.Context) CloudwrapperActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwrapperActivationArrayOutput)
}

// CloudwrapperActivationMapInput is an input type that accepts CloudwrapperActivationMap and CloudwrapperActivationMapOutput values.
// You can construct a concrete instance of `CloudwrapperActivationMapInput` via:
//
//	CloudwrapperActivationMap{ "key": CloudwrapperActivationArgs{...} }
type CloudwrapperActivationMapInput interface {
	pulumi.Input

	ToCloudwrapperActivationMapOutput() CloudwrapperActivationMapOutput
	ToCloudwrapperActivationMapOutputWithContext(context.Context) CloudwrapperActivationMapOutput
}

type CloudwrapperActivationMap map[string]CloudwrapperActivationInput

func (CloudwrapperActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudwrapperActivation)(nil)).Elem()
}

func (i CloudwrapperActivationMap) ToCloudwrapperActivationMapOutput() CloudwrapperActivationMapOutput {
	return i.ToCloudwrapperActivationMapOutputWithContext(context.Background())
}

func (i CloudwrapperActivationMap) ToCloudwrapperActivationMapOutputWithContext(ctx context.Context) CloudwrapperActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudwrapperActivationMapOutput)
}

type CloudwrapperActivationOutput struct{ *pulumi.OutputState }

func (CloudwrapperActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudwrapperActivation)(nil)).Elem()
}

func (o CloudwrapperActivationOutput) ToCloudwrapperActivationOutput() CloudwrapperActivationOutput {
	return o
}

func (o CloudwrapperActivationOutput) ToCloudwrapperActivationOutputWithContext(ctx context.Context) CloudwrapperActivationOutput {
	return o
}

// The configuration you want to activate.
func (o CloudwrapperActivationOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudwrapperActivation) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Unique hash value of the configuration.
func (o CloudwrapperActivationOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudwrapperActivation) pulumi.StringOutput { return v.Revision }).(pulumi.StringOutput)
}

func (o CloudwrapperActivationOutput) Timeouts() CloudwrapperActivationTimeoutsPtrOutput {
	return o.ApplyT(func(v *CloudwrapperActivation) CloudwrapperActivationTimeoutsPtrOutput { return v.Timeouts }).(CloudwrapperActivationTimeoutsPtrOutput)
}

type CloudwrapperActivationArrayOutput struct{ *pulumi.OutputState }

func (CloudwrapperActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudwrapperActivation)(nil)).Elem()
}

func (o CloudwrapperActivationArrayOutput) ToCloudwrapperActivationArrayOutput() CloudwrapperActivationArrayOutput {
	return o
}

func (o CloudwrapperActivationArrayOutput) ToCloudwrapperActivationArrayOutputWithContext(ctx context.Context) CloudwrapperActivationArrayOutput {
	return o
}

func (o CloudwrapperActivationArrayOutput) Index(i pulumi.IntInput) CloudwrapperActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudwrapperActivation {
		return vs[0].([]*CloudwrapperActivation)[vs[1].(int)]
	}).(CloudwrapperActivationOutput)
}

type CloudwrapperActivationMapOutput struct{ *pulumi.OutputState }

func (CloudwrapperActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudwrapperActivation)(nil)).Elem()
}

func (o CloudwrapperActivationMapOutput) ToCloudwrapperActivationMapOutput() CloudwrapperActivationMapOutput {
	return o
}

func (o CloudwrapperActivationMapOutput) ToCloudwrapperActivationMapOutputWithContext(ctx context.Context) CloudwrapperActivationMapOutput {
	return o
}

func (o CloudwrapperActivationMapOutput) MapIndex(k pulumi.StringInput) CloudwrapperActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudwrapperActivation {
		return vs[0].(map[string]*CloudwrapperActivation)[vs[1].(string)]
	}).(CloudwrapperActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwrapperActivationInput)(nil)).Elem(), &CloudwrapperActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwrapperActivationArrayInput)(nil)).Elem(), CloudwrapperActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudwrapperActivationMapInput)(nil)).Elem(), CloudwrapperActivationMap{})
	pulumi.RegisterOutputType(CloudwrapperActivationOutput{})
	pulumi.RegisterOutputType(CloudwrapperActivationArrayOutput{})
	pulumi.RegisterOutputType(CloudwrapperActivationMapOutput{})
}
