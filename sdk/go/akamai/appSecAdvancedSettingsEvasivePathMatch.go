// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Scopes**: Security configuration; security policy
//
// The `resourceAkamaiAppsecAdvancedSettingsEvasivePathMatch` resource allows you to enable, disable, or update the evasive path match setting for a configuration.
// This setting determines whether fuzzy matching is used to make URL matching more inclusive.
// This operation applies at the configuration level, and therefore applies to all policies within a configuration.
// You may override this setting for a particular policy by specifying the policy using the securityPolicyId parameter.
//
// **Related API Endpoints**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/advanced-settings/evasive-path-match](https://techdocs.akamai.com/application-security/reference/put-evasive-path-match)
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
//				Name: pulumi.StringRef(_var.Security_configuration),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewAppSecAdvancedSettingsEvasivePathMatch(ctx, "configEvasivePathMatch", &akamai.AppSecAdvancedSettingsEvasivePathMatchArgs{
//				ConfigId:        *pulumi.Int(configuration.ConfigId),
//				EnablePathMatch: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewAppSecAdvancedSettingsEvasivePathMatch(ctx, "policyOverride", &akamai.AppSecAdvancedSettingsEvasivePathMatchArgs{
//				ConfigId:         *pulumi.Int(configuration.ConfigId),
//				SecurityPolicyId: pulumi.Any(_var.Security_policy_id),
//				EnablePathMatch:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AppSecAdvancedSettingsEvasivePathMatch struct {
	pulumi.CustomResourceState

	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Whether to enable path match.
	EnablePathMatch pulumi.BoolOutput `pulumi:"enablePathMatch"`
	// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
	SecurityPolicyId pulumi.StringPtrOutput `pulumi:"securityPolicyId"`
}

// NewAppSecAdvancedSettingsEvasivePathMatch registers a new resource with the given unique name, arguments, and options.
func NewAppSecAdvancedSettingsEvasivePathMatch(ctx *pulumi.Context,
	name string, args *AppSecAdvancedSettingsEvasivePathMatchArgs, opts ...pulumi.ResourceOption) (*AppSecAdvancedSettingsEvasivePathMatch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.EnablePathMatch == nil {
		return nil, errors.New("invalid value for required argument 'EnablePathMatch'")
	}
	var resource AppSecAdvancedSettingsEvasivePathMatch
	err := ctx.RegisterResource("akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecAdvancedSettingsEvasivePathMatch gets an existing AppSecAdvancedSettingsEvasivePathMatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecAdvancedSettingsEvasivePathMatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecAdvancedSettingsEvasivePathMatchState, opts ...pulumi.ResourceOption) (*AppSecAdvancedSettingsEvasivePathMatch, error) {
	var resource AppSecAdvancedSettingsEvasivePathMatch
	err := ctx.ReadResource("akamai:index/appSecAdvancedSettingsEvasivePathMatch:AppSecAdvancedSettingsEvasivePathMatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecAdvancedSettingsEvasivePathMatch resources.
type appSecAdvancedSettingsEvasivePathMatchState struct {
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// Whether to enable path match.
	EnablePathMatch *bool `pulumi:"enablePathMatch"`
	// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecAdvancedSettingsEvasivePathMatchState struct {
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// Whether to enable path match.
	EnablePathMatch pulumi.BoolPtrInput
	// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAdvancedSettingsEvasivePathMatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAdvancedSettingsEvasivePathMatchState)(nil)).Elem()
}

type appSecAdvancedSettingsEvasivePathMatchArgs struct {
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// Whether to enable path match.
	EnablePathMatch bool `pulumi:"enablePathMatch"`
	// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecAdvancedSettingsEvasivePathMatch resource.
type AppSecAdvancedSettingsEvasivePathMatchArgs struct {
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// Whether to enable path match.
	EnablePathMatch pulumi.BoolInput
	// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAdvancedSettingsEvasivePathMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAdvancedSettingsEvasivePathMatchArgs)(nil)).Elem()
}

type AppSecAdvancedSettingsEvasivePathMatchInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsEvasivePathMatchOutput() AppSecAdvancedSettingsEvasivePathMatchOutput
	ToAppSecAdvancedSettingsEvasivePathMatchOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchOutput
}

func (*AppSecAdvancedSettingsEvasivePathMatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (i *AppSecAdvancedSettingsEvasivePathMatch) ToAppSecAdvancedSettingsEvasivePathMatchOutput() AppSecAdvancedSettingsEvasivePathMatchOutput {
	return i.ToAppSecAdvancedSettingsEvasivePathMatchOutputWithContext(context.Background())
}

func (i *AppSecAdvancedSettingsEvasivePathMatch) ToAppSecAdvancedSettingsEvasivePathMatchOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsEvasivePathMatchOutput)
}

// AppSecAdvancedSettingsEvasivePathMatchArrayInput is an input type that accepts AppSecAdvancedSettingsEvasivePathMatchArray and AppSecAdvancedSettingsEvasivePathMatchArrayOutput values.
// You can construct a concrete instance of `AppSecAdvancedSettingsEvasivePathMatchArrayInput` via:
//
//	AppSecAdvancedSettingsEvasivePathMatchArray{ AppSecAdvancedSettingsEvasivePathMatchArgs{...} }
type AppSecAdvancedSettingsEvasivePathMatchArrayInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsEvasivePathMatchArrayOutput() AppSecAdvancedSettingsEvasivePathMatchArrayOutput
	ToAppSecAdvancedSettingsEvasivePathMatchArrayOutputWithContext(context.Context) AppSecAdvancedSettingsEvasivePathMatchArrayOutput
}

type AppSecAdvancedSettingsEvasivePathMatchArray []AppSecAdvancedSettingsEvasivePathMatchInput

func (AppSecAdvancedSettingsEvasivePathMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (i AppSecAdvancedSettingsEvasivePathMatchArray) ToAppSecAdvancedSettingsEvasivePathMatchArrayOutput() AppSecAdvancedSettingsEvasivePathMatchArrayOutput {
	return i.ToAppSecAdvancedSettingsEvasivePathMatchArrayOutputWithContext(context.Background())
}

func (i AppSecAdvancedSettingsEvasivePathMatchArray) ToAppSecAdvancedSettingsEvasivePathMatchArrayOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsEvasivePathMatchArrayOutput)
}

// AppSecAdvancedSettingsEvasivePathMatchMapInput is an input type that accepts AppSecAdvancedSettingsEvasivePathMatchMap and AppSecAdvancedSettingsEvasivePathMatchMapOutput values.
// You can construct a concrete instance of `AppSecAdvancedSettingsEvasivePathMatchMapInput` via:
//
//	AppSecAdvancedSettingsEvasivePathMatchMap{ "key": AppSecAdvancedSettingsEvasivePathMatchArgs{...} }
type AppSecAdvancedSettingsEvasivePathMatchMapInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsEvasivePathMatchMapOutput() AppSecAdvancedSettingsEvasivePathMatchMapOutput
	ToAppSecAdvancedSettingsEvasivePathMatchMapOutputWithContext(context.Context) AppSecAdvancedSettingsEvasivePathMatchMapOutput
}

type AppSecAdvancedSettingsEvasivePathMatchMap map[string]AppSecAdvancedSettingsEvasivePathMatchInput

func (AppSecAdvancedSettingsEvasivePathMatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (i AppSecAdvancedSettingsEvasivePathMatchMap) ToAppSecAdvancedSettingsEvasivePathMatchMapOutput() AppSecAdvancedSettingsEvasivePathMatchMapOutput {
	return i.ToAppSecAdvancedSettingsEvasivePathMatchMapOutputWithContext(context.Background())
}

func (i AppSecAdvancedSettingsEvasivePathMatchMap) ToAppSecAdvancedSettingsEvasivePathMatchMapOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsEvasivePathMatchMapOutput)
}

type AppSecAdvancedSettingsEvasivePathMatchOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsEvasivePathMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (o AppSecAdvancedSettingsEvasivePathMatchOutput) ToAppSecAdvancedSettingsEvasivePathMatchOutput() AppSecAdvancedSettingsEvasivePathMatchOutput {
	return o
}

func (o AppSecAdvancedSettingsEvasivePathMatchOutput) ToAppSecAdvancedSettingsEvasivePathMatchOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchOutput {
	return o
}

// The ID of the security configuration to use.
func (o AppSecAdvancedSettingsEvasivePathMatchOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsEvasivePathMatch) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Whether to enable path match.
func (o AppSecAdvancedSettingsEvasivePathMatchOutput) EnablePathMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsEvasivePathMatch) pulumi.BoolOutput { return v.EnablePathMatch }).(pulumi.BoolOutput)
}

// The ID of a specific security policy to which the evasive path match setting should be applied. If not supplied, the indicated setting will be applied to all policies within the configuration.
func (o AppSecAdvancedSettingsEvasivePathMatchOutput) SecurityPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsEvasivePathMatch) pulumi.StringPtrOutput { return v.SecurityPolicyId }).(pulumi.StringPtrOutput)
}

type AppSecAdvancedSettingsEvasivePathMatchArrayOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsEvasivePathMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (o AppSecAdvancedSettingsEvasivePathMatchArrayOutput) ToAppSecAdvancedSettingsEvasivePathMatchArrayOutput() AppSecAdvancedSettingsEvasivePathMatchArrayOutput {
	return o
}

func (o AppSecAdvancedSettingsEvasivePathMatchArrayOutput) ToAppSecAdvancedSettingsEvasivePathMatchArrayOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchArrayOutput {
	return o
}

func (o AppSecAdvancedSettingsEvasivePathMatchArrayOutput) Index(i pulumi.IntInput) AppSecAdvancedSettingsEvasivePathMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecAdvancedSettingsEvasivePathMatch {
		return vs[0].([]*AppSecAdvancedSettingsEvasivePathMatch)[vs[1].(int)]
	}).(AppSecAdvancedSettingsEvasivePathMatchOutput)
}

type AppSecAdvancedSettingsEvasivePathMatchMapOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsEvasivePathMatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAdvancedSettingsEvasivePathMatch)(nil)).Elem()
}

func (o AppSecAdvancedSettingsEvasivePathMatchMapOutput) ToAppSecAdvancedSettingsEvasivePathMatchMapOutput() AppSecAdvancedSettingsEvasivePathMatchMapOutput {
	return o
}

func (o AppSecAdvancedSettingsEvasivePathMatchMapOutput) ToAppSecAdvancedSettingsEvasivePathMatchMapOutputWithContext(ctx context.Context) AppSecAdvancedSettingsEvasivePathMatchMapOutput {
	return o
}

func (o AppSecAdvancedSettingsEvasivePathMatchMapOutput) MapIndex(k pulumi.StringInput) AppSecAdvancedSettingsEvasivePathMatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecAdvancedSettingsEvasivePathMatch {
		return vs[0].(map[string]*AppSecAdvancedSettingsEvasivePathMatch)[vs[1].(string)]
	}).(AppSecAdvancedSettingsEvasivePathMatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsEvasivePathMatchInput)(nil)).Elem(), &AppSecAdvancedSettingsEvasivePathMatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsEvasivePathMatchArrayInput)(nil)).Elem(), AppSecAdvancedSettingsEvasivePathMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsEvasivePathMatchMapInput)(nil)).Elem(), AppSecAdvancedSettingsEvasivePathMatchMap{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsEvasivePathMatchOutput{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsEvasivePathMatchArrayOutput{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsEvasivePathMatchMapOutput{})
}
