// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `GtmDomain` resource to create, configure, and import a GTM Domain, which is a basic building block of a traffic management configuration.
//
// > **Note** Import requires an ID with this format: `existingDomainName`.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewGtmDomain(ctx, "demodomain", &akamai.GtmDomainArgs{
// 			Comment:  pulumi.String("some comment"),
// 			Contract: pulumi.String("XXX"),
// 			Group:    pulumi.String("100"),
// 			Type:     pulumi.String("basic"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Schema reference
//
// You can download the GTM Domain backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#domain) page.
type GtmDomain struct {
	pulumi.CustomResourceState

	// A boolean that if set to `true`, GTM collapses CNAME redirections in DNS answers when it knows the target of the CNAME.
	CnameCoalescingEnabled pulumi.BoolPtrOutput `pulumi:"cnameCoalescingEnabled"`
	// A descriptive note about changes to the domain. The maximum is 4000 characters.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// If creating a domain, the contract ID.
	Contract pulumi.StringPtrOutput `pulumi:"contract"`
	// Specifies the download penalty score. The default is `75`. If the download encounters an error, the web agent computes a score that is either the download time in seconds or a penalty score.
	DefaultErrorPenalty          pulumi.IntPtrOutput  `pulumi:"defaultErrorPenalty"`
	DefaultHealthMax             pulumi.Float64Output `pulumi:"defaultHealthMax"`
	DefaultHealthMultiplier      pulumi.Float64Output `pulumi:"defaultHealthMultiplier"`
	DefaultHealthThreshold       pulumi.Float64Output `pulumi:"defaultHealthThreshold"`
	DefaultMaxUnreachablePenalty pulumi.IntOutput     `pulumi:"defaultMaxUnreachablePenalty"`
	// Specifies an optional Base64-encoded certificate that corresponds with the private key for TLS-based liveness tests (HTTPS, SMTPS, POPS, and TCPS).
	DefaultSslClientCertificate pulumi.StringPtrOutput `pulumi:"defaultSslClientCertificate"`
	// Specifies a Base64-encoded private key that corresponds with the TLS certificate for HTTPS, SMTPS, POPS, and TCPS liveness tests.
	DefaultSslClientPrivateKey pulumi.StringPtrOutput `pulumi:"defaultSslClientPrivateKey"`
	// Specifies the timeout penalty score. Default is `25`.
	DefaultTimeoutPenalty       pulumi.IntPtrOutput  `pulumi:"defaultTimeoutPenalty"`
	DefaultUnreachableThreshold pulumi.Float64Output `pulumi:"defaultUnreachableThreshold"`
	// A list of email addresses to notify when a change is made to the domain.
	EmailNotificationLists pulumi.StringArrayOutput `pulumi:"emailNotificationLists"`
	// A boolean indicating whether whether the GTM Domain is using end user client subnet mapping.
	EndUserMappingEnabled pulumi.BoolPtrOutput `pulumi:"endUserMappingEnabled"`
	// If creating a domain, the currently selected group ID.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// A boolean indicating whether one or more measurements of load (resources) are defined by you and supplied by each data center in real time to balance load.
	LoadFeedback pulumi.BoolPtrOutput `pulumi:"loadFeedback"`
	// Indicates the percentage of load imbalance factor (LIF) for the domain.
	LoadImbalancePercentage   pulumi.Float64PtrOutput `pulumi:"loadImbalancePercentage"`
	MapUpdateInterval         pulumi.IntOutput        `pulumi:"mapUpdateInterval"`
	MaxProperties             pulumi.IntOutput        `pulumi:"maxProperties"`
	MaxResources              pulumi.IntOutput        `pulumi:"maxResources"`
	MaxTestTimeout            pulumi.Float64Output    `pulumi:"maxTestTimeout"`
	MaxTtl                    pulumi.IntOutput        `pulumi:"maxTtl"`
	MinPingableRegionFraction pulumi.Float64Output    `pulumi:"minPingableRegionFraction"`
	MinTestInterval           pulumi.IntOutput        `pulumi:"minTestInterval"`
	MinTtl                    pulumi.IntOutput        `pulumi:"minTtl"`
	// The DNS name for a collection of GTM Properties.
	Name                       pulumi.StringOutput `pulumi:"name"`
	PingInterval               pulumi.IntOutput    `pulumi:"pingInterval"`
	PingPacketSize             pulumi.IntOutput    `pulumi:"pingPacketSize"`
	RoundRobinPrefix           pulumi.StringOutput `pulumi:"roundRobinPrefix"`
	ServermonitorLivenessCount pulumi.IntOutput    `pulumi:"servermonitorLivenessCount"`
	ServermonitorLoadCount     pulumi.IntOutput    `pulumi:"servermonitorLoadCount"`
	ServermonitorPool          pulumi.StringOutput `pulumi:"servermonitorPool"`
	// Th type of GTM domain. Options include `failover-only`, `static`, `weighted`, `basic`, or `full`.
	Type pulumi.StringOutput `pulumi:"type"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrOutput `pulumi:"waitOnComplete"`
}

// NewGtmDomain registers a new resource with the given unique name, arguments, and options.
func NewGtmDomain(ctx *pulumi.Context,
	name string, args *GtmDomainArgs, opts ...pulumi.ResourceOption) (*GtmDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmDomain:GtmDomain"),
		},
	})
	opts = append(opts, aliases)
	var resource GtmDomain
	err := ctx.RegisterResource("akamai:index/gtmDomain:GtmDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmDomain gets an existing GtmDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmDomainState, opts ...pulumi.ResourceOption) (*GtmDomain, error) {
	var resource GtmDomain
	err := ctx.ReadResource("akamai:index/gtmDomain:GtmDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmDomain resources.
type gtmDomainState struct {
	// A boolean that if set to `true`, GTM collapses CNAME redirections in DNS answers when it knows the target of the CNAME.
	CnameCoalescingEnabled *bool `pulumi:"cnameCoalescingEnabled"`
	// A descriptive note about changes to the domain. The maximum is 4000 characters.
	Comment *string `pulumi:"comment"`
	// If creating a domain, the contract ID.
	Contract *string `pulumi:"contract"`
	// Specifies the download penalty score. The default is `75`. If the download encounters an error, the web agent computes a score that is either the download time in seconds or a penalty score.
	DefaultErrorPenalty          *int     `pulumi:"defaultErrorPenalty"`
	DefaultHealthMax             *float64 `pulumi:"defaultHealthMax"`
	DefaultHealthMultiplier      *float64 `pulumi:"defaultHealthMultiplier"`
	DefaultHealthThreshold       *float64 `pulumi:"defaultHealthThreshold"`
	DefaultMaxUnreachablePenalty *int     `pulumi:"defaultMaxUnreachablePenalty"`
	// Specifies an optional Base64-encoded certificate that corresponds with the private key for TLS-based liveness tests (HTTPS, SMTPS, POPS, and TCPS).
	DefaultSslClientCertificate *string `pulumi:"defaultSslClientCertificate"`
	// Specifies a Base64-encoded private key that corresponds with the TLS certificate for HTTPS, SMTPS, POPS, and TCPS liveness tests.
	DefaultSslClientPrivateKey *string `pulumi:"defaultSslClientPrivateKey"`
	// Specifies the timeout penalty score. Default is `25`.
	DefaultTimeoutPenalty       *int     `pulumi:"defaultTimeoutPenalty"`
	DefaultUnreachableThreshold *float64 `pulumi:"defaultUnreachableThreshold"`
	// A list of email addresses to notify when a change is made to the domain.
	EmailNotificationLists []string `pulumi:"emailNotificationLists"`
	// A boolean indicating whether whether the GTM Domain is using end user client subnet mapping.
	EndUserMappingEnabled *bool `pulumi:"endUserMappingEnabled"`
	// If creating a domain, the currently selected group ID.
	Group *string `pulumi:"group"`
	// A boolean indicating whether one or more measurements of load (resources) are defined by you and supplied by each data center in real time to balance load.
	LoadFeedback *bool `pulumi:"loadFeedback"`
	// Indicates the percentage of load imbalance factor (LIF) for the domain.
	LoadImbalancePercentage   *float64 `pulumi:"loadImbalancePercentage"`
	MapUpdateInterval         *int     `pulumi:"mapUpdateInterval"`
	MaxProperties             *int     `pulumi:"maxProperties"`
	MaxResources              *int     `pulumi:"maxResources"`
	MaxTestTimeout            *float64 `pulumi:"maxTestTimeout"`
	MaxTtl                    *int     `pulumi:"maxTtl"`
	MinPingableRegionFraction *float64 `pulumi:"minPingableRegionFraction"`
	MinTestInterval           *int     `pulumi:"minTestInterval"`
	MinTtl                    *int     `pulumi:"minTtl"`
	// The DNS name for a collection of GTM Properties.
	Name                       *string `pulumi:"name"`
	PingInterval               *int    `pulumi:"pingInterval"`
	PingPacketSize             *int    `pulumi:"pingPacketSize"`
	RoundRobinPrefix           *string `pulumi:"roundRobinPrefix"`
	ServermonitorLivenessCount *int    `pulumi:"servermonitorLivenessCount"`
	ServermonitorLoadCount     *int    `pulumi:"servermonitorLoadCount"`
	ServermonitorPool          *string `pulumi:"servermonitorPool"`
	// Th type of GTM domain. Options include `failover-only`, `static`, `weighted`, `basic`, or `full`.
	Type *string `pulumi:"type"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

type GtmDomainState struct {
	// A boolean that if set to `true`, GTM collapses CNAME redirections in DNS answers when it knows the target of the CNAME.
	CnameCoalescingEnabled pulumi.BoolPtrInput
	// A descriptive note about changes to the domain. The maximum is 4000 characters.
	Comment pulumi.StringPtrInput
	// If creating a domain, the contract ID.
	Contract pulumi.StringPtrInput
	// Specifies the download penalty score. The default is `75`. If the download encounters an error, the web agent computes a score that is either the download time in seconds or a penalty score.
	DefaultErrorPenalty          pulumi.IntPtrInput
	DefaultHealthMax             pulumi.Float64PtrInput
	DefaultHealthMultiplier      pulumi.Float64PtrInput
	DefaultHealthThreshold       pulumi.Float64PtrInput
	DefaultMaxUnreachablePenalty pulumi.IntPtrInput
	// Specifies an optional Base64-encoded certificate that corresponds with the private key for TLS-based liveness tests (HTTPS, SMTPS, POPS, and TCPS).
	DefaultSslClientCertificate pulumi.StringPtrInput
	// Specifies a Base64-encoded private key that corresponds with the TLS certificate for HTTPS, SMTPS, POPS, and TCPS liveness tests.
	DefaultSslClientPrivateKey pulumi.StringPtrInput
	// Specifies the timeout penalty score. Default is `25`.
	DefaultTimeoutPenalty       pulumi.IntPtrInput
	DefaultUnreachableThreshold pulumi.Float64PtrInput
	// A list of email addresses to notify when a change is made to the domain.
	EmailNotificationLists pulumi.StringArrayInput
	// A boolean indicating whether whether the GTM Domain is using end user client subnet mapping.
	EndUserMappingEnabled pulumi.BoolPtrInput
	// If creating a domain, the currently selected group ID.
	Group pulumi.StringPtrInput
	// A boolean indicating whether one or more measurements of load (resources) are defined by you and supplied by each data center in real time to balance load.
	LoadFeedback pulumi.BoolPtrInput
	// Indicates the percentage of load imbalance factor (LIF) for the domain.
	LoadImbalancePercentage   pulumi.Float64PtrInput
	MapUpdateInterval         pulumi.IntPtrInput
	MaxProperties             pulumi.IntPtrInput
	MaxResources              pulumi.IntPtrInput
	MaxTestTimeout            pulumi.Float64PtrInput
	MaxTtl                    pulumi.IntPtrInput
	MinPingableRegionFraction pulumi.Float64PtrInput
	MinTestInterval           pulumi.IntPtrInput
	MinTtl                    pulumi.IntPtrInput
	// The DNS name for a collection of GTM Properties.
	Name                       pulumi.StringPtrInput
	PingInterval               pulumi.IntPtrInput
	PingPacketSize             pulumi.IntPtrInput
	RoundRobinPrefix           pulumi.StringPtrInput
	ServermonitorLivenessCount pulumi.IntPtrInput
	ServermonitorLoadCount     pulumi.IntPtrInput
	ServermonitorPool          pulumi.StringPtrInput
	// Th type of GTM domain. Options include `failover-only`, `static`, `weighted`, `basic`, or `full`.
	Type pulumi.StringPtrInput
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmDomainState)(nil)).Elem()
}

type gtmDomainArgs struct {
	// A boolean that if set to `true`, GTM collapses CNAME redirections in DNS answers when it knows the target of the CNAME.
	CnameCoalescingEnabled *bool `pulumi:"cnameCoalescingEnabled"`
	// A descriptive note about changes to the domain. The maximum is 4000 characters.
	Comment *string `pulumi:"comment"`
	// If creating a domain, the contract ID.
	Contract *string `pulumi:"contract"`
	// Specifies the download penalty score. The default is `75`. If the download encounters an error, the web agent computes a score that is either the download time in seconds or a penalty score.
	DefaultErrorPenalty *int `pulumi:"defaultErrorPenalty"`
	// Specifies an optional Base64-encoded certificate that corresponds with the private key for TLS-based liveness tests (HTTPS, SMTPS, POPS, and TCPS).
	DefaultSslClientCertificate *string `pulumi:"defaultSslClientCertificate"`
	// Specifies a Base64-encoded private key that corresponds with the TLS certificate for HTTPS, SMTPS, POPS, and TCPS liveness tests.
	DefaultSslClientPrivateKey *string `pulumi:"defaultSslClientPrivateKey"`
	// Specifies the timeout penalty score. Default is `25`.
	DefaultTimeoutPenalty *int `pulumi:"defaultTimeoutPenalty"`
	// A list of email addresses to notify when a change is made to the domain.
	EmailNotificationLists []string `pulumi:"emailNotificationLists"`
	// A boolean indicating whether whether the GTM Domain is using end user client subnet mapping.
	EndUserMappingEnabled *bool `pulumi:"endUserMappingEnabled"`
	// If creating a domain, the currently selected group ID.
	Group *string `pulumi:"group"`
	// A boolean indicating whether one or more measurements of load (resources) are defined by you and supplied by each data center in real time to balance load.
	LoadFeedback *bool `pulumi:"loadFeedback"`
	// Indicates the percentage of load imbalance factor (LIF) for the domain.
	LoadImbalancePercentage *float64 `pulumi:"loadImbalancePercentage"`
	// The DNS name for a collection of GTM Properties.
	Name *string `pulumi:"name"`
	// Th type of GTM domain. Options include `failover-only`, `static`, `weighted`, `basic`, or `full`.
	Type string `pulumi:"type"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmDomain resource.
type GtmDomainArgs struct {
	// A boolean that if set to `true`, GTM collapses CNAME redirections in DNS answers when it knows the target of the CNAME.
	CnameCoalescingEnabled pulumi.BoolPtrInput
	// A descriptive note about changes to the domain. The maximum is 4000 characters.
	Comment pulumi.StringPtrInput
	// If creating a domain, the contract ID.
	Contract pulumi.StringPtrInput
	// Specifies the download penalty score. The default is `75`. If the download encounters an error, the web agent computes a score that is either the download time in seconds or a penalty score.
	DefaultErrorPenalty pulumi.IntPtrInput
	// Specifies an optional Base64-encoded certificate that corresponds with the private key for TLS-based liveness tests (HTTPS, SMTPS, POPS, and TCPS).
	DefaultSslClientCertificate pulumi.StringPtrInput
	// Specifies a Base64-encoded private key that corresponds with the TLS certificate for HTTPS, SMTPS, POPS, and TCPS liveness tests.
	DefaultSslClientPrivateKey pulumi.StringPtrInput
	// Specifies the timeout penalty score. Default is `25`.
	DefaultTimeoutPenalty pulumi.IntPtrInput
	// A list of email addresses to notify when a change is made to the domain.
	EmailNotificationLists pulumi.StringArrayInput
	// A boolean indicating whether whether the GTM Domain is using end user client subnet mapping.
	EndUserMappingEnabled pulumi.BoolPtrInput
	// If creating a domain, the currently selected group ID.
	Group pulumi.StringPtrInput
	// A boolean indicating whether one or more measurements of load (resources) are defined by you and supplied by each data center in real time to balance load.
	LoadFeedback pulumi.BoolPtrInput
	// Indicates the percentage of load imbalance factor (LIF) for the domain.
	LoadImbalancePercentage pulumi.Float64PtrInput
	// The DNS name for a collection of GTM Properties.
	Name pulumi.StringPtrInput
	// Th type of GTM domain. Options include `failover-only`, `static`, `weighted`, `basic`, or `full`.
	Type pulumi.StringInput
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmDomainArgs)(nil)).Elem()
}

type GtmDomainInput interface {
	pulumi.Input

	ToGtmDomainOutput() GtmDomainOutput
	ToGtmDomainOutputWithContext(ctx context.Context) GtmDomainOutput
}

func (*GtmDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmDomain)(nil)).Elem()
}

func (i *GtmDomain) ToGtmDomainOutput() GtmDomainOutput {
	return i.ToGtmDomainOutputWithContext(context.Background())
}

func (i *GtmDomain) ToGtmDomainOutputWithContext(ctx context.Context) GtmDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDomainOutput)
}

// GtmDomainArrayInput is an input type that accepts GtmDomainArray and GtmDomainArrayOutput values.
// You can construct a concrete instance of `GtmDomainArrayInput` via:
//
//          GtmDomainArray{ GtmDomainArgs{...} }
type GtmDomainArrayInput interface {
	pulumi.Input

	ToGtmDomainArrayOutput() GtmDomainArrayOutput
	ToGtmDomainArrayOutputWithContext(context.Context) GtmDomainArrayOutput
}

type GtmDomainArray []GtmDomainInput

func (GtmDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmDomain)(nil)).Elem()
}

func (i GtmDomainArray) ToGtmDomainArrayOutput() GtmDomainArrayOutput {
	return i.ToGtmDomainArrayOutputWithContext(context.Background())
}

func (i GtmDomainArray) ToGtmDomainArrayOutputWithContext(ctx context.Context) GtmDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDomainArrayOutput)
}

// GtmDomainMapInput is an input type that accepts GtmDomainMap and GtmDomainMapOutput values.
// You can construct a concrete instance of `GtmDomainMapInput` via:
//
//          GtmDomainMap{ "key": GtmDomainArgs{...} }
type GtmDomainMapInput interface {
	pulumi.Input

	ToGtmDomainMapOutput() GtmDomainMapOutput
	ToGtmDomainMapOutputWithContext(context.Context) GtmDomainMapOutput
}

type GtmDomainMap map[string]GtmDomainInput

func (GtmDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmDomain)(nil)).Elem()
}

func (i GtmDomainMap) ToGtmDomainMapOutput() GtmDomainMapOutput {
	return i.ToGtmDomainMapOutputWithContext(context.Background())
}

func (i GtmDomainMap) ToGtmDomainMapOutputWithContext(ctx context.Context) GtmDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDomainMapOutput)
}

type GtmDomainOutput struct{ *pulumi.OutputState }

func (GtmDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmDomain)(nil)).Elem()
}

func (o GtmDomainOutput) ToGtmDomainOutput() GtmDomainOutput {
	return o
}

func (o GtmDomainOutput) ToGtmDomainOutputWithContext(ctx context.Context) GtmDomainOutput {
	return o
}

type GtmDomainArrayOutput struct{ *pulumi.OutputState }

func (GtmDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmDomain)(nil)).Elem()
}

func (o GtmDomainArrayOutput) ToGtmDomainArrayOutput() GtmDomainArrayOutput {
	return o
}

func (o GtmDomainArrayOutput) ToGtmDomainArrayOutputWithContext(ctx context.Context) GtmDomainArrayOutput {
	return o
}

func (o GtmDomainArrayOutput) Index(i pulumi.IntInput) GtmDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmDomain {
		return vs[0].([]*GtmDomain)[vs[1].(int)]
	}).(GtmDomainOutput)
}

type GtmDomainMapOutput struct{ *pulumi.OutputState }

func (GtmDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmDomain)(nil)).Elem()
}

func (o GtmDomainMapOutput) ToGtmDomainMapOutput() GtmDomainMapOutput {
	return o
}

func (o GtmDomainMapOutput) ToGtmDomainMapOutputWithContext(ctx context.Context) GtmDomainMapOutput {
	return o
}

func (o GtmDomainMapOutput) MapIndex(k pulumi.StringInput) GtmDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmDomain {
		return vs[0].(map[string]*GtmDomain)[vs[1].(string)]
	}).(GtmDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDomainInput)(nil)).Elem(), &GtmDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDomainArrayInput)(nil)).Elem(), GtmDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDomainMapInput)(nil)).Elem(), GtmDomainMap{})
	pulumi.RegisterOutputType(GtmDomainOutput{})
	pulumi.RegisterOutputType(GtmDomainArrayOutput{})
	pulumi.RegisterOutputType(GtmDomainMapOutput{})
}
