// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamRole struct {
	pulumi.CustomResourceState

	// The description for a role
	Description pulumi.StringOutput `pulumi:"description"`
	// The list of existing unique identifiers for the granted roles
	GrantedRoles pulumi.IntArrayOutput `pulumi:"grantedRoles"`
	// The name you supply for a role
	Name pulumi.StringOutput `pulumi:"name"`
	// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIamRole registers a new resource with the given unique name, arguments, and options.
func NewIamRole(ctx *pulumi.Context,
	name string, args *IamRoleArgs, opts ...pulumi.ResourceOption) (*IamRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.GrantedRoles == nil {
		return nil, errors.New("invalid value for required argument 'GrantedRoles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamRole
	err := ctx.RegisterResource("akamai:index/iamRole:IamRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamRole gets an existing IamRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamRoleState, opts ...pulumi.ResourceOption) (*IamRole, error) {
	var resource IamRole
	err := ctx.ReadResource("akamai:index/iamRole:IamRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamRole resources.
type iamRoleState struct {
	// The description for a role
	Description *string `pulumi:"description"`
	// The list of existing unique identifiers for the granted roles
	GrantedRoles []int `pulumi:"grantedRoles"`
	// The name you supply for a role
	Name *string `pulumi:"name"`
	// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
	Type *string `pulumi:"type"`
}

type IamRoleState struct {
	// The description for a role
	Description pulumi.StringPtrInput
	// The list of existing unique identifiers for the granted roles
	GrantedRoles pulumi.IntArrayInput
	// The name you supply for a role
	Name pulumi.StringPtrInput
	// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
	Type pulumi.StringPtrInput
}

func (IamRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleState)(nil)).Elem()
}

type iamRoleArgs struct {
	// The description for a role
	Description string `pulumi:"description"`
	// The list of existing unique identifiers for the granted roles
	GrantedRoles []int `pulumi:"grantedRoles"`
	// The name you supply for a role
	Name *string `pulumi:"name"`
	// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a IamRole resource.
type IamRoleArgs struct {
	// The description for a role
	Description pulumi.StringInput
	// The list of existing unique identifiers for the granted roles
	GrantedRoles pulumi.IntArrayInput
	// The name you supply for a role
	Name pulumi.StringPtrInput
	// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
	Type pulumi.StringPtrInput
}

func (IamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamRoleArgs)(nil)).Elem()
}

type IamRoleInput interface {
	pulumi.Input

	ToIamRoleOutput() IamRoleOutput
	ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput
}

func (*IamRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRole)(nil)).Elem()
}

func (i *IamRole) ToIamRoleOutput() IamRoleOutput {
	return i.ToIamRoleOutputWithContext(context.Background())
}

func (i *IamRole) ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleOutput)
}

// IamRoleArrayInput is an input type that accepts IamRoleArray and IamRoleArrayOutput values.
// You can construct a concrete instance of `IamRoleArrayInput` via:
//
//	IamRoleArray{ IamRoleArgs{...} }
type IamRoleArrayInput interface {
	pulumi.Input

	ToIamRoleArrayOutput() IamRoleArrayOutput
	ToIamRoleArrayOutputWithContext(context.Context) IamRoleArrayOutput
}

type IamRoleArray []IamRoleInput

func (IamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRole)(nil)).Elem()
}

func (i IamRoleArray) ToIamRoleArrayOutput() IamRoleArrayOutput {
	return i.ToIamRoleArrayOutputWithContext(context.Background())
}

func (i IamRoleArray) ToIamRoleArrayOutputWithContext(ctx context.Context) IamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleArrayOutput)
}

// IamRoleMapInput is an input type that accepts IamRoleMap and IamRoleMapOutput values.
// You can construct a concrete instance of `IamRoleMapInput` via:
//
//	IamRoleMap{ "key": IamRoleArgs{...} }
type IamRoleMapInput interface {
	pulumi.Input

	ToIamRoleMapOutput() IamRoleMapOutput
	ToIamRoleMapOutputWithContext(context.Context) IamRoleMapOutput
}

type IamRoleMap map[string]IamRoleInput

func (IamRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRole)(nil)).Elem()
}

func (i IamRoleMap) ToIamRoleMapOutput() IamRoleMapOutput {
	return i.ToIamRoleMapOutputWithContext(context.Background())
}

func (i IamRoleMap) ToIamRoleMapOutputWithContext(ctx context.Context) IamRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamRoleMapOutput)
}

type IamRoleOutput struct{ *pulumi.OutputState }

func (IamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamRole)(nil)).Elem()
}

func (o IamRoleOutput) ToIamRoleOutput() IamRoleOutput {
	return o
}

func (o IamRoleOutput) ToIamRoleOutputWithContext(ctx context.Context) IamRoleOutput {
	return o
}

// The description for a role
func (o IamRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The list of existing unique identifiers for the granted roles
func (o IamRoleOutput) GrantedRoles() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *IamRole) pulumi.IntArrayOutput { return v.GrantedRoles }).(pulumi.IntArrayOutput)
}

// The name you supply for a role
func (o IamRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The role type which indicates whether it's a standard role provided by Akamai or a custom role for the account
func (o IamRoleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IamRole) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IamRoleArrayOutput struct{ *pulumi.OutputState }

func (IamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamRole)(nil)).Elem()
}

func (o IamRoleArrayOutput) ToIamRoleArrayOutput() IamRoleArrayOutput {
	return o
}

func (o IamRoleArrayOutput) ToIamRoleArrayOutputWithContext(ctx context.Context) IamRoleArrayOutput {
	return o
}

func (o IamRoleArrayOutput) Index(i pulumi.IntInput) IamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamRole {
		return vs[0].([]*IamRole)[vs[1].(int)]
	}).(IamRoleOutput)
}

type IamRoleMapOutput struct{ *pulumi.OutputState }

func (IamRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamRole)(nil)).Elem()
}

func (o IamRoleMapOutput) ToIamRoleMapOutput() IamRoleMapOutput {
	return o
}

func (o IamRoleMapOutput) ToIamRoleMapOutputWithContext(ctx context.Context) IamRoleMapOutput {
	return o
}

func (o IamRoleMapOutput) MapIndex(k pulumi.StringInput) IamRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamRole {
		return vs[0].(map[string]*IamRole)[vs[1].(string)]
	}).(IamRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleInput)(nil)).Elem(), &IamRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleArrayInput)(nil)).Elem(), IamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamRoleMapInput)(nil)).Elem(), IamRoleMap{})
	pulumi.RegisterOutputType(IamRoleOutput{})
	pulumi.RegisterOutputType(IamRoleArrayOutput{})
	pulumi.RegisterOutputType(IamRoleMapOutput{})
}
