// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CpsUploadCertificate struct {
	pulumi.CustomResourceState

	// Whether to acknowledge change management
	AcknowledgeChangeManagement pulumi.BoolPtrOutput `pulumi:"acknowledgeChangeManagement"`
	// Whether to acknowledge post-verification warnings
	AcknowledgePostVerificationWarnings pulumi.BoolPtrOutput `pulumi:"acknowledgePostVerificationWarnings"`
	// List of post-verification warnings to be automatically acknowledged
	AutoApproveWarnings pulumi.StringArrayOutput `pulumi:"autoApproveWarnings"`
	// ECDSA certificate in pem format to be uploaded
	CertificateEcdsaPem pulumi.StringPtrOutput `pulumi:"certificateEcdsaPem"`
	// RSA certificate in pem format to be uploaded
	CertificateRsaPem pulumi.StringPtrOutput `pulumi:"certificateRsaPem"`
	// The unique identifier of the enrollment
	EnrollmentId pulumi.IntOutput `pulumi:"enrollmentId"`
	// Trust chain in pem format for provided ECDSA certificate
	TrustChainEcdsaPem pulumi.StringPtrOutput `pulumi:"trustChainEcdsaPem"`
	// Trust chain in pem format for provided RSA certificate
	TrustChainRsaPem pulumi.StringPtrOutput `pulumi:"trustChainRsaPem"`
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings pulumi.BoolOutput `pulumi:"unacknowledgedWarnings"`
	// Whether to wait for certificate to be deployed
	WaitForDeployment pulumi.BoolPtrOutput `pulumi:"waitForDeployment"`
}

// NewCpsUploadCertificate registers a new resource with the given unique name, arguments, and options.
func NewCpsUploadCertificate(ctx *pulumi.Context,
	name string, args *CpsUploadCertificateArgs, opts ...pulumi.ResourceOption) (*CpsUploadCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnrollmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnrollmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CpsUploadCertificate
	err := ctx.RegisterResource("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpsUploadCertificate gets an existing CpsUploadCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpsUploadCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpsUploadCertificateState, opts ...pulumi.ResourceOption) (*CpsUploadCertificate, error) {
	var resource CpsUploadCertificate
	err := ctx.ReadResource("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpsUploadCertificate resources.
type cpsUploadCertificateState struct {
	// Whether to acknowledge change management
	AcknowledgeChangeManagement *bool `pulumi:"acknowledgeChangeManagement"`
	// Whether to acknowledge post-verification warnings
	AcknowledgePostVerificationWarnings *bool `pulumi:"acknowledgePostVerificationWarnings"`
	// List of post-verification warnings to be automatically acknowledged
	AutoApproveWarnings []string `pulumi:"autoApproveWarnings"`
	// ECDSA certificate in pem format to be uploaded
	CertificateEcdsaPem *string `pulumi:"certificateEcdsaPem"`
	// RSA certificate in pem format to be uploaded
	CertificateRsaPem *string `pulumi:"certificateRsaPem"`
	// The unique identifier of the enrollment
	EnrollmentId *int `pulumi:"enrollmentId"`
	// Trust chain in pem format for provided ECDSA certificate
	TrustChainEcdsaPem *string `pulumi:"trustChainEcdsaPem"`
	// Trust chain in pem format for provided RSA certificate
	TrustChainRsaPem *string `pulumi:"trustChainRsaPem"`
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings *bool `pulumi:"unacknowledgedWarnings"`
	// Whether to wait for certificate to be deployed
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

type CpsUploadCertificateState struct {
	// Whether to acknowledge change management
	AcknowledgeChangeManagement pulumi.BoolPtrInput
	// Whether to acknowledge post-verification warnings
	AcknowledgePostVerificationWarnings pulumi.BoolPtrInput
	// List of post-verification warnings to be automatically acknowledged
	AutoApproveWarnings pulumi.StringArrayInput
	// ECDSA certificate in pem format to be uploaded
	CertificateEcdsaPem pulumi.StringPtrInput
	// RSA certificate in pem format to be uploaded
	CertificateRsaPem pulumi.StringPtrInput
	// The unique identifier of the enrollment
	EnrollmentId pulumi.IntPtrInput
	// Trust chain in pem format for provided ECDSA certificate
	TrustChainEcdsaPem pulumi.StringPtrInput
	// Trust chain in pem format for provided RSA certificate
	TrustChainRsaPem pulumi.StringPtrInput
	// Used to distinguish whether there are unacknowledged warnings for a certificate
	UnacknowledgedWarnings pulumi.BoolPtrInput
	// Whether to wait for certificate to be deployed
	WaitForDeployment pulumi.BoolPtrInput
}

func (CpsUploadCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsUploadCertificateState)(nil)).Elem()
}

type cpsUploadCertificateArgs struct {
	// Whether to acknowledge change management
	AcknowledgeChangeManagement *bool `pulumi:"acknowledgeChangeManagement"`
	// Whether to acknowledge post-verification warnings
	AcknowledgePostVerificationWarnings *bool `pulumi:"acknowledgePostVerificationWarnings"`
	// List of post-verification warnings to be automatically acknowledged
	AutoApproveWarnings []string `pulumi:"autoApproveWarnings"`
	// ECDSA certificate in pem format to be uploaded
	CertificateEcdsaPem *string `pulumi:"certificateEcdsaPem"`
	// RSA certificate in pem format to be uploaded
	CertificateRsaPem *string `pulumi:"certificateRsaPem"`
	// The unique identifier of the enrollment
	EnrollmentId int `pulumi:"enrollmentId"`
	// Trust chain in pem format for provided ECDSA certificate
	TrustChainEcdsaPem *string `pulumi:"trustChainEcdsaPem"`
	// Trust chain in pem format for provided RSA certificate
	TrustChainRsaPem *string `pulumi:"trustChainRsaPem"`
	// Whether to wait for certificate to be deployed
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

// The set of arguments for constructing a CpsUploadCertificate resource.
type CpsUploadCertificateArgs struct {
	// Whether to acknowledge change management
	AcknowledgeChangeManagement pulumi.BoolPtrInput
	// Whether to acknowledge post-verification warnings
	AcknowledgePostVerificationWarnings pulumi.BoolPtrInput
	// List of post-verification warnings to be automatically acknowledged
	AutoApproveWarnings pulumi.StringArrayInput
	// ECDSA certificate in pem format to be uploaded
	CertificateEcdsaPem pulumi.StringPtrInput
	// RSA certificate in pem format to be uploaded
	CertificateRsaPem pulumi.StringPtrInput
	// The unique identifier of the enrollment
	EnrollmentId pulumi.IntInput
	// Trust chain in pem format for provided ECDSA certificate
	TrustChainEcdsaPem pulumi.StringPtrInput
	// Trust chain in pem format for provided RSA certificate
	TrustChainRsaPem pulumi.StringPtrInput
	// Whether to wait for certificate to be deployed
	WaitForDeployment pulumi.BoolPtrInput
}

func (CpsUploadCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsUploadCertificateArgs)(nil)).Elem()
}

type CpsUploadCertificateInput interface {
	pulumi.Input

	ToCpsUploadCertificateOutput() CpsUploadCertificateOutput
	ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput
}

func (*CpsUploadCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsUploadCertificate)(nil)).Elem()
}

func (i *CpsUploadCertificate) ToCpsUploadCertificateOutput() CpsUploadCertificateOutput {
	return i.ToCpsUploadCertificateOutputWithContext(context.Background())
}

func (i *CpsUploadCertificate) ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateOutput)
}

// CpsUploadCertificateArrayInput is an input type that accepts CpsUploadCertificateArray and CpsUploadCertificateArrayOutput values.
// You can construct a concrete instance of `CpsUploadCertificateArrayInput` via:
//
//	CpsUploadCertificateArray{ CpsUploadCertificateArgs{...} }
type CpsUploadCertificateArrayInput interface {
	pulumi.Input

	ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput
	ToCpsUploadCertificateArrayOutputWithContext(context.Context) CpsUploadCertificateArrayOutput
}

type CpsUploadCertificateArray []CpsUploadCertificateInput

func (CpsUploadCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsUploadCertificate)(nil)).Elem()
}

func (i CpsUploadCertificateArray) ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput {
	return i.ToCpsUploadCertificateArrayOutputWithContext(context.Background())
}

func (i CpsUploadCertificateArray) ToCpsUploadCertificateArrayOutputWithContext(ctx context.Context) CpsUploadCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateArrayOutput)
}

// CpsUploadCertificateMapInput is an input type that accepts CpsUploadCertificateMap and CpsUploadCertificateMapOutput values.
// You can construct a concrete instance of `CpsUploadCertificateMapInput` via:
//
//	CpsUploadCertificateMap{ "key": CpsUploadCertificateArgs{...} }
type CpsUploadCertificateMapInput interface {
	pulumi.Input

	ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput
	ToCpsUploadCertificateMapOutputWithContext(context.Context) CpsUploadCertificateMapOutput
}

type CpsUploadCertificateMap map[string]CpsUploadCertificateInput

func (CpsUploadCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsUploadCertificate)(nil)).Elem()
}

func (i CpsUploadCertificateMap) ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput {
	return i.ToCpsUploadCertificateMapOutputWithContext(context.Background())
}

func (i CpsUploadCertificateMap) ToCpsUploadCertificateMapOutputWithContext(ctx context.Context) CpsUploadCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsUploadCertificateMapOutput)
}

type CpsUploadCertificateOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateOutput) ToCpsUploadCertificateOutput() CpsUploadCertificateOutput {
	return o
}

func (o CpsUploadCertificateOutput) ToCpsUploadCertificateOutputWithContext(ctx context.Context) CpsUploadCertificateOutput {
	return o
}

// Whether to acknowledge change management
func (o CpsUploadCertificateOutput) AcknowledgeChangeManagement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.AcknowledgeChangeManagement }).(pulumi.BoolPtrOutput)
}

// Whether to acknowledge post-verification warnings
func (o CpsUploadCertificateOutput) AcknowledgePostVerificationWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.AcknowledgePostVerificationWarnings }).(pulumi.BoolPtrOutput)
}

// List of post-verification warnings to be automatically acknowledged
func (o CpsUploadCertificateOutput) AutoApproveWarnings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringArrayOutput { return v.AutoApproveWarnings }).(pulumi.StringArrayOutput)
}

// ECDSA certificate in pem format to be uploaded
func (o CpsUploadCertificateOutput) CertificateEcdsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.CertificateEcdsaPem }).(pulumi.StringPtrOutput)
}

// RSA certificate in pem format to be uploaded
func (o CpsUploadCertificateOutput) CertificateRsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.CertificateRsaPem }).(pulumi.StringPtrOutput)
}

// The unique identifier of the enrollment
func (o CpsUploadCertificateOutput) EnrollmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.IntOutput { return v.EnrollmentId }).(pulumi.IntOutput)
}

// Trust chain in pem format for provided ECDSA certificate
func (o CpsUploadCertificateOutput) TrustChainEcdsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.TrustChainEcdsaPem }).(pulumi.StringPtrOutput)
}

// Trust chain in pem format for provided RSA certificate
func (o CpsUploadCertificateOutput) TrustChainRsaPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.StringPtrOutput { return v.TrustChainRsaPem }).(pulumi.StringPtrOutput)
}

// Used to distinguish whether there are unacknowledged warnings for a certificate
func (o CpsUploadCertificateOutput) UnacknowledgedWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolOutput { return v.UnacknowledgedWarnings }).(pulumi.BoolOutput)
}

// Whether to wait for certificate to be deployed
func (o CpsUploadCertificateOutput) WaitForDeployment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsUploadCertificate) pulumi.BoolPtrOutput { return v.WaitForDeployment }).(pulumi.BoolPtrOutput)
}

type CpsUploadCertificateArrayOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateArrayOutput) ToCpsUploadCertificateArrayOutput() CpsUploadCertificateArrayOutput {
	return o
}

func (o CpsUploadCertificateArrayOutput) ToCpsUploadCertificateArrayOutputWithContext(ctx context.Context) CpsUploadCertificateArrayOutput {
	return o
}

func (o CpsUploadCertificateArrayOutput) Index(i pulumi.IntInput) CpsUploadCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CpsUploadCertificate {
		return vs[0].([]*CpsUploadCertificate)[vs[1].(int)]
	}).(CpsUploadCertificateOutput)
}

type CpsUploadCertificateMapOutput struct{ *pulumi.OutputState }

func (CpsUploadCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsUploadCertificate)(nil)).Elem()
}

func (o CpsUploadCertificateMapOutput) ToCpsUploadCertificateMapOutput() CpsUploadCertificateMapOutput {
	return o
}

func (o CpsUploadCertificateMapOutput) ToCpsUploadCertificateMapOutputWithContext(ctx context.Context) CpsUploadCertificateMapOutput {
	return o
}

func (o CpsUploadCertificateMapOutput) MapIndex(k pulumi.StringInput) CpsUploadCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CpsUploadCertificate {
		return vs[0].(map[string]*CpsUploadCertificate)[vs[1].(string)]
	}).(CpsUploadCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateInput)(nil)).Elem(), &CpsUploadCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateArrayInput)(nil)).Elem(), CpsUploadCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsUploadCertificateMapInput)(nil)).Elem(), CpsUploadCertificateMap{})
	pulumi.RegisterOutputType(CpsUploadCertificateOutput{})
	pulumi.RegisterOutputType(CpsUploadCertificateArrayOutput{})
	pulumi.RegisterOutputType(CpsUploadCertificateMapOutput{})
}
