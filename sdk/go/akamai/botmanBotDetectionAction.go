// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanBotDetectionAction struct {
	pulumi.CustomResourceState

	BotDetectionAction pulumi.StringOutput `pulumi:"botDetectionAction"`
	ConfigId           pulumi.IntOutput    `pulumi:"configId"`
	DetectionId        pulumi.StringOutput `pulumi:"detectionId"`
	SecurityPolicyId   pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewBotmanBotDetectionAction registers a new resource with the given unique name, arguments, and options.
func NewBotmanBotDetectionAction(ctx *pulumi.Context,
	name string, args *BotmanBotDetectionActionArgs, opts ...pulumi.ResourceOption) (*BotmanBotDetectionAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotDetectionAction == nil {
		return nil, errors.New("invalid value for required argument 'BotDetectionAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.DetectionId == nil {
		return nil, errors.New("invalid value for required argument 'DetectionId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotmanBotDetectionAction
	err := ctx.RegisterResource("akamai:index/botmanBotDetectionAction:BotmanBotDetectionAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanBotDetectionAction gets an existing BotmanBotDetectionAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanBotDetectionAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanBotDetectionActionState, opts ...pulumi.ResourceOption) (*BotmanBotDetectionAction, error) {
	var resource BotmanBotDetectionAction
	err := ctx.ReadResource("akamai:index/botmanBotDetectionAction:BotmanBotDetectionAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanBotDetectionAction resources.
type botmanBotDetectionActionState struct {
	BotDetectionAction *string `pulumi:"botDetectionAction"`
	ConfigId           *int    `pulumi:"configId"`
	DetectionId        *string `pulumi:"detectionId"`
	SecurityPolicyId   *string `pulumi:"securityPolicyId"`
}

type BotmanBotDetectionActionState struct {
	BotDetectionAction pulumi.StringPtrInput
	ConfigId           pulumi.IntPtrInput
	DetectionId        pulumi.StringPtrInput
	SecurityPolicyId   pulumi.StringPtrInput
}

func (BotmanBotDetectionActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanBotDetectionActionState)(nil)).Elem()
}

type botmanBotDetectionActionArgs struct {
	BotDetectionAction string `pulumi:"botDetectionAction"`
	ConfigId           int    `pulumi:"configId"`
	DetectionId        string `pulumi:"detectionId"`
	SecurityPolicyId   string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a BotmanBotDetectionAction resource.
type BotmanBotDetectionActionArgs struct {
	BotDetectionAction pulumi.StringInput
	ConfigId           pulumi.IntInput
	DetectionId        pulumi.StringInput
	SecurityPolicyId   pulumi.StringInput
}

func (BotmanBotDetectionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanBotDetectionActionArgs)(nil)).Elem()
}

type BotmanBotDetectionActionInput interface {
	pulumi.Input

	ToBotmanBotDetectionActionOutput() BotmanBotDetectionActionOutput
	ToBotmanBotDetectionActionOutputWithContext(ctx context.Context) BotmanBotDetectionActionOutput
}

func (*BotmanBotDetectionAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanBotDetectionAction)(nil)).Elem()
}

func (i *BotmanBotDetectionAction) ToBotmanBotDetectionActionOutput() BotmanBotDetectionActionOutput {
	return i.ToBotmanBotDetectionActionOutputWithContext(context.Background())
}

func (i *BotmanBotDetectionAction) ToBotmanBotDetectionActionOutputWithContext(ctx context.Context) BotmanBotDetectionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanBotDetectionActionOutput)
}

// BotmanBotDetectionActionArrayInput is an input type that accepts BotmanBotDetectionActionArray and BotmanBotDetectionActionArrayOutput values.
// You can construct a concrete instance of `BotmanBotDetectionActionArrayInput` via:
//
//	BotmanBotDetectionActionArray{ BotmanBotDetectionActionArgs{...} }
type BotmanBotDetectionActionArrayInput interface {
	pulumi.Input

	ToBotmanBotDetectionActionArrayOutput() BotmanBotDetectionActionArrayOutput
	ToBotmanBotDetectionActionArrayOutputWithContext(context.Context) BotmanBotDetectionActionArrayOutput
}

type BotmanBotDetectionActionArray []BotmanBotDetectionActionInput

func (BotmanBotDetectionActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanBotDetectionAction)(nil)).Elem()
}

func (i BotmanBotDetectionActionArray) ToBotmanBotDetectionActionArrayOutput() BotmanBotDetectionActionArrayOutput {
	return i.ToBotmanBotDetectionActionArrayOutputWithContext(context.Background())
}

func (i BotmanBotDetectionActionArray) ToBotmanBotDetectionActionArrayOutputWithContext(ctx context.Context) BotmanBotDetectionActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanBotDetectionActionArrayOutput)
}

// BotmanBotDetectionActionMapInput is an input type that accepts BotmanBotDetectionActionMap and BotmanBotDetectionActionMapOutput values.
// You can construct a concrete instance of `BotmanBotDetectionActionMapInput` via:
//
//	BotmanBotDetectionActionMap{ "key": BotmanBotDetectionActionArgs{...} }
type BotmanBotDetectionActionMapInput interface {
	pulumi.Input

	ToBotmanBotDetectionActionMapOutput() BotmanBotDetectionActionMapOutput
	ToBotmanBotDetectionActionMapOutputWithContext(context.Context) BotmanBotDetectionActionMapOutput
}

type BotmanBotDetectionActionMap map[string]BotmanBotDetectionActionInput

func (BotmanBotDetectionActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanBotDetectionAction)(nil)).Elem()
}

func (i BotmanBotDetectionActionMap) ToBotmanBotDetectionActionMapOutput() BotmanBotDetectionActionMapOutput {
	return i.ToBotmanBotDetectionActionMapOutputWithContext(context.Background())
}

func (i BotmanBotDetectionActionMap) ToBotmanBotDetectionActionMapOutputWithContext(ctx context.Context) BotmanBotDetectionActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanBotDetectionActionMapOutput)
}

type BotmanBotDetectionActionOutput struct{ *pulumi.OutputState }

func (BotmanBotDetectionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanBotDetectionAction)(nil)).Elem()
}

func (o BotmanBotDetectionActionOutput) ToBotmanBotDetectionActionOutput() BotmanBotDetectionActionOutput {
	return o
}

func (o BotmanBotDetectionActionOutput) ToBotmanBotDetectionActionOutputWithContext(ctx context.Context) BotmanBotDetectionActionOutput {
	return o
}

func (o BotmanBotDetectionActionOutput) BotDetectionAction() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanBotDetectionAction) pulumi.StringOutput { return v.BotDetectionAction }).(pulumi.StringOutput)
}

func (o BotmanBotDetectionActionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanBotDetectionAction) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanBotDetectionActionOutput) DetectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanBotDetectionAction) pulumi.StringOutput { return v.DetectionId }).(pulumi.StringOutput)
}

func (o BotmanBotDetectionActionOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanBotDetectionAction) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

type BotmanBotDetectionActionArrayOutput struct{ *pulumi.OutputState }

func (BotmanBotDetectionActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanBotDetectionAction)(nil)).Elem()
}

func (o BotmanBotDetectionActionArrayOutput) ToBotmanBotDetectionActionArrayOutput() BotmanBotDetectionActionArrayOutput {
	return o
}

func (o BotmanBotDetectionActionArrayOutput) ToBotmanBotDetectionActionArrayOutputWithContext(ctx context.Context) BotmanBotDetectionActionArrayOutput {
	return o
}

func (o BotmanBotDetectionActionArrayOutput) Index(i pulumi.IntInput) BotmanBotDetectionActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanBotDetectionAction {
		return vs[0].([]*BotmanBotDetectionAction)[vs[1].(int)]
	}).(BotmanBotDetectionActionOutput)
}

type BotmanBotDetectionActionMapOutput struct{ *pulumi.OutputState }

func (BotmanBotDetectionActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanBotDetectionAction)(nil)).Elem()
}

func (o BotmanBotDetectionActionMapOutput) ToBotmanBotDetectionActionMapOutput() BotmanBotDetectionActionMapOutput {
	return o
}

func (o BotmanBotDetectionActionMapOutput) ToBotmanBotDetectionActionMapOutputWithContext(ctx context.Context) BotmanBotDetectionActionMapOutput {
	return o
}

func (o BotmanBotDetectionActionMapOutput) MapIndex(k pulumi.StringInput) BotmanBotDetectionActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanBotDetectionAction {
		return vs[0].(map[string]*BotmanBotDetectionAction)[vs[1].(string)]
	}).(BotmanBotDetectionActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanBotDetectionActionInput)(nil)).Elem(), &BotmanBotDetectionAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanBotDetectionActionArrayInput)(nil)).Elem(), BotmanBotDetectionActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanBotDetectionActionMapInput)(nil)).Elem(), BotmanBotDetectionActionMap{})
	pulumi.RegisterOutputType(BotmanBotDetectionActionOutput{})
	pulumi.RegisterOutputType(BotmanBotDetectionActionArrayOutput{})
	pulumi.RegisterOutputType(BotmanBotDetectionActionMapOutput{})
}
