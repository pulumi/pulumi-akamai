// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanChallengeAction struct {
	pulumi.CustomResourceState

	ActionId        pulumi.StringOutput `pulumi:"actionId"`
	ChallengeAction pulumi.StringOutput `pulumi:"challengeAction"`
	ConfigId        pulumi.IntOutput    `pulumi:"configId"`
}

// NewBotmanChallengeAction registers a new resource with the given unique name, arguments, and options.
func NewBotmanChallengeAction(ctx *pulumi.Context,
	name string, args *BotmanChallengeActionArgs, opts ...pulumi.ResourceOption) (*BotmanChallengeAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeAction == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	var resource BotmanChallengeAction
	err := ctx.RegisterResource("akamai:index/botmanChallengeAction:BotmanChallengeAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanChallengeAction gets an existing BotmanChallengeAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanChallengeAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanChallengeActionState, opts ...pulumi.ResourceOption) (*BotmanChallengeAction, error) {
	var resource BotmanChallengeAction
	err := ctx.ReadResource("akamai:index/botmanChallengeAction:BotmanChallengeAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanChallengeAction resources.
type botmanChallengeActionState struct {
	ActionId        *string `pulumi:"actionId"`
	ChallengeAction *string `pulumi:"challengeAction"`
	ConfigId        *int    `pulumi:"configId"`
}

type BotmanChallengeActionState struct {
	ActionId        pulumi.StringPtrInput
	ChallengeAction pulumi.StringPtrInput
	ConfigId        pulumi.IntPtrInput
}

func (BotmanChallengeActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeActionState)(nil)).Elem()
}

type botmanChallengeActionArgs struct {
	ChallengeAction string `pulumi:"challengeAction"`
	ConfigId        int    `pulumi:"configId"`
}

// The set of arguments for constructing a BotmanChallengeAction resource.
type BotmanChallengeActionArgs struct {
	ChallengeAction pulumi.StringInput
	ConfigId        pulumi.IntInput
}

func (BotmanChallengeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeActionArgs)(nil)).Elem()
}

type BotmanChallengeActionInput interface {
	pulumi.Input

	ToBotmanChallengeActionOutput() BotmanChallengeActionOutput
	ToBotmanChallengeActionOutputWithContext(ctx context.Context) BotmanChallengeActionOutput
}

func (*BotmanChallengeAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeAction)(nil)).Elem()
}

func (i *BotmanChallengeAction) ToBotmanChallengeActionOutput() BotmanChallengeActionOutput {
	return i.ToBotmanChallengeActionOutputWithContext(context.Background())
}

func (i *BotmanChallengeAction) ToBotmanChallengeActionOutputWithContext(ctx context.Context) BotmanChallengeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeActionOutput)
}

// BotmanChallengeActionArrayInput is an input type that accepts BotmanChallengeActionArray and BotmanChallengeActionArrayOutput values.
// You can construct a concrete instance of `BotmanChallengeActionArrayInput` via:
//
//	BotmanChallengeActionArray{ BotmanChallengeActionArgs{...} }
type BotmanChallengeActionArrayInput interface {
	pulumi.Input

	ToBotmanChallengeActionArrayOutput() BotmanChallengeActionArrayOutput
	ToBotmanChallengeActionArrayOutputWithContext(context.Context) BotmanChallengeActionArrayOutput
}

type BotmanChallengeActionArray []BotmanChallengeActionInput

func (BotmanChallengeActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeAction)(nil)).Elem()
}

func (i BotmanChallengeActionArray) ToBotmanChallengeActionArrayOutput() BotmanChallengeActionArrayOutput {
	return i.ToBotmanChallengeActionArrayOutputWithContext(context.Background())
}

func (i BotmanChallengeActionArray) ToBotmanChallengeActionArrayOutputWithContext(ctx context.Context) BotmanChallengeActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeActionArrayOutput)
}

// BotmanChallengeActionMapInput is an input type that accepts BotmanChallengeActionMap and BotmanChallengeActionMapOutput values.
// You can construct a concrete instance of `BotmanChallengeActionMapInput` via:
//
//	BotmanChallengeActionMap{ "key": BotmanChallengeActionArgs{...} }
type BotmanChallengeActionMapInput interface {
	pulumi.Input

	ToBotmanChallengeActionMapOutput() BotmanChallengeActionMapOutput
	ToBotmanChallengeActionMapOutputWithContext(context.Context) BotmanChallengeActionMapOutput
}

type BotmanChallengeActionMap map[string]BotmanChallengeActionInput

func (BotmanChallengeActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeAction)(nil)).Elem()
}

func (i BotmanChallengeActionMap) ToBotmanChallengeActionMapOutput() BotmanChallengeActionMapOutput {
	return i.ToBotmanChallengeActionMapOutputWithContext(context.Background())
}

func (i BotmanChallengeActionMap) ToBotmanChallengeActionMapOutputWithContext(ctx context.Context) BotmanChallengeActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeActionMapOutput)
}

type BotmanChallengeActionOutput struct{ *pulumi.OutputState }

func (BotmanChallengeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeAction)(nil)).Elem()
}

func (o BotmanChallengeActionOutput) ToBotmanChallengeActionOutput() BotmanChallengeActionOutput {
	return o
}

func (o BotmanChallengeActionOutput) ToBotmanChallengeActionOutputWithContext(ctx context.Context) BotmanChallengeActionOutput {
	return o
}

func (o BotmanChallengeActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanChallengeAction) pulumi.StringOutput { return v.ActionId }).(pulumi.StringOutput)
}

func (o BotmanChallengeActionOutput) ChallengeAction() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanChallengeAction) pulumi.StringOutput { return v.ChallengeAction }).(pulumi.StringOutput)
}

func (o BotmanChallengeActionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanChallengeAction) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

type BotmanChallengeActionArrayOutput struct{ *pulumi.OutputState }

func (BotmanChallengeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeAction)(nil)).Elem()
}

func (o BotmanChallengeActionArrayOutput) ToBotmanChallengeActionArrayOutput() BotmanChallengeActionArrayOutput {
	return o
}

func (o BotmanChallengeActionArrayOutput) ToBotmanChallengeActionArrayOutputWithContext(ctx context.Context) BotmanChallengeActionArrayOutput {
	return o
}

func (o BotmanChallengeActionArrayOutput) Index(i pulumi.IntInput) BotmanChallengeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanChallengeAction {
		return vs[0].([]*BotmanChallengeAction)[vs[1].(int)]
	}).(BotmanChallengeActionOutput)
}

type BotmanChallengeActionMapOutput struct{ *pulumi.OutputState }

func (BotmanChallengeActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeAction)(nil)).Elem()
}

func (o BotmanChallengeActionMapOutput) ToBotmanChallengeActionMapOutput() BotmanChallengeActionMapOutput {
	return o
}

func (o BotmanChallengeActionMapOutput) ToBotmanChallengeActionMapOutputWithContext(ctx context.Context) BotmanChallengeActionMapOutput {
	return o
}

func (o BotmanChallengeActionMapOutput) MapIndex(k pulumi.StringInput) BotmanChallengeActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanChallengeAction {
		return vs[0].(map[string]*BotmanChallengeAction)[vs[1].(string)]
	}).(BotmanChallengeActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeActionInput)(nil)).Elem(), &BotmanChallengeAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeActionArrayInput)(nil)).Elem(), BotmanChallengeActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeActionMapInput)(nil)).Elem(), BotmanChallengeActionMap{})
	pulumi.RegisterOutputType(BotmanChallengeActionOutput{})
	pulumi.RegisterOutputType(BotmanChallengeActionArrayOutput{})
	pulumi.RegisterOutputType(BotmanChallengeActionMapOutput{})
}
