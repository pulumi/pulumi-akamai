// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClientlistActivation struct {
	pulumi.CustomResourceState

	// A brief description for the activation.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// The client list unique identifier.
	ListId pulumi.StringOutput `pulumi:"listId"`
	// The network environment where you activate your client list: either STAGING or PRODUCTION.
	Network pulumi.StringOutput `pulumi:"network"`
	// Users to notify via email.
	NotificationRecipients pulumi.StringArrayOutput `pulumi:"notificationRecipients"`
	// Identifies the Siebel ticket, if the activation is linked to one.
	SiebelTicketId pulumi.StringPtrOutput `pulumi:"siebelTicketId"`
	// The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
	Status pulumi.StringOutput `pulumi:"status"`
	// The client list version.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewClientlistActivation registers a new resource with the given unique name, arguments, and options.
func NewClientlistActivation(ctx *pulumi.Context,
	name string, args *ClientlistActivationArgs, opts ...pulumi.ResourceOption) (*ClientlistActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListId == nil {
		return nil, errors.New("invalid value for required argument 'ListId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientlistActivation
	err := ctx.RegisterResource("akamai:index/clientlistActivation:ClientlistActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientlistActivation gets an existing ClientlistActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientlistActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientlistActivationState, opts ...pulumi.ResourceOption) (*ClientlistActivation, error) {
	var resource ClientlistActivation
	err := ctx.ReadResource("akamai:index/clientlistActivation:ClientlistActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientlistActivation resources.
type clientlistActivationState struct {
	// A brief description for the activation.
	Comments *string `pulumi:"comments"`
	// The client list unique identifier.
	ListId *string `pulumi:"listId"`
	// The network environment where you activate your client list: either STAGING or PRODUCTION.
	Network *string `pulumi:"network"`
	// Users to notify via email.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// Identifies the Siebel ticket, if the activation is linked to one.
	SiebelTicketId *string `pulumi:"siebelTicketId"`
	// The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
	Status *string `pulumi:"status"`
	// The client list version.
	Version *int `pulumi:"version"`
}

type ClientlistActivationState struct {
	// A brief description for the activation.
	Comments pulumi.StringPtrInput
	// The client list unique identifier.
	ListId pulumi.StringPtrInput
	// The network environment where you activate your client list: either STAGING or PRODUCTION.
	Network pulumi.StringPtrInput
	// Users to notify via email.
	NotificationRecipients pulumi.StringArrayInput
	// Identifies the Siebel ticket, if the activation is linked to one.
	SiebelTicketId pulumi.StringPtrInput
	// The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
	Status pulumi.StringPtrInput
	// The client list version.
	Version pulumi.IntPtrInput
}

func (ClientlistActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientlistActivationState)(nil)).Elem()
}

type clientlistActivationArgs struct {
	// A brief description for the activation.
	Comments *string `pulumi:"comments"`
	// The client list unique identifier.
	ListId string `pulumi:"listId"`
	// The network environment where you activate your client list: either STAGING or PRODUCTION.
	Network string `pulumi:"network"`
	// Users to notify via email.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// Identifies the Siebel ticket, if the activation is linked to one.
	SiebelTicketId *string `pulumi:"siebelTicketId"`
	// The client list version.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a ClientlistActivation resource.
type ClientlistActivationArgs struct {
	// A brief description for the activation.
	Comments pulumi.StringPtrInput
	// The client list unique identifier.
	ListId pulumi.StringInput
	// The network environment where you activate your client list: either STAGING or PRODUCTION.
	Network pulumi.StringInput
	// Users to notify via email.
	NotificationRecipients pulumi.StringArrayInput
	// Identifies the Siebel ticket, if the activation is linked to one.
	SiebelTicketId pulumi.StringPtrInput
	// The client list version.
	Version pulumi.IntInput
}

func (ClientlistActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientlistActivationArgs)(nil)).Elem()
}

type ClientlistActivationInput interface {
	pulumi.Input

	ToClientlistActivationOutput() ClientlistActivationOutput
	ToClientlistActivationOutputWithContext(ctx context.Context) ClientlistActivationOutput
}

func (*ClientlistActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientlistActivation)(nil)).Elem()
}

func (i *ClientlistActivation) ToClientlistActivationOutput() ClientlistActivationOutput {
	return i.ToClientlistActivationOutputWithContext(context.Background())
}

func (i *ClientlistActivation) ToClientlistActivationOutputWithContext(ctx context.Context) ClientlistActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistActivationOutput)
}

// ClientlistActivationArrayInput is an input type that accepts ClientlistActivationArray and ClientlistActivationArrayOutput values.
// You can construct a concrete instance of `ClientlistActivationArrayInput` via:
//
//	ClientlistActivationArray{ ClientlistActivationArgs{...} }
type ClientlistActivationArrayInput interface {
	pulumi.Input

	ToClientlistActivationArrayOutput() ClientlistActivationArrayOutput
	ToClientlistActivationArrayOutputWithContext(context.Context) ClientlistActivationArrayOutput
}

type ClientlistActivationArray []ClientlistActivationInput

func (ClientlistActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientlistActivation)(nil)).Elem()
}

func (i ClientlistActivationArray) ToClientlistActivationArrayOutput() ClientlistActivationArrayOutput {
	return i.ToClientlistActivationArrayOutputWithContext(context.Background())
}

func (i ClientlistActivationArray) ToClientlistActivationArrayOutputWithContext(ctx context.Context) ClientlistActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistActivationArrayOutput)
}

// ClientlistActivationMapInput is an input type that accepts ClientlistActivationMap and ClientlistActivationMapOutput values.
// You can construct a concrete instance of `ClientlistActivationMapInput` via:
//
//	ClientlistActivationMap{ "key": ClientlistActivationArgs{...} }
type ClientlistActivationMapInput interface {
	pulumi.Input

	ToClientlistActivationMapOutput() ClientlistActivationMapOutput
	ToClientlistActivationMapOutputWithContext(context.Context) ClientlistActivationMapOutput
}

type ClientlistActivationMap map[string]ClientlistActivationInput

func (ClientlistActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientlistActivation)(nil)).Elem()
}

func (i ClientlistActivationMap) ToClientlistActivationMapOutput() ClientlistActivationMapOutput {
	return i.ToClientlistActivationMapOutputWithContext(context.Background())
}

func (i ClientlistActivationMap) ToClientlistActivationMapOutputWithContext(ctx context.Context) ClientlistActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistActivationMapOutput)
}

type ClientlistActivationOutput struct{ *pulumi.OutputState }

func (ClientlistActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientlistActivation)(nil)).Elem()
}

func (o ClientlistActivationOutput) ToClientlistActivationOutput() ClientlistActivationOutput {
	return o
}

func (o ClientlistActivationOutput) ToClientlistActivationOutputWithContext(ctx context.Context) ClientlistActivationOutput {
	return o
}

// A brief description for the activation.
func (o ClientlistActivationOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// The client list unique identifier.
func (o ClientlistActivationOutput) ListId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringOutput { return v.ListId }).(pulumi.StringOutput)
}

// The network environment where you activate your client list: either STAGING or PRODUCTION.
func (o ClientlistActivationOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Users to notify via email.
func (o ClientlistActivationOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringArrayOutput { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// Identifies the Siebel ticket, if the activation is linked to one.
func (o ClientlistActivationOutput) SiebelTicketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringPtrOutput { return v.SiebelTicketId }).(pulumi.StringPtrOutput)
}

// The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
func (o ClientlistActivationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The client list version.
func (o ClientlistActivationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientlistActivation) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ClientlistActivationArrayOutput struct{ *pulumi.OutputState }

func (ClientlistActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientlistActivation)(nil)).Elem()
}

func (o ClientlistActivationArrayOutput) ToClientlistActivationArrayOutput() ClientlistActivationArrayOutput {
	return o
}

func (o ClientlistActivationArrayOutput) ToClientlistActivationArrayOutputWithContext(ctx context.Context) ClientlistActivationArrayOutput {
	return o
}

func (o ClientlistActivationArrayOutput) Index(i pulumi.IntInput) ClientlistActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientlistActivation {
		return vs[0].([]*ClientlistActivation)[vs[1].(int)]
	}).(ClientlistActivationOutput)
}

type ClientlistActivationMapOutput struct{ *pulumi.OutputState }

func (ClientlistActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientlistActivation)(nil)).Elem()
}

func (o ClientlistActivationMapOutput) ToClientlistActivationMapOutput() ClientlistActivationMapOutput {
	return o
}

func (o ClientlistActivationMapOutput) ToClientlistActivationMapOutputWithContext(ctx context.Context) ClientlistActivationMapOutput {
	return o
}

func (o ClientlistActivationMapOutput) MapIndex(k pulumi.StringInput) ClientlistActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientlistActivation {
		return vs[0].(map[string]*ClientlistActivation)[vs[1].(string)]
	}).(ClientlistActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistActivationInput)(nil)).Elem(), &ClientlistActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistActivationArrayInput)(nil)).Elem(), ClientlistActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistActivationMapInput)(nil)).Elem(), ClientlistActivationMap{})
	pulumi.RegisterOutputType(ClientlistActivationOutput{})
	pulumi.RegisterOutputType(ClientlistActivationArrayOutput{})
	pulumi.RegisterOutputType(ClientlistActivationMapOutput{})
}
