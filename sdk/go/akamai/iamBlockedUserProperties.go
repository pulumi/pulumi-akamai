// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `IamBlockedUserProperties` resource to remove or grant access to properties. Administrators can block a user's access to any property, overriding any available role already assigned to that user.
//
// ## Basic usage
//
// This example returns the policy details based on the policy ID and optionally, a version:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v3/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewIamBlockedUserProperties(ctx, "example", &akamai.IamBlockedUserPropertiesArgs{
// 			BlockedProperties: pulumi.IntArray{
// 				pulumi.Int(1),
// 				pulumi.Int(2),
// 				pulumi.Int(3),
// 				pulumi.Int(4),
// 				pulumi.Int(5),
// 			},
// 			GroupId:    pulumi.Int(12345),
// 			IdentityId: pulumi.String("A-B-123456"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Attributes reference
//
// This resource doesn't return any attributes.
type IamBlockedUserProperties struct {
	pulumi.CustomResourceState

	// List of properties to block for a user. The property IDs must be an integer.
	BlockedProperties pulumi.IntArrayOutput `pulumi:"blockedProperties"`
	// A unique identifier for a group. Each identifier must be an integer.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
}

// NewIamBlockedUserProperties registers a new resource with the given unique name, arguments, and options.
func NewIamBlockedUserProperties(ctx *pulumi.Context,
	name string, args *IamBlockedUserPropertiesArgs, opts ...pulumi.ResourceOption) (*IamBlockedUserProperties, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlockedProperties == nil {
		return nil, errors.New("invalid value for required argument 'BlockedProperties'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	var resource IamBlockedUserProperties
	err := ctx.RegisterResource("akamai:index/iamBlockedUserProperties:IamBlockedUserProperties", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamBlockedUserProperties gets an existing IamBlockedUserProperties resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamBlockedUserProperties(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamBlockedUserPropertiesState, opts ...pulumi.ResourceOption) (*IamBlockedUserProperties, error) {
	var resource IamBlockedUserProperties
	err := ctx.ReadResource("akamai:index/iamBlockedUserProperties:IamBlockedUserProperties", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamBlockedUserProperties resources.
type iamBlockedUserPropertiesState struct {
	// List of properties to block for a user. The property IDs must be an integer.
	BlockedProperties []int `pulumi:"blockedProperties"`
	// A unique identifier for a group. Each identifier must be an integer.
	GroupId *int `pulumi:"groupId"`
	// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
	IdentityId *string `pulumi:"identityId"`
}

type IamBlockedUserPropertiesState struct {
	// List of properties to block for a user. The property IDs must be an integer.
	BlockedProperties pulumi.IntArrayInput
	// A unique identifier for a group. Each identifier must be an integer.
	GroupId pulumi.IntPtrInput
	// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
	IdentityId pulumi.StringPtrInput
}

func (IamBlockedUserPropertiesState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamBlockedUserPropertiesState)(nil)).Elem()
}

type iamBlockedUserPropertiesArgs struct {
	// List of properties to block for a user. The property IDs must be an integer.
	BlockedProperties []int `pulumi:"blockedProperties"`
	// A unique identifier for a group. Each identifier must be an integer.
	GroupId int `pulumi:"groupId"`
	// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
	IdentityId string `pulumi:"identityId"`
}

// The set of arguments for constructing a IamBlockedUserProperties resource.
type IamBlockedUserPropertiesArgs struct {
	// List of properties to block for a user. The property IDs must be an integer.
	BlockedProperties pulumi.IntArrayInput
	// A unique identifier for a group. Each identifier must be an integer.
	GroupId pulumi.IntInput
	// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
	IdentityId pulumi.StringInput
}

func (IamBlockedUserPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamBlockedUserPropertiesArgs)(nil)).Elem()
}

type IamBlockedUserPropertiesInput interface {
	pulumi.Input

	ToIamBlockedUserPropertiesOutput() IamBlockedUserPropertiesOutput
	ToIamBlockedUserPropertiesOutputWithContext(ctx context.Context) IamBlockedUserPropertiesOutput
}

func (*IamBlockedUserProperties) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBlockedUserProperties)(nil)).Elem()
}

func (i *IamBlockedUserProperties) ToIamBlockedUserPropertiesOutput() IamBlockedUserPropertiesOutput {
	return i.ToIamBlockedUserPropertiesOutputWithContext(context.Background())
}

func (i *IamBlockedUserProperties) ToIamBlockedUserPropertiesOutputWithContext(ctx context.Context) IamBlockedUserPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBlockedUserPropertiesOutput)
}

// IamBlockedUserPropertiesArrayInput is an input type that accepts IamBlockedUserPropertiesArray and IamBlockedUserPropertiesArrayOutput values.
// You can construct a concrete instance of `IamBlockedUserPropertiesArrayInput` via:
//
//          IamBlockedUserPropertiesArray{ IamBlockedUserPropertiesArgs{...} }
type IamBlockedUserPropertiesArrayInput interface {
	pulumi.Input

	ToIamBlockedUserPropertiesArrayOutput() IamBlockedUserPropertiesArrayOutput
	ToIamBlockedUserPropertiesArrayOutputWithContext(context.Context) IamBlockedUserPropertiesArrayOutput
}

type IamBlockedUserPropertiesArray []IamBlockedUserPropertiesInput

func (IamBlockedUserPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamBlockedUserProperties)(nil)).Elem()
}

func (i IamBlockedUserPropertiesArray) ToIamBlockedUserPropertiesArrayOutput() IamBlockedUserPropertiesArrayOutput {
	return i.ToIamBlockedUserPropertiesArrayOutputWithContext(context.Background())
}

func (i IamBlockedUserPropertiesArray) ToIamBlockedUserPropertiesArrayOutputWithContext(ctx context.Context) IamBlockedUserPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBlockedUserPropertiesArrayOutput)
}

// IamBlockedUserPropertiesMapInput is an input type that accepts IamBlockedUserPropertiesMap and IamBlockedUserPropertiesMapOutput values.
// You can construct a concrete instance of `IamBlockedUserPropertiesMapInput` via:
//
//          IamBlockedUserPropertiesMap{ "key": IamBlockedUserPropertiesArgs{...} }
type IamBlockedUserPropertiesMapInput interface {
	pulumi.Input

	ToIamBlockedUserPropertiesMapOutput() IamBlockedUserPropertiesMapOutput
	ToIamBlockedUserPropertiesMapOutputWithContext(context.Context) IamBlockedUserPropertiesMapOutput
}

type IamBlockedUserPropertiesMap map[string]IamBlockedUserPropertiesInput

func (IamBlockedUserPropertiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamBlockedUserProperties)(nil)).Elem()
}

func (i IamBlockedUserPropertiesMap) ToIamBlockedUserPropertiesMapOutput() IamBlockedUserPropertiesMapOutput {
	return i.ToIamBlockedUserPropertiesMapOutputWithContext(context.Background())
}

func (i IamBlockedUserPropertiesMap) ToIamBlockedUserPropertiesMapOutputWithContext(ctx context.Context) IamBlockedUserPropertiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamBlockedUserPropertiesMapOutput)
}

type IamBlockedUserPropertiesOutput struct{ *pulumi.OutputState }

func (IamBlockedUserPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamBlockedUserProperties)(nil)).Elem()
}

func (o IamBlockedUserPropertiesOutput) ToIamBlockedUserPropertiesOutput() IamBlockedUserPropertiesOutput {
	return o
}

func (o IamBlockedUserPropertiesOutput) ToIamBlockedUserPropertiesOutputWithContext(ctx context.Context) IamBlockedUserPropertiesOutput {
	return o
}

// List of properties to block for a user. The property IDs must be an integer.
func (o IamBlockedUserPropertiesOutput) BlockedProperties() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *IamBlockedUserProperties) pulumi.IntArrayOutput { return v.BlockedProperties }).(pulumi.IntArrayOutput)
}

// A unique identifier for a group. Each identifier must be an integer.
func (o IamBlockedUserPropertiesOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *IamBlockedUserProperties) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// A unique identifier that corresponds to a user's actual profile or client ID. Each identifier must be a string.
func (o IamBlockedUserPropertiesOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *IamBlockedUserProperties) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

type IamBlockedUserPropertiesArrayOutput struct{ *pulumi.OutputState }

func (IamBlockedUserPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamBlockedUserProperties)(nil)).Elem()
}

func (o IamBlockedUserPropertiesArrayOutput) ToIamBlockedUserPropertiesArrayOutput() IamBlockedUserPropertiesArrayOutput {
	return o
}

func (o IamBlockedUserPropertiesArrayOutput) ToIamBlockedUserPropertiesArrayOutputWithContext(ctx context.Context) IamBlockedUserPropertiesArrayOutput {
	return o
}

func (o IamBlockedUserPropertiesArrayOutput) Index(i pulumi.IntInput) IamBlockedUserPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamBlockedUserProperties {
		return vs[0].([]*IamBlockedUserProperties)[vs[1].(int)]
	}).(IamBlockedUserPropertiesOutput)
}

type IamBlockedUserPropertiesMapOutput struct{ *pulumi.OutputState }

func (IamBlockedUserPropertiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamBlockedUserProperties)(nil)).Elem()
}

func (o IamBlockedUserPropertiesMapOutput) ToIamBlockedUserPropertiesMapOutput() IamBlockedUserPropertiesMapOutput {
	return o
}

func (o IamBlockedUserPropertiesMapOutput) ToIamBlockedUserPropertiesMapOutputWithContext(ctx context.Context) IamBlockedUserPropertiesMapOutput {
	return o
}

func (o IamBlockedUserPropertiesMapOutput) MapIndex(k pulumi.StringInput) IamBlockedUserPropertiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamBlockedUserProperties {
		return vs[0].(map[string]*IamBlockedUserProperties)[vs[1].(string)]
	}).(IamBlockedUserPropertiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamBlockedUserPropertiesInput)(nil)).Elem(), &IamBlockedUserProperties{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBlockedUserPropertiesArrayInput)(nil)).Elem(), IamBlockedUserPropertiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamBlockedUserPropertiesMapInput)(nil)).Elem(), IamBlockedUserPropertiesMap{})
	pulumi.RegisterOutputType(IamBlockedUserPropertiesOutput{})
	pulumi.RegisterOutputType(IamBlockedUserPropertiesArrayOutput{})
	pulumi.RegisterOutputType(IamBlockedUserPropertiesMapOutput{})
}
