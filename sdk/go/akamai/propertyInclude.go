// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `PropertyInclude` resource to create an include and its rule tree.
//
// ## Basic usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akamai.NewPropertyInclude(ctx, "myExample", &akamai.PropertyIncludeArgs{
//				ContractId: pulumi.String("ctr_1-AB123"),
//				GroupId:    pulumi.String("grp_12345"),
//				ProductId:  pulumi.String("prd_123456"),
//				RuleFormat: pulumi.String("v2022-10-18"),
//				Type:       pulumi.String("MICROSERVICES"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// This resource returns these attributes:
//
// * `ruleErrors` - Rule's validation errors. You need to resolve returned errors, as they block an activation.
// * `ruleWarnings` - Rule's validation warnings. You can activate a version that yields less severe warnings.
// * `latestVersion` - Returns the most recent version of the include.
// * `stagingVersion` - The include version currently activated on the staging network.
// * `productionVersion` - The include version currently activated on the production network.
type PropertyInclude struct {
	pulumi.CustomResourceState

	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Specifies the most recent version of the include
	LatestVersion pulumi.IntOutput `pulumi:"latestVersion"`
	// (Required) The descriptive name for the include.
	Name pulumi.StringOutput `pulumi:"name"`
	// The product assigned to the include
	ProductId pulumi.StringPtrOutput `pulumi:"productId"`
	// The most recent version to be activated to the production network
	ProductionVersion pulumi.StringOutput `pulumi:"productionVersion"`
	// Rule validation errors
	RuleErrors pulumi.StringOutput `pulumi:"ruleErrors"`
	// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
	RuleFormat pulumi.StringOutput `pulumi:"ruleFormat"`
	// Rule validation warnings
	RuleWarnings pulumi.StringOutput `pulumi:"ruleWarnings"`
	// (Optional) Include's rules as JSON.
	Rules pulumi.StringOutput `pulumi:"rules"`
	// The most recent version to be activated to the staging network
	StagingVersion pulumi.StringOutput `pulumi:"stagingVersion"`
	// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPropertyInclude registers a new resource with the given unique name, arguments, and options.
func NewPropertyInclude(ctx *pulumi.Context,
	name string, args *PropertyIncludeArgs, opts ...pulumi.ResourceOption) (*PropertyInclude, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RuleFormat == nil {
		return nil, errors.New("invalid value for required argument 'RuleFormat'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource PropertyInclude
	err := ctx.RegisterResource("akamai:index/propertyInclude:PropertyInclude", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyInclude gets an existing PropertyInclude resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyInclude(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyIncludeState, opts ...pulumi.ResourceOption) (*PropertyInclude, error) {
	var resource PropertyInclude
	err := ctx.ReadResource("akamai:index/propertyInclude:PropertyInclude", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyInclude resources.
type propertyIncludeState struct {
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId *string `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId *string `pulumi:"groupId"`
	// Specifies the most recent version of the include
	LatestVersion *int `pulumi:"latestVersion"`
	// (Required) The descriptive name for the include.
	Name *string `pulumi:"name"`
	// The product assigned to the include
	ProductId *string `pulumi:"productId"`
	// The most recent version to be activated to the production network
	ProductionVersion *string `pulumi:"productionVersion"`
	// Rule validation errors
	RuleErrors *string `pulumi:"ruleErrors"`
	// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
	RuleFormat *string `pulumi:"ruleFormat"`
	// Rule validation warnings
	RuleWarnings *string `pulumi:"ruleWarnings"`
	// (Optional) Include's rules as JSON.
	Rules *string `pulumi:"rules"`
	// The most recent version to be activated to the staging network
	StagingVersion *string `pulumi:"stagingVersion"`
	// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
	Type *string `pulumi:"type"`
}

type PropertyIncludeState struct {
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringPtrInput
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringPtrInput
	// Specifies the most recent version of the include
	LatestVersion pulumi.IntPtrInput
	// (Required) The descriptive name for the include.
	Name pulumi.StringPtrInput
	// The product assigned to the include
	ProductId pulumi.StringPtrInput
	// The most recent version to be activated to the production network
	ProductionVersion pulumi.StringPtrInput
	// Rule validation errors
	RuleErrors pulumi.StringPtrInput
	// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
	RuleFormat pulumi.StringPtrInput
	// Rule validation warnings
	RuleWarnings pulumi.StringPtrInput
	// (Optional) Include's rules as JSON.
	Rules pulumi.StringPtrInput
	// The most recent version to be activated to the staging network
	StagingVersion pulumi.StringPtrInput
	// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
	Type pulumi.StringPtrInput
}

func (PropertyIncludeState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyIncludeState)(nil)).Elem()
}

type propertyIncludeArgs struct {
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId string `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId string `pulumi:"groupId"`
	// (Required) The descriptive name for the include.
	Name *string `pulumi:"name"`
	// The product assigned to the include
	ProductId *string `pulumi:"productId"`
	// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
	RuleFormat string `pulumi:"ruleFormat"`
	// (Optional) Include's rules as JSON.
	Rules *string `pulumi:"rules"`
	// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a PropertyInclude resource.
type PropertyIncludeArgs struct {
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringInput
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringInput
	// (Required) The descriptive name for the include.
	Name pulumi.StringPtrInput
	// The product assigned to the include
	ProductId pulumi.StringPtrInput
	// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
	RuleFormat pulumi.StringInput
	// (Optional) Include's rules as JSON.
	Rules pulumi.StringPtrInput
	// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
	Type pulumi.StringInput
}

func (PropertyIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyIncludeArgs)(nil)).Elem()
}

type PropertyIncludeInput interface {
	pulumi.Input

	ToPropertyIncludeOutput() PropertyIncludeOutput
	ToPropertyIncludeOutputWithContext(ctx context.Context) PropertyIncludeOutput
}

func (*PropertyInclude) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyInclude)(nil)).Elem()
}

func (i *PropertyInclude) ToPropertyIncludeOutput() PropertyIncludeOutput {
	return i.ToPropertyIncludeOutputWithContext(context.Background())
}

func (i *PropertyInclude) ToPropertyIncludeOutputWithContext(ctx context.Context) PropertyIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeOutput)
}

// PropertyIncludeArrayInput is an input type that accepts PropertyIncludeArray and PropertyIncludeArrayOutput values.
// You can construct a concrete instance of `PropertyIncludeArrayInput` via:
//
//	PropertyIncludeArray{ PropertyIncludeArgs{...} }
type PropertyIncludeArrayInput interface {
	pulumi.Input

	ToPropertyIncludeArrayOutput() PropertyIncludeArrayOutput
	ToPropertyIncludeArrayOutputWithContext(context.Context) PropertyIncludeArrayOutput
}

type PropertyIncludeArray []PropertyIncludeInput

func (PropertyIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyInclude)(nil)).Elem()
}

func (i PropertyIncludeArray) ToPropertyIncludeArrayOutput() PropertyIncludeArrayOutput {
	return i.ToPropertyIncludeArrayOutputWithContext(context.Background())
}

func (i PropertyIncludeArray) ToPropertyIncludeArrayOutputWithContext(ctx context.Context) PropertyIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeArrayOutput)
}

// PropertyIncludeMapInput is an input type that accepts PropertyIncludeMap and PropertyIncludeMapOutput values.
// You can construct a concrete instance of `PropertyIncludeMapInput` via:
//
//	PropertyIncludeMap{ "key": PropertyIncludeArgs{...} }
type PropertyIncludeMapInput interface {
	pulumi.Input

	ToPropertyIncludeMapOutput() PropertyIncludeMapOutput
	ToPropertyIncludeMapOutputWithContext(context.Context) PropertyIncludeMapOutput
}

type PropertyIncludeMap map[string]PropertyIncludeInput

func (PropertyIncludeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyInclude)(nil)).Elem()
}

func (i PropertyIncludeMap) ToPropertyIncludeMapOutput() PropertyIncludeMapOutput {
	return i.ToPropertyIncludeMapOutputWithContext(context.Background())
}

func (i PropertyIncludeMap) ToPropertyIncludeMapOutputWithContext(ctx context.Context) PropertyIncludeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeMapOutput)
}

type PropertyIncludeOutput struct{ *pulumi.OutputState }

func (PropertyIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyInclude)(nil)).Elem()
}

func (o PropertyIncludeOutput) ToPropertyIncludeOutput() PropertyIncludeOutput {
	return o
}

func (o PropertyIncludeOutput) ToPropertyIncludeOutputWithContext(ctx context.Context) PropertyIncludeOutput {
	return o
}

// (Required) A contract's unique ID, including the optional `ctr_` prefix.
func (o PropertyIncludeOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// (Required) A group's unique ID, including the optional `grp_` prefix.
func (o PropertyIncludeOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Specifies the most recent version of the include
func (o PropertyIncludeOutput) LatestVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.IntOutput { return v.LatestVersion }).(pulumi.IntOutput)
}

// (Required) The descriptive name for the include.
func (o PropertyIncludeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The product assigned to the include
func (o PropertyIncludeOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringPtrOutput { return v.ProductId }).(pulumi.StringPtrOutput)
}

// The most recent version to be activated to the production network
func (o PropertyIncludeOutput) ProductionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.ProductionVersion }).(pulumi.StringOutput)
}

// Rule validation errors
func (o PropertyIncludeOutput) RuleErrors() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.RuleErrors }).(pulumi.StringOutput)
}

// (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
func (o PropertyIncludeOutput) RuleFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.RuleFormat }).(pulumi.StringOutput)
}

// Rule validation warnings
func (o PropertyIncludeOutput) RuleWarnings() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.RuleWarnings }).(pulumi.StringOutput)
}

// (Optional) Include's rules as JSON.
func (o PropertyIncludeOutput) Rules() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.Rules }).(pulumi.StringOutput)
}

// The most recent version to be activated to the staging network
func (o PropertyIncludeOutput) StagingVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.StagingVersion }).(pulumi.StringOutput)
}

// (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
func (o PropertyIncludeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyInclude) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PropertyIncludeArrayOutput struct{ *pulumi.OutputState }

func (PropertyIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyInclude)(nil)).Elem()
}

func (o PropertyIncludeArrayOutput) ToPropertyIncludeArrayOutput() PropertyIncludeArrayOutput {
	return o
}

func (o PropertyIncludeArrayOutput) ToPropertyIncludeArrayOutputWithContext(ctx context.Context) PropertyIncludeArrayOutput {
	return o
}

func (o PropertyIncludeArrayOutput) Index(i pulumi.IntInput) PropertyIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyInclude {
		return vs[0].([]*PropertyInclude)[vs[1].(int)]
	}).(PropertyIncludeOutput)
}

type PropertyIncludeMapOutput struct{ *pulumi.OutputState }

func (PropertyIncludeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyInclude)(nil)).Elem()
}

func (o PropertyIncludeMapOutput) ToPropertyIncludeMapOutput() PropertyIncludeMapOutput {
	return o
}

func (o PropertyIncludeMapOutput) ToPropertyIncludeMapOutputWithContext(ctx context.Context) PropertyIncludeMapOutput {
	return o
}

func (o PropertyIncludeMapOutput) MapIndex(k pulumi.StringInput) PropertyIncludeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyInclude {
		return vs[0].(map[string]*PropertyInclude)[vs[1].(string)]
	}).(PropertyIncludeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeInput)(nil)).Elem(), &PropertyInclude{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeArrayInput)(nil)).Elem(), PropertyIncludeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeMapInput)(nil)).Elem(), PropertyIncludeMap{})
	pulumi.RegisterOutputType(PropertyIncludeOutput{})
	pulumi.RegisterOutputType(PropertyIncludeArrayOutput{})
	pulumi.RegisterOutputType(PropertyIncludeMapOutput{})
}
