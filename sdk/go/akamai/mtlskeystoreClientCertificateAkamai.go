// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v10/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MtlskeystoreClientCertificateAkamai struct {
	pulumi.CustomResourceState

	// The unique identifier of the client certificate.
	CertificateId pulumi.IntOutput `pulumi:"certificateId"`
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// The user who created the client certificate. Read-only.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// Unique identifier for the `current` client certificate version.
	CurrentGuid pulumi.StringOutput `pulumi:"currentGuid"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringOutput `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayOutput `pulumi:"notificationEmails"`
	// Unique identifier for the `previous` client certificate version.
	PreviousGuid pulumi.StringOutput `pulumi:"previousGuid"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringOutput `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
	Versions MtlskeystoreClientCertificateAkamaiVersionArrayOutput `pulumi:"versions"`
}

// NewMtlskeystoreClientCertificateAkamai registers a new resource with the given unique name, arguments, and options.
func NewMtlskeystoreClientCertificateAkamai(ctx *pulumi.Context,
	name string, args *MtlskeystoreClientCertificateAkamaiArgs, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateAkamai, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateName'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.Geography == nil {
		return nil, errors.New("invalid value for required argument 'Geography'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.NotificationEmails == nil {
		return nil, errors.New("invalid value for required argument 'NotificationEmails'")
	}
	if args.SecureNetwork == nil {
		return nil, errors.New("invalid value for required argument 'SecureNetwork'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MtlskeystoreClientCertificateAkamai
	err := ctx.RegisterResource("akamai:index/mtlskeystoreClientCertificateAkamai:MtlskeystoreClientCertificateAkamai", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMtlskeystoreClientCertificateAkamai gets an existing MtlskeystoreClientCertificateAkamai resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMtlskeystoreClientCertificateAkamai(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MtlskeystoreClientCertificateAkamaiState, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateAkamai, error) {
	var resource MtlskeystoreClientCertificateAkamai
	err := ctx.ReadResource("akamai:index/mtlskeystoreClientCertificateAkamai:MtlskeystoreClientCertificateAkamai", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MtlskeystoreClientCertificateAkamai resources.
type mtlskeystoreClientCertificateAkamaiState struct {
	// The unique identifier of the client certificate.
	CertificateId *int `pulumi:"certificateId"`
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName *string `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId *string `pulumi:"contractId"`
	// The user who created the client certificate. Read-only.
	CreatedBy *string `pulumi:"createdBy"`
	// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
	CreatedDate *string `pulumi:"createdDate"`
	// Unique identifier for the `current` client certificate version.
	CurrentGuid *string `pulumi:"currentGuid"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography *string `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId *int `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Unique identifier for the `previous` client certificate version.
	PreviousGuid *string `pulumi:"previousGuid"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork *string `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject *string `pulumi:"subject"`
	// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
	Versions []MtlskeystoreClientCertificateAkamaiVersion `pulumi:"versions"`
}

type MtlskeystoreClientCertificateAkamaiState struct {
	// The unique identifier of the client certificate.
	CertificateId pulumi.IntPtrInput
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringPtrInput
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringPtrInput
	// The user who created the client certificate. Read-only.
	CreatedBy pulumi.StringPtrInput
	// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
	CreatedDate pulumi.StringPtrInput
	// Unique identifier for the `current` client certificate version.
	CurrentGuid pulumi.StringPtrInput
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringPtrInput
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntPtrInput
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
	KeyAlgorithm pulumi.StringPtrInput
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayInput
	// Unique identifier for the `previous` client certificate version.
	PreviousGuid pulumi.StringPtrInput
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringPtrInput
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringPtrInput
	// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
	Versions MtlskeystoreClientCertificateAkamaiVersionArrayInput
}

func (MtlskeystoreClientCertificateAkamaiState) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateAkamaiState)(nil)).Elem()
}

type mtlskeystoreClientCertificateAkamaiArgs struct {
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName string `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId string `pulumi:"contractId"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography string `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId int `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork string `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject *string `pulumi:"subject"`
}

// The set of arguments for constructing a MtlskeystoreClientCertificateAkamai resource.
type MtlskeystoreClientCertificateAkamaiArgs struct {
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringInput
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringInput
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringInput
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntInput
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
	KeyAlgorithm pulumi.StringPtrInput
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayInput
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringInput
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringPtrInput
}

func (MtlskeystoreClientCertificateAkamaiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateAkamaiArgs)(nil)).Elem()
}

type MtlskeystoreClientCertificateAkamaiInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateAkamaiOutput() MtlskeystoreClientCertificateAkamaiOutput
	ToMtlskeystoreClientCertificateAkamaiOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiOutput
}

func (*MtlskeystoreClientCertificateAkamai) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (i *MtlskeystoreClientCertificateAkamai) ToMtlskeystoreClientCertificateAkamaiOutput() MtlskeystoreClientCertificateAkamaiOutput {
	return i.ToMtlskeystoreClientCertificateAkamaiOutputWithContext(context.Background())
}

func (i *MtlskeystoreClientCertificateAkamai) ToMtlskeystoreClientCertificateAkamaiOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateAkamaiOutput)
}

// MtlskeystoreClientCertificateAkamaiArrayInput is an input type that accepts MtlskeystoreClientCertificateAkamaiArray and MtlskeystoreClientCertificateAkamaiArrayOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateAkamaiArrayInput` via:
//
//	MtlskeystoreClientCertificateAkamaiArray{ MtlskeystoreClientCertificateAkamaiArgs{...} }
type MtlskeystoreClientCertificateAkamaiArrayInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateAkamaiArrayOutput() MtlskeystoreClientCertificateAkamaiArrayOutput
	ToMtlskeystoreClientCertificateAkamaiArrayOutputWithContext(context.Context) MtlskeystoreClientCertificateAkamaiArrayOutput
}

type MtlskeystoreClientCertificateAkamaiArray []MtlskeystoreClientCertificateAkamaiInput

func (MtlskeystoreClientCertificateAkamaiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateAkamaiArray) ToMtlskeystoreClientCertificateAkamaiArrayOutput() MtlskeystoreClientCertificateAkamaiArrayOutput {
	return i.ToMtlskeystoreClientCertificateAkamaiArrayOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateAkamaiArray) ToMtlskeystoreClientCertificateAkamaiArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateAkamaiArrayOutput)
}

// MtlskeystoreClientCertificateAkamaiMapInput is an input type that accepts MtlskeystoreClientCertificateAkamaiMap and MtlskeystoreClientCertificateAkamaiMapOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateAkamaiMapInput` via:
//
//	MtlskeystoreClientCertificateAkamaiMap{ "key": MtlskeystoreClientCertificateAkamaiArgs{...} }
type MtlskeystoreClientCertificateAkamaiMapInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateAkamaiMapOutput() MtlskeystoreClientCertificateAkamaiMapOutput
	ToMtlskeystoreClientCertificateAkamaiMapOutputWithContext(context.Context) MtlskeystoreClientCertificateAkamaiMapOutput
}

type MtlskeystoreClientCertificateAkamaiMap map[string]MtlskeystoreClientCertificateAkamaiInput

func (MtlskeystoreClientCertificateAkamaiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateAkamaiMap) ToMtlskeystoreClientCertificateAkamaiMapOutput() MtlskeystoreClientCertificateAkamaiMapOutput {
	return i.ToMtlskeystoreClientCertificateAkamaiMapOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateAkamaiMap) ToMtlskeystoreClientCertificateAkamaiMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateAkamaiMapOutput)
}

type MtlskeystoreClientCertificateAkamaiOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateAkamaiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateAkamaiOutput) ToMtlskeystoreClientCertificateAkamaiOutput() MtlskeystoreClientCertificateAkamaiOutput {
	return o
}

func (o MtlskeystoreClientCertificateAkamaiOutput) ToMtlskeystoreClientCertificateAkamaiOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiOutput {
	return o
}

// The unique identifier of the client certificate.
func (o MtlskeystoreClientCertificateAkamaiOutput) CertificateId() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.IntOutput { return v.CertificateId }).(pulumi.IntOutput)
}

// The name of the client certificate. Must be between 1 and 64 characters.
func (o MtlskeystoreClientCertificateAkamaiOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// The contract assigned to the client certificate. Must have a length of at least 1.
func (o MtlskeystoreClientCertificateAkamaiOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// The user who created the client certificate. Read-only.
func (o MtlskeystoreClientCertificateAkamaiOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
func (o MtlskeystoreClientCertificateAkamaiOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// Unique identifier for the `current` client certificate version.
func (o MtlskeystoreClientCertificateAkamaiOutput) CurrentGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.CurrentGuid }).(pulumi.StringOutput)
}

// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
func (o MtlskeystoreClientCertificateAkamaiOutput) Geography() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.Geography }).(pulumi.StringOutput)
}

// The group assigned to the client certificate. Must be greater than or equal to 0.
func (o MtlskeystoreClientCertificateAkamaiOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
func (o MtlskeystoreClientCertificateAkamaiOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// The email addresses to notify for client certificate-related issues. Must have at least one email address.
func (o MtlskeystoreClientCertificateAkamaiOutput) NotificationEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringArrayOutput { return v.NotificationEmails }).(pulumi.StringArrayOutput)
}

// Unique identifier for the `previous` client certificate version.
func (o MtlskeystoreClientCertificateAkamaiOutput) PreviousGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.PreviousGuid }).(pulumi.StringOutput)
}

// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
func (o MtlskeystoreClientCertificateAkamaiOutput) SecureNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.SecureNetwork }).(pulumi.StringOutput)
}

// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
func (o MtlskeystoreClientCertificateAkamaiOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
func (o MtlskeystoreClientCertificateAkamaiOutput) Versions() MtlskeystoreClientCertificateAkamaiVersionArrayOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateAkamai) MtlskeystoreClientCertificateAkamaiVersionArrayOutput {
		return v.Versions
	}).(MtlskeystoreClientCertificateAkamaiVersionArrayOutput)
}

type MtlskeystoreClientCertificateAkamaiArrayOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateAkamaiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateAkamaiArrayOutput) ToMtlskeystoreClientCertificateAkamaiArrayOutput() MtlskeystoreClientCertificateAkamaiArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateAkamaiArrayOutput) ToMtlskeystoreClientCertificateAkamaiArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateAkamaiArrayOutput) Index(i pulumi.IntInput) MtlskeystoreClientCertificateAkamaiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateAkamai {
		return vs[0].([]*MtlskeystoreClientCertificateAkamai)[vs[1].(int)]
	}).(MtlskeystoreClientCertificateAkamaiOutput)
}

type MtlskeystoreClientCertificateAkamaiMapOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateAkamaiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateAkamai)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateAkamaiMapOutput) ToMtlskeystoreClientCertificateAkamaiMapOutput() MtlskeystoreClientCertificateAkamaiMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateAkamaiMapOutput) ToMtlskeystoreClientCertificateAkamaiMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateAkamaiMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateAkamaiMapOutput) MapIndex(k pulumi.StringInput) MtlskeystoreClientCertificateAkamaiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateAkamai {
		return vs[0].(map[string]*MtlskeystoreClientCertificateAkamai)[vs[1].(string)]
	}).(MtlskeystoreClientCertificateAkamaiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateAkamaiInput)(nil)).Elem(), &MtlskeystoreClientCertificateAkamai{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateAkamaiArrayInput)(nil)).Elem(), MtlskeystoreClientCertificateAkamaiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateAkamaiMapInput)(nil)).Elem(), MtlskeystoreClientCertificateAkamaiMap{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateAkamaiOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateAkamaiArrayOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateAkamaiMapOutput{})
}
