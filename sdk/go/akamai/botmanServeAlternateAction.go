// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanServeAlternateAction struct {
	pulumi.CustomResourceState

	ActionId             pulumi.StringOutput `pulumi:"actionId"`
	ConfigId             pulumi.IntOutput    `pulumi:"configId"`
	ServeAlternateAction pulumi.StringOutput `pulumi:"serveAlternateAction"`
}

// NewBotmanServeAlternateAction registers a new resource with the given unique name, arguments, and options.
func NewBotmanServeAlternateAction(ctx *pulumi.Context,
	name string, args *BotmanServeAlternateActionArgs, opts ...pulumi.ResourceOption) (*BotmanServeAlternateAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.ServeAlternateAction == nil {
		return nil, errors.New("invalid value for required argument 'ServeAlternateAction'")
	}
	var resource BotmanServeAlternateAction
	err := ctx.RegisterResource("akamai:index/botmanServeAlternateAction:BotmanServeAlternateAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanServeAlternateAction gets an existing BotmanServeAlternateAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanServeAlternateAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanServeAlternateActionState, opts ...pulumi.ResourceOption) (*BotmanServeAlternateAction, error) {
	var resource BotmanServeAlternateAction
	err := ctx.ReadResource("akamai:index/botmanServeAlternateAction:BotmanServeAlternateAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanServeAlternateAction resources.
type botmanServeAlternateActionState struct {
	ActionId             *string `pulumi:"actionId"`
	ConfigId             *int    `pulumi:"configId"`
	ServeAlternateAction *string `pulumi:"serveAlternateAction"`
}

type BotmanServeAlternateActionState struct {
	ActionId             pulumi.StringPtrInput
	ConfigId             pulumi.IntPtrInput
	ServeAlternateAction pulumi.StringPtrInput
}

func (BotmanServeAlternateActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanServeAlternateActionState)(nil)).Elem()
}

type botmanServeAlternateActionArgs struct {
	ConfigId             int    `pulumi:"configId"`
	ServeAlternateAction string `pulumi:"serveAlternateAction"`
}

// The set of arguments for constructing a BotmanServeAlternateAction resource.
type BotmanServeAlternateActionArgs struct {
	ConfigId             pulumi.IntInput
	ServeAlternateAction pulumi.StringInput
}

func (BotmanServeAlternateActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanServeAlternateActionArgs)(nil)).Elem()
}

type BotmanServeAlternateActionInput interface {
	pulumi.Input

	ToBotmanServeAlternateActionOutput() BotmanServeAlternateActionOutput
	ToBotmanServeAlternateActionOutputWithContext(ctx context.Context) BotmanServeAlternateActionOutput
}

func (*BotmanServeAlternateAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanServeAlternateAction)(nil)).Elem()
}

func (i *BotmanServeAlternateAction) ToBotmanServeAlternateActionOutput() BotmanServeAlternateActionOutput {
	return i.ToBotmanServeAlternateActionOutputWithContext(context.Background())
}

func (i *BotmanServeAlternateAction) ToBotmanServeAlternateActionOutputWithContext(ctx context.Context) BotmanServeAlternateActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanServeAlternateActionOutput)
}

// BotmanServeAlternateActionArrayInput is an input type that accepts BotmanServeAlternateActionArray and BotmanServeAlternateActionArrayOutput values.
// You can construct a concrete instance of `BotmanServeAlternateActionArrayInput` via:
//
//	BotmanServeAlternateActionArray{ BotmanServeAlternateActionArgs{...} }
type BotmanServeAlternateActionArrayInput interface {
	pulumi.Input

	ToBotmanServeAlternateActionArrayOutput() BotmanServeAlternateActionArrayOutput
	ToBotmanServeAlternateActionArrayOutputWithContext(context.Context) BotmanServeAlternateActionArrayOutput
}

type BotmanServeAlternateActionArray []BotmanServeAlternateActionInput

func (BotmanServeAlternateActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanServeAlternateAction)(nil)).Elem()
}

func (i BotmanServeAlternateActionArray) ToBotmanServeAlternateActionArrayOutput() BotmanServeAlternateActionArrayOutput {
	return i.ToBotmanServeAlternateActionArrayOutputWithContext(context.Background())
}

func (i BotmanServeAlternateActionArray) ToBotmanServeAlternateActionArrayOutputWithContext(ctx context.Context) BotmanServeAlternateActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanServeAlternateActionArrayOutput)
}

// BotmanServeAlternateActionMapInput is an input type that accepts BotmanServeAlternateActionMap and BotmanServeAlternateActionMapOutput values.
// You can construct a concrete instance of `BotmanServeAlternateActionMapInput` via:
//
//	BotmanServeAlternateActionMap{ "key": BotmanServeAlternateActionArgs{...} }
type BotmanServeAlternateActionMapInput interface {
	pulumi.Input

	ToBotmanServeAlternateActionMapOutput() BotmanServeAlternateActionMapOutput
	ToBotmanServeAlternateActionMapOutputWithContext(context.Context) BotmanServeAlternateActionMapOutput
}

type BotmanServeAlternateActionMap map[string]BotmanServeAlternateActionInput

func (BotmanServeAlternateActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanServeAlternateAction)(nil)).Elem()
}

func (i BotmanServeAlternateActionMap) ToBotmanServeAlternateActionMapOutput() BotmanServeAlternateActionMapOutput {
	return i.ToBotmanServeAlternateActionMapOutputWithContext(context.Background())
}

func (i BotmanServeAlternateActionMap) ToBotmanServeAlternateActionMapOutputWithContext(ctx context.Context) BotmanServeAlternateActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanServeAlternateActionMapOutput)
}

type BotmanServeAlternateActionOutput struct{ *pulumi.OutputState }

func (BotmanServeAlternateActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanServeAlternateAction)(nil)).Elem()
}

func (o BotmanServeAlternateActionOutput) ToBotmanServeAlternateActionOutput() BotmanServeAlternateActionOutput {
	return o
}

func (o BotmanServeAlternateActionOutput) ToBotmanServeAlternateActionOutputWithContext(ctx context.Context) BotmanServeAlternateActionOutput {
	return o
}

func (o BotmanServeAlternateActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanServeAlternateAction) pulumi.StringOutput { return v.ActionId }).(pulumi.StringOutput)
}

func (o BotmanServeAlternateActionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanServeAlternateAction) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanServeAlternateActionOutput) ServeAlternateAction() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanServeAlternateAction) pulumi.StringOutput { return v.ServeAlternateAction }).(pulumi.StringOutput)
}

type BotmanServeAlternateActionArrayOutput struct{ *pulumi.OutputState }

func (BotmanServeAlternateActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanServeAlternateAction)(nil)).Elem()
}

func (o BotmanServeAlternateActionArrayOutput) ToBotmanServeAlternateActionArrayOutput() BotmanServeAlternateActionArrayOutput {
	return o
}

func (o BotmanServeAlternateActionArrayOutput) ToBotmanServeAlternateActionArrayOutputWithContext(ctx context.Context) BotmanServeAlternateActionArrayOutput {
	return o
}

func (o BotmanServeAlternateActionArrayOutput) Index(i pulumi.IntInput) BotmanServeAlternateActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanServeAlternateAction {
		return vs[0].([]*BotmanServeAlternateAction)[vs[1].(int)]
	}).(BotmanServeAlternateActionOutput)
}

type BotmanServeAlternateActionMapOutput struct{ *pulumi.OutputState }

func (BotmanServeAlternateActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanServeAlternateAction)(nil)).Elem()
}

func (o BotmanServeAlternateActionMapOutput) ToBotmanServeAlternateActionMapOutput() BotmanServeAlternateActionMapOutput {
	return o
}

func (o BotmanServeAlternateActionMapOutput) ToBotmanServeAlternateActionMapOutputWithContext(ctx context.Context) BotmanServeAlternateActionMapOutput {
	return o
}

func (o BotmanServeAlternateActionMapOutput) MapIndex(k pulumi.StringInput) BotmanServeAlternateActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanServeAlternateAction {
		return vs[0].(map[string]*BotmanServeAlternateAction)[vs[1].(string)]
	}).(BotmanServeAlternateActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanServeAlternateActionInput)(nil)).Elem(), &BotmanServeAlternateAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanServeAlternateActionArrayInput)(nil)).Elem(), BotmanServeAlternateActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanServeAlternateActionMapInput)(nil)).Elem(), BotmanServeAlternateActionMap{})
	pulumi.RegisterOutputType(BotmanServeAlternateActionOutput{})
	pulumi.RegisterOutputType(BotmanServeAlternateActionArrayOutput{})
	pulumi.RegisterOutputType(BotmanServeAlternateActionMapOutput{})
}
