// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupBotmanConditionalAction(ctx *pulumi.Context, args *LookupBotmanConditionalActionArgs, opts ...pulumi.InvokeOption) (*LookupBotmanConditionalActionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBotmanConditionalActionResult
	err := ctx.Invoke("akamai:index/getBotmanConditionalAction:getBotmanConditionalAction", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBotmanConditionalAction.
type LookupBotmanConditionalActionArgs struct {
	ActionId *string `pulumi:"actionId"`
	ConfigId int     `pulumi:"configId"`
}

// A collection of values returned by getBotmanConditionalAction.
type LookupBotmanConditionalActionResult struct {
	ActionId *string `pulumi:"actionId"`
	ConfigId int     `pulumi:"configId"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Json string `pulumi:"json"`
}

func LookupBotmanConditionalActionOutput(ctx *pulumi.Context, args LookupBotmanConditionalActionOutputArgs, opts ...pulumi.InvokeOption) LookupBotmanConditionalActionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBotmanConditionalActionResult, error) {
			args := v.(LookupBotmanConditionalActionArgs)
			r, err := LookupBotmanConditionalAction(ctx, &args, opts...)
			var s LookupBotmanConditionalActionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBotmanConditionalActionResultOutput)
}

// A collection of arguments for invoking getBotmanConditionalAction.
type LookupBotmanConditionalActionOutputArgs struct {
	ActionId pulumi.StringPtrInput `pulumi:"actionId"`
	ConfigId pulumi.IntInput       `pulumi:"configId"`
}

func (LookupBotmanConditionalActionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotmanConditionalActionArgs)(nil)).Elem()
}

// A collection of values returned by getBotmanConditionalAction.
type LookupBotmanConditionalActionResultOutput struct{ *pulumi.OutputState }

func (LookupBotmanConditionalActionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBotmanConditionalActionResult)(nil)).Elem()
}

func (o LookupBotmanConditionalActionResultOutput) ToLookupBotmanConditionalActionResultOutput() LookupBotmanConditionalActionResultOutput {
	return o
}

func (o LookupBotmanConditionalActionResultOutput) ToLookupBotmanConditionalActionResultOutputWithContext(ctx context.Context) LookupBotmanConditionalActionResultOutput {
	return o
}

func (o LookupBotmanConditionalActionResultOutput) ActionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBotmanConditionalActionResult) *string { return v.ActionId }).(pulumi.StringPtrOutput)
}

func (o LookupBotmanConditionalActionResultOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBotmanConditionalActionResult) int { return v.ConfigId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBotmanConditionalActionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBotmanConditionalActionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBotmanConditionalActionResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBotmanConditionalActionResult) string { return v.Json }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBotmanConditionalActionResultOutput{})
}
