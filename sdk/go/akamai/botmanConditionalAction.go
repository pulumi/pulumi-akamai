// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanConditionalAction struct {
	pulumi.CustomResourceState

	ActionId          pulumi.StringOutput `pulumi:"actionId"`
	ConditionalAction pulumi.StringOutput `pulumi:"conditionalAction"`
	ConfigId          pulumi.IntOutput    `pulumi:"configId"`
}

// NewBotmanConditionalAction registers a new resource with the given unique name, arguments, and options.
func NewBotmanConditionalAction(ctx *pulumi.Context,
	name string, args *BotmanConditionalActionArgs, opts ...pulumi.ResourceOption) (*BotmanConditionalAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionalAction == nil {
		return nil, errors.New("invalid value for required argument 'ConditionalAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	var resource BotmanConditionalAction
	err := ctx.RegisterResource("akamai:index/botmanConditionalAction:BotmanConditionalAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanConditionalAction gets an existing BotmanConditionalAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanConditionalAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanConditionalActionState, opts ...pulumi.ResourceOption) (*BotmanConditionalAction, error) {
	var resource BotmanConditionalAction
	err := ctx.ReadResource("akamai:index/botmanConditionalAction:BotmanConditionalAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanConditionalAction resources.
type botmanConditionalActionState struct {
	ActionId          *string `pulumi:"actionId"`
	ConditionalAction *string `pulumi:"conditionalAction"`
	ConfigId          *int    `pulumi:"configId"`
}

type BotmanConditionalActionState struct {
	ActionId          pulumi.StringPtrInput
	ConditionalAction pulumi.StringPtrInput
	ConfigId          pulumi.IntPtrInput
}

func (BotmanConditionalActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanConditionalActionState)(nil)).Elem()
}

type botmanConditionalActionArgs struct {
	ConditionalAction string `pulumi:"conditionalAction"`
	ConfigId          int    `pulumi:"configId"`
}

// The set of arguments for constructing a BotmanConditionalAction resource.
type BotmanConditionalActionArgs struct {
	ConditionalAction pulumi.StringInput
	ConfigId          pulumi.IntInput
}

func (BotmanConditionalActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanConditionalActionArgs)(nil)).Elem()
}

type BotmanConditionalActionInput interface {
	pulumi.Input

	ToBotmanConditionalActionOutput() BotmanConditionalActionOutput
	ToBotmanConditionalActionOutputWithContext(ctx context.Context) BotmanConditionalActionOutput
}

func (*BotmanConditionalAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanConditionalAction)(nil)).Elem()
}

func (i *BotmanConditionalAction) ToBotmanConditionalActionOutput() BotmanConditionalActionOutput {
	return i.ToBotmanConditionalActionOutputWithContext(context.Background())
}

func (i *BotmanConditionalAction) ToBotmanConditionalActionOutputWithContext(ctx context.Context) BotmanConditionalActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanConditionalActionOutput)
}

// BotmanConditionalActionArrayInput is an input type that accepts BotmanConditionalActionArray and BotmanConditionalActionArrayOutput values.
// You can construct a concrete instance of `BotmanConditionalActionArrayInput` via:
//
//	BotmanConditionalActionArray{ BotmanConditionalActionArgs{...} }
type BotmanConditionalActionArrayInput interface {
	pulumi.Input

	ToBotmanConditionalActionArrayOutput() BotmanConditionalActionArrayOutput
	ToBotmanConditionalActionArrayOutputWithContext(context.Context) BotmanConditionalActionArrayOutput
}

type BotmanConditionalActionArray []BotmanConditionalActionInput

func (BotmanConditionalActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanConditionalAction)(nil)).Elem()
}

func (i BotmanConditionalActionArray) ToBotmanConditionalActionArrayOutput() BotmanConditionalActionArrayOutput {
	return i.ToBotmanConditionalActionArrayOutputWithContext(context.Background())
}

func (i BotmanConditionalActionArray) ToBotmanConditionalActionArrayOutputWithContext(ctx context.Context) BotmanConditionalActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanConditionalActionArrayOutput)
}

// BotmanConditionalActionMapInput is an input type that accepts BotmanConditionalActionMap and BotmanConditionalActionMapOutput values.
// You can construct a concrete instance of `BotmanConditionalActionMapInput` via:
//
//	BotmanConditionalActionMap{ "key": BotmanConditionalActionArgs{...} }
type BotmanConditionalActionMapInput interface {
	pulumi.Input

	ToBotmanConditionalActionMapOutput() BotmanConditionalActionMapOutput
	ToBotmanConditionalActionMapOutputWithContext(context.Context) BotmanConditionalActionMapOutput
}

type BotmanConditionalActionMap map[string]BotmanConditionalActionInput

func (BotmanConditionalActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanConditionalAction)(nil)).Elem()
}

func (i BotmanConditionalActionMap) ToBotmanConditionalActionMapOutput() BotmanConditionalActionMapOutput {
	return i.ToBotmanConditionalActionMapOutputWithContext(context.Background())
}

func (i BotmanConditionalActionMap) ToBotmanConditionalActionMapOutputWithContext(ctx context.Context) BotmanConditionalActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanConditionalActionMapOutput)
}

type BotmanConditionalActionOutput struct{ *pulumi.OutputState }

func (BotmanConditionalActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanConditionalAction)(nil)).Elem()
}

func (o BotmanConditionalActionOutput) ToBotmanConditionalActionOutput() BotmanConditionalActionOutput {
	return o
}

func (o BotmanConditionalActionOutput) ToBotmanConditionalActionOutputWithContext(ctx context.Context) BotmanConditionalActionOutput {
	return o
}

func (o BotmanConditionalActionOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanConditionalAction) pulumi.StringOutput { return v.ActionId }).(pulumi.StringOutput)
}

func (o BotmanConditionalActionOutput) ConditionalAction() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanConditionalAction) pulumi.StringOutput { return v.ConditionalAction }).(pulumi.StringOutput)
}

func (o BotmanConditionalActionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanConditionalAction) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

type BotmanConditionalActionArrayOutput struct{ *pulumi.OutputState }

func (BotmanConditionalActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanConditionalAction)(nil)).Elem()
}

func (o BotmanConditionalActionArrayOutput) ToBotmanConditionalActionArrayOutput() BotmanConditionalActionArrayOutput {
	return o
}

func (o BotmanConditionalActionArrayOutput) ToBotmanConditionalActionArrayOutputWithContext(ctx context.Context) BotmanConditionalActionArrayOutput {
	return o
}

func (o BotmanConditionalActionArrayOutput) Index(i pulumi.IntInput) BotmanConditionalActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanConditionalAction {
		return vs[0].([]*BotmanConditionalAction)[vs[1].(int)]
	}).(BotmanConditionalActionOutput)
}

type BotmanConditionalActionMapOutput struct{ *pulumi.OutputState }

func (BotmanConditionalActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanConditionalAction)(nil)).Elem()
}

func (o BotmanConditionalActionMapOutput) ToBotmanConditionalActionMapOutput() BotmanConditionalActionMapOutput {
	return o
}

func (o BotmanConditionalActionMapOutput) ToBotmanConditionalActionMapOutputWithContext(ctx context.Context) BotmanConditionalActionMapOutput {
	return o
}

func (o BotmanConditionalActionMapOutput) MapIndex(k pulumi.StringInput) BotmanConditionalActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanConditionalAction {
		return vs[0].(map[string]*BotmanConditionalAction)[vs[1].(string)]
	}).(BotmanConditionalActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanConditionalActionInput)(nil)).Elem(), &BotmanConditionalAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanConditionalActionArrayInput)(nil)).Elem(), BotmanConditionalActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanConditionalActionMapInput)(nil)).Elem(), BotmanConditionalActionMap{})
	pulumi.RegisterOutputType(BotmanConditionalActionOutput{})
	pulumi.RegisterOutputType(BotmanConditionalActionArrayOutput{})
	pulumi.RegisterOutputType(BotmanConditionalActionMapOutput{})
}
