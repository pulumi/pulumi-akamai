// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClientlistList struct {
	pulumi.CustomResourceState

	// Contract ID for which client list is assigned.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Group ID for which client list is assigned.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// Set of items containing item information.
	Items ClientlistListItemArrayOutput `pulumi:"items"`
	// The number of items that a client list contains.
	ItemsCount pulumi.IntOutput `pulumi:"itemsCount"`
	// The ID of the client list.
	ListId pulumi.StringOutput `pulumi:"listId"`
	// The name of the client list.
	Name pulumi.StringOutput `pulumi:"name"`
	// The client list notes.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The client list tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
	Type pulumi.StringOutput `pulumi:"type"`
	// The current version of the client list.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewClientlistList registers a new resource with the given unique name, arguments, and options.
func NewClientlistList(ctx *pulumi.Context,
	name string, args *ClientlistListArgs, opts ...pulumi.ResourceOption) (*ClientlistList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientlistList
	err := ctx.RegisterResource("akamai:index/clientlistList:ClientlistList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientlistList gets an existing ClientlistList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientlistList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientlistListState, opts ...pulumi.ResourceOption) (*ClientlistList, error) {
	var resource ClientlistList
	err := ctx.ReadResource("akamai:index/clientlistList:ClientlistList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientlistList resources.
type clientlistListState struct {
	// Contract ID for which client list is assigned.
	ContractId *string `pulumi:"contractId"`
	// Group ID for which client list is assigned.
	GroupId *int `pulumi:"groupId"`
	// Set of items containing item information.
	Items []ClientlistListItem `pulumi:"items"`
	// The number of items that a client list contains.
	ItemsCount *int `pulumi:"itemsCount"`
	// The ID of the client list.
	ListId *string `pulumi:"listId"`
	// The name of the client list.
	Name *string `pulumi:"name"`
	// The client list notes.
	Notes *string `pulumi:"notes"`
	// The client list tags.
	Tags []string `pulumi:"tags"`
	// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
	Type *string `pulumi:"type"`
	// The current version of the client list.
	Version *int `pulumi:"version"`
}

type ClientlistListState struct {
	// Contract ID for which client list is assigned.
	ContractId pulumi.StringPtrInput
	// Group ID for which client list is assigned.
	GroupId pulumi.IntPtrInput
	// Set of items containing item information.
	Items ClientlistListItemArrayInput
	// The number of items that a client list contains.
	ItemsCount pulumi.IntPtrInput
	// The ID of the client list.
	ListId pulumi.StringPtrInput
	// The name of the client list.
	Name pulumi.StringPtrInput
	// The client list notes.
	Notes pulumi.StringPtrInput
	// The client list tags.
	Tags pulumi.StringArrayInput
	// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
	Type pulumi.StringPtrInput
	// The current version of the client list.
	Version pulumi.IntPtrInput
}

func (ClientlistListState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientlistListState)(nil)).Elem()
}

type clientlistListArgs struct {
	// Contract ID for which client list is assigned.
	ContractId string `pulumi:"contractId"`
	// Group ID for which client list is assigned.
	GroupId int `pulumi:"groupId"`
	// Set of items containing item information.
	Items []ClientlistListItem `pulumi:"items"`
	// The name of the client list.
	Name *string `pulumi:"name"`
	// The client list notes.
	Notes *string `pulumi:"notes"`
	// The client list tags.
	Tags []string `pulumi:"tags"`
	// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ClientlistList resource.
type ClientlistListArgs struct {
	// Contract ID for which client list is assigned.
	ContractId pulumi.StringInput
	// Group ID for which client list is assigned.
	GroupId pulumi.IntInput
	// Set of items containing item information.
	Items ClientlistListItemArrayInput
	// The name of the client list.
	Name pulumi.StringPtrInput
	// The client list notes.
	Notes pulumi.StringPtrInput
	// The client list tags.
	Tags pulumi.StringArrayInput
	// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
	Type pulumi.StringInput
}

func (ClientlistListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientlistListArgs)(nil)).Elem()
}

type ClientlistListInput interface {
	pulumi.Input

	ToClientlistListOutput() ClientlistListOutput
	ToClientlistListOutputWithContext(ctx context.Context) ClientlistListOutput
}

func (*ClientlistList) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientlistList)(nil)).Elem()
}

func (i *ClientlistList) ToClientlistListOutput() ClientlistListOutput {
	return i.ToClientlistListOutputWithContext(context.Background())
}

func (i *ClientlistList) ToClientlistListOutputWithContext(ctx context.Context) ClientlistListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistListOutput)
}

// ClientlistListArrayInput is an input type that accepts ClientlistListArray and ClientlistListArrayOutput values.
// You can construct a concrete instance of `ClientlistListArrayInput` via:
//
//	ClientlistListArray{ ClientlistListArgs{...} }
type ClientlistListArrayInput interface {
	pulumi.Input

	ToClientlistListArrayOutput() ClientlistListArrayOutput
	ToClientlistListArrayOutputWithContext(context.Context) ClientlistListArrayOutput
}

type ClientlistListArray []ClientlistListInput

func (ClientlistListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientlistList)(nil)).Elem()
}

func (i ClientlistListArray) ToClientlistListArrayOutput() ClientlistListArrayOutput {
	return i.ToClientlistListArrayOutputWithContext(context.Background())
}

func (i ClientlistListArray) ToClientlistListArrayOutputWithContext(ctx context.Context) ClientlistListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistListArrayOutput)
}

// ClientlistListMapInput is an input type that accepts ClientlistListMap and ClientlistListMapOutput values.
// You can construct a concrete instance of `ClientlistListMapInput` via:
//
//	ClientlistListMap{ "key": ClientlistListArgs{...} }
type ClientlistListMapInput interface {
	pulumi.Input

	ToClientlistListMapOutput() ClientlistListMapOutput
	ToClientlistListMapOutputWithContext(context.Context) ClientlistListMapOutput
}

type ClientlistListMap map[string]ClientlistListInput

func (ClientlistListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientlistList)(nil)).Elem()
}

func (i ClientlistListMap) ToClientlistListMapOutput() ClientlistListMapOutput {
	return i.ToClientlistListMapOutputWithContext(context.Background())
}

func (i ClientlistListMap) ToClientlistListMapOutputWithContext(ctx context.Context) ClientlistListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientlistListMapOutput)
}

type ClientlistListOutput struct{ *pulumi.OutputState }

func (ClientlistListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientlistList)(nil)).Elem()
}

func (o ClientlistListOutput) ToClientlistListOutput() ClientlistListOutput {
	return o
}

func (o ClientlistListOutput) ToClientlistListOutputWithContext(ctx context.Context) ClientlistListOutput {
	return o
}

// Contract ID for which client list is assigned.
func (o ClientlistListOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// Group ID for which client list is assigned.
func (o ClientlistListOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// Set of items containing item information.
func (o ClientlistListOutput) Items() ClientlistListItemArrayOutput {
	return o.ApplyT(func(v *ClientlistList) ClientlistListItemArrayOutput { return v.Items }).(ClientlistListItemArrayOutput)
}

// The number of items that a client list contains.
func (o ClientlistListOutput) ItemsCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.IntOutput { return v.ItemsCount }).(pulumi.IntOutput)
}

// The ID of the client list.
func (o ClientlistListOutput) ListId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringOutput { return v.ListId }).(pulumi.StringOutput)
}

// The name of the client list.
func (o ClientlistListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The client list notes.
func (o ClientlistListOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// The client list tags.
func (o ClientlistListOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
func (o ClientlistListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The current version of the client list.
func (o ClientlistListOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientlistList) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ClientlistListArrayOutput struct{ *pulumi.OutputState }

func (ClientlistListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientlistList)(nil)).Elem()
}

func (o ClientlistListArrayOutput) ToClientlistListArrayOutput() ClientlistListArrayOutput {
	return o
}

func (o ClientlistListArrayOutput) ToClientlistListArrayOutputWithContext(ctx context.Context) ClientlistListArrayOutput {
	return o
}

func (o ClientlistListArrayOutput) Index(i pulumi.IntInput) ClientlistListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientlistList {
		return vs[0].([]*ClientlistList)[vs[1].(int)]
	}).(ClientlistListOutput)
}

type ClientlistListMapOutput struct{ *pulumi.OutputState }

func (ClientlistListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientlistList)(nil)).Elem()
}

func (o ClientlistListMapOutput) ToClientlistListMapOutput() ClientlistListMapOutput {
	return o
}

func (o ClientlistListMapOutput) ToClientlistListMapOutputWithContext(ctx context.Context) ClientlistListMapOutput {
	return o
}

func (o ClientlistListMapOutput) MapIndex(k pulumi.StringInput) ClientlistListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientlistList {
		return vs[0].(map[string]*ClientlistList)[vs[1].(string)]
	}).(ClientlistListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistListInput)(nil)).Elem(), &ClientlistList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistListArrayInput)(nil)).Elem(), ClientlistListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientlistListMapInput)(nil)).Elem(), ClientlistListMap{})
	pulumi.RegisterOutputType(ClientlistListOutput{})
	pulumi.RegisterOutputType(ClientlistListArrayOutput{})
	pulumi.RegisterOutputType(ClientlistListMapOutput{})
}
