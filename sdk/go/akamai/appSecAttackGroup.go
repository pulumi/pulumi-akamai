// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppSecAttackGroup struct {
	pulumi.CustomResourceState

	// Unique name of the attack group to be modified
	AttackGroup pulumi.StringOutput `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringOutput `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the attack group
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecAttackGroup registers a new resource with the given unique name, arguments, and options.
func NewAppSecAttackGroup(ctx *pulumi.Context,
	name string, args *AppSecAttackGroupArgs, opts ...pulumi.ResourceOption) (*AppSecAttackGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackGroup == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroup'")
	}
	if args.AttackGroupAction == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroupAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppSecAttackGroup
	err := ctx.RegisterResource("akamai:index/appSecAttackGroup:AppSecAttackGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecAttackGroup gets an existing AppSecAttackGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecAttackGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecAttackGroupState, opts ...pulumi.ResourceOption) (*AppSecAttackGroup, error) {
	var resource AppSecAttackGroup
	err := ctx.ReadResource("akamai:index/appSecAttackGroup:AppSecAttackGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecAttackGroup resources.
type appSecAttackGroupState struct {
	// Unique name of the attack group to be modified
	AttackGroup *string `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction *string `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the attack group
	ConditionException *string `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId *int `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecAttackGroupState struct {
	// Unique name of the attack group to be modified
	AttackGroup pulumi.StringPtrInput
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringPtrInput
	// JSON-formatted condition and exception information for the attack group
	ConditionException pulumi.StringPtrInput
	// Unique identifier of the security configuration
	ConfigId pulumi.IntPtrInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAttackGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupState)(nil)).Elem()
}

type appSecAttackGroupArgs struct {
	// Unique name of the attack group to be modified
	AttackGroup string `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction string `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the attack group
	ConditionException *string `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId int `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecAttackGroup resource.
type AppSecAttackGroupArgs struct {
	// Unique name of the attack group to be modified
	AttackGroup pulumi.StringInput
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringInput
	// JSON-formatted condition and exception information for the attack group
	ConditionException pulumi.StringPtrInput
	// Unique identifier of the security configuration
	ConfigId pulumi.IntInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringInput
}

func (AppSecAttackGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupArgs)(nil)).Elem()
}

type AppSecAttackGroupInput interface {
	pulumi.Input

	ToAppSecAttackGroupOutput() AppSecAttackGroupOutput
	ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput
}

func (*AppSecAttackGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroup)(nil)).Elem()
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupOutput() AppSecAttackGroupOutput {
	return i.ToAppSecAttackGroupOutputWithContext(context.Background())
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupOutput)
}

// AppSecAttackGroupArrayInput is an input type that accepts AppSecAttackGroupArray and AppSecAttackGroupArrayOutput values.
// You can construct a concrete instance of `AppSecAttackGroupArrayInput` via:
//
//	AppSecAttackGroupArray{ AppSecAttackGroupArgs{...} }
type AppSecAttackGroupArrayInput interface {
	pulumi.Input

	ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput
	ToAppSecAttackGroupArrayOutputWithContext(context.Context) AppSecAttackGroupArrayOutput
}

type AppSecAttackGroupArray []AppSecAttackGroupInput

func (AppSecAttackGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAttackGroup)(nil)).Elem()
}

func (i AppSecAttackGroupArray) ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput {
	return i.ToAppSecAttackGroupArrayOutputWithContext(context.Background())
}

func (i AppSecAttackGroupArray) ToAppSecAttackGroupArrayOutputWithContext(ctx context.Context) AppSecAttackGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupArrayOutput)
}

// AppSecAttackGroupMapInput is an input type that accepts AppSecAttackGroupMap and AppSecAttackGroupMapOutput values.
// You can construct a concrete instance of `AppSecAttackGroupMapInput` via:
//
//	AppSecAttackGroupMap{ "key": AppSecAttackGroupArgs{...} }
type AppSecAttackGroupMapInput interface {
	pulumi.Input

	ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput
	ToAppSecAttackGroupMapOutputWithContext(context.Context) AppSecAttackGroupMapOutput
}

type AppSecAttackGroupMap map[string]AppSecAttackGroupInput

func (AppSecAttackGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAttackGroup)(nil)).Elem()
}

func (i AppSecAttackGroupMap) ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput {
	return i.ToAppSecAttackGroupMapOutputWithContext(context.Background())
}

func (i AppSecAttackGroupMap) ToAppSecAttackGroupMapOutputWithContext(ctx context.Context) AppSecAttackGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupMapOutput)
}

type AppSecAttackGroupOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroup)(nil)).Elem()
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupOutput() AppSecAttackGroupOutput {
	return o
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput {
	return o
}

// Unique name of the attack group to be modified
func (o AppSecAttackGroupOutput) AttackGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) pulumi.StringOutput { return v.AttackGroup }).(pulumi.StringOutput)
}

// Action to be taken when the attack group is triggered
func (o AppSecAttackGroupOutput) AttackGroupAction() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) pulumi.StringOutput { return v.AttackGroupAction }).(pulumi.StringOutput)
}

// JSON-formatted condition and exception information for the attack group
func (o AppSecAttackGroupOutput) ConditionException() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) pulumi.StringPtrOutput { return v.ConditionException }).(pulumi.StringPtrOutput)
}

// Unique identifier of the security configuration
func (o AppSecAttackGroupOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Unique identifier of the security policy
func (o AppSecAttackGroupOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

type AppSecAttackGroupArrayOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAttackGroup)(nil)).Elem()
}

func (o AppSecAttackGroupArrayOutput) ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput {
	return o
}

func (o AppSecAttackGroupArrayOutput) ToAppSecAttackGroupArrayOutputWithContext(ctx context.Context) AppSecAttackGroupArrayOutput {
	return o
}

func (o AppSecAttackGroupArrayOutput) Index(i pulumi.IntInput) AppSecAttackGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecAttackGroup {
		return vs[0].([]*AppSecAttackGroup)[vs[1].(int)]
	}).(AppSecAttackGroupOutput)
}

type AppSecAttackGroupMapOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAttackGroup)(nil)).Elem()
}

func (o AppSecAttackGroupMapOutput) ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput {
	return o
}

func (o AppSecAttackGroupMapOutput) ToAppSecAttackGroupMapOutputWithContext(ctx context.Context) AppSecAttackGroupMapOutput {
	return o
}

func (o AppSecAttackGroupMapOutput) MapIndex(k pulumi.StringInput) AppSecAttackGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecAttackGroup {
		return vs[0].(map[string]*AppSecAttackGroup)[vs[1].(string)]
	}).(AppSecAttackGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupInput)(nil)).Elem(), &AppSecAttackGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupArrayInput)(nil)).Elem(), AppSecAttackGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupMapInput)(nil)).Elem(), AppSecAttackGroupMap{})
	pulumi.RegisterOutputType(AppSecAttackGroupOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupArrayOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupMapOutput{})
}
