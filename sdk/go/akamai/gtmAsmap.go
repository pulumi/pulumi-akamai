// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GtmAsmap struct {
	pulumi.CustomResourceState

	Assignments       GtmAsmapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmAsmapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	Domain            pulumi.StringOutput             `pulumi:"domain"`
	Name              pulumi.StringOutput             `pulumi:"name"`
	WaitOnComplete    pulumi.BoolPtrOutput            `pulumi:"waitOnComplete"`
}

// NewGtmAsmap registers a new resource with the given unique name, arguments, and options.
func NewGtmAsmap(ctx *pulumi.Context,
	name string, args *GtmAsmapArgs, opts ...pulumi.ResourceOption) (*GtmAsmap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmASmap:GtmASmap"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GtmAsmap
	err := ctx.RegisterResource("akamai:index/gtmAsmap:GtmAsmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmAsmap gets an existing GtmAsmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmAsmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmAsmapState, opts ...pulumi.ResourceOption) (*GtmAsmap, error) {
	var resource GtmAsmap
	err := ctx.ReadResource("akamai:index/gtmAsmap:GtmAsmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmAsmap resources.
type gtmAsmapState struct {
	Assignments       []GtmAsmapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmAsmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            *string                    `pulumi:"domain"`
	Name              *string                    `pulumi:"name"`
	WaitOnComplete    *bool                      `pulumi:"waitOnComplete"`
}

type GtmAsmapState struct {
	Assignments       GtmAsmapAssignmentArrayInput
	DefaultDatacenter GtmAsmapDefaultDatacenterPtrInput
	Domain            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmAsmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmAsmapState)(nil)).Elem()
}

type gtmAsmapArgs struct {
	Assignments       []GtmAsmapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmAsmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            string                    `pulumi:"domain"`
	Name              *string                   `pulumi:"name"`
	WaitOnComplete    *bool                     `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmAsmap resource.
type GtmAsmapArgs struct {
	Assignments       GtmAsmapAssignmentArrayInput
	DefaultDatacenter GtmAsmapDefaultDatacenterInput
	Domain            pulumi.StringInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmAsmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmAsmapArgs)(nil)).Elem()
}

type GtmAsmapInput interface {
	pulumi.Input

	ToGtmAsmapOutput() GtmAsmapOutput
	ToGtmAsmapOutputWithContext(ctx context.Context) GtmAsmapOutput
}

func (*GtmAsmap) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmAsmap)(nil)).Elem()
}

func (i *GtmAsmap) ToGtmAsmapOutput() GtmAsmapOutput {
	return i.ToGtmAsmapOutputWithContext(context.Background())
}

func (i *GtmAsmap) ToGtmAsmapOutputWithContext(ctx context.Context) GtmAsmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmAsmapOutput)
}

// GtmAsmapArrayInput is an input type that accepts GtmAsmapArray and GtmAsmapArrayOutput values.
// You can construct a concrete instance of `GtmAsmapArrayInput` via:
//
//	GtmAsmapArray{ GtmAsmapArgs{...} }
type GtmAsmapArrayInput interface {
	pulumi.Input

	ToGtmAsmapArrayOutput() GtmAsmapArrayOutput
	ToGtmAsmapArrayOutputWithContext(context.Context) GtmAsmapArrayOutput
}

type GtmAsmapArray []GtmAsmapInput

func (GtmAsmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmAsmap)(nil)).Elem()
}

func (i GtmAsmapArray) ToGtmAsmapArrayOutput() GtmAsmapArrayOutput {
	return i.ToGtmAsmapArrayOutputWithContext(context.Background())
}

func (i GtmAsmapArray) ToGtmAsmapArrayOutputWithContext(ctx context.Context) GtmAsmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmAsmapArrayOutput)
}

// GtmAsmapMapInput is an input type that accepts GtmAsmapMap and GtmAsmapMapOutput values.
// You can construct a concrete instance of `GtmAsmapMapInput` via:
//
//	GtmAsmapMap{ "key": GtmAsmapArgs{...} }
type GtmAsmapMapInput interface {
	pulumi.Input

	ToGtmAsmapMapOutput() GtmAsmapMapOutput
	ToGtmAsmapMapOutputWithContext(context.Context) GtmAsmapMapOutput
}

type GtmAsmapMap map[string]GtmAsmapInput

func (GtmAsmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmAsmap)(nil)).Elem()
}

func (i GtmAsmapMap) ToGtmAsmapMapOutput() GtmAsmapMapOutput {
	return i.ToGtmAsmapMapOutputWithContext(context.Background())
}

func (i GtmAsmapMap) ToGtmAsmapMapOutputWithContext(ctx context.Context) GtmAsmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmAsmapMapOutput)
}

type GtmAsmapOutput struct{ *pulumi.OutputState }

func (GtmAsmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmAsmap)(nil)).Elem()
}

func (o GtmAsmapOutput) ToGtmAsmapOutput() GtmAsmapOutput {
	return o
}

func (o GtmAsmapOutput) ToGtmAsmapOutputWithContext(ctx context.Context) GtmAsmapOutput {
	return o
}

func (o GtmAsmapOutput) Assignments() GtmAsmapAssignmentArrayOutput {
	return o.ApplyT(func(v *GtmAsmap) GtmAsmapAssignmentArrayOutput { return v.Assignments }).(GtmAsmapAssignmentArrayOutput)
}

func (o GtmAsmapOutput) DefaultDatacenter() GtmAsmapDefaultDatacenterOutput {
	return o.ApplyT(func(v *GtmAsmap) GtmAsmapDefaultDatacenterOutput { return v.DefaultDatacenter }).(GtmAsmapDefaultDatacenterOutput)
}

func (o GtmAsmapOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmAsmap) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o GtmAsmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmAsmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GtmAsmapOutput) WaitOnComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmAsmap) pulumi.BoolPtrOutput { return v.WaitOnComplete }).(pulumi.BoolPtrOutput)
}

type GtmAsmapArrayOutput struct{ *pulumi.OutputState }

func (GtmAsmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmAsmap)(nil)).Elem()
}

func (o GtmAsmapArrayOutput) ToGtmAsmapArrayOutput() GtmAsmapArrayOutput {
	return o
}

func (o GtmAsmapArrayOutput) ToGtmAsmapArrayOutputWithContext(ctx context.Context) GtmAsmapArrayOutput {
	return o
}

func (o GtmAsmapArrayOutput) Index(i pulumi.IntInput) GtmAsmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmAsmap {
		return vs[0].([]*GtmAsmap)[vs[1].(int)]
	}).(GtmAsmapOutput)
}

type GtmAsmapMapOutput struct{ *pulumi.OutputState }

func (GtmAsmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmAsmap)(nil)).Elem()
}

func (o GtmAsmapMapOutput) ToGtmAsmapMapOutput() GtmAsmapMapOutput {
	return o
}

func (o GtmAsmapMapOutput) ToGtmAsmapMapOutputWithContext(ctx context.Context) GtmAsmapMapOutput {
	return o
}

func (o GtmAsmapMapOutput) MapIndex(k pulumi.StringInput) GtmAsmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmAsmap {
		return vs[0].(map[string]*GtmAsmap)[vs[1].(string)]
	}).(GtmAsmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmAsmapInput)(nil)).Elem(), &GtmAsmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmAsmapArrayInput)(nil)).Elem(), GtmAsmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmAsmapMapInput)(nil)).Elem(), GtmAsmapMap{})
	pulumi.RegisterOutputType(GtmAsmapOutput{})
	pulumi.RegisterOutputType(GtmAsmapArrayOutput{})
	pulumi.RegisterOutputType(GtmAsmapMapOutput{})
}
