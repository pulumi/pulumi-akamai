// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Scopes**: Security configuration; security policy
//
// Returns information about the network lists used in the IP/Geo Firewall settings; also returns the firewall `mode`, which indicates whether devices on the geographic or IP address lists are allowed through the firewall or are blocked by the firewall.
//
// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/ip-geo-firewall](https://developer.akamai.com/api/cloud_security/application_security/v1.html#getipgeofirewall)
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "Documentation"
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &GetAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ipGeo, err := akamai.LookupAppSecIPGeo(ctx, &GetAppSecIPGeoArgs{
// 			ConfigId:         configuration.ConfigId,
// 			SecurityPolicyId: "gms1_134637",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("ipGeoMode", ipGeo.Mode)
// 		ctx.Export("geoNetworkLists", ipGeo.GeoNetworkLists)
// 		ctx.Export("ipNetworkLists", ipGeo.IpNetworkLists)
// 		ctx.Export("exceptionIpNetworkLists", ipGeo.ExceptionIpNetworkLists)
// 		return nil
// 	})
// }
// ```
// ## Output Options
//
// The following options can be used to determine the information returned, and how that returned information is formatted:
//
// - `mode`. Specifies the action taken by the IP/Geo firewall. Valid values are:
//   - **block**. Networks on the IP and geographic network lists are prevented from passing through the firewall.
//   - **allow**.  Networks on the IP and geographic network lists are allowed to pass through the firewall.
// - `geoNetworkLists`. Network lists blocked or allowed based on geographic location.
// - `ipNetworkLists`. Network lists blocked or allowed based on IP address.
// - `exceptionIpNetworkLists`. Network lists allowed through the firewall regardless of the values assigned to the `mode`, `geoNetworkLists`, and `ipNetworkLists` parameters.
// - `outputText`. Tabular report of the IP/Geo firewall settings.
func LookupAppSecIPGeo(ctx *pulumi.Context, args *LookupAppSecIPGeoArgs, opts ...pulumi.InvokeOption) (*LookupAppSecIPGeoResult, error) {
	var rv LookupAppSecIPGeoResult
	err := ctx.Invoke("akamai:index/getAppSecIPGeo:getAppSecIPGeo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAppSecIPGeo.
type LookupAppSecIPGeoArgs struct {
	// . Unique identifier of the security configuration associated with the IP/Geo lists.
	ConfigId int `pulumi:"configId"`
	// . Unique identifier of the security policy associated with the IP/Geo lists. If not included, information is returned for all your security policies.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// A collection of values returned by getAppSecIPGeo.
type LookupAppSecIPGeoResult struct {
	ConfigId                int      `pulumi:"configId"`
	ExceptionIpNetworkLists []string `pulumi:"exceptionIpNetworkLists"`
	GeoNetworkLists         []string `pulumi:"geoNetworkLists"`
	// The provider-assigned unique ID for this managed resource.
	Id               string   `pulumi:"id"`
	IpNetworkLists   []string `pulumi:"ipNetworkLists"`
	Mode             string   `pulumi:"mode"`
	OutputText       string   `pulumi:"outputText"`
	SecurityPolicyId string   `pulumi:"securityPolicyId"`
}

func LookupAppSecIPGeoOutput(ctx *pulumi.Context, args LookupAppSecIPGeoOutputArgs, opts ...pulumi.InvokeOption) LookupAppSecIPGeoResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAppSecIPGeoResult, error) {
			args := v.(LookupAppSecIPGeoArgs)
			r, err := LookupAppSecIPGeo(ctx, &args, opts...)
			return *r, err
		}).(LookupAppSecIPGeoResultOutput)
}

// A collection of arguments for invoking getAppSecIPGeo.
type LookupAppSecIPGeoOutputArgs struct {
	// . Unique identifier of the security configuration associated with the IP/Geo lists.
	ConfigId pulumi.IntInput `pulumi:"configId"`
	// . Unique identifier of the security policy associated with the IP/Geo lists. If not included, information is returned for all your security policies.
	SecurityPolicyId pulumi.StringInput `pulumi:"securityPolicyId"`
}

func (LookupAppSecIPGeoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppSecIPGeoArgs)(nil)).Elem()
}

// A collection of values returned by getAppSecIPGeo.
type LookupAppSecIPGeoResultOutput struct{ *pulumi.OutputState }

func (LookupAppSecIPGeoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppSecIPGeoResult)(nil)).Elem()
}

func (o LookupAppSecIPGeoResultOutput) ToLookupAppSecIPGeoResultOutput() LookupAppSecIPGeoResultOutput {
	return o
}

func (o LookupAppSecIPGeoResultOutput) ToLookupAppSecIPGeoResultOutputWithContext(ctx context.Context) LookupAppSecIPGeoResultOutput {
	return o
}

func (o LookupAppSecIPGeoResultOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) int { return v.ConfigId }).(pulumi.IntOutput)
}

func (o LookupAppSecIPGeoResultOutput) ExceptionIpNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) []string { return v.ExceptionIpNetworkLists }).(pulumi.StringArrayOutput)
}

func (o LookupAppSecIPGeoResultOutput) GeoNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) []string { return v.GeoNetworkLists }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAppSecIPGeoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAppSecIPGeoResultOutput) IpNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) []string { return v.IpNetworkLists }).(pulumi.StringArrayOutput)
}

func (o LookupAppSecIPGeoResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupAppSecIPGeoResultOutput) OutputText() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) string { return v.OutputText }).(pulumi.StringOutput)
}

func (o LookupAppSecIPGeoResultOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppSecIPGeoResult) string { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppSecIPGeoResultOutput{})
}
