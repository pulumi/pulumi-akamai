// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `EdgeWorker` resource lets you deploy custom code on thousands of edge servers and apply logic that creates powerful web experiences.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akamai.NewEdgeWorker(ctx, "ew", &akamai.EdgeWorkerArgs{
//				GroupId:        pulumi.Int(72297),
//				ResourceTierId: pulumi.Int(100),
//				LocalBundle:    pulumi.Any(_var.Bundle_path),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Attributes reference
//
// * `edgeworkerId` - Unique identifier for an EdgeWorker ID.
// * `localBundleHash` - A SHA-256 hash digest of the EdgeWorkers code bundle.
// * `version` -Â Unique identifier for a specific EdgeWorker version.
// * `warnings` - List of validation warnings.
type EdgeWorker struct {
	pulumi.CustomResourceState

	// The unique identifier of the EdgeWorker
	EdgeworkerId pulumi.IntOutput `pulumi:"edgeworkerId"`
	// (Required) Identifies a group to assign to the EdgeWorker ID.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// (Optional) The path to the EdgeWorkers code bundle.
	LocalBundle pulumi.StringPtrOutput `pulumi:"localBundle"`
	// The local bundle hash for the EdgeWorker
	LocalBundleHash pulumi.StringOutput `pulumi:"localBundleHash"`
	// (Required) The name of the EdgeWorker ID.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Required) Unique identifier of the resource tier.
	ResourceTierId pulumi.IntOutput `pulumi:"resourceTierId"`
	// The bundle version
	Version pulumi.StringOutput `pulumi:"version"`
	// The list of warnings returned by EdgeWorker validation
	Warnings pulumi.StringArrayOutput `pulumi:"warnings"`
}

// NewEdgeWorker registers a new resource with the given unique name, arguments, and options.
func NewEdgeWorker(ctx *pulumi.Context,
	name string, args *EdgeWorkerArgs, opts ...pulumi.ResourceOption) (*EdgeWorker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ResourceTierId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTierId'")
	}
	var resource EdgeWorker
	err := ctx.RegisterResource("akamai:index/edgeWorker:EdgeWorker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeWorker gets an existing EdgeWorker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeWorker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeWorkerState, opts ...pulumi.ResourceOption) (*EdgeWorker, error) {
	var resource EdgeWorker
	err := ctx.ReadResource("akamai:index/edgeWorker:EdgeWorker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeWorker resources.
type edgeWorkerState struct {
	// The unique identifier of the EdgeWorker
	EdgeworkerId *int `pulumi:"edgeworkerId"`
	// (Required) Identifies a group to assign to the EdgeWorker ID.
	GroupId *int `pulumi:"groupId"`
	// (Optional) The path to the EdgeWorkers code bundle.
	LocalBundle *string `pulumi:"localBundle"`
	// The local bundle hash for the EdgeWorker
	LocalBundleHash *string `pulumi:"localBundleHash"`
	// (Required) The name of the EdgeWorker ID.
	Name *string `pulumi:"name"`
	// (Required) Unique identifier of the resource tier.
	ResourceTierId *int `pulumi:"resourceTierId"`
	// The bundle version
	Version *string `pulumi:"version"`
	// The list of warnings returned by EdgeWorker validation
	Warnings []string `pulumi:"warnings"`
}

type EdgeWorkerState struct {
	// The unique identifier of the EdgeWorker
	EdgeworkerId pulumi.IntPtrInput
	// (Required) Identifies a group to assign to the EdgeWorker ID.
	GroupId pulumi.IntPtrInput
	// (Optional) The path to the EdgeWorkers code bundle.
	LocalBundle pulumi.StringPtrInput
	// The local bundle hash for the EdgeWorker
	LocalBundleHash pulumi.StringPtrInput
	// (Required) The name of the EdgeWorker ID.
	Name pulumi.StringPtrInput
	// (Required) Unique identifier of the resource tier.
	ResourceTierId pulumi.IntPtrInput
	// The bundle version
	Version pulumi.StringPtrInput
	// The list of warnings returned by EdgeWorker validation
	Warnings pulumi.StringArrayInput
}

func (EdgeWorkerState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeWorkerState)(nil)).Elem()
}

type edgeWorkerArgs struct {
	// (Required) Identifies a group to assign to the EdgeWorker ID.
	GroupId int `pulumi:"groupId"`
	// (Optional) The path to the EdgeWorkers code bundle.
	LocalBundle *string `pulumi:"localBundle"`
	// (Required) The name of the EdgeWorker ID.
	Name *string `pulumi:"name"`
	// (Required) Unique identifier of the resource tier.
	ResourceTierId int `pulumi:"resourceTierId"`
}

// The set of arguments for constructing a EdgeWorker resource.
type EdgeWorkerArgs struct {
	// (Required) Identifies a group to assign to the EdgeWorker ID.
	GroupId pulumi.IntInput
	// (Optional) The path to the EdgeWorkers code bundle.
	LocalBundle pulumi.StringPtrInput
	// (Required) The name of the EdgeWorker ID.
	Name pulumi.StringPtrInput
	// (Required) Unique identifier of the resource tier.
	ResourceTierId pulumi.IntInput
}

func (EdgeWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeWorkerArgs)(nil)).Elem()
}

type EdgeWorkerInput interface {
	pulumi.Input

	ToEdgeWorkerOutput() EdgeWorkerOutput
	ToEdgeWorkerOutputWithContext(ctx context.Context) EdgeWorkerOutput
}

func (*EdgeWorker) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeWorker)(nil)).Elem()
}

func (i *EdgeWorker) ToEdgeWorkerOutput() EdgeWorkerOutput {
	return i.ToEdgeWorkerOutputWithContext(context.Background())
}

func (i *EdgeWorker) ToEdgeWorkerOutputWithContext(ctx context.Context) EdgeWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeWorkerOutput)
}

// EdgeWorkerArrayInput is an input type that accepts EdgeWorkerArray and EdgeWorkerArrayOutput values.
// You can construct a concrete instance of `EdgeWorkerArrayInput` via:
//
//	EdgeWorkerArray{ EdgeWorkerArgs{...} }
type EdgeWorkerArrayInput interface {
	pulumi.Input

	ToEdgeWorkerArrayOutput() EdgeWorkerArrayOutput
	ToEdgeWorkerArrayOutputWithContext(context.Context) EdgeWorkerArrayOutput
}

type EdgeWorkerArray []EdgeWorkerInput

func (EdgeWorkerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeWorker)(nil)).Elem()
}

func (i EdgeWorkerArray) ToEdgeWorkerArrayOutput() EdgeWorkerArrayOutput {
	return i.ToEdgeWorkerArrayOutputWithContext(context.Background())
}

func (i EdgeWorkerArray) ToEdgeWorkerArrayOutputWithContext(ctx context.Context) EdgeWorkerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeWorkerArrayOutput)
}

// EdgeWorkerMapInput is an input type that accepts EdgeWorkerMap and EdgeWorkerMapOutput values.
// You can construct a concrete instance of `EdgeWorkerMapInput` via:
//
//	EdgeWorkerMap{ "key": EdgeWorkerArgs{...} }
type EdgeWorkerMapInput interface {
	pulumi.Input

	ToEdgeWorkerMapOutput() EdgeWorkerMapOutput
	ToEdgeWorkerMapOutputWithContext(context.Context) EdgeWorkerMapOutput
}

type EdgeWorkerMap map[string]EdgeWorkerInput

func (EdgeWorkerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeWorker)(nil)).Elem()
}

func (i EdgeWorkerMap) ToEdgeWorkerMapOutput() EdgeWorkerMapOutput {
	return i.ToEdgeWorkerMapOutputWithContext(context.Background())
}

func (i EdgeWorkerMap) ToEdgeWorkerMapOutputWithContext(ctx context.Context) EdgeWorkerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeWorkerMapOutput)
}

type EdgeWorkerOutput struct{ *pulumi.OutputState }

func (EdgeWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeWorker)(nil)).Elem()
}

func (o EdgeWorkerOutput) ToEdgeWorkerOutput() EdgeWorkerOutput {
	return o
}

func (o EdgeWorkerOutput) ToEdgeWorkerOutputWithContext(ctx context.Context) EdgeWorkerOutput {
	return o
}

// The unique identifier of the EdgeWorker
func (o EdgeWorkerOutput) EdgeworkerId() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.IntOutput { return v.EdgeworkerId }).(pulumi.IntOutput)
}

// (Required) Identifies a group to assign to the EdgeWorker ID.
func (o EdgeWorkerOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// (Optional) The path to the EdgeWorkers code bundle.
func (o EdgeWorkerOutput) LocalBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.StringPtrOutput { return v.LocalBundle }).(pulumi.StringPtrOutput)
}

// The local bundle hash for the EdgeWorker
func (o EdgeWorkerOutput) LocalBundleHash() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.StringOutput { return v.LocalBundleHash }).(pulumi.StringOutput)
}

// (Required) The name of the EdgeWorker ID.
func (o EdgeWorkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Required) Unique identifier of the resource tier.
func (o EdgeWorkerOutput) ResourceTierId() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.IntOutput { return v.ResourceTierId }).(pulumi.IntOutput)
}

// The bundle version
func (o EdgeWorkerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The list of warnings returned by EdgeWorker validation
func (o EdgeWorkerOutput) Warnings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EdgeWorker) pulumi.StringArrayOutput { return v.Warnings }).(pulumi.StringArrayOutput)
}

type EdgeWorkerArrayOutput struct{ *pulumi.OutputState }

func (EdgeWorkerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeWorker)(nil)).Elem()
}

func (o EdgeWorkerArrayOutput) ToEdgeWorkerArrayOutput() EdgeWorkerArrayOutput {
	return o
}

func (o EdgeWorkerArrayOutput) ToEdgeWorkerArrayOutputWithContext(ctx context.Context) EdgeWorkerArrayOutput {
	return o
}

func (o EdgeWorkerArrayOutput) Index(i pulumi.IntInput) EdgeWorkerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeWorker {
		return vs[0].([]*EdgeWorker)[vs[1].(int)]
	}).(EdgeWorkerOutput)
}

type EdgeWorkerMapOutput struct{ *pulumi.OutputState }

func (EdgeWorkerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeWorker)(nil)).Elem()
}

func (o EdgeWorkerMapOutput) ToEdgeWorkerMapOutput() EdgeWorkerMapOutput {
	return o
}

func (o EdgeWorkerMapOutput) ToEdgeWorkerMapOutputWithContext(ctx context.Context) EdgeWorkerMapOutput {
	return o
}

func (o EdgeWorkerMapOutput) MapIndex(k pulumi.StringInput) EdgeWorkerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeWorker {
		return vs[0].(map[string]*EdgeWorker)[vs[1].(string)]
	}).(EdgeWorkerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeWorkerInput)(nil)).Elem(), &EdgeWorker{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeWorkerArrayInput)(nil)).Elem(), EdgeWorkerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeWorkerMapInput)(nil)).Elem(), EdgeWorkerMap{})
	pulumi.RegisterOutputType(EdgeWorkerOutput{})
	pulumi.RegisterOutputType(EdgeWorkerArrayOutput{})
	pulumi.RegisterOutputType(EdgeWorkerMapOutput{})
}
