// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanChallengeInjectionRules struct {
	pulumi.CustomResourceState

	ChallengeInjectionRules pulumi.StringOutput `pulumi:"challengeInjectionRules"`
	ConfigId                pulumi.IntOutput    `pulumi:"configId"`
}

// NewBotmanChallengeInjectionRules registers a new resource with the given unique name, arguments, and options.
func NewBotmanChallengeInjectionRules(ctx *pulumi.Context,
	name string, args *BotmanChallengeInjectionRulesArgs, opts ...pulumi.ResourceOption) (*BotmanChallengeInjectionRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeInjectionRules == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeInjectionRules'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotmanChallengeInjectionRules
	err := ctx.RegisterResource("akamai:index/botmanChallengeInjectionRules:BotmanChallengeInjectionRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanChallengeInjectionRules gets an existing BotmanChallengeInjectionRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanChallengeInjectionRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanChallengeInjectionRulesState, opts ...pulumi.ResourceOption) (*BotmanChallengeInjectionRules, error) {
	var resource BotmanChallengeInjectionRules
	err := ctx.ReadResource("akamai:index/botmanChallengeInjectionRules:BotmanChallengeInjectionRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanChallengeInjectionRules resources.
type botmanChallengeInjectionRulesState struct {
	ChallengeInjectionRules *string `pulumi:"challengeInjectionRules"`
	ConfigId                *int    `pulumi:"configId"`
}

type BotmanChallengeInjectionRulesState struct {
	ChallengeInjectionRules pulumi.StringPtrInput
	ConfigId                pulumi.IntPtrInput
}

func (BotmanChallengeInjectionRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeInjectionRulesState)(nil)).Elem()
}

type botmanChallengeInjectionRulesArgs struct {
	ChallengeInjectionRules string `pulumi:"challengeInjectionRules"`
	ConfigId                int    `pulumi:"configId"`
}

// The set of arguments for constructing a BotmanChallengeInjectionRules resource.
type BotmanChallengeInjectionRulesArgs struct {
	ChallengeInjectionRules pulumi.StringInput
	ConfigId                pulumi.IntInput
}

func (BotmanChallengeInjectionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeInjectionRulesArgs)(nil)).Elem()
}

type BotmanChallengeInjectionRulesInput interface {
	pulumi.Input

	ToBotmanChallengeInjectionRulesOutput() BotmanChallengeInjectionRulesOutput
	ToBotmanChallengeInjectionRulesOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesOutput
}

func (*BotmanChallengeInjectionRules) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeInjectionRules)(nil)).Elem()
}

func (i *BotmanChallengeInjectionRules) ToBotmanChallengeInjectionRulesOutput() BotmanChallengeInjectionRulesOutput {
	return i.ToBotmanChallengeInjectionRulesOutputWithContext(context.Background())
}

func (i *BotmanChallengeInjectionRules) ToBotmanChallengeInjectionRulesOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInjectionRulesOutput)
}

// BotmanChallengeInjectionRulesArrayInput is an input type that accepts BotmanChallengeInjectionRulesArray and BotmanChallengeInjectionRulesArrayOutput values.
// You can construct a concrete instance of `BotmanChallengeInjectionRulesArrayInput` via:
//
//	BotmanChallengeInjectionRulesArray{ BotmanChallengeInjectionRulesArgs{...} }
type BotmanChallengeInjectionRulesArrayInput interface {
	pulumi.Input

	ToBotmanChallengeInjectionRulesArrayOutput() BotmanChallengeInjectionRulesArrayOutput
	ToBotmanChallengeInjectionRulesArrayOutputWithContext(context.Context) BotmanChallengeInjectionRulesArrayOutput
}

type BotmanChallengeInjectionRulesArray []BotmanChallengeInjectionRulesInput

func (BotmanChallengeInjectionRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeInjectionRules)(nil)).Elem()
}

func (i BotmanChallengeInjectionRulesArray) ToBotmanChallengeInjectionRulesArrayOutput() BotmanChallengeInjectionRulesArrayOutput {
	return i.ToBotmanChallengeInjectionRulesArrayOutputWithContext(context.Background())
}

func (i BotmanChallengeInjectionRulesArray) ToBotmanChallengeInjectionRulesArrayOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInjectionRulesArrayOutput)
}

// BotmanChallengeInjectionRulesMapInput is an input type that accepts BotmanChallengeInjectionRulesMap and BotmanChallengeInjectionRulesMapOutput values.
// You can construct a concrete instance of `BotmanChallengeInjectionRulesMapInput` via:
//
//	BotmanChallengeInjectionRulesMap{ "key": BotmanChallengeInjectionRulesArgs{...} }
type BotmanChallengeInjectionRulesMapInput interface {
	pulumi.Input

	ToBotmanChallengeInjectionRulesMapOutput() BotmanChallengeInjectionRulesMapOutput
	ToBotmanChallengeInjectionRulesMapOutputWithContext(context.Context) BotmanChallengeInjectionRulesMapOutput
}

type BotmanChallengeInjectionRulesMap map[string]BotmanChallengeInjectionRulesInput

func (BotmanChallengeInjectionRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeInjectionRules)(nil)).Elem()
}

func (i BotmanChallengeInjectionRulesMap) ToBotmanChallengeInjectionRulesMapOutput() BotmanChallengeInjectionRulesMapOutput {
	return i.ToBotmanChallengeInjectionRulesMapOutputWithContext(context.Background())
}

func (i BotmanChallengeInjectionRulesMap) ToBotmanChallengeInjectionRulesMapOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInjectionRulesMapOutput)
}

type BotmanChallengeInjectionRulesOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInjectionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeInjectionRules)(nil)).Elem()
}

func (o BotmanChallengeInjectionRulesOutput) ToBotmanChallengeInjectionRulesOutput() BotmanChallengeInjectionRulesOutput {
	return o
}

func (o BotmanChallengeInjectionRulesOutput) ToBotmanChallengeInjectionRulesOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesOutput {
	return o
}

func (o BotmanChallengeInjectionRulesOutput) ChallengeInjectionRules() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanChallengeInjectionRules) pulumi.StringOutput { return v.ChallengeInjectionRules }).(pulumi.StringOutput)
}

func (o BotmanChallengeInjectionRulesOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanChallengeInjectionRules) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

type BotmanChallengeInjectionRulesArrayOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInjectionRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeInjectionRules)(nil)).Elem()
}

func (o BotmanChallengeInjectionRulesArrayOutput) ToBotmanChallengeInjectionRulesArrayOutput() BotmanChallengeInjectionRulesArrayOutput {
	return o
}

func (o BotmanChallengeInjectionRulesArrayOutput) ToBotmanChallengeInjectionRulesArrayOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesArrayOutput {
	return o
}

func (o BotmanChallengeInjectionRulesArrayOutput) Index(i pulumi.IntInput) BotmanChallengeInjectionRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanChallengeInjectionRules {
		return vs[0].([]*BotmanChallengeInjectionRules)[vs[1].(int)]
	}).(BotmanChallengeInjectionRulesOutput)
}

type BotmanChallengeInjectionRulesMapOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInjectionRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeInjectionRules)(nil)).Elem()
}

func (o BotmanChallengeInjectionRulesMapOutput) ToBotmanChallengeInjectionRulesMapOutput() BotmanChallengeInjectionRulesMapOutput {
	return o
}

func (o BotmanChallengeInjectionRulesMapOutput) ToBotmanChallengeInjectionRulesMapOutputWithContext(ctx context.Context) BotmanChallengeInjectionRulesMapOutput {
	return o
}

func (o BotmanChallengeInjectionRulesMapOutput) MapIndex(k pulumi.StringInput) BotmanChallengeInjectionRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanChallengeInjectionRules {
		return vs[0].(map[string]*BotmanChallengeInjectionRules)[vs[1].(string)]
	}).(BotmanChallengeInjectionRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInjectionRulesInput)(nil)).Elem(), &BotmanChallengeInjectionRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInjectionRulesArrayInput)(nil)).Elem(), BotmanChallengeInjectionRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInjectionRulesMapInput)(nil)).Elem(), BotmanChallengeInjectionRulesMap{})
	pulumi.RegisterOutputType(BotmanChallengeInjectionRulesOutput{})
	pulumi.RegisterOutputType(BotmanChallengeInjectionRulesArrayOutput{})
	pulumi.RegisterOutputType(BotmanChallengeInjectionRulesMapOutput{})
}
