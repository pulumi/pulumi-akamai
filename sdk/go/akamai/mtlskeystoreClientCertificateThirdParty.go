// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v9/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MtlskeystoreClientCertificateThirdParty struct {
	pulumi.CustomResourceState

	// The unique identifier of the client certificate.
	CertificateId pulumi.IntOutput `pulumi:"certificateId"`
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringOutput `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
	KeyAlgorithm pulumi.StringOutput `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayOutput `pulumi:"notificationEmails"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringOutput `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
	Versions MtlskeystoreClientCertificateThirdPartyVersionsMapOutput `pulumi:"versions"`
}

// NewMtlskeystoreClientCertificateThirdParty registers a new resource with the given unique name, arguments, and options.
func NewMtlskeystoreClientCertificateThirdParty(ctx *pulumi.Context,
	name string, args *MtlskeystoreClientCertificateThirdPartyArgs, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateThirdParty, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateName == nil {
		return nil, errors.New("invalid value for required argument 'CertificateName'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.Geography == nil {
		return nil, errors.New("invalid value for required argument 'Geography'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.NotificationEmails == nil {
		return nil, errors.New("invalid value for required argument 'NotificationEmails'")
	}
	if args.SecureNetwork == nil {
		return nil, errors.New("invalid value for required argument 'SecureNetwork'")
	}
	if args.Versions == nil {
		return nil, errors.New("invalid value for required argument 'Versions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MtlskeystoreClientCertificateThirdParty
	err := ctx.RegisterResource("akamai:index/mtlskeystoreClientCertificateThirdParty:MtlskeystoreClientCertificateThirdParty", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMtlskeystoreClientCertificateThirdParty gets an existing MtlskeystoreClientCertificateThirdParty resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMtlskeystoreClientCertificateThirdParty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MtlskeystoreClientCertificateThirdPartyState, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateThirdParty, error) {
	var resource MtlskeystoreClientCertificateThirdParty
	err := ctx.ReadResource("akamai:index/mtlskeystoreClientCertificateThirdParty:MtlskeystoreClientCertificateThirdParty", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MtlskeystoreClientCertificateThirdParty resources.
type mtlskeystoreClientCertificateThirdPartyState struct {
	// The unique identifier of the client certificate.
	CertificateId *int `pulumi:"certificateId"`
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName *string `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId *string `pulumi:"contractId"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography *string `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId *int `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork *string `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject *string `pulumi:"subject"`
	// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
	Versions map[string]MtlskeystoreClientCertificateThirdPartyVersions `pulumi:"versions"`
}

type MtlskeystoreClientCertificateThirdPartyState struct {
	// The unique identifier of the client certificate.
	CertificateId pulumi.IntPtrInput
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringPtrInput
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringPtrInput
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringPtrInput
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntPtrInput
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
	KeyAlgorithm pulumi.StringPtrInput
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayInput
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringPtrInput
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringPtrInput
	// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
	Versions MtlskeystoreClientCertificateThirdPartyVersionsMapInput
}

func (MtlskeystoreClientCertificateThirdPartyState) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateThirdPartyState)(nil)).Elem()
}

type mtlskeystoreClientCertificateThirdPartyArgs struct {
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName string `pulumi:"certificateName"`
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId string `pulumi:"contractId"`
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography string `pulumi:"geography"`
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId int `pulumi:"groupId"`
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
	KeyAlgorithm *string `pulumi:"keyAlgorithm"`
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails []string `pulumi:"notificationEmails"`
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork string `pulumi:"secureNetwork"`
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject *string `pulumi:"subject"`
	// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
	Versions map[string]MtlskeystoreClientCertificateThirdPartyVersions `pulumi:"versions"`
}

// The set of arguments for constructing a MtlskeystoreClientCertificateThirdParty resource.
type MtlskeystoreClientCertificateThirdPartyArgs struct {
	// The name of the client certificate. Must be between 1 and 64 characters.
	CertificateName pulumi.StringInput
	// The contract assigned to the client certificate. Must have a length of at least 1.
	ContractId pulumi.StringInput
	// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
	Geography pulumi.StringInput
	// The group assigned to the client certificate. Must be greater than or equal to 0.
	GroupId pulumi.IntInput
	// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
	KeyAlgorithm pulumi.StringPtrInput
	// The email addresses to notify for client certificate-related issues. Must have at least one email address.
	NotificationEmails pulumi.StringArrayInput
	// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
	SecureNetwork pulumi.StringInput
	// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
	Subject pulumi.StringPtrInput
	// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
	Versions MtlskeystoreClientCertificateThirdPartyVersionsMapInput
}

func (MtlskeystoreClientCertificateThirdPartyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateThirdPartyArgs)(nil)).Elem()
}

type MtlskeystoreClientCertificateThirdPartyInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateThirdPartyOutput() MtlskeystoreClientCertificateThirdPartyOutput
	ToMtlskeystoreClientCertificateThirdPartyOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyOutput
}

func (*MtlskeystoreClientCertificateThirdParty) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (i *MtlskeystoreClientCertificateThirdParty) ToMtlskeystoreClientCertificateThirdPartyOutput() MtlskeystoreClientCertificateThirdPartyOutput {
	return i.ToMtlskeystoreClientCertificateThirdPartyOutputWithContext(context.Background())
}

func (i *MtlskeystoreClientCertificateThirdParty) ToMtlskeystoreClientCertificateThirdPartyOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateThirdPartyOutput)
}

// MtlskeystoreClientCertificateThirdPartyArrayInput is an input type that accepts MtlskeystoreClientCertificateThirdPartyArray and MtlskeystoreClientCertificateThirdPartyArrayOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateThirdPartyArrayInput` via:
//
//	MtlskeystoreClientCertificateThirdPartyArray{ MtlskeystoreClientCertificateThirdPartyArgs{...} }
type MtlskeystoreClientCertificateThirdPartyArrayInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateThirdPartyArrayOutput() MtlskeystoreClientCertificateThirdPartyArrayOutput
	ToMtlskeystoreClientCertificateThirdPartyArrayOutputWithContext(context.Context) MtlskeystoreClientCertificateThirdPartyArrayOutput
}

type MtlskeystoreClientCertificateThirdPartyArray []MtlskeystoreClientCertificateThirdPartyInput

func (MtlskeystoreClientCertificateThirdPartyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateThirdPartyArray) ToMtlskeystoreClientCertificateThirdPartyArrayOutput() MtlskeystoreClientCertificateThirdPartyArrayOutput {
	return i.ToMtlskeystoreClientCertificateThirdPartyArrayOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateThirdPartyArray) ToMtlskeystoreClientCertificateThirdPartyArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateThirdPartyArrayOutput)
}

// MtlskeystoreClientCertificateThirdPartyMapInput is an input type that accepts MtlskeystoreClientCertificateThirdPartyMap and MtlskeystoreClientCertificateThirdPartyMapOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateThirdPartyMapInput` via:
//
//	MtlskeystoreClientCertificateThirdPartyMap{ "key": MtlskeystoreClientCertificateThirdPartyArgs{...} }
type MtlskeystoreClientCertificateThirdPartyMapInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateThirdPartyMapOutput() MtlskeystoreClientCertificateThirdPartyMapOutput
	ToMtlskeystoreClientCertificateThirdPartyMapOutputWithContext(context.Context) MtlskeystoreClientCertificateThirdPartyMapOutput
}

type MtlskeystoreClientCertificateThirdPartyMap map[string]MtlskeystoreClientCertificateThirdPartyInput

func (MtlskeystoreClientCertificateThirdPartyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateThirdPartyMap) ToMtlskeystoreClientCertificateThirdPartyMapOutput() MtlskeystoreClientCertificateThirdPartyMapOutput {
	return i.ToMtlskeystoreClientCertificateThirdPartyMapOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateThirdPartyMap) ToMtlskeystoreClientCertificateThirdPartyMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateThirdPartyMapOutput)
}

type MtlskeystoreClientCertificateThirdPartyOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateThirdPartyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateThirdPartyOutput) ToMtlskeystoreClientCertificateThirdPartyOutput() MtlskeystoreClientCertificateThirdPartyOutput {
	return o
}

func (o MtlskeystoreClientCertificateThirdPartyOutput) ToMtlskeystoreClientCertificateThirdPartyOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyOutput {
	return o
}

// The unique identifier of the client certificate.
func (o MtlskeystoreClientCertificateThirdPartyOutput) CertificateId() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.IntOutput { return v.CertificateId }).(pulumi.IntOutput)
}

// The name of the client certificate. Must be between 1 and 64 characters.
func (o MtlskeystoreClientCertificateThirdPartyOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// The contract assigned to the client certificate. Must have a length of at least 1.
func (o MtlskeystoreClientCertificateThirdPartyOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
func (o MtlskeystoreClientCertificateThirdPartyOutput) Geography() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.Geography }).(pulumi.StringOutput)
}

// The group assigned to the client certificate. Must be greater than or equal to 0.
func (o MtlskeystoreClientCertificateThirdPartyOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`. The default is `RSA`.
func (o MtlskeystoreClientCertificateThirdPartyOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// The email addresses to notify for client certificate-related issues. Must have at least one email address.
func (o MtlskeystoreClientCertificateThirdPartyOutput) NotificationEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringArrayOutput { return v.NotificationEmails }).(pulumi.StringArrayOutput)
}

// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
func (o MtlskeystoreClientCertificateThirdPartyOutput) SecureNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.SecureNetwork }).(pulumi.StringOutput)
}

// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
func (o MtlskeystoreClientCertificateThirdPartyOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// A map of client certificate versions as a value and user defined identifier as a key. Each version represents a specific iteration of the client certificate.
func (o MtlskeystoreClientCertificateThirdPartyOutput) Versions() MtlskeystoreClientCertificateThirdPartyVersionsMapOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateThirdParty) MtlskeystoreClientCertificateThirdPartyVersionsMapOutput {
		return v.Versions
	}).(MtlskeystoreClientCertificateThirdPartyVersionsMapOutput)
}

type MtlskeystoreClientCertificateThirdPartyArrayOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateThirdPartyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateThirdPartyArrayOutput) ToMtlskeystoreClientCertificateThirdPartyArrayOutput() MtlskeystoreClientCertificateThirdPartyArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateThirdPartyArrayOutput) ToMtlskeystoreClientCertificateThirdPartyArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateThirdPartyArrayOutput) Index(i pulumi.IntInput) MtlskeystoreClientCertificateThirdPartyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateThirdParty {
		return vs[0].([]*MtlskeystoreClientCertificateThirdParty)[vs[1].(int)]
	}).(MtlskeystoreClientCertificateThirdPartyOutput)
}

type MtlskeystoreClientCertificateThirdPartyMapOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateThirdPartyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateThirdParty)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateThirdPartyMapOutput) ToMtlskeystoreClientCertificateThirdPartyMapOutput() MtlskeystoreClientCertificateThirdPartyMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateThirdPartyMapOutput) ToMtlskeystoreClientCertificateThirdPartyMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateThirdPartyMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateThirdPartyMapOutput) MapIndex(k pulumi.StringInput) MtlskeystoreClientCertificateThirdPartyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateThirdParty {
		return vs[0].(map[string]*MtlskeystoreClientCertificateThirdParty)[vs[1].(string)]
	}).(MtlskeystoreClientCertificateThirdPartyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateThirdPartyInput)(nil)).Elem(), &MtlskeystoreClientCertificateThirdParty{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateThirdPartyArrayInput)(nil)).Elem(), MtlskeystoreClientCertificateThirdPartyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateThirdPartyMapInput)(nil)).Elem(), MtlskeystoreClientCertificateThirdPartyMap{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateThirdPartyOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateThirdPartyArrayOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateThirdPartyMapOutput{})
}
