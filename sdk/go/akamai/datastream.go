// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Datastream struct {
	pulumi.CustomResourceState

	// Defining if stream should be active or not
	Active         pulumi.BoolOutput                 `pulumi:"active"`
	AzureConnector DatastreamAzureConnectorPtrOutput `pulumi:"azureConnector"`
	// Identifies if stream needs to collect midgress data
	CollectMidgress pulumi.BoolPtrOutput `pulumi:"collectMidgress"`
	// Identifies the contract that has access to the product
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// The username who created the stream
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The date and time when the stream was created
	CreatedDate      pulumi.StringOutput                 `pulumi:"createdDate"`
	DatadogConnector DatastreamDatadogConnectorPtrOutput `pulumi:"datadogConnector"`
	// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
	// identifiers define how the value for these fields appear in the log lines
	DatasetFields pulumi.IntArrayOutput `pulumi:"datasetFields"`
	// Provides information about the configuration related to logs (format, file names, delivery frequency)
	DeliveryConfiguration  DatastreamDeliveryConfigurationOutput     `pulumi:"deliveryConfiguration"`
	ElasticsearchConnector DatastreamElasticsearchConnectorPtrOutput `pulumi:"elasticsearchConnector"`
	GcsConnector           DatastreamGcsConnectorPtrOutput           `pulumi:"gcsConnector"`
	// Identifies the group that has access to the product and for which the stream configuration was created
	GroupId        pulumi.StringOutput               `pulumi:"groupId"`
	HttpsConnector DatastreamHttpsConnectorPtrOutput `pulumi:"httpsConnector"`
	// Identifies the latest active configuration version of the stream
	LatestVersion   pulumi.IntOutput                   `pulumi:"latestVersion"`
	LogglyConnector DatastreamLogglyConnectorPtrOutput `pulumi:"logglyConnector"`
	// The username who modified the stream
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// The date and time when the stream was modified
	ModifiedDate      pulumi.StringOutput                  `pulumi:"modifiedDate"`
	NewRelicConnector DatastreamNewRelicConnectorPtrOutput `pulumi:"newRelicConnector"`
	// List of email addresses where the system sends notifications about activations and deactivations of the stream
	NotificationEmails pulumi.StringArrayOutput           `pulumi:"notificationEmails"`
	OracleConnector    DatastreamOracleConnectorPtrOutput `pulumi:"oracleConnector"`
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson pulumi.StringOutput `pulumi:"papiJson"`
	// The ID of the product for which the stream was created
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Identifies the properties monitored in the stream
	Properties      pulumi.StringArrayOutput           `pulumi:"properties"`
	S3Connector     DatastreamS3ConnectorPtrOutput     `pulumi:"s3Connector"`
	SplunkConnector DatastreamSplunkConnectorPtrOutput `pulumi:"splunkConnector"`
	// The name of the stream
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// Identifies the configuration version of the stream
	StreamVersion      pulumi.IntOutput                      `pulumi:"streamVersion"`
	SumologicConnector DatastreamSumologicConnectorPtrOutput `pulumi:"sumologicConnector"`
}

// NewDatastream registers a new resource with the given unique name, arguments, and options.
func NewDatastream(ctx *pulumi.Context,
	name string, args *DatastreamArgs, opts ...pulumi.ResourceOption) (*Datastream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.DatasetFields == nil {
		return nil, errors.New("invalid value for required argument 'DatasetFields'")
	}
	if args.DeliveryConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'DeliveryConfiguration'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Datastream
	err := ctx.RegisterResource("akamai:index/datastream:Datastream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastream gets an existing Datastream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastreamState, opts ...pulumi.ResourceOption) (*Datastream, error) {
	var resource Datastream
	err := ctx.ReadResource("akamai:index/datastream:Datastream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datastream resources.
type datastreamState struct {
	// Defining if stream should be active or not
	Active         *bool                     `pulumi:"active"`
	AzureConnector *DatastreamAzureConnector `pulumi:"azureConnector"`
	// Identifies if stream needs to collect midgress data
	CollectMidgress *bool `pulumi:"collectMidgress"`
	// Identifies the contract that has access to the product
	ContractId *string `pulumi:"contractId"`
	// The username who created the stream
	CreatedBy *string `pulumi:"createdBy"`
	// The date and time when the stream was created
	CreatedDate      *string                     `pulumi:"createdDate"`
	DatadogConnector *DatastreamDatadogConnector `pulumi:"datadogConnector"`
	// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
	// identifiers define how the value for these fields appear in the log lines
	DatasetFields []int `pulumi:"datasetFields"`
	// Provides information about the configuration related to logs (format, file names, delivery frequency)
	DeliveryConfiguration  *DatastreamDeliveryConfiguration  `pulumi:"deliveryConfiguration"`
	ElasticsearchConnector *DatastreamElasticsearchConnector `pulumi:"elasticsearchConnector"`
	GcsConnector           *DatastreamGcsConnector           `pulumi:"gcsConnector"`
	// Identifies the group that has access to the product and for which the stream configuration was created
	GroupId        *string                   `pulumi:"groupId"`
	HttpsConnector *DatastreamHttpsConnector `pulumi:"httpsConnector"`
	// Identifies the latest active configuration version of the stream
	LatestVersion   *int                       `pulumi:"latestVersion"`
	LogglyConnector *DatastreamLogglyConnector `pulumi:"logglyConnector"`
	// The username who modified the stream
	ModifiedBy *string `pulumi:"modifiedBy"`
	// The date and time when the stream was modified
	ModifiedDate      *string                      `pulumi:"modifiedDate"`
	NewRelicConnector *DatastreamNewRelicConnector `pulumi:"newRelicConnector"`
	// List of email addresses where the system sends notifications about activations and deactivations of the stream
	NotificationEmails []string                   `pulumi:"notificationEmails"`
	OracleConnector    *DatastreamOracleConnector `pulumi:"oracleConnector"`
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson *string `pulumi:"papiJson"`
	// The ID of the product for which the stream was created
	ProductId *string `pulumi:"productId"`
	// Identifies the properties monitored in the stream
	Properties      []string                   `pulumi:"properties"`
	S3Connector     *DatastreamS3Connector     `pulumi:"s3Connector"`
	SplunkConnector *DatastreamSplunkConnector `pulumi:"splunkConnector"`
	// The name of the stream
	StreamName *string `pulumi:"streamName"`
	// Identifies the configuration version of the stream
	StreamVersion      *int                          `pulumi:"streamVersion"`
	SumologicConnector *DatastreamSumologicConnector `pulumi:"sumologicConnector"`
}

type DatastreamState struct {
	// Defining if stream should be active or not
	Active         pulumi.BoolPtrInput
	AzureConnector DatastreamAzureConnectorPtrInput
	// Identifies if stream needs to collect midgress data
	CollectMidgress pulumi.BoolPtrInput
	// Identifies the contract that has access to the product
	ContractId pulumi.StringPtrInput
	// The username who created the stream
	CreatedBy pulumi.StringPtrInput
	// The date and time when the stream was created
	CreatedDate      pulumi.StringPtrInput
	DatadogConnector DatastreamDatadogConnectorPtrInput
	// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
	// identifiers define how the value for these fields appear in the log lines
	DatasetFields pulumi.IntArrayInput
	// Provides information about the configuration related to logs (format, file names, delivery frequency)
	DeliveryConfiguration  DatastreamDeliveryConfigurationPtrInput
	ElasticsearchConnector DatastreamElasticsearchConnectorPtrInput
	GcsConnector           DatastreamGcsConnectorPtrInput
	// Identifies the group that has access to the product and for which the stream configuration was created
	GroupId        pulumi.StringPtrInput
	HttpsConnector DatastreamHttpsConnectorPtrInput
	// Identifies the latest active configuration version of the stream
	LatestVersion   pulumi.IntPtrInput
	LogglyConnector DatastreamLogglyConnectorPtrInput
	// The username who modified the stream
	ModifiedBy pulumi.StringPtrInput
	// The date and time when the stream was modified
	ModifiedDate      pulumi.StringPtrInput
	NewRelicConnector DatastreamNewRelicConnectorPtrInput
	// List of email addresses where the system sends notifications about activations and deactivations of the stream
	NotificationEmails pulumi.StringArrayInput
	OracleConnector    DatastreamOracleConnectorPtrInput
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson pulumi.StringPtrInput
	// The ID of the product for which the stream was created
	ProductId pulumi.StringPtrInput
	// Identifies the properties monitored in the stream
	Properties      pulumi.StringArrayInput
	S3Connector     DatastreamS3ConnectorPtrInput
	SplunkConnector DatastreamSplunkConnectorPtrInput
	// The name of the stream
	StreamName pulumi.StringPtrInput
	// Identifies the configuration version of the stream
	StreamVersion      pulumi.IntPtrInput
	SumologicConnector DatastreamSumologicConnectorPtrInput
}

func (DatastreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamState)(nil)).Elem()
}

type datastreamArgs struct {
	// Defining if stream should be active or not
	Active         bool                      `pulumi:"active"`
	AzureConnector *DatastreamAzureConnector `pulumi:"azureConnector"`
	// Identifies if stream needs to collect midgress data
	CollectMidgress *bool `pulumi:"collectMidgress"`
	// Identifies the contract that has access to the product
	ContractId       string                      `pulumi:"contractId"`
	DatadogConnector *DatastreamDatadogConnector `pulumi:"datadogConnector"`
	// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
	// identifiers define how the value for these fields appear in the log lines
	DatasetFields []int `pulumi:"datasetFields"`
	// Provides information about the configuration related to logs (format, file names, delivery frequency)
	DeliveryConfiguration  DatastreamDeliveryConfiguration   `pulumi:"deliveryConfiguration"`
	ElasticsearchConnector *DatastreamElasticsearchConnector `pulumi:"elasticsearchConnector"`
	GcsConnector           *DatastreamGcsConnector           `pulumi:"gcsConnector"`
	// Identifies the group that has access to the product and for which the stream configuration was created
	GroupId           string                       `pulumi:"groupId"`
	HttpsConnector    *DatastreamHttpsConnector    `pulumi:"httpsConnector"`
	LogglyConnector   *DatastreamLogglyConnector   `pulumi:"logglyConnector"`
	NewRelicConnector *DatastreamNewRelicConnector `pulumi:"newRelicConnector"`
	// List of email addresses where the system sends notifications about activations and deactivations of the stream
	NotificationEmails []string                   `pulumi:"notificationEmails"`
	OracleConnector    *DatastreamOracleConnector `pulumi:"oracleConnector"`
	// Identifies the properties monitored in the stream
	Properties      []string                   `pulumi:"properties"`
	S3Connector     *DatastreamS3Connector     `pulumi:"s3Connector"`
	SplunkConnector *DatastreamSplunkConnector `pulumi:"splunkConnector"`
	// The name of the stream
	StreamName         string                        `pulumi:"streamName"`
	SumologicConnector *DatastreamSumologicConnector `pulumi:"sumologicConnector"`
}

// The set of arguments for constructing a Datastream resource.
type DatastreamArgs struct {
	// Defining if stream should be active or not
	Active         pulumi.BoolInput
	AzureConnector DatastreamAzureConnectorPtrInput
	// Identifies if stream needs to collect midgress data
	CollectMidgress pulumi.BoolPtrInput
	// Identifies the contract that has access to the product
	ContractId       pulumi.StringInput
	DatadogConnector DatastreamDatadogConnectorPtrInput
	// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
	// identifiers define how the value for these fields appear in the log lines
	DatasetFields pulumi.IntArrayInput
	// Provides information about the configuration related to logs (format, file names, delivery frequency)
	DeliveryConfiguration  DatastreamDeliveryConfigurationInput
	ElasticsearchConnector DatastreamElasticsearchConnectorPtrInput
	GcsConnector           DatastreamGcsConnectorPtrInput
	// Identifies the group that has access to the product and for which the stream configuration was created
	GroupId           pulumi.StringInput
	HttpsConnector    DatastreamHttpsConnectorPtrInput
	LogglyConnector   DatastreamLogglyConnectorPtrInput
	NewRelicConnector DatastreamNewRelicConnectorPtrInput
	// List of email addresses where the system sends notifications about activations and deactivations of the stream
	NotificationEmails pulumi.StringArrayInput
	OracleConnector    DatastreamOracleConnectorPtrInput
	// Identifies the properties monitored in the stream
	Properties      pulumi.StringArrayInput
	S3Connector     DatastreamS3ConnectorPtrInput
	SplunkConnector DatastreamSplunkConnectorPtrInput
	// The name of the stream
	StreamName         pulumi.StringInput
	SumologicConnector DatastreamSumologicConnectorPtrInput
}

func (DatastreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamArgs)(nil)).Elem()
}

type DatastreamInput interface {
	pulumi.Input

	ToDatastreamOutput() DatastreamOutput
	ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput
}

func (*Datastream) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastream)(nil)).Elem()
}

func (i *Datastream) ToDatastreamOutput() DatastreamOutput {
	return i.ToDatastreamOutputWithContext(context.Background())
}

func (i *Datastream) ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamOutput)
}

// DatastreamArrayInput is an input type that accepts DatastreamArray and DatastreamArrayOutput values.
// You can construct a concrete instance of `DatastreamArrayInput` via:
//
//	DatastreamArray{ DatastreamArgs{...} }
type DatastreamArrayInput interface {
	pulumi.Input

	ToDatastreamArrayOutput() DatastreamArrayOutput
	ToDatastreamArrayOutputWithContext(context.Context) DatastreamArrayOutput
}

type DatastreamArray []DatastreamInput

func (DatastreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datastream)(nil)).Elem()
}

func (i DatastreamArray) ToDatastreamArrayOutput() DatastreamArrayOutput {
	return i.ToDatastreamArrayOutputWithContext(context.Background())
}

func (i DatastreamArray) ToDatastreamArrayOutputWithContext(ctx context.Context) DatastreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamArrayOutput)
}

// DatastreamMapInput is an input type that accepts DatastreamMap and DatastreamMapOutput values.
// You can construct a concrete instance of `DatastreamMapInput` via:
//
//	DatastreamMap{ "key": DatastreamArgs{...} }
type DatastreamMapInput interface {
	pulumi.Input

	ToDatastreamMapOutput() DatastreamMapOutput
	ToDatastreamMapOutputWithContext(context.Context) DatastreamMapOutput
}

type DatastreamMap map[string]DatastreamInput

func (DatastreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datastream)(nil)).Elem()
}

func (i DatastreamMap) ToDatastreamMapOutput() DatastreamMapOutput {
	return i.ToDatastreamMapOutputWithContext(context.Background())
}

func (i DatastreamMap) ToDatastreamMapOutputWithContext(ctx context.Context) DatastreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamMapOutput)
}

type DatastreamOutput struct{ *pulumi.OutputState }

func (DatastreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastream)(nil)).Elem()
}

func (o DatastreamOutput) ToDatastreamOutput() DatastreamOutput {
	return o
}

func (o DatastreamOutput) ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput {
	return o
}

// Defining if stream should be active or not
func (o DatastreamOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *Datastream) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

func (o DatastreamOutput) AzureConnector() DatastreamAzureConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamAzureConnectorPtrOutput { return v.AzureConnector }).(DatastreamAzureConnectorPtrOutput)
}

// Identifies if stream needs to collect midgress data
func (o DatastreamOutput) CollectMidgress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Datastream) pulumi.BoolPtrOutput { return v.CollectMidgress }).(pulumi.BoolPtrOutput)
}

// Identifies the contract that has access to the product
func (o DatastreamOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// The username who created the stream
func (o DatastreamOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The date and time when the stream was created
func (o DatastreamOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

func (o DatastreamOutput) DatadogConnector() DatastreamDatadogConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamDatadogConnectorPtrOutput { return v.DatadogConnector }).(DatastreamDatadogConnectorPtrOutput)
}

// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
// identifiers define how the value for these fields appear in the log lines
func (o DatastreamOutput) DatasetFields() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Datastream) pulumi.IntArrayOutput { return v.DatasetFields }).(pulumi.IntArrayOutput)
}

// Provides information about the configuration related to logs (format, file names, delivery frequency)
func (o DatastreamOutput) DeliveryConfiguration() DatastreamDeliveryConfigurationOutput {
	return o.ApplyT(func(v *Datastream) DatastreamDeliveryConfigurationOutput { return v.DeliveryConfiguration }).(DatastreamDeliveryConfigurationOutput)
}

func (o DatastreamOutput) ElasticsearchConnector() DatastreamElasticsearchConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamElasticsearchConnectorPtrOutput { return v.ElasticsearchConnector }).(DatastreamElasticsearchConnectorPtrOutput)
}

func (o DatastreamOutput) GcsConnector() DatastreamGcsConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamGcsConnectorPtrOutput { return v.GcsConnector }).(DatastreamGcsConnectorPtrOutput)
}

// Identifies the group that has access to the product and for which the stream configuration was created
func (o DatastreamOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o DatastreamOutput) HttpsConnector() DatastreamHttpsConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamHttpsConnectorPtrOutput { return v.HttpsConnector }).(DatastreamHttpsConnectorPtrOutput)
}

// Identifies the latest active configuration version of the stream
func (o DatastreamOutput) LatestVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Datastream) pulumi.IntOutput { return v.LatestVersion }).(pulumi.IntOutput)
}

func (o DatastreamOutput) LogglyConnector() DatastreamLogglyConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamLogglyConnectorPtrOutput { return v.LogglyConnector }).(DatastreamLogglyConnectorPtrOutput)
}

// The username who modified the stream
func (o DatastreamOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// The date and time when the stream was modified
func (o DatastreamOutput) ModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.ModifiedDate }).(pulumi.StringOutput)
}

func (o DatastreamOutput) NewRelicConnector() DatastreamNewRelicConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamNewRelicConnectorPtrOutput { return v.NewRelicConnector }).(DatastreamNewRelicConnectorPtrOutput)
}

// List of email addresses where the system sends notifications about activations and deactivations of the stream
func (o DatastreamOutput) NotificationEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringArrayOutput { return v.NotificationEmails }).(pulumi.StringArrayOutput)
}

func (o DatastreamOutput) OracleConnector() DatastreamOracleConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamOracleConnectorPtrOutput { return v.OracleConnector }).(DatastreamOracleConnectorPtrOutput)
}

// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
func (o DatastreamOutput) PapiJson() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.PapiJson }).(pulumi.StringOutput)
}

// The ID of the product for which the stream was created
func (o DatastreamOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Identifies the properties monitored in the stream
func (o DatastreamOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringArrayOutput { return v.Properties }).(pulumi.StringArrayOutput)
}

func (o DatastreamOutput) S3Connector() DatastreamS3ConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamS3ConnectorPtrOutput { return v.S3Connector }).(DatastreamS3ConnectorPtrOutput)
}

func (o DatastreamOutput) SplunkConnector() DatastreamSplunkConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamSplunkConnectorPtrOutput { return v.SplunkConnector }).(DatastreamSplunkConnectorPtrOutput)
}

// The name of the stream
func (o DatastreamOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *Datastream) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// Identifies the configuration version of the stream
func (o DatastreamOutput) StreamVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Datastream) pulumi.IntOutput { return v.StreamVersion }).(pulumi.IntOutput)
}

func (o DatastreamOutput) SumologicConnector() DatastreamSumologicConnectorPtrOutput {
	return o.ApplyT(func(v *Datastream) DatastreamSumologicConnectorPtrOutput { return v.SumologicConnector }).(DatastreamSumologicConnectorPtrOutput)
}

type DatastreamArrayOutput struct{ *pulumi.OutputState }

func (DatastreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datastream)(nil)).Elem()
}

func (o DatastreamArrayOutput) ToDatastreamArrayOutput() DatastreamArrayOutput {
	return o
}

func (o DatastreamArrayOutput) ToDatastreamArrayOutputWithContext(ctx context.Context) DatastreamArrayOutput {
	return o
}

func (o DatastreamArrayOutput) Index(i pulumi.IntInput) DatastreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datastream {
		return vs[0].([]*Datastream)[vs[1].(int)]
	}).(DatastreamOutput)
}

type DatastreamMapOutput struct{ *pulumi.OutputState }

func (DatastreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datastream)(nil)).Elem()
}

func (o DatastreamMapOutput) ToDatastreamMapOutput() DatastreamMapOutput {
	return o
}

func (o DatastreamMapOutput) ToDatastreamMapOutputWithContext(ctx context.Context) DatastreamMapOutput {
	return o
}

func (o DatastreamMapOutput) MapIndex(k pulumi.StringInput) DatastreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datastream {
		return vs[0].(map[string]*Datastream)[vs[1].(string)]
	}).(DatastreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamInput)(nil)).Elem(), &Datastream{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamArrayInput)(nil)).Elem(), DatastreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamMapInput)(nil)).Elem(), DatastreamMap{})
	pulumi.RegisterOutputType(DatastreamOutput{})
	pulumi.RegisterOutputType(DatastreamArrayOutput{})
	pulumi.RegisterOutputType(DatastreamMapOutput{})
}
