// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Basic usagehcl resource "akamai_datastream" "example" {
//
// # (resource arguments)
//
//  } You can import your Akamai DataStream configuration using a stream version ID. For example
//
// ```sh
//  $ pulumi import akamai:index/datastream:Datastream example 1234
// ```
//
//  ~> **IMPORTANT:** For security reasons, this command doesn't import any secrets you specify for your connector. To make sure the state file includes complete data, use this resource to manually add the arguments marked **Secret** above.
type Datastream struct {
	pulumi.CustomResourceState

	// - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
	Active pulumi.BoolOutput `pulumi:"active"`
	// Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
	AzureConnector DatastreamAzureConnectorPtrOutput `pulumi:"azureConnector"`
	// - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
	Config DatastreamConfigOutput `pulumi:"config"`
	// - (Required) Identifies the contract that has access to the product.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// The username who created the stream
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The date and time when the stream was created
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// Specify details about the Datadog connector in a stream, including:
	DatadogConnector DatastreamDatadogConnectorPtrOutput `pulumi:"datadogConnector"`
	// - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
	DatasetFieldsIds pulumi.IntArrayOutput `pulumi:"datasetFieldsIds"`
	// - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
	EmailIds pulumi.StringArrayOutput `pulumi:"emailIds"`
	// Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_<timestamp>.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
	GcsConnector DatastreamGcsConnectorPtrOutput `pulumi:"gcsConnector"`
	// - (Required) Identifies the group that has access to the product and this stream configuration.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The name of the user group for which the stream was created
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
	HttpsConnector DatastreamHttpsConnectorPtrOutput `pulumi:"httpsConnector"`
	// The username who modified the stream
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// The date and time when the stream was modified
	ModifiedDate pulumi.StringOutput `pulumi:"modifiedDate"`
	// Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and tries to save an `Akamai_access_verification_<timestamp>.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
	OracleConnector DatastreamOracleConnectorPtrOutput `pulumi:"oracleConnector"`
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson pulumi.StringOutput `pulumi:"papiJson"`
	// The ID of the product for which the stream was created
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// The name of the product for which the stream was created
	ProductName pulumi.StringOutput `pulumi:"productName"`
	// - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
	PropertyIds pulumi.StringArrayOutput `pulumi:"propertyIds"`
	// - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
	S3Connector DatastreamS3ConnectorPtrOutput `pulumi:"s3Connector"`
	// Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
	SplunkConnector DatastreamSplunkConnectorPtrOutput `pulumi:"splunkConnector"`
	// - (Required) The name of the stream.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
	StreamType pulumi.StringOutput `pulumi:"streamType"`
	// Identifies the configuration version of the stream
	StreamVersionId pulumi.IntOutput `pulumi:"streamVersionId"`
	// Specify details about the Sumo Logic connector in a stream, including:
	SumologicConnector DatastreamSumologicConnectorPtrOutput `pulumi:"sumologicConnector"`
	// - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewDatastream registers a new resource with the given unique name, arguments, and options.
func NewDatastream(ctx *pulumi.Context,
	name string, args *DatastreamArgs, opts ...pulumi.ResourceOption) (*Datastream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.DatasetFieldsIds == nil {
		return nil, errors.New("invalid value for required argument 'DatasetFieldsIds'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.PropertyIds == nil {
		return nil, errors.New("invalid value for required argument 'PropertyIds'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	if args.StreamType == nil {
		return nil, errors.New("invalid value for required argument 'StreamType'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	var resource Datastream
	err := ctx.RegisterResource("akamai:index/datastream:Datastream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatastream gets an existing Datastream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatastream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatastreamState, opts ...pulumi.ResourceOption) (*Datastream, error) {
	var resource Datastream
	err := ctx.ReadResource("akamai:index/datastream:Datastream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Datastream resources.
type datastreamState struct {
	// - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
	Active *bool `pulumi:"active"`
	// Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
	AzureConnector *DatastreamAzureConnector `pulumi:"azureConnector"`
	// - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
	Config *DatastreamConfig `pulumi:"config"`
	// - (Required) Identifies the contract that has access to the product.
	ContractId *string `pulumi:"contractId"`
	// The username who created the stream
	CreatedBy *string `pulumi:"createdBy"`
	// The date and time when the stream was created
	CreatedDate *string `pulumi:"createdDate"`
	// Specify details about the Datadog connector in a stream, including:
	DatadogConnector *DatastreamDatadogConnector `pulumi:"datadogConnector"`
	// - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
	DatasetFieldsIds []int `pulumi:"datasetFieldsIds"`
	// - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
	EmailIds []string `pulumi:"emailIds"`
	// Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_<timestamp>.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
	GcsConnector *DatastreamGcsConnector `pulumi:"gcsConnector"`
	// - (Required) Identifies the group that has access to the product and this stream configuration.
	GroupId *string `pulumi:"groupId"`
	// The name of the user group for which the stream was created
	GroupName *string `pulumi:"groupName"`
	// Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
	HttpsConnector *DatastreamHttpsConnector `pulumi:"httpsConnector"`
	// The username who modified the stream
	ModifiedBy *string `pulumi:"modifiedBy"`
	// The date and time when the stream was modified
	ModifiedDate *string `pulumi:"modifiedDate"`
	// Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and tries to save an `Akamai_access_verification_<timestamp>.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
	OracleConnector *DatastreamOracleConnector `pulumi:"oracleConnector"`
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson *string `pulumi:"papiJson"`
	// The ID of the product for which the stream was created
	ProductId *string `pulumi:"productId"`
	// The name of the product for which the stream was created
	ProductName *string `pulumi:"productName"`
	// - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
	PropertyIds []string `pulumi:"propertyIds"`
	// - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
	S3Connector *DatastreamS3Connector `pulumi:"s3Connector"`
	// Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
	SplunkConnector *DatastreamSplunkConnector `pulumi:"splunkConnector"`
	// - (Required) The name of the stream.
	StreamName *string `pulumi:"streamName"`
	// - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
	StreamType *string `pulumi:"streamType"`
	// Identifies the configuration version of the stream
	StreamVersionId *int `pulumi:"streamVersionId"`
	// Specify details about the Sumo Logic connector in a stream, including:
	SumologicConnector *DatastreamSumologicConnector `pulumi:"sumologicConnector"`
	// - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
	TemplateName *string `pulumi:"templateName"`
}

type DatastreamState struct {
	// - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
	Active pulumi.BoolPtrInput
	// Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
	AzureConnector DatastreamAzureConnectorPtrInput
	// - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
	Config DatastreamConfigPtrInput
	// - (Required) Identifies the contract that has access to the product.
	ContractId pulumi.StringPtrInput
	// The username who created the stream
	CreatedBy pulumi.StringPtrInput
	// The date and time when the stream was created
	CreatedDate pulumi.StringPtrInput
	// Specify details about the Datadog connector in a stream, including:
	DatadogConnector DatastreamDatadogConnectorPtrInput
	// - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
	DatasetFieldsIds pulumi.IntArrayInput
	// - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
	EmailIds pulumi.StringArrayInput
	// Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_<timestamp>.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
	GcsConnector DatastreamGcsConnectorPtrInput
	// - (Required) Identifies the group that has access to the product and this stream configuration.
	GroupId pulumi.StringPtrInput
	// The name of the user group for which the stream was created
	GroupName pulumi.StringPtrInput
	// Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
	HttpsConnector DatastreamHttpsConnectorPtrInput
	// The username who modified the stream
	ModifiedBy pulumi.StringPtrInput
	// The date and time when the stream was modified
	ModifiedDate pulumi.StringPtrInput
	// Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and tries to save an `Akamai_access_verification_<timestamp>.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
	OracleConnector DatastreamOracleConnectorPtrInput
	// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
	PapiJson pulumi.StringPtrInput
	// The ID of the product for which the stream was created
	ProductId pulumi.StringPtrInput
	// The name of the product for which the stream was created
	ProductName pulumi.StringPtrInput
	// - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
	PropertyIds pulumi.StringArrayInput
	// - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
	S3Connector DatastreamS3ConnectorPtrInput
	// Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
	SplunkConnector DatastreamSplunkConnectorPtrInput
	// - (Required) The name of the stream.
	StreamName pulumi.StringPtrInput
	// - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
	StreamType pulumi.StringPtrInput
	// Identifies the configuration version of the stream
	StreamVersionId pulumi.IntPtrInput
	// Specify details about the Sumo Logic connector in a stream, including:
	SumologicConnector DatastreamSumologicConnectorPtrInput
	// - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
	TemplateName pulumi.StringPtrInput
}

func (DatastreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamState)(nil)).Elem()
}

type datastreamArgs struct {
	// - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
	Active bool `pulumi:"active"`
	// Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
	AzureConnector *DatastreamAzureConnector `pulumi:"azureConnector"`
	// - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
	Config DatastreamConfig `pulumi:"config"`
	// - (Required) Identifies the contract that has access to the product.
	ContractId string `pulumi:"contractId"`
	// Specify details about the Datadog connector in a stream, including:
	DatadogConnector *DatastreamDatadogConnector `pulumi:"datadogConnector"`
	// - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
	DatasetFieldsIds []int `pulumi:"datasetFieldsIds"`
	// - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
	EmailIds []string `pulumi:"emailIds"`
	// Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_<timestamp>.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
	GcsConnector *DatastreamGcsConnector `pulumi:"gcsConnector"`
	// - (Required) Identifies the group that has access to the product and this stream configuration.
	GroupId string `pulumi:"groupId"`
	// Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
	HttpsConnector *DatastreamHttpsConnector `pulumi:"httpsConnector"`
	// Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and tries to save an `Akamai_access_verification_<timestamp>.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
	OracleConnector *DatastreamOracleConnector `pulumi:"oracleConnector"`
	// - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
	PropertyIds []string `pulumi:"propertyIds"`
	// - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
	S3Connector *DatastreamS3Connector `pulumi:"s3Connector"`
	// Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
	SplunkConnector *DatastreamSplunkConnector `pulumi:"splunkConnector"`
	// - (Required) The name of the stream.
	StreamName string `pulumi:"streamName"`
	// - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
	StreamType string `pulumi:"streamType"`
	// Specify details about the Sumo Logic connector in a stream, including:
	SumologicConnector *DatastreamSumologicConnector `pulumi:"sumologicConnector"`
	// - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a Datastream resource.
type DatastreamArgs struct {
	// - (Required) Whether you want to start activating the stream when applying the resource. Either `true` for activating the stream upon sending the request or `false` for leaving the stream inactive after the request.
	Active pulumi.BoolInput
	// Specify details about the Azure Storage connector configuration in a data stream. Note that currently DataStream supports only streaming data to [block objects](https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs). The argument includes these sub-arguments:
	AzureConnector DatastreamAzureConnectorPtrInput
	// - (Required) Provides information about the log line configuration, log file format, names of log files sent, and file delivery. The argument includes these sub-arguments:
	Config DatastreamConfigInput
	// - (Required) Identifies the contract that has access to the product.
	ContractId pulumi.StringInput
	// Specify details about the Datadog connector in a stream, including:
	DatadogConnector DatastreamDatadogConnectorPtrInput
	// - (Required)	Identifiers of the data set fields within the template that you want to receive in logs. The order of the identifiers define how the value for these fields appears in the log lines. See [Data set parameters](https://techdocs.akamai.com/datastream2/reference/data-set-parameters-1).
	DatasetFieldsIds pulumi.IntArrayInput
	// - (Optional) A list of email addresses you want to notify about activations and deactivations of the stream.
	EmailIds pulumi.StringArrayInput
	// Specify details about the Google Cloud Storage connector you can use in a stream. When validating this connector, DataStream uses the private access key to create an `Akamai_access_verification_<timestamp>.txt` object file in your GCS bucket. You can only see this file if the validation process is successful, and you have access to the Google Cloud Storage bucket where you are trying to send logs. The argument includes these sub-arguments:
	GcsConnector DatastreamGcsConnectorPtrInput
	// - (Required) Identifies the group that has access to the product and this stream configuration.
	GroupId pulumi.StringInput
	// Specify details about the custom HTTPS endpoint you can use as a connector for a stream, including:
	HttpsConnector DatastreamHttpsConnectorPtrInput
	// Specify details about the Oracle Cloud Storage connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and tries to save an `Akamai_access_verification_<timestamp>.txt` file in your Oracle Cloud Storage folder. You can only see this file if the validation process is successful, and you have access to the Oracle Cloud Storage bucket and folder that you’re trying to send logs to.
	OracleConnector DatastreamOracleConnectorPtrInput
	// - (Required) Identifies the properties that you want to monitor in the stream. Note that a stream can only log data for active properties.
	PropertyIds pulumi.StringArrayInput
	// - (Optional) Specify details about the Amazon S3 connector in a stream. When validating this connector, DataStream uses the provided `accessKey` and `secretAccessKey` values and saves an `akamai_write_test_2147483647.txt` file in your Amazon S3 folder. You can only see this file if validation succeeds, and you have access to the Amazon S3 bucket and folder that you’re trying to send logs to. The argument includes these sub-arguments:
	S3Connector DatastreamS3ConnectorPtrInput
	// Specify details about the Splunk connector in your stream. Note that currently DataStream supports only endpoint URLs ending with `collector/raw`. The argument includes these sub-arguments:
	SplunkConnector DatastreamSplunkConnectorPtrInput
	// - (Required) The name of the stream.
	StreamName pulumi.StringInput
	// - (Required) The type of stream that you want to create. Currently, `RAW_LOGS` is the only possible stream type.
	StreamType pulumi.StringInput
	// Specify details about the Sumo Logic connector in a stream, including:
	SumologicConnector DatastreamSumologicConnectorPtrInput
	// - (Required) The name of the data set template available for the product that you want to use in the stream. Currently, `EDGE_LOGS` is the only data set template available.
	TemplateName pulumi.StringInput
}

func (DatastreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datastreamArgs)(nil)).Elem()
}

type DatastreamInput interface {
	pulumi.Input

	ToDatastreamOutput() DatastreamOutput
	ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput
}

func (*Datastream) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastream)(nil)).Elem()
}

func (i *Datastream) ToDatastreamOutput() DatastreamOutput {
	return i.ToDatastreamOutputWithContext(context.Background())
}

func (i *Datastream) ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamOutput)
}

// DatastreamArrayInput is an input type that accepts DatastreamArray and DatastreamArrayOutput values.
// You can construct a concrete instance of `DatastreamArrayInput` via:
//
//          DatastreamArray{ DatastreamArgs{...} }
type DatastreamArrayInput interface {
	pulumi.Input

	ToDatastreamArrayOutput() DatastreamArrayOutput
	ToDatastreamArrayOutputWithContext(context.Context) DatastreamArrayOutput
}

type DatastreamArray []DatastreamInput

func (DatastreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datastream)(nil)).Elem()
}

func (i DatastreamArray) ToDatastreamArrayOutput() DatastreamArrayOutput {
	return i.ToDatastreamArrayOutputWithContext(context.Background())
}

func (i DatastreamArray) ToDatastreamArrayOutputWithContext(ctx context.Context) DatastreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamArrayOutput)
}

// DatastreamMapInput is an input type that accepts DatastreamMap and DatastreamMapOutput values.
// You can construct a concrete instance of `DatastreamMapInput` via:
//
//          DatastreamMap{ "key": DatastreamArgs{...} }
type DatastreamMapInput interface {
	pulumi.Input

	ToDatastreamMapOutput() DatastreamMapOutput
	ToDatastreamMapOutputWithContext(context.Context) DatastreamMapOutput
}

type DatastreamMap map[string]DatastreamInput

func (DatastreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datastream)(nil)).Elem()
}

func (i DatastreamMap) ToDatastreamMapOutput() DatastreamMapOutput {
	return i.ToDatastreamMapOutputWithContext(context.Background())
}

func (i DatastreamMap) ToDatastreamMapOutputWithContext(ctx context.Context) DatastreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastreamMapOutput)
}

type DatastreamOutput struct{ *pulumi.OutputState }

func (DatastreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Datastream)(nil)).Elem()
}

func (o DatastreamOutput) ToDatastreamOutput() DatastreamOutput {
	return o
}

func (o DatastreamOutput) ToDatastreamOutputWithContext(ctx context.Context) DatastreamOutput {
	return o
}

type DatastreamArrayOutput struct{ *pulumi.OutputState }

func (DatastreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Datastream)(nil)).Elem()
}

func (o DatastreamArrayOutput) ToDatastreamArrayOutput() DatastreamArrayOutput {
	return o
}

func (o DatastreamArrayOutput) ToDatastreamArrayOutputWithContext(ctx context.Context) DatastreamArrayOutput {
	return o
}

func (o DatastreamArrayOutput) Index(i pulumi.IntInput) DatastreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Datastream {
		return vs[0].([]*Datastream)[vs[1].(int)]
	}).(DatastreamOutput)
}

type DatastreamMapOutput struct{ *pulumi.OutputState }

func (DatastreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Datastream)(nil)).Elem()
}

func (o DatastreamMapOutput) ToDatastreamMapOutput() DatastreamMapOutput {
	return o
}

func (o DatastreamMapOutput) ToDatastreamMapOutputWithContext(ctx context.Context) DatastreamMapOutput {
	return o
}

func (o DatastreamMapOutput) MapIndex(k pulumi.StringInput) DatastreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Datastream {
		return vs[0].(map[string]*Datastream)[vs[1].(string)]
	}).(DatastreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamInput)(nil)).Elem(), &Datastream{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamArrayInput)(nil)).Elem(), DatastreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastreamMapInput)(nil)).Elem(), DatastreamMap{})
	pulumi.RegisterOutputType(DatastreamOutput{})
	pulumi.RegisterOutputType(DatastreamArrayOutput{})
	pulumi.RegisterOutputType(DatastreamMapOutput{})
}
