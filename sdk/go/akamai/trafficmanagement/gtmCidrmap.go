// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `GtmCidrmap` resource to create, configure, and import a GTM Classless Inter-Domain Routing (CIDR) map. CIDR mapping uses the IP addresses of the requesting name server to provide IP-specific CNAME entries. CNAMEs let you direct internal users to a specific environment or direct them to the origin. This lets you provide different responses to an internal corporate DNS infrastructure, such as internal test environments and another answer for all other name servers (`defaultDatacenter`).
//
//  CIDR maps split the Internet into multiple CIDR block zones. Properties that use a map can specify a handout CNAME for each zone on the property's editing page. To configure a property for CIDR mapping, your domain needs at least one CIDR map defined.
//
// > **Note** Import requires an ID with this format: `existingDomainName`:`existingMapName`.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v3/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewGtmCidrmap(ctx, "demoCidrmap", &akamai.GtmCidrmapArgs{
// 			DefaultDatacenter: &GtmCidrmapDefaultDatacenterArgs{
// 				DatacenterId: pulumi.Int(5400),
// 				Nickname:     pulumi.String("All Other CIDR Blocks"),
// 			},
// 			Domain: pulumi.String("demo_domain.akadns.net"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Schema reference
//
// You can download the GTM CIDR Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#cidrmap) page.
//
// Deprecated: akamai.trafficmanagement.GtmCidrmap has been deprecated in favor of akamai.GtmCidrmap
type GtmCidrmap struct {
	pulumi.CustomResourceState

	// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
	Assignments GtmCidrmapAssignmentArrayOutput `pulumi:"assignments"`
	// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
	DefaultDatacenter GtmCidrmapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	// GTM Domain name for the AS Map.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// A descriptive label for the CIDR map, up to 255 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrOutput `pulumi:"waitOnComplete"`
}

// NewGtmCidrmap registers a new resource with the given unique name, arguments, and options.
func NewGtmCidrmap(ctx *pulumi.Context,
	name string, args *GtmCidrmapArgs, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource GtmCidrmap
	err := ctx.RegisterResource("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmCidrmap gets an existing GtmCidrmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmCidrmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmCidrmapState, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	var resource GtmCidrmap
	err := ctx.ReadResource("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmCidrmap resources.
type gtmCidrmapState struct {
	// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
	Assignments []GtmCidrmapAssignment `pulumi:"assignments"`
	// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
	DefaultDatacenter *GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	// GTM Domain name for the AS Map.
	Domain *string `pulumi:"domain"`
	// A descriptive label for the CIDR map, up to 255 characters.
	Name *string `pulumi:"name"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

type GtmCidrmapState struct {
	// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
	Assignments GtmCidrmapAssignmentArrayInput
	// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
	DefaultDatacenter GtmCidrmapDefaultDatacenterPtrInput
	// GTM Domain name for the AS Map.
	Domain pulumi.StringPtrInput
	// A descriptive label for the CIDR map, up to 255 characters.
	Name pulumi.StringPtrInput
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmCidrmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapState)(nil)).Elem()
}

type gtmCidrmapArgs struct {
	// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
	Assignments []GtmCidrmapAssignment `pulumi:"assignments"`
	// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
	DefaultDatacenter GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	// GTM Domain name for the AS Map.
	Domain string `pulumi:"domain"`
	// A descriptive label for the CIDR map, up to 255 characters.
	Name *string `pulumi:"name"`
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmCidrmap resource.
type GtmCidrmapArgs struct {
	// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
	Assignments GtmCidrmapAssignmentArrayInput
	// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
	DefaultDatacenter GtmCidrmapDefaultDatacenterInput
	// GTM Domain name for the AS Map.
	Domain pulumi.StringInput
	// A descriptive label for the CIDR map, up to 255 characters.
	Name pulumi.StringPtrInput
	// A boolean that, if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmCidrmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapArgs)(nil)).Elem()
}

type GtmCidrmapInput interface {
	pulumi.Input

	ToGtmCidrmapOutput() GtmCidrmapOutput
	ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput
}

func (*GtmCidrmap) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil)).Elem()
}

func (i *GtmCidrmap) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return i.ToGtmCidrmapOutputWithContext(context.Background())
}

func (i *GtmCidrmap) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapOutput)
}

// GtmCidrmapArrayInput is an input type that accepts GtmCidrmapArray and GtmCidrmapArrayOutput values.
// You can construct a concrete instance of `GtmCidrmapArrayInput` via:
//
//          GtmCidrmapArray{ GtmCidrmapArgs{...} }
type GtmCidrmapArrayInput interface {
	pulumi.Input

	ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput
	ToGtmCidrmapArrayOutputWithContext(context.Context) GtmCidrmapArrayOutput
}

type GtmCidrmapArray []GtmCidrmapInput

func (GtmCidrmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmCidrmap)(nil)).Elem()
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return i.ToGtmCidrmapArrayOutputWithContext(context.Background())
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapArrayOutput)
}

// GtmCidrmapMapInput is an input type that accepts GtmCidrmapMap and GtmCidrmapMapOutput values.
// You can construct a concrete instance of `GtmCidrmapMapInput` via:
//
//          GtmCidrmapMap{ "key": GtmCidrmapArgs{...} }
type GtmCidrmapMapInput interface {
	pulumi.Input

	ToGtmCidrmapMapOutput() GtmCidrmapMapOutput
	ToGtmCidrmapMapOutputWithContext(context.Context) GtmCidrmapMapOutput
}

type GtmCidrmapMap map[string]GtmCidrmapInput

func (GtmCidrmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmCidrmap)(nil)).Elem()
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return i.ToGtmCidrmapMapOutputWithContext(context.Background())
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapMapOutput)
}

type GtmCidrmapOutput struct{ *pulumi.OutputState }

func (GtmCidrmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return o
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return o
}

// Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
func (o GtmCidrmapOutput) Assignments() GtmCidrmapAssignmentArrayOutput {
	return o.ApplyT(func(v *GtmCidrmap) GtmCidrmapAssignmentArrayOutput { return v.Assignments }).(GtmCidrmapAssignmentArrayOutput)
}

// A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
func (o GtmCidrmapOutput) DefaultDatacenter() GtmCidrmapDefaultDatacenterOutput {
	return o.ApplyT(func(v *GtmCidrmap) GtmCidrmapDefaultDatacenterOutput { return v.DefaultDatacenter }).(GtmCidrmapDefaultDatacenterOutput)
}

// GTM Domain name for the AS Map.
func (o GtmCidrmapOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// A descriptive label for the CIDR map, up to 255 characters.
func (o GtmCidrmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A boolean that, if set to `true`, waits for transaction to complete.
func (o GtmCidrmapOutput) WaitOnComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.BoolPtrOutput { return v.WaitOnComplete }).(pulumi.BoolPtrOutput)
}

type GtmCidrmapArrayOutput struct{ *pulumi.OutputState }

func (GtmCidrmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) Index(i pulumi.IntInput) GtmCidrmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmCidrmap {
		return vs[0].([]*GtmCidrmap)[vs[1].(int)]
	}).(GtmCidrmapOutput)
}

type GtmCidrmapMapOutput struct{ *pulumi.OutputState }

func (GtmCidrmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) MapIndex(k pulumi.StringInput) GtmCidrmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmCidrmap {
		return vs[0].(map[string]*GtmCidrmap)[vs[1].(string)]
	}).(GtmCidrmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapInput)(nil)).Elem(), &GtmCidrmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapArrayInput)(nil)).Elem(), GtmCidrmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapMapInput)(nil)).Elem(), GtmCidrmapMap{})
	pulumi.RegisterOutputType(GtmCidrmapOutput{})
	pulumi.RegisterOutputType(GtmCidrmapArrayOutput{})
	pulumi.RegisterOutputType(GtmCidrmapMapOutput{})
}
