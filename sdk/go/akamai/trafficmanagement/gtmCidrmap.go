// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: akamai.trafficmanagement/gtmcidrmap.GtmCidrmap has been deprecated in favor of akamai.index/gtmcidrmap.GtmCidrmap
type GtmCidrmap struct {
	pulumi.CustomResourceState

	Assignments       GtmCidrmapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmCidrmapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	Domain            pulumi.StringOutput               `pulumi:"domain"`
	Name              pulumi.StringOutput               `pulumi:"name"`
	WaitOnComplete    pulumi.BoolPtrOutput              `pulumi:"waitOnComplete"`
}

// NewGtmCidrmap registers a new resource with the given unique name, arguments, and options.
func NewGtmCidrmap(ctx *pulumi.Context,
	name string, args *GtmCidrmapArgs, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource GtmCidrmap
	err := ctx.RegisterResource("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmCidrmap gets an existing GtmCidrmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmCidrmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmCidrmapState, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	var resource GtmCidrmap
	err := ctx.ReadResource("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmCidrmap resources.
type gtmCidrmapState struct {
	Assignments       []GtmCidrmapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            *string                      `pulumi:"domain"`
	Name              *string                      `pulumi:"name"`
	WaitOnComplete    *bool                        `pulumi:"waitOnComplete"`
}

type GtmCidrmapState struct {
	Assignments       GtmCidrmapAssignmentArrayInput
	DefaultDatacenter GtmCidrmapDefaultDatacenterPtrInput
	Domain            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmCidrmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapState)(nil)).Elem()
}

type gtmCidrmapArgs struct {
	Assignments       []GtmCidrmapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            string                      `pulumi:"domain"`
	Name              *string                     `pulumi:"name"`
	WaitOnComplete    *bool                       `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmCidrmap resource.
type GtmCidrmapArgs struct {
	Assignments       GtmCidrmapAssignmentArrayInput
	DefaultDatacenter GtmCidrmapDefaultDatacenterInput
	Domain            pulumi.StringInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmCidrmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapArgs)(nil)).Elem()
}

type GtmCidrmapInput interface {
	pulumi.Input

	ToGtmCidrmapOutput() GtmCidrmapOutput
	ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput
}

func (*GtmCidrmap) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil)).Elem()
}

func (i *GtmCidrmap) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return i.ToGtmCidrmapOutputWithContext(context.Background())
}

func (i *GtmCidrmap) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapOutput)
}

// GtmCidrmapArrayInput is an input type that accepts GtmCidrmapArray and GtmCidrmapArrayOutput values.
// You can construct a concrete instance of `GtmCidrmapArrayInput` via:
//
//	GtmCidrmapArray{ GtmCidrmapArgs{...} }
type GtmCidrmapArrayInput interface {
	pulumi.Input

	ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput
	ToGtmCidrmapArrayOutputWithContext(context.Context) GtmCidrmapArrayOutput
}

type GtmCidrmapArray []GtmCidrmapInput

func (GtmCidrmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmCidrmap)(nil)).Elem()
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return i.ToGtmCidrmapArrayOutputWithContext(context.Background())
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapArrayOutput)
}

// GtmCidrmapMapInput is an input type that accepts GtmCidrmapMap and GtmCidrmapMapOutput values.
// You can construct a concrete instance of `GtmCidrmapMapInput` via:
//
//	GtmCidrmapMap{ "key": GtmCidrmapArgs{...} }
type GtmCidrmapMapInput interface {
	pulumi.Input

	ToGtmCidrmapMapOutput() GtmCidrmapMapOutput
	ToGtmCidrmapMapOutputWithContext(context.Context) GtmCidrmapMapOutput
}

type GtmCidrmapMap map[string]GtmCidrmapInput

func (GtmCidrmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmCidrmap)(nil)).Elem()
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return i.ToGtmCidrmapMapOutputWithContext(context.Background())
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapMapOutput)
}

type GtmCidrmapOutput struct{ *pulumi.OutputState }

func (GtmCidrmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return o
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return o
}

func (o GtmCidrmapOutput) Assignments() GtmCidrmapAssignmentArrayOutput {
	return o.ApplyT(func(v *GtmCidrmap) GtmCidrmapAssignmentArrayOutput { return v.Assignments }).(GtmCidrmapAssignmentArrayOutput)
}

func (o GtmCidrmapOutput) DefaultDatacenter() GtmCidrmapDefaultDatacenterOutput {
	return o.ApplyT(func(v *GtmCidrmap) GtmCidrmapDefaultDatacenterOutput { return v.DefaultDatacenter }).(GtmCidrmapDefaultDatacenterOutput)
}

func (o GtmCidrmapOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o GtmCidrmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GtmCidrmapOutput) WaitOnComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmCidrmap) pulumi.BoolPtrOutput { return v.WaitOnComplete }).(pulumi.BoolPtrOutput)
}

type GtmCidrmapArrayOutput struct{ *pulumi.OutputState }

func (GtmCidrmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) Index(i pulumi.IntInput) GtmCidrmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmCidrmap {
		return vs[0].([]*GtmCidrmap)[vs[1].(int)]
	}).(GtmCidrmapOutput)
}

type GtmCidrmapMapOutput struct{ *pulumi.OutputState }

func (GtmCidrmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmCidrmap)(nil)).Elem()
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) MapIndex(k pulumi.StringInput) GtmCidrmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmCidrmap {
		return vs[0].(map[string]*GtmCidrmap)[vs[1].(string)]
	}).(GtmCidrmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapInput)(nil)).Elem(), &GtmCidrmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapArrayInput)(nil)).Elem(), GtmCidrmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmCidrmapMapInput)(nil)).Elem(), GtmCidrmapMap{})
	pulumi.RegisterOutputType(GtmCidrmapOutput{})
	pulumi.RegisterOutputType(GtmCidrmapArrayOutput{})
	pulumi.RegisterOutputType(GtmCidrmapMapOutput{})
}
