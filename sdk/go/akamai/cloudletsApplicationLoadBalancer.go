// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudletsApplicationLoadBalancer struct {
	pulumi.CustomResourceState

	// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
	BalancingType pulumi.StringPtrOutput `pulumi:"balancingType"`
	// The object containing information on conditional origins being used as data centers for an Application Load Balancer
	// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
	// application load balancer configuration.
	DataCenters CloudletsApplicationLoadBalancerDataCenterArrayOutput `pulumi:"dataCenters"`
	// The load balancer configuration description
	Description      pulumi.StringPtrOutput                                    `pulumi:"description"`
	LivenessSettings CloudletsApplicationLoadBalancerLivenessSettingsPtrOutput `pulumi:"livenessSettings"`
	// The conditional origin’s unique identifier
	OriginId pulumi.StringOutput `pulumi:"originId"`
	// The load balancer configuration version
	Version pulumi.IntOutput `pulumi:"version"`
	// Describes warnings during activation of load balancer configuration
	Warnings pulumi.StringOutput `pulumi:"warnings"`
}

// NewCloudletsApplicationLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewCloudletsApplicationLoadBalancer(ctx *pulumi.Context,
	name string, args *CloudletsApplicationLoadBalancerArgs, opts ...pulumi.ResourceOption) (*CloudletsApplicationLoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataCenters == nil {
		return nil, errors.New("invalid value for required argument 'DataCenters'")
	}
	if args.OriginId == nil {
		return nil, errors.New("invalid value for required argument 'OriginId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudletsApplicationLoadBalancer
	err := ctx.RegisterResource("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudletsApplicationLoadBalancer gets an existing CloudletsApplicationLoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudletsApplicationLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudletsApplicationLoadBalancerState, opts ...pulumi.ResourceOption) (*CloudletsApplicationLoadBalancer, error) {
	var resource CloudletsApplicationLoadBalancer
	err := ctx.ReadResource("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudletsApplicationLoadBalancer resources.
type cloudletsApplicationLoadBalancerState struct {
	// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
	BalancingType *string `pulumi:"balancingType"`
	// The object containing information on conditional origins being used as data centers for an Application Load Balancer
	// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
	// application load balancer configuration.
	DataCenters []CloudletsApplicationLoadBalancerDataCenter `pulumi:"dataCenters"`
	// The load balancer configuration description
	Description      *string                                           `pulumi:"description"`
	LivenessSettings *CloudletsApplicationLoadBalancerLivenessSettings `pulumi:"livenessSettings"`
	// The conditional origin’s unique identifier
	OriginId *string `pulumi:"originId"`
	// The load balancer configuration version
	Version *int `pulumi:"version"`
	// Describes warnings during activation of load balancer configuration
	Warnings *string `pulumi:"warnings"`
}

type CloudletsApplicationLoadBalancerState struct {
	// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
	BalancingType pulumi.StringPtrInput
	// The object containing information on conditional origins being used as data centers for an Application Load Balancer
	// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
	// application load balancer configuration.
	DataCenters CloudletsApplicationLoadBalancerDataCenterArrayInput
	// The load balancer configuration description
	Description      pulumi.StringPtrInput
	LivenessSettings CloudletsApplicationLoadBalancerLivenessSettingsPtrInput
	// The conditional origin’s unique identifier
	OriginId pulumi.StringPtrInput
	// The load balancer configuration version
	Version pulumi.IntPtrInput
	// Describes warnings during activation of load balancer configuration
	Warnings pulumi.StringPtrInput
}

func (CloudletsApplicationLoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudletsApplicationLoadBalancerState)(nil)).Elem()
}

type cloudletsApplicationLoadBalancerArgs struct {
	// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
	BalancingType *string `pulumi:"balancingType"`
	// The object containing information on conditional origins being used as data centers for an Application Load Balancer
	// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
	// application load balancer configuration.
	DataCenters []CloudletsApplicationLoadBalancerDataCenter `pulumi:"dataCenters"`
	// The load balancer configuration description
	Description      *string                                           `pulumi:"description"`
	LivenessSettings *CloudletsApplicationLoadBalancerLivenessSettings `pulumi:"livenessSettings"`
	// The conditional origin’s unique identifier
	OriginId string `pulumi:"originId"`
}

// The set of arguments for constructing a CloudletsApplicationLoadBalancer resource.
type CloudletsApplicationLoadBalancerArgs struct {
	// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
	BalancingType pulumi.StringPtrInput
	// The object containing information on conditional origins being used as data centers for an Application Load Balancer
	// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
	// application load balancer configuration.
	DataCenters CloudletsApplicationLoadBalancerDataCenterArrayInput
	// The load balancer configuration description
	Description      pulumi.StringPtrInput
	LivenessSettings CloudletsApplicationLoadBalancerLivenessSettingsPtrInput
	// The conditional origin’s unique identifier
	OriginId pulumi.StringInput
}

func (CloudletsApplicationLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudletsApplicationLoadBalancerArgs)(nil)).Elem()
}

type CloudletsApplicationLoadBalancerInput interface {
	pulumi.Input

	ToCloudletsApplicationLoadBalancerOutput() CloudletsApplicationLoadBalancerOutput
	ToCloudletsApplicationLoadBalancerOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerOutput
}

func (*CloudletsApplicationLoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (i *CloudletsApplicationLoadBalancer) ToCloudletsApplicationLoadBalancerOutput() CloudletsApplicationLoadBalancerOutput {
	return i.ToCloudletsApplicationLoadBalancerOutputWithContext(context.Background())
}

func (i *CloudletsApplicationLoadBalancer) ToCloudletsApplicationLoadBalancerOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsApplicationLoadBalancerOutput)
}

// CloudletsApplicationLoadBalancerArrayInput is an input type that accepts CloudletsApplicationLoadBalancerArray and CloudletsApplicationLoadBalancerArrayOutput values.
// You can construct a concrete instance of `CloudletsApplicationLoadBalancerArrayInput` via:
//
//	CloudletsApplicationLoadBalancerArray{ CloudletsApplicationLoadBalancerArgs{...} }
type CloudletsApplicationLoadBalancerArrayInput interface {
	pulumi.Input

	ToCloudletsApplicationLoadBalancerArrayOutput() CloudletsApplicationLoadBalancerArrayOutput
	ToCloudletsApplicationLoadBalancerArrayOutputWithContext(context.Context) CloudletsApplicationLoadBalancerArrayOutput
}

type CloudletsApplicationLoadBalancerArray []CloudletsApplicationLoadBalancerInput

func (CloudletsApplicationLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (i CloudletsApplicationLoadBalancerArray) ToCloudletsApplicationLoadBalancerArrayOutput() CloudletsApplicationLoadBalancerArrayOutput {
	return i.ToCloudletsApplicationLoadBalancerArrayOutputWithContext(context.Background())
}

func (i CloudletsApplicationLoadBalancerArray) ToCloudletsApplicationLoadBalancerArrayOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsApplicationLoadBalancerArrayOutput)
}

// CloudletsApplicationLoadBalancerMapInput is an input type that accepts CloudletsApplicationLoadBalancerMap and CloudletsApplicationLoadBalancerMapOutput values.
// You can construct a concrete instance of `CloudletsApplicationLoadBalancerMapInput` via:
//
//	CloudletsApplicationLoadBalancerMap{ "key": CloudletsApplicationLoadBalancerArgs{...} }
type CloudletsApplicationLoadBalancerMapInput interface {
	pulumi.Input

	ToCloudletsApplicationLoadBalancerMapOutput() CloudletsApplicationLoadBalancerMapOutput
	ToCloudletsApplicationLoadBalancerMapOutputWithContext(context.Context) CloudletsApplicationLoadBalancerMapOutput
}

type CloudletsApplicationLoadBalancerMap map[string]CloudletsApplicationLoadBalancerInput

func (CloudletsApplicationLoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (i CloudletsApplicationLoadBalancerMap) ToCloudletsApplicationLoadBalancerMapOutput() CloudletsApplicationLoadBalancerMapOutput {
	return i.ToCloudletsApplicationLoadBalancerMapOutputWithContext(context.Background())
}

func (i CloudletsApplicationLoadBalancerMap) ToCloudletsApplicationLoadBalancerMapOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsApplicationLoadBalancerMapOutput)
}

type CloudletsApplicationLoadBalancerOutput struct{ *pulumi.OutputState }

func (CloudletsApplicationLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (o CloudletsApplicationLoadBalancerOutput) ToCloudletsApplicationLoadBalancerOutput() CloudletsApplicationLoadBalancerOutput {
	return o
}

func (o CloudletsApplicationLoadBalancerOutput) ToCloudletsApplicationLoadBalancerOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerOutput {
	return o
}

// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
func (o CloudletsApplicationLoadBalancerOutput) BalancingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) pulumi.StringPtrOutput { return v.BalancingType }).(pulumi.StringPtrOutput)
}

// The object containing information on conditional origins being used as data centers for an Application Load Balancer
// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
// application load balancer configuration.
func (o CloudletsApplicationLoadBalancerOutput) DataCenters() CloudletsApplicationLoadBalancerDataCenterArrayOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) CloudletsApplicationLoadBalancerDataCenterArrayOutput {
		return v.DataCenters
	}).(CloudletsApplicationLoadBalancerDataCenterArrayOutput)
}

// The load balancer configuration description
func (o CloudletsApplicationLoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CloudletsApplicationLoadBalancerOutput) LivenessSettings() CloudletsApplicationLoadBalancerLivenessSettingsPtrOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) CloudletsApplicationLoadBalancerLivenessSettingsPtrOutput {
		return v.LivenessSettings
	}).(CloudletsApplicationLoadBalancerLivenessSettingsPtrOutput)
}

// The conditional origin’s unique identifier
func (o CloudletsApplicationLoadBalancerOutput) OriginId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) pulumi.StringOutput { return v.OriginId }).(pulumi.StringOutput)
}

// The load balancer configuration version
func (o CloudletsApplicationLoadBalancerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Describes warnings during activation of load balancer configuration
func (o CloudletsApplicationLoadBalancerOutput) Warnings() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudletsApplicationLoadBalancer) pulumi.StringOutput { return v.Warnings }).(pulumi.StringOutput)
}

type CloudletsApplicationLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (CloudletsApplicationLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (o CloudletsApplicationLoadBalancerArrayOutput) ToCloudletsApplicationLoadBalancerArrayOutput() CloudletsApplicationLoadBalancerArrayOutput {
	return o
}

func (o CloudletsApplicationLoadBalancerArrayOutput) ToCloudletsApplicationLoadBalancerArrayOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerArrayOutput {
	return o
}

func (o CloudletsApplicationLoadBalancerArrayOutput) Index(i pulumi.IntInput) CloudletsApplicationLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudletsApplicationLoadBalancer {
		return vs[0].([]*CloudletsApplicationLoadBalancer)[vs[1].(int)]
	}).(CloudletsApplicationLoadBalancerOutput)
}

type CloudletsApplicationLoadBalancerMapOutput struct{ *pulumi.OutputState }

func (CloudletsApplicationLoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudletsApplicationLoadBalancer)(nil)).Elem()
}

func (o CloudletsApplicationLoadBalancerMapOutput) ToCloudletsApplicationLoadBalancerMapOutput() CloudletsApplicationLoadBalancerMapOutput {
	return o
}

func (o CloudletsApplicationLoadBalancerMapOutput) ToCloudletsApplicationLoadBalancerMapOutputWithContext(ctx context.Context) CloudletsApplicationLoadBalancerMapOutput {
	return o
}

func (o CloudletsApplicationLoadBalancerMapOutput) MapIndex(k pulumi.StringInput) CloudletsApplicationLoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudletsApplicationLoadBalancer {
		return vs[0].(map[string]*CloudletsApplicationLoadBalancer)[vs[1].(string)]
	}).(CloudletsApplicationLoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsApplicationLoadBalancerInput)(nil)).Elem(), &CloudletsApplicationLoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsApplicationLoadBalancerArrayInput)(nil)).Elem(), CloudletsApplicationLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsApplicationLoadBalancerMapInput)(nil)).Elem(), CloudletsApplicationLoadBalancerMap{})
	pulumi.RegisterOutputType(CloudletsApplicationLoadBalancerOutput{})
	pulumi.RegisterOutputType(CloudletsApplicationLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(CloudletsApplicationLoadBalancerMapOutput{})
}
