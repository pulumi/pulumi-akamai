// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GtmGeomap struct {
	pulumi.CustomResourceState

	Assignments       GtmGeomapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	Domain            pulumi.StringOutput              `pulumi:"domain"`
	Name              pulumi.StringOutput              `pulumi:"name"`
	WaitOnComplete    pulumi.BoolPtrOutput             `pulumi:"waitOnComplete"`
}

// NewGtmGeomap registers a new resource with the given unique name, arguments, and options.
func NewGtmGeomap(ctx *pulumi.Context,
	name string, args *GtmGeomapArgs, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmGeomap:GtmGeomap"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GtmGeomap
	err := ctx.RegisterResource("akamai:index/gtmGeomap:GtmGeomap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmGeomap gets an existing GtmGeomap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmGeomap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmGeomapState, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	var resource GtmGeomap
	err := ctx.ReadResource("akamai:index/gtmGeomap:GtmGeomap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmGeomap resources.
type gtmGeomapState struct {
	Assignments       []GtmGeomapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            *string                     `pulumi:"domain"`
	Name              *string                     `pulumi:"name"`
	WaitOnComplete    *bool                       `pulumi:"waitOnComplete"`
}

type GtmGeomapState struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterPtrInput
	Domain            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapState)(nil)).Elem()
}

type gtmGeomapArgs struct {
	Assignments       []GtmGeomapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            string                     `pulumi:"domain"`
	Name              *string                    `pulumi:"name"`
	WaitOnComplete    *bool                      `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmGeomap resource.
type GtmGeomapArgs struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterInput
	Domain            pulumi.StringInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapArgs)(nil)).Elem()
}

type GtmGeomapInput interface {
	pulumi.Input

	ToGtmGeomapOutput() GtmGeomapOutput
	ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput
}

func (*GtmGeomap) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmGeomap)(nil)).Elem()
}

func (i *GtmGeomap) ToGtmGeomapOutput() GtmGeomapOutput {
	return i.ToGtmGeomapOutputWithContext(context.Background())
}

func (i *GtmGeomap) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapOutput)
}

// GtmGeomapArrayInput is an input type that accepts GtmGeomapArray and GtmGeomapArrayOutput values.
// You can construct a concrete instance of `GtmGeomapArrayInput` via:
//
//	GtmGeomapArray{ GtmGeomapArgs{...} }
type GtmGeomapArrayInput interface {
	pulumi.Input

	ToGtmGeomapArrayOutput() GtmGeomapArrayOutput
	ToGtmGeomapArrayOutputWithContext(context.Context) GtmGeomapArrayOutput
}

type GtmGeomapArray []GtmGeomapInput

func (GtmGeomapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmGeomap)(nil)).Elem()
}

func (i GtmGeomapArray) ToGtmGeomapArrayOutput() GtmGeomapArrayOutput {
	return i.ToGtmGeomapArrayOutputWithContext(context.Background())
}

func (i GtmGeomapArray) ToGtmGeomapArrayOutputWithContext(ctx context.Context) GtmGeomapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapArrayOutput)
}

// GtmGeomapMapInput is an input type that accepts GtmGeomapMap and GtmGeomapMapOutput values.
// You can construct a concrete instance of `GtmGeomapMapInput` via:
//
//	GtmGeomapMap{ "key": GtmGeomapArgs{...} }
type GtmGeomapMapInput interface {
	pulumi.Input

	ToGtmGeomapMapOutput() GtmGeomapMapOutput
	ToGtmGeomapMapOutputWithContext(context.Context) GtmGeomapMapOutput
}

type GtmGeomapMap map[string]GtmGeomapInput

func (GtmGeomapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmGeomap)(nil)).Elem()
}

func (i GtmGeomapMap) ToGtmGeomapMapOutput() GtmGeomapMapOutput {
	return i.ToGtmGeomapMapOutputWithContext(context.Background())
}

func (i GtmGeomapMap) ToGtmGeomapMapOutputWithContext(ctx context.Context) GtmGeomapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapMapOutput)
}

type GtmGeomapOutput struct{ *pulumi.OutputState }

func (GtmGeomapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmGeomap)(nil)).Elem()
}

func (o GtmGeomapOutput) ToGtmGeomapOutput() GtmGeomapOutput {
	return o
}

func (o GtmGeomapOutput) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return o
}

func (o GtmGeomapOutput) Assignments() GtmGeomapAssignmentArrayOutput {
	return o.ApplyT(func(v *GtmGeomap) GtmGeomapAssignmentArrayOutput { return v.Assignments }).(GtmGeomapAssignmentArrayOutput)
}

func (o GtmGeomapOutput) DefaultDatacenter() GtmGeomapDefaultDatacenterOutput {
	return o.ApplyT(func(v *GtmGeomap) GtmGeomapDefaultDatacenterOutput { return v.DefaultDatacenter }).(GtmGeomapDefaultDatacenterOutput)
}

func (o GtmGeomapOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmGeomap) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

func (o GtmGeomapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmGeomap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GtmGeomapOutput) WaitOnComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmGeomap) pulumi.BoolPtrOutput { return v.WaitOnComplete }).(pulumi.BoolPtrOutput)
}

type GtmGeomapArrayOutput struct{ *pulumi.OutputState }

func (GtmGeomapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmGeomap)(nil)).Elem()
}

func (o GtmGeomapArrayOutput) ToGtmGeomapArrayOutput() GtmGeomapArrayOutput {
	return o
}

func (o GtmGeomapArrayOutput) ToGtmGeomapArrayOutputWithContext(ctx context.Context) GtmGeomapArrayOutput {
	return o
}

func (o GtmGeomapArrayOutput) Index(i pulumi.IntInput) GtmGeomapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmGeomap {
		return vs[0].([]*GtmGeomap)[vs[1].(int)]
	}).(GtmGeomapOutput)
}

type GtmGeomapMapOutput struct{ *pulumi.OutputState }

func (GtmGeomapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmGeomap)(nil)).Elem()
}

func (o GtmGeomapMapOutput) ToGtmGeomapMapOutput() GtmGeomapMapOutput {
	return o
}

func (o GtmGeomapMapOutput) ToGtmGeomapMapOutputWithContext(ctx context.Context) GtmGeomapMapOutput {
	return o
}

func (o GtmGeomapMapOutput) MapIndex(k pulumi.StringInput) GtmGeomapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmGeomap {
		return vs[0].(map[string]*GtmGeomap)[vs[1].(string)]
	}).(GtmGeomapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapInput)(nil)).Elem(), &GtmGeomap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapArrayInput)(nil)).Elem(), GtmGeomapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapMapInput)(nil)).Elem(), GtmGeomapMap{})
	pulumi.RegisterOutputType(GtmGeomapOutput{})
	pulumi.RegisterOutputType(GtmGeomapArrayOutput{})
	pulumi.RegisterOutputType(GtmGeomapMapOutput{})
}
