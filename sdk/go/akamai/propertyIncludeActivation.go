// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `PropertyIncludeActivation` resource to activate your include and make available to a property.
//
// ## Basic usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akamai.NewPropertyIncludeActivation(ctx, "myExample", &akamai.PropertyIncludeActivationArgs{
//				ContractId: pulumi.String("C-0N7RAC7"),
//				GroupId:    pulumi.String("X112233"),
//				IncludeId:  pulumi.String("inc_X12345"),
//				Network:    pulumi.String("STAGING"),
//				NotifyEmails: pulumi.StringArray{
//					pulumi.String("example@example.com"),
//					pulumi.String("example2@example.com"),
//				},
//				Version: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// This resource returns this attribute:
//
// * `validations` -Â The validation information in JSON format.
type PropertyIncludeActivation struct {
	pulumi.CustomResourceState

	// (Optional) Automatically acknowledge all rule warnings for activation and continue.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrOutput `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network
	ComplianceRecord PropertyIncludeActivationComplianceRecordPtrOutput `pulumi:"complianceRecord"`
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// (Required) An include's unique ID with the optional `inc_` prefix.
	IncludeId pulumi.StringOutput `pulumi:"includeId"`
	// (Required) The network for which the activation will be performed.
	Network pulumi.StringOutput `pulumi:"network"`
	// (Optional) A log message assigned to the activation request.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// (Required) The list of email addresses to notify when the activation status changes.
	NotifyEmails pulumi.StringArrayOutput `pulumi:"notifyEmails"`
	// The validation information in JSON format
	Validations pulumi.StringOutput `pulumi:"validations"`
	// (Required) The version of the include you want to activate.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPropertyIncludeActivation registers a new resource with the given unique name, arguments, and options.
func NewPropertyIncludeActivation(ctx *pulumi.Context,
	name string, args *PropertyIncludeActivationArgs, opts ...pulumi.ResourceOption) (*PropertyIncludeActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.IncludeId == nil {
		return nil, errors.New("invalid value for required argument 'IncludeId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.NotifyEmails == nil {
		return nil, errors.New("invalid value for required argument 'NotifyEmails'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource PropertyIncludeActivation
	err := ctx.RegisterResource("akamai:index/propertyIncludeActivation:PropertyIncludeActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyIncludeActivation gets an existing PropertyIncludeActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyIncludeActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyIncludeActivationState, opts ...pulumi.ResourceOption) (*PropertyIncludeActivation, error) {
	var resource PropertyIncludeActivation
	err := ctx.ReadResource("akamai:index/propertyIncludeActivation:PropertyIncludeActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyIncludeActivation resources.
type propertyIncludeActivationState struct {
	// (Optional) Automatically acknowledge all rule warnings for activation and continue.
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network
	ComplianceRecord *PropertyIncludeActivationComplianceRecord `pulumi:"complianceRecord"`
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId *string `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId *string `pulumi:"groupId"`
	// (Required) An include's unique ID with the optional `inc_` prefix.
	IncludeId *string `pulumi:"includeId"`
	// (Required) The network for which the activation will be performed.
	Network *string `pulumi:"network"`
	// (Optional) A log message assigned to the activation request.
	Note *string `pulumi:"note"`
	// (Required) The list of email addresses to notify when the activation status changes.
	NotifyEmails []string `pulumi:"notifyEmails"`
	// The validation information in JSON format
	Validations *string `pulumi:"validations"`
	// (Required) The version of the include you want to activate.
	Version *int `pulumi:"version"`
}

type PropertyIncludeActivationState struct {
	// (Optional) Automatically acknowledge all rule warnings for activation and continue.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// Provides an audit record when activating on a production network
	ComplianceRecord PropertyIncludeActivationComplianceRecordPtrInput
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringPtrInput
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringPtrInput
	// (Required) An include's unique ID with the optional `inc_` prefix.
	IncludeId pulumi.StringPtrInput
	// (Required) The network for which the activation will be performed.
	Network pulumi.StringPtrInput
	// (Optional) A log message assigned to the activation request.
	Note pulumi.StringPtrInput
	// (Required) The list of email addresses to notify when the activation status changes.
	NotifyEmails pulumi.StringArrayInput
	// The validation information in JSON format
	Validations pulumi.StringPtrInput
	// (Required) The version of the include you want to activate.
	Version pulumi.IntPtrInput
}

func (PropertyIncludeActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyIncludeActivationState)(nil)).Elem()
}

type propertyIncludeActivationArgs struct {
	// (Optional) Automatically acknowledge all rule warnings for activation and continue.
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network
	ComplianceRecord *PropertyIncludeActivationComplianceRecord `pulumi:"complianceRecord"`
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId string `pulumi:"contractId"`
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId string `pulumi:"groupId"`
	// (Required) An include's unique ID with the optional `inc_` prefix.
	IncludeId string `pulumi:"includeId"`
	// (Required) The network for which the activation will be performed.
	Network string `pulumi:"network"`
	// (Optional) A log message assigned to the activation request.
	Note *string `pulumi:"note"`
	// (Required) The list of email addresses to notify when the activation status changes.
	NotifyEmails []string `pulumi:"notifyEmails"`
	// (Required) The version of the include you want to activate.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a PropertyIncludeActivation resource.
type PropertyIncludeActivationArgs struct {
	// (Optional) Automatically acknowledge all rule warnings for activation and continue.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// Provides an audit record when activating on a production network
	ComplianceRecord PropertyIncludeActivationComplianceRecordPtrInput
	// (Required) A contract's unique ID, including the optional `ctr_` prefix.
	ContractId pulumi.StringInput
	// (Required) A group's unique ID, including the optional `grp_` prefix.
	GroupId pulumi.StringInput
	// (Required) An include's unique ID with the optional `inc_` prefix.
	IncludeId pulumi.StringInput
	// (Required) The network for which the activation will be performed.
	Network pulumi.StringInput
	// (Optional) A log message assigned to the activation request.
	Note pulumi.StringPtrInput
	// (Required) The list of email addresses to notify when the activation status changes.
	NotifyEmails pulumi.StringArrayInput
	// (Required) The version of the include you want to activate.
	Version pulumi.IntInput
}

func (PropertyIncludeActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyIncludeActivationArgs)(nil)).Elem()
}

type PropertyIncludeActivationInput interface {
	pulumi.Input

	ToPropertyIncludeActivationOutput() PropertyIncludeActivationOutput
	ToPropertyIncludeActivationOutputWithContext(ctx context.Context) PropertyIncludeActivationOutput
}

func (*PropertyIncludeActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyIncludeActivation)(nil)).Elem()
}

func (i *PropertyIncludeActivation) ToPropertyIncludeActivationOutput() PropertyIncludeActivationOutput {
	return i.ToPropertyIncludeActivationOutputWithContext(context.Background())
}

func (i *PropertyIncludeActivation) ToPropertyIncludeActivationOutputWithContext(ctx context.Context) PropertyIncludeActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeActivationOutput)
}

// PropertyIncludeActivationArrayInput is an input type that accepts PropertyIncludeActivationArray and PropertyIncludeActivationArrayOutput values.
// You can construct a concrete instance of `PropertyIncludeActivationArrayInput` via:
//
//	PropertyIncludeActivationArray{ PropertyIncludeActivationArgs{...} }
type PropertyIncludeActivationArrayInput interface {
	pulumi.Input

	ToPropertyIncludeActivationArrayOutput() PropertyIncludeActivationArrayOutput
	ToPropertyIncludeActivationArrayOutputWithContext(context.Context) PropertyIncludeActivationArrayOutput
}

type PropertyIncludeActivationArray []PropertyIncludeActivationInput

func (PropertyIncludeActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyIncludeActivation)(nil)).Elem()
}

func (i PropertyIncludeActivationArray) ToPropertyIncludeActivationArrayOutput() PropertyIncludeActivationArrayOutput {
	return i.ToPropertyIncludeActivationArrayOutputWithContext(context.Background())
}

func (i PropertyIncludeActivationArray) ToPropertyIncludeActivationArrayOutputWithContext(ctx context.Context) PropertyIncludeActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeActivationArrayOutput)
}

// PropertyIncludeActivationMapInput is an input type that accepts PropertyIncludeActivationMap and PropertyIncludeActivationMapOutput values.
// You can construct a concrete instance of `PropertyIncludeActivationMapInput` via:
//
//	PropertyIncludeActivationMap{ "key": PropertyIncludeActivationArgs{...} }
type PropertyIncludeActivationMapInput interface {
	pulumi.Input

	ToPropertyIncludeActivationMapOutput() PropertyIncludeActivationMapOutput
	ToPropertyIncludeActivationMapOutputWithContext(context.Context) PropertyIncludeActivationMapOutput
}

type PropertyIncludeActivationMap map[string]PropertyIncludeActivationInput

func (PropertyIncludeActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyIncludeActivation)(nil)).Elem()
}

func (i PropertyIncludeActivationMap) ToPropertyIncludeActivationMapOutput() PropertyIncludeActivationMapOutput {
	return i.ToPropertyIncludeActivationMapOutputWithContext(context.Background())
}

func (i PropertyIncludeActivationMap) ToPropertyIncludeActivationMapOutputWithContext(ctx context.Context) PropertyIncludeActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyIncludeActivationMapOutput)
}

type PropertyIncludeActivationOutput struct{ *pulumi.OutputState }

func (PropertyIncludeActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyIncludeActivation)(nil)).Elem()
}

func (o PropertyIncludeActivationOutput) ToPropertyIncludeActivationOutput() PropertyIncludeActivationOutput {
	return o
}

func (o PropertyIncludeActivationOutput) ToPropertyIncludeActivationOutputWithContext(ctx context.Context) PropertyIncludeActivationOutput {
	return o
}

// (Optional) Automatically acknowledge all rule warnings for activation and continue.
func (o PropertyIncludeActivationOutput) AutoAcknowledgeRuleWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.BoolPtrOutput { return v.AutoAcknowledgeRuleWarnings }).(pulumi.BoolPtrOutput)
}

// Provides an audit record when activating on a production network
func (o PropertyIncludeActivationOutput) ComplianceRecord() PropertyIncludeActivationComplianceRecordPtrOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) PropertyIncludeActivationComplianceRecordPtrOutput {
		return v.ComplianceRecord
	}).(PropertyIncludeActivationComplianceRecordPtrOutput)
}

// (Required) A contract's unique ID, including the optional `ctr_` prefix.
func (o PropertyIncludeActivationOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// (Required) A group's unique ID, including the optional `grp_` prefix.
func (o PropertyIncludeActivationOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// (Required) An include's unique ID with the optional `inc_` prefix.
func (o PropertyIncludeActivationOutput) IncludeId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringOutput { return v.IncludeId }).(pulumi.StringOutput)
}

// (Required) The network for which the activation will be performed.
func (o PropertyIncludeActivationOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// (Optional) A log message assigned to the activation request.
func (o PropertyIncludeActivationOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// (Required) The list of email addresses to notify when the activation status changes.
func (o PropertyIncludeActivationOutput) NotifyEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringArrayOutput { return v.NotifyEmails }).(pulumi.StringArrayOutput)
}

// The validation information in JSON format
func (o PropertyIncludeActivationOutput) Validations() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.StringOutput { return v.Validations }).(pulumi.StringOutput)
}

// (Required) The version of the include you want to activate.
func (o PropertyIncludeActivationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PropertyIncludeActivation) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PropertyIncludeActivationArrayOutput struct{ *pulumi.OutputState }

func (PropertyIncludeActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyIncludeActivation)(nil)).Elem()
}

func (o PropertyIncludeActivationArrayOutput) ToPropertyIncludeActivationArrayOutput() PropertyIncludeActivationArrayOutput {
	return o
}

func (o PropertyIncludeActivationArrayOutput) ToPropertyIncludeActivationArrayOutputWithContext(ctx context.Context) PropertyIncludeActivationArrayOutput {
	return o
}

func (o PropertyIncludeActivationArrayOutput) Index(i pulumi.IntInput) PropertyIncludeActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyIncludeActivation {
		return vs[0].([]*PropertyIncludeActivation)[vs[1].(int)]
	}).(PropertyIncludeActivationOutput)
}

type PropertyIncludeActivationMapOutput struct{ *pulumi.OutputState }

func (PropertyIncludeActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyIncludeActivation)(nil)).Elem()
}

func (o PropertyIncludeActivationMapOutput) ToPropertyIncludeActivationMapOutput() PropertyIncludeActivationMapOutput {
	return o
}

func (o PropertyIncludeActivationMapOutput) ToPropertyIncludeActivationMapOutputWithContext(ctx context.Context) PropertyIncludeActivationMapOutput {
	return o
}

func (o PropertyIncludeActivationMapOutput) MapIndex(k pulumi.StringInput) PropertyIncludeActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyIncludeActivation {
		return vs[0].(map[string]*PropertyIncludeActivation)[vs[1].(string)]
	}).(PropertyIncludeActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeActivationInput)(nil)).Elem(), &PropertyIncludeActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeActivationArrayInput)(nil)).Elem(), PropertyIncludeActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyIncludeActivationMapInput)(nil)).Elem(), PropertyIncludeActivationMap{})
	pulumi.RegisterOutputType(PropertyIncludeActivationOutput{})
	pulumi.RegisterOutputType(PropertyIncludeActivationArrayOutput{})
	pulumi.RegisterOutputType(PropertyIncludeActivationMapOutput{})
}
