// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Scopes**: Security configuration; hostname
//
// Returns information about any other configuration versions that contain a hostname found in the current configuration version. The returned information is described in the [List hostname overlaps](https://developer.akamai.com/api/cloud_security/application_security/v1.html#gethostnamecoverageoverlapping) section of the Application Security API.
//
// **Related API Endpoint**:[/appsec/v1/configs/{configId}/versions/{versionNumber}/hostname-coverage/overlapping](https://techdocs.akamai.com/application-security/reference/get-hostname-coverage-overlapping)
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v3/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &GetAppSecConfigurationArgs{
// 			Name: pulumi.StringRef("Documentation"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.GetAppSecHostnameCoverageOverlapping(ctx, &GetAppSecHostnameCoverageOverlappingArgs{
// 			ConfigId: configuration.ConfigId,
// 			Hostname: "documentation.akamai.com",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Output Options
//
// The following options can be used to determine the information returned, and how that returned information is formatted:
//
// - `json`. JSON-formatted list of the overlap information.
// - `outputText`. Tabular report of the overlap information.
func GetAppSecHostnameCoverageOverlapping(ctx *pulumi.Context, args *GetAppSecHostnameCoverageOverlappingArgs, opts ...pulumi.InvokeOption) (*GetAppSecHostnameCoverageOverlappingResult, error) {
	var rv GetAppSecHostnameCoverageOverlappingResult
	err := ctx.Invoke("akamai:index/getAppSecHostnameCoverageOverlapping:getAppSecHostnameCoverageOverlapping", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAppSecHostnameCoverageOverlapping.
type GetAppSecHostnameCoverageOverlappingArgs struct {
	// . Unique identifier of the security configuration you want to return information for.
	ConfigId int `pulumi:"configId"`
	// . Name of the host you want to return information for.
	Hostname string `pulumi:"hostname"`
}

// A collection of values returned by getAppSecHostnameCoverageOverlapping.
type GetAppSecHostnameCoverageOverlappingResult struct {
	ConfigId int    `pulumi:"configId"`
	Hostname string `pulumi:"hostname"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Json       string `pulumi:"json"`
	OutputText string `pulumi:"outputText"`
}

func GetAppSecHostnameCoverageOverlappingOutput(ctx *pulumi.Context, args GetAppSecHostnameCoverageOverlappingOutputArgs, opts ...pulumi.InvokeOption) GetAppSecHostnameCoverageOverlappingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAppSecHostnameCoverageOverlappingResult, error) {
			args := v.(GetAppSecHostnameCoverageOverlappingArgs)
			r, err := GetAppSecHostnameCoverageOverlapping(ctx, &args, opts...)
			var s GetAppSecHostnameCoverageOverlappingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAppSecHostnameCoverageOverlappingResultOutput)
}

// A collection of arguments for invoking getAppSecHostnameCoverageOverlapping.
type GetAppSecHostnameCoverageOverlappingOutputArgs struct {
	// . Unique identifier of the security configuration you want to return information for.
	ConfigId pulumi.IntInput `pulumi:"configId"`
	// . Name of the host you want to return information for.
	Hostname pulumi.StringInput `pulumi:"hostname"`
}

func (GetAppSecHostnameCoverageOverlappingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSecHostnameCoverageOverlappingArgs)(nil)).Elem()
}

// A collection of values returned by getAppSecHostnameCoverageOverlapping.
type GetAppSecHostnameCoverageOverlappingResultOutput struct{ *pulumi.OutputState }

func (GetAppSecHostnameCoverageOverlappingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAppSecHostnameCoverageOverlappingResult)(nil)).Elem()
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) ToGetAppSecHostnameCoverageOverlappingResultOutput() GetAppSecHostnameCoverageOverlappingResultOutput {
	return o
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) ToGetAppSecHostnameCoverageOverlappingResultOutputWithContext(ctx context.Context) GetAppSecHostnameCoverageOverlappingResultOutput {
	return o
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v GetAppSecHostnameCoverageOverlappingResult) int { return v.ConfigId }).(pulumi.IntOutput)
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSecHostnameCoverageOverlappingResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAppSecHostnameCoverageOverlappingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSecHostnameCoverageOverlappingResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSecHostnameCoverageOverlappingResult) string { return v.Json }).(pulumi.StringOutput)
}

func (o GetAppSecHostnameCoverageOverlappingResultOutput) OutputText() pulumi.StringOutput {
	return o.ApplyT(func(v GetAppSecHostnameCoverageOverlappingResult) string { return v.OutputText }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAppSecHostnameCoverageOverlappingResultOutput{})
}
