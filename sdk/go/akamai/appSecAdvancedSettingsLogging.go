// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Scopes**: Security configuration; security policy
//
// Enables, disables, or updates HTTP header logging settings.
// By default, this operation applies at the configuration level, which means that it applies to all the security policies within that configuration.
// However, by using the `securityPolicyId` parameter you can specify custom settings for an individual security policy.
//
// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/advanced-settings/logging](https://techdocs.akamai.com/application-security/reference/put-policies-logging)
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
//				Name: pulumi.StringRef("Documentation"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewAppSecAdvancedSettingsLogging(ctx, "logging", &akamai.AppSecAdvancedSettingsLoggingArgs{
//				ConfigId: *pulumi.Int(configuration.ConfigId),
//				Logging:  readFileOrPanic(fmt.Sprintf("%v/logging.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewAppSecAdvancedSettingsLogging(ctx, "policyLogging", &akamai.AppSecAdvancedSettingsLoggingArgs{
//				ConfigId:         *pulumi.Int(configuration.ConfigId),
//				SecurityPolicyId: pulumi.String("gms1_134637"),
//				Logging:          readFileOrPanic(fmt.Sprintf("%v/logging.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AppSecAdvancedSettingsLogging struct {
	pulumi.CustomResourceState

	// . Unique identifier of the security configuration containing the logging settings being modified.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// . Path to a JSON file containing the logging settings to be configured.
	Logging pulumi.StringOutput `pulumi:"logging"`
	// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
	SecurityPolicyId pulumi.StringPtrOutput `pulumi:"securityPolicyId"`
}

// NewAppSecAdvancedSettingsLogging registers a new resource with the given unique name, arguments, and options.
func NewAppSecAdvancedSettingsLogging(ctx *pulumi.Context,
	name string, args *AppSecAdvancedSettingsLoggingArgs, opts ...pulumi.ResourceOption) (*AppSecAdvancedSettingsLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Logging == nil {
		return nil, errors.New("invalid value for required argument 'Logging'")
	}
	var resource AppSecAdvancedSettingsLogging
	err := ctx.RegisterResource("akamai:index/appSecAdvancedSettingsLogging:AppSecAdvancedSettingsLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecAdvancedSettingsLogging gets an existing AppSecAdvancedSettingsLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecAdvancedSettingsLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecAdvancedSettingsLoggingState, opts ...pulumi.ResourceOption) (*AppSecAdvancedSettingsLogging, error) {
	var resource AppSecAdvancedSettingsLogging
	err := ctx.ReadResource("akamai:index/appSecAdvancedSettingsLogging:AppSecAdvancedSettingsLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecAdvancedSettingsLogging resources.
type appSecAdvancedSettingsLoggingState struct {
	// . Unique identifier of the security configuration containing the logging settings being modified.
	ConfigId *int `pulumi:"configId"`
	// . Path to a JSON file containing the logging settings to be configured.
	Logging *string `pulumi:"logging"`
	// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecAdvancedSettingsLoggingState struct {
	// . Unique identifier of the security configuration containing the logging settings being modified.
	ConfigId pulumi.IntPtrInput
	// . Path to a JSON file containing the logging settings to be configured.
	Logging pulumi.StringPtrInput
	// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAdvancedSettingsLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAdvancedSettingsLoggingState)(nil)).Elem()
}

type appSecAdvancedSettingsLoggingArgs struct {
	// . Unique identifier of the security configuration containing the logging settings being modified.
	ConfigId int `pulumi:"configId"`
	// . Path to a JSON file containing the logging settings to be configured.
	Logging string `pulumi:"logging"`
	// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecAdvancedSettingsLogging resource.
type AppSecAdvancedSettingsLoggingArgs struct {
	// . Unique identifier of the security configuration containing the logging settings being modified.
	ConfigId pulumi.IntInput
	// . Path to a JSON file containing the logging settings to be configured.
	Logging pulumi.StringInput
	// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAdvancedSettingsLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAdvancedSettingsLoggingArgs)(nil)).Elem()
}

type AppSecAdvancedSettingsLoggingInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsLoggingOutput() AppSecAdvancedSettingsLoggingOutput
	ToAppSecAdvancedSettingsLoggingOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingOutput
}

func (*AppSecAdvancedSettingsLogging) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (i *AppSecAdvancedSettingsLogging) ToAppSecAdvancedSettingsLoggingOutput() AppSecAdvancedSettingsLoggingOutput {
	return i.ToAppSecAdvancedSettingsLoggingOutputWithContext(context.Background())
}

func (i *AppSecAdvancedSettingsLogging) ToAppSecAdvancedSettingsLoggingOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsLoggingOutput)
}

// AppSecAdvancedSettingsLoggingArrayInput is an input type that accepts AppSecAdvancedSettingsLoggingArray and AppSecAdvancedSettingsLoggingArrayOutput values.
// You can construct a concrete instance of `AppSecAdvancedSettingsLoggingArrayInput` via:
//
//	AppSecAdvancedSettingsLoggingArray{ AppSecAdvancedSettingsLoggingArgs{...} }
type AppSecAdvancedSettingsLoggingArrayInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsLoggingArrayOutput() AppSecAdvancedSettingsLoggingArrayOutput
	ToAppSecAdvancedSettingsLoggingArrayOutputWithContext(context.Context) AppSecAdvancedSettingsLoggingArrayOutput
}

type AppSecAdvancedSettingsLoggingArray []AppSecAdvancedSettingsLoggingInput

func (AppSecAdvancedSettingsLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (i AppSecAdvancedSettingsLoggingArray) ToAppSecAdvancedSettingsLoggingArrayOutput() AppSecAdvancedSettingsLoggingArrayOutput {
	return i.ToAppSecAdvancedSettingsLoggingArrayOutputWithContext(context.Background())
}

func (i AppSecAdvancedSettingsLoggingArray) ToAppSecAdvancedSettingsLoggingArrayOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsLoggingArrayOutput)
}

// AppSecAdvancedSettingsLoggingMapInput is an input type that accepts AppSecAdvancedSettingsLoggingMap and AppSecAdvancedSettingsLoggingMapOutput values.
// You can construct a concrete instance of `AppSecAdvancedSettingsLoggingMapInput` via:
//
//	AppSecAdvancedSettingsLoggingMap{ "key": AppSecAdvancedSettingsLoggingArgs{...} }
type AppSecAdvancedSettingsLoggingMapInput interface {
	pulumi.Input

	ToAppSecAdvancedSettingsLoggingMapOutput() AppSecAdvancedSettingsLoggingMapOutput
	ToAppSecAdvancedSettingsLoggingMapOutputWithContext(context.Context) AppSecAdvancedSettingsLoggingMapOutput
}

type AppSecAdvancedSettingsLoggingMap map[string]AppSecAdvancedSettingsLoggingInput

func (AppSecAdvancedSettingsLoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (i AppSecAdvancedSettingsLoggingMap) ToAppSecAdvancedSettingsLoggingMapOutput() AppSecAdvancedSettingsLoggingMapOutput {
	return i.ToAppSecAdvancedSettingsLoggingMapOutputWithContext(context.Background())
}

func (i AppSecAdvancedSettingsLoggingMap) ToAppSecAdvancedSettingsLoggingMapOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAdvancedSettingsLoggingMapOutput)
}

type AppSecAdvancedSettingsLoggingOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (o AppSecAdvancedSettingsLoggingOutput) ToAppSecAdvancedSettingsLoggingOutput() AppSecAdvancedSettingsLoggingOutput {
	return o
}

func (o AppSecAdvancedSettingsLoggingOutput) ToAppSecAdvancedSettingsLoggingOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingOutput {
	return o
}

// . Unique identifier of the security configuration containing the logging settings being modified.
func (o AppSecAdvancedSettingsLoggingOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsLogging) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// . Path to a JSON file containing the logging settings to be configured.
func (o AppSecAdvancedSettingsLoggingOutput) Logging() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsLogging) pulumi.StringOutput { return v.Logging }).(pulumi.StringOutput)
}

// . Unique identifier of the security policies whose settings are being modified. If not included, the logging settings are modified at the configuration scope and, as a result, apply to all the security policies associated with the configuration.
func (o AppSecAdvancedSettingsLoggingOutput) SecurityPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSecAdvancedSettingsLogging) pulumi.StringPtrOutput { return v.SecurityPolicyId }).(pulumi.StringPtrOutput)
}

type AppSecAdvancedSettingsLoggingArrayOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (o AppSecAdvancedSettingsLoggingArrayOutput) ToAppSecAdvancedSettingsLoggingArrayOutput() AppSecAdvancedSettingsLoggingArrayOutput {
	return o
}

func (o AppSecAdvancedSettingsLoggingArrayOutput) ToAppSecAdvancedSettingsLoggingArrayOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingArrayOutput {
	return o
}

func (o AppSecAdvancedSettingsLoggingArrayOutput) Index(i pulumi.IntInput) AppSecAdvancedSettingsLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecAdvancedSettingsLogging {
		return vs[0].([]*AppSecAdvancedSettingsLogging)[vs[1].(int)]
	}).(AppSecAdvancedSettingsLoggingOutput)
}

type AppSecAdvancedSettingsLoggingMapOutput struct{ *pulumi.OutputState }

func (AppSecAdvancedSettingsLoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAdvancedSettingsLogging)(nil)).Elem()
}

func (o AppSecAdvancedSettingsLoggingMapOutput) ToAppSecAdvancedSettingsLoggingMapOutput() AppSecAdvancedSettingsLoggingMapOutput {
	return o
}

func (o AppSecAdvancedSettingsLoggingMapOutput) ToAppSecAdvancedSettingsLoggingMapOutputWithContext(ctx context.Context) AppSecAdvancedSettingsLoggingMapOutput {
	return o
}

func (o AppSecAdvancedSettingsLoggingMapOutput) MapIndex(k pulumi.StringInput) AppSecAdvancedSettingsLoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecAdvancedSettingsLogging {
		return vs[0].(map[string]*AppSecAdvancedSettingsLogging)[vs[1].(string)]
	}).(AppSecAdvancedSettingsLoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsLoggingInput)(nil)).Elem(), &AppSecAdvancedSettingsLogging{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsLoggingArrayInput)(nil)).Elem(), AppSecAdvancedSettingsLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAdvancedSettingsLoggingMapInput)(nil)).Elem(), AppSecAdvancedSettingsLoggingMap{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsLoggingOutput{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsLoggingArrayOutput{})
	pulumi.RegisterOutputType(AppSecAdvancedSettingsLoggingMapOutput{})
}
