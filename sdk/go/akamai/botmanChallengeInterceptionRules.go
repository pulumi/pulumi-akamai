// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanChallengeInterceptionRules struct {
	pulumi.CustomResourceState

	ChallengeInterceptionRules pulumi.StringOutput `pulumi:"challengeInterceptionRules"`
	ConfigId                   pulumi.IntOutput    `pulumi:"configId"`
}

// NewBotmanChallengeInterceptionRules registers a new resource with the given unique name, arguments, and options.
func NewBotmanChallengeInterceptionRules(ctx *pulumi.Context,
	name string, args *BotmanChallengeInterceptionRulesArgs, opts ...pulumi.ResourceOption) (*BotmanChallengeInterceptionRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeInterceptionRules == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeInterceptionRules'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotmanChallengeInterceptionRules
	err := ctx.RegisterResource("akamai:index/botmanChallengeInterceptionRules:BotmanChallengeInterceptionRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanChallengeInterceptionRules gets an existing BotmanChallengeInterceptionRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanChallengeInterceptionRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanChallengeInterceptionRulesState, opts ...pulumi.ResourceOption) (*BotmanChallengeInterceptionRules, error) {
	var resource BotmanChallengeInterceptionRules
	err := ctx.ReadResource("akamai:index/botmanChallengeInterceptionRules:BotmanChallengeInterceptionRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanChallengeInterceptionRules resources.
type botmanChallengeInterceptionRulesState struct {
	ChallengeInterceptionRules *string `pulumi:"challengeInterceptionRules"`
	ConfigId                   *int    `pulumi:"configId"`
}

type BotmanChallengeInterceptionRulesState struct {
	ChallengeInterceptionRules pulumi.StringPtrInput
	ConfigId                   pulumi.IntPtrInput
}

func (BotmanChallengeInterceptionRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeInterceptionRulesState)(nil)).Elem()
}

type botmanChallengeInterceptionRulesArgs struct {
	ChallengeInterceptionRules string `pulumi:"challengeInterceptionRules"`
	ConfigId                   int    `pulumi:"configId"`
}

// The set of arguments for constructing a BotmanChallengeInterceptionRules resource.
type BotmanChallengeInterceptionRulesArgs struct {
	ChallengeInterceptionRules pulumi.StringInput
	ConfigId                   pulumi.IntInput
}

func (BotmanChallengeInterceptionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanChallengeInterceptionRulesArgs)(nil)).Elem()
}

type BotmanChallengeInterceptionRulesInput interface {
	pulumi.Input

	ToBotmanChallengeInterceptionRulesOutput() BotmanChallengeInterceptionRulesOutput
	ToBotmanChallengeInterceptionRulesOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesOutput
}

func (*BotmanChallengeInterceptionRules) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (i *BotmanChallengeInterceptionRules) ToBotmanChallengeInterceptionRulesOutput() BotmanChallengeInterceptionRulesOutput {
	return i.ToBotmanChallengeInterceptionRulesOutputWithContext(context.Background())
}

func (i *BotmanChallengeInterceptionRules) ToBotmanChallengeInterceptionRulesOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInterceptionRulesOutput)
}

// BotmanChallengeInterceptionRulesArrayInput is an input type that accepts BotmanChallengeInterceptionRulesArray and BotmanChallengeInterceptionRulesArrayOutput values.
// You can construct a concrete instance of `BotmanChallengeInterceptionRulesArrayInput` via:
//
//	BotmanChallengeInterceptionRulesArray{ BotmanChallengeInterceptionRulesArgs{...} }
type BotmanChallengeInterceptionRulesArrayInput interface {
	pulumi.Input

	ToBotmanChallengeInterceptionRulesArrayOutput() BotmanChallengeInterceptionRulesArrayOutput
	ToBotmanChallengeInterceptionRulesArrayOutputWithContext(context.Context) BotmanChallengeInterceptionRulesArrayOutput
}

type BotmanChallengeInterceptionRulesArray []BotmanChallengeInterceptionRulesInput

func (BotmanChallengeInterceptionRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (i BotmanChallengeInterceptionRulesArray) ToBotmanChallengeInterceptionRulesArrayOutput() BotmanChallengeInterceptionRulesArrayOutput {
	return i.ToBotmanChallengeInterceptionRulesArrayOutputWithContext(context.Background())
}

func (i BotmanChallengeInterceptionRulesArray) ToBotmanChallengeInterceptionRulesArrayOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInterceptionRulesArrayOutput)
}

// BotmanChallengeInterceptionRulesMapInput is an input type that accepts BotmanChallengeInterceptionRulesMap and BotmanChallengeInterceptionRulesMapOutput values.
// You can construct a concrete instance of `BotmanChallengeInterceptionRulesMapInput` via:
//
//	BotmanChallengeInterceptionRulesMap{ "key": BotmanChallengeInterceptionRulesArgs{...} }
type BotmanChallengeInterceptionRulesMapInput interface {
	pulumi.Input

	ToBotmanChallengeInterceptionRulesMapOutput() BotmanChallengeInterceptionRulesMapOutput
	ToBotmanChallengeInterceptionRulesMapOutputWithContext(context.Context) BotmanChallengeInterceptionRulesMapOutput
}

type BotmanChallengeInterceptionRulesMap map[string]BotmanChallengeInterceptionRulesInput

func (BotmanChallengeInterceptionRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (i BotmanChallengeInterceptionRulesMap) ToBotmanChallengeInterceptionRulesMapOutput() BotmanChallengeInterceptionRulesMapOutput {
	return i.ToBotmanChallengeInterceptionRulesMapOutputWithContext(context.Background())
}

func (i BotmanChallengeInterceptionRulesMap) ToBotmanChallengeInterceptionRulesMapOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanChallengeInterceptionRulesMapOutput)
}

type BotmanChallengeInterceptionRulesOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInterceptionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (o BotmanChallengeInterceptionRulesOutput) ToBotmanChallengeInterceptionRulesOutput() BotmanChallengeInterceptionRulesOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesOutput) ToBotmanChallengeInterceptionRulesOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesOutput) ChallengeInterceptionRules() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanChallengeInterceptionRules) pulumi.StringOutput { return v.ChallengeInterceptionRules }).(pulumi.StringOutput)
}

func (o BotmanChallengeInterceptionRulesOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanChallengeInterceptionRules) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

type BotmanChallengeInterceptionRulesArrayOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInterceptionRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (o BotmanChallengeInterceptionRulesArrayOutput) ToBotmanChallengeInterceptionRulesArrayOutput() BotmanChallengeInterceptionRulesArrayOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesArrayOutput) ToBotmanChallengeInterceptionRulesArrayOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesArrayOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesArrayOutput) Index(i pulumi.IntInput) BotmanChallengeInterceptionRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanChallengeInterceptionRules {
		return vs[0].([]*BotmanChallengeInterceptionRules)[vs[1].(int)]
	}).(BotmanChallengeInterceptionRulesOutput)
}

type BotmanChallengeInterceptionRulesMapOutput struct{ *pulumi.OutputState }

func (BotmanChallengeInterceptionRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanChallengeInterceptionRules)(nil)).Elem()
}

func (o BotmanChallengeInterceptionRulesMapOutput) ToBotmanChallengeInterceptionRulesMapOutput() BotmanChallengeInterceptionRulesMapOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesMapOutput) ToBotmanChallengeInterceptionRulesMapOutputWithContext(ctx context.Context) BotmanChallengeInterceptionRulesMapOutput {
	return o
}

func (o BotmanChallengeInterceptionRulesMapOutput) MapIndex(k pulumi.StringInput) BotmanChallengeInterceptionRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanChallengeInterceptionRules {
		return vs[0].(map[string]*BotmanChallengeInterceptionRules)[vs[1].(string)]
	}).(BotmanChallengeInterceptionRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInterceptionRulesInput)(nil)).Elem(), &BotmanChallengeInterceptionRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInterceptionRulesArrayInput)(nil)).Elem(), BotmanChallengeInterceptionRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanChallengeInterceptionRulesMapInput)(nil)).Elem(), BotmanChallengeInterceptionRulesMap{})
	pulumi.RegisterOutputType(BotmanChallengeInterceptionRulesOutput{})
	pulumi.RegisterOutputType(BotmanChallengeInterceptionRulesArrayOutput{})
	pulumi.RegisterOutputType(BotmanChallengeInterceptionRulesMapOutput{})
}
