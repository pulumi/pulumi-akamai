// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package properties

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `PropertyActivation` resource lets you activate a property version. An activation deploys the version to either the Akamai staging or production network. You can activate a specific version multiple times if you need to.
//
// Before activating on production, activate on staging first. This way you can detect any problems in staging before your changes progress to production.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			email := "user@example.org"
//			ruleFormat := "v2020-03-04"
//			example, err := akamai.NewProperty(ctx, "example", &akamai.PropertyArgs{
//				ProductId:  pulumi.String("prd_SPM"),
//				ContractId: pulumi.Any(_var.Contractid),
//				GroupId:    pulumi.Any(_var.Groupid),
//				Hostnames: akamai.PropertyHostnameArray{
//					Example.org:     "example.org.edgesuite.net",
//					Www.example.org: "example.org.edgesuite.net",
//					Sub.example.org: "sub.example.org.edgesuite.net",
//				},
//				RuleFormat: pulumi.String(ruleFormat),
//				Rules:      readFileOrPanic(fmt.Sprintf("%v/main.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			exampleStaging, err := akamai.NewPropertyActivation(ctx, "exampleStaging", &akamai.PropertyActivationArgs{
//				PropertyId: example.ID(),
//				Contacts: pulumi.StringArray{
//					pulumi.String(email),
//				},
//				Version: example.LatestVersion,
//				Note:    pulumi.String("Sample activation"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewPropertyActivation(ctx, "exampleProd", &akamai.PropertyActivationArgs{
//				PropertyId: example.ID(),
//				Network:    pulumi.String("PRODUCTION"),
//				Version:    pulumi.Int(3),
//				Contacts: pulumi.StringArray{
//					pulumi.String(email),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleStaging,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: akamai.properties.PropertyActivation has been deprecated in favor of akamai.PropertyActivation
type PropertyActivation struct {
	pulumi.CustomResourceState

	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringOutput `pulumi:"activationId"`
	// Whether the activation should proceed despite any warnings. By default set to `true`.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrOutput `pulumi:"autoAcknowledgeRuleWarnings"`
	// One or more email addresses to send activation status changes to.
	Contacts pulumi.StringArrayOutput `pulumi:"contacts"`
	// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Errors pulumi.StringOutput `pulumi:"errors"`
	// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// A log message you can assign to the activation request.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
	//
	// Deprecated: The setting "property" has been deprecated.
	Property pulumi.StringOutput `pulumi:"property"`
	// (Required) The property's unique identifier, including the `prp_` prefix.
	PropertyId pulumi.StringOutput                    `pulumi:"propertyId"`
	RuleErrors PropertyActivationRuleErrorArrayOutput `pulumi:"ruleErrors"`
	// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
	//
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayOutput `pulumi:"ruleWarnings"`
	// The property version's activation status on the selected network.
	Status pulumi.StringOutput `pulumi:"status"`
	// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
	Version pulumi.IntOutput `pulumi:"version"`
	// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Warnings pulumi.StringOutput `pulumi:"warnings"`
}

// NewPropertyActivation registers a new resource with the given unique name, arguments, and options.
func NewPropertyActivation(ctx *pulumi.Context,
	name string, args *PropertyActivationArgs, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contacts == nil {
		return nil, errors.New("invalid value for required argument 'Contacts'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource PropertyActivation
	err := ctx.RegisterResource("akamai:properties/propertyActivation:PropertyActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyActivation gets an existing PropertyActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyActivationState, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	var resource PropertyActivation
	err := ctx.ReadResource("akamai:properties/propertyActivation:PropertyActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyActivation resources.
type propertyActivationState struct {
	// The ID given to the activation event while it's in progress.
	ActivationId *string `pulumi:"activationId"`
	// Whether the activation should proceed despite any warnings. By default set to `true`.
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// One or more email addresses to send activation status changes to.
	Contacts []string `pulumi:"contacts"`
	// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Errors *string `pulumi:"errors"`
	// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
	Network *string `pulumi:"network"`
	// A log message you can assign to the activation request.
	Note *string `pulumi:"note"`
	// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
	//
	// Deprecated: The setting "property" has been deprecated.
	Property *string `pulumi:"property"`
	// (Required) The property's unique identifier, including the `prp_` prefix.
	PropertyId *string                       `pulumi:"propertyId"`
	RuleErrors []PropertyActivationRuleError `pulumi:"ruleErrors"`
	// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
	//
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyActivationRuleWarning `pulumi:"ruleWarnings"`
	// The property version's activation status on the selected network.
	Status *string `pulumi:"status"`
	// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
	Version *int `pulumi:"version"`
	// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Warnings *string `pulumi:"warnings"`
}

type PropertyActivationState struct {
	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringPtrInput
	// Whether the activation should proceed despite any warnings. By default set to `true`.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// One or more email addresses to send activation status changes to.
	Contacts pulumi.StringArrayInput
	// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Errors pulumi.StringPtrInput
	// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
	Network pulumi.StringPtrInput
	// A log message you can assign to the activation request.
	Note pulumi.StringPtrInput
	// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
	//
	// Deprecated: The setting "property" has been deprecated.
	Property pulumi.StringPtrInput
	// (Required) The property's unique identifier, including the `prp_` prefix.
	PropertyId pulumi.StringPtrInput
	RuleErrors PropertyActivationRuleErrorArrayInput
	// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
	//
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayInput
	// The property version's activation status on the selected network.
	Status pulumi.StringPtrInput
	// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
	Version pulumi.IntPtrInput
	// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
	Warnings pulumi.StringPtrInput
}

func (PropertyActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationState)(nil)).Elem()
}

type propertyActivationArgs struct {
	// The ID given to the activation event while it's in progress.
	ActivationId *string `pulumi:"activationId"`
	// Whether the activation should proceed despite any warnings. By default set to `true`.
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// One or more email addresses to send activation status changes to.
	Contacts []string `pulumi:"contacts"`
	// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
	Network *string `pulumi:"network"`
	// A log message you can assign to the activation request.
	Note *string `pulumi:"note"`
	// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
	//
	// Deprecated: The setting "property" has been deprecated.
	Property *string `pulumi:"property"`
	// (Required) The property's unique identifier, including the `prp_` prefix.
	PropertyId *string                       `pulumi:"propertyId"`
	RuleErrors []PropertyActivationRuleError `pulumi:"ruleErrors"`
	// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
	//
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyActivationRuleWarning `pulumi:"ruleWarnings"`
	// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a PropertyActivation resource.
type PropertyActivationArgs struct {
	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringPtrInput
	// Whether the activation should proceed despite any warnings. By default set to `true`.
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// One or more email addresses to send activation status changes to.
	Contacts pulumi.StringArrayInput
	// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
	Network pulumi.StringPtrInput
	// A log message you can assign to the activation request.
	Note pulumi.StringPtrInput
	// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
	//
	// Deprecated: The setting "property" has been deprecated.
	Property pulumi.StringPtrInput
	// (Required) The property's unique identifier, including the `prp_` prefix.
	PropertyId pulumi.StringPtrInput
	RuleErrors PropertyActivationRuleErrorArrayInput
	// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
	//
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayInput
	// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
	Version pulumi.IntInput
}

func (PropertyActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationArgs)(nil)).Elem()
}

type PropertyActivationInput interface {
	pulumi.Input

	ToPropertyActivationOutput() PropertyActivationOutput
	ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput
}

func (*PropertyActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil)).Elem()
}

func (i *PropertyActivation) ToPropertyActivationOutput() PropertyActivationOutput {
	return i.ToPropertyActivationOutputWithContext(context.Background())
}

func (i *PropertyActivation) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationOutput)
}

// PropertyActivationArrayInput is an input type that accepts PropertyActivationArray and PropertyActivationArrayOutput values.
// You can construct a concrete instance of `PropertyActivationArrayInput` via:
//
//	PropertyActivationArray{ PropertyActivationArgs{...} }
type PropertyActivationArrayInput interface {
	pulumi.Input

	ToPropertyActivationArrayOutput() PropertyActivationArrayOutput
	ToPropertyActivationArrayOutputWithContext(context.Context) PropertyActivationArrayOutput
}

type PropertyActivationArray []PropertyActivationInput

func (PropertyActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return i.ToPropertyActivationArrayOutputWithContext(context.Background())
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationArrayOutput)
}

// PropertyActivationMapInput is an input type that accepts PropertyActivationMap and PropertyActivationMapOutput values.
// You can construct a concrete instance of `PropertyActivationMapInput` via:
//
//	PropertyActivationMap{ "key": PropertyActivationArgs{...} }
type PropertyActivationMapInput interface {
	pulumi.Input

	ToPropertyActivationMapOutput() PropertyActivationMapOutput
	ToPropertyActivationMapOutputWithContext(context.Context) PropertyActivationMapOutput
}

type PropertyActivationMap map[string]PropertyActivationInput

func (PropertyActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationMap) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return i.ToPropertyActivationMapOutputWithContext(context.Background())
}

func (i PropertyActivationMap) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationMapOutput)
}

type PropertyActivationOutput struct{ *pulumi.OutputState }

func (PropertyActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationOutput) ToPropertyActivationOutput() PropertyActivationOutput {
	return o
}

func (o PropertyActivationOutput) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return o
}

// The ID given to the activation event while it's in progress.
func (o PropertyActivationOutput) ActivationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.ActivationId }).(pulumi.StringOutput)
}

// Whether the activation should proceed despite any warnings. By default set to `true`.
func (o PropertyActivationOutput) AutoAcknowledgeRuleWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.BoolPtrOutput { return v.AutoAcknowledgeRuleWarnings }).(pulumi.BoolPtrOutput)
}

// One or more email addresses to send activation status changes to.
func (o PropertyActivationOutput) Contacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringArrayOutput { return v.Contacts }).(pulumi.StringArrayOutput)
}

// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
func (o PropertyActivationOutput) Errors() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Errors }).(pulumi.StringOutput)
}

// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
func (o PropertyActivationOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// A log message you can assign to the activation request.
func (o PropertyActivationOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
//
// Deprecated: The setting "property" has been deprecated.
func (o PropertyActivationOutput) Property() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Property }).(pulumi.StringOutput)
}

// (Required) The property's unique identifier, including the `prp_` prefix.
func (o PropertyActivationOutput) PropertyId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.PropertyId }).(pulumi.StringOutput)
}

func (o PropertyActivationOutput) RuleErrors() PropertyActivationRuleErrorArrayOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivationRuleErrorArrayOutput { return v.RuleErrors }).(PropertyActivationRuleErrorArrayOutput)
}

// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
//
// Deprecated: Rule warnings will not be set in state anymore
func (o PropertyActivationOutput) RuleWarnings() PropertyActivationRuleWarningArrayOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivationRuleWarningArrayOutput { return v.RuleWarnings }).(PropertyActivationRuleWarningArrayOutput)
}

// The property version's activation status on the selected network.
func (o PropertyActivationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
func (o PropertyActivationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
func (o PropertyActivationOutput) Warnings() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Warnings }).(pulumi.StringOutput)
}

type PropertyActivationArrayOutput struct{ *pulumi.OutputState }

func (PropertyActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) Index(i pulumi.IntInput) PropertyActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyActivation {
		return vs[0].([]*PropertyActivation)[vs[1].(int)]
	}).(PropertyActivationOutput)
}

type PropertyActivationMapOutput struct{ *pulumi.OutputState }

func (PropertyActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) MapIndex(k pulumi.StringInput) PropertyActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyActivation {
		return vs[0].(map[string]*PropertyActivation)[vs[1].(string)]
	}).(PropertyActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationInput)(nil)).Elem(), &PropertyActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationArrayInput)(nil)).Elem(), PropertyActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationMapInput)(nil)).Elem(), PropertyActivationMap{})
	pulumi.RegisterOutputType(PropertyActivationOutput{})
	pulumi.RegisterOutputType(PropertyActivationArrayOutput{})
	pulumi.RegisterOutputType(PropertyActivationMapOutput{})
}
