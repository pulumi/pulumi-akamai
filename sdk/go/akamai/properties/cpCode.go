// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package properties

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: akamai.properties/cpcode.CpCode has been deprecated in favor of akamai.index/cpcode.CpCode
type CpCode struct {
	pulumi.CustomResourceState

	// Deprecated: The setting "contract" has been deprecated.
	Contract   pulumi.StringOutput `pulumi:"contract"`
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Deprecated: The setting "group" has been deprecated.
	Group   pulumi.StringOutput `pulumi:"group"`
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	Name    pulumi.StringOutput `pulumi:"name"`
	// Deprecated: The setting "product" has been deprecated.
	Product   pulumi.StringOutput `pulumi:"product"`
	ProductId pulumi.StringOutput `pulumi:"productId"`
}

// NewCpCode registers a new resource with the given unique name, arguments, and options.
func NewCpCode(ctx *pulumi.Context,
	name string, args *CpCodeArgs, opts ...pulumi.ResourceOption) (*CpCode, error) {
	if args == nil {
		args = &CpCodeArgs{}
	}

	var resource CpCode
	err := ctx.RegisterResource("akamai:properties/cpCode:CpCode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpCode gets an existing CpCode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpCode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpCodeState, opts ...pulumi.ResourceOption) (*CpCode, error) {
	var resource CpCode
	err := ctx.ReadResource("akamai:properties/cpCode:CpCode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpCode resources.
type cpCodeState struct {
	// Deprecated: The setting "contract" has been deprecated.
	Contract   *string `pulumi:"contract"`
	ContractId *string `pulumi:"contractId"`
	// Deprecated: The setting "group" has been deprecated.
	Group   *string `pulumi:"group"`
	GroupId *string `pulumi:"groupId"`
	Name    *string `pulumi:"name"`
	// Deprecated: The setting "product" has been deprecated.
	Product   *string `pulumi:"product"`
	ProductId *string `pulumi:"productId"`
}

type CpCodeState struct {
	// Deprecated: The setting "contract" has been deprecated.
	Contract   pulumi.StringPtrInput
	ContractId pulumi.StringPtrInput
	// Deprecated: The setting "group" has been deprecated.
	Group   pulumi.StringPtrInput
	GroupId pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	// Deprecated: The setting "product" has been deprecated.
	Product   pulumi.StringPtrInput
	ProductId pulumi.StringPtrInput
}

func (CpCodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpCodeState)(nil)).Elem()
}

type cpCodeArgs struct {
	// Deprecated: The setting "contract" has been deprecated.
	Contract   *string `pulumi:"contract"`
	ContractId *string `pulumi:"contractId"`
	// Deprecated: The setting "group" has been deprecated.
	Group   *string `pulumi:"group"`
	GroupId *string `pulumi:"groupId"`
	Name    *string `pulumi:"name"`
	// Deprecated: The setting "product" has been deprecated.
	Product   *string `pulumi:"product"`
	ProductId *string `pulumi:"productId"`
}

// The set of arguments for constructing a CpCode resource.
type CpCodeArgs struct {
	// Deprecated: The setting "contract" has been deprecated.
	Contract   pulumi.StringPtrInput
	ContractId pulumi.StringPtrInput
	// Deprecated: The setting "group" has been deprecated.
	Group   pulumi.StringPtrInput
	GroupId pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	// Deprecated: The setting "product" has been deprecated.
	Product   pulumi.StringPtrInput
	ProductId pulumi.StringPtrInput
}

func (CpCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpCodeArgs)(nil)).Elem()
}

type CpCodeInput interface {
	pulumi.Input

	ToCpCodeOutput() CpCodeOutput
	ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput
}

func (*CpCode) ElementType() reflect.Type {
	return reflect.TypeOf((**CpCode)(nil)).Elem()
}

func (i *CpCode) ToCpCodeOutput() CpCodeOutput {
	return i.ToCpCodeOutputWithContext(context.Background())
}

func (i *CpCode) ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpCodeOutput)
}

// CpCodeArrayInput is an input type that accepts CpCodeArray and CpCodeArrayOutput values.
// You can construct a concrete instance of `CpCodeArrayInput` via:
//
//	CpCodeArray{ CpCodeArgs{...} }
type CpCodeArrayInput interface {
	pulumi.Input

	ToCpCodeArrayOutput() CpCodeArrayOutput
	ToCpCodeArrayOutputWithContext(context.Context) CpCodeArrayOutput
}

type CpCodeArray []CpCodeInput

func (CpCodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpCode)(nil)).Elem()
}

func (i CpCodeArray) ToCpCodeArrayOutput() CpCodeArrayOutput {
	return i.ToCpCodeArrayOutputWithContext(context.Background())
}

func (i CpCodeArray) ToCpCodeArrayOutputWithContext(ctx context.Context) CpCodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpCodeArrayOutput)
}

// CpCodeMapInput is an input type that accepts CpCodeMap and CpCodeMapOutput values.
// You can construct a concrete instance of `CpCodeMapInput` via:
//
//	CpCodeMap{ "key": CpCodeArgs{...} }
type CpCodeMapInput interface {
	pulumi.Input

	ToCpCodeMapOutput() CpCodeMapOutput
	ToCpCodeMapOutputWithContext(context.Context) CpCodeMapOutput
}

type CpCodeMap map[string]CpCodeInput

func (CpCodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpCode)(nil)).Elem()
}

func (i CpCodeMap) ToCpCodeMapOutput() CpCodeMapOutput {
	return i.ToCpCodeMapOutputWithContext(context.Background())
}

func (i CpCodeMap) ToCpCodeMapOutputWithContext(ctx context.Context) CpCodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpCodeMapOutput)
}

type CpCodeOutput struct{ *pulumi.OutputState }

func (CpCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpCode)(nil)).Elem()
}

func (o CpCodeOutput) ToCpCodeOutput() CpCodeOutput {
	return o
}

func (o CpCodeOutput) ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput {
	return o
}

// Deprecated: The setting "contract" has been deprecated.
func (o CpCodeOutput) Contract() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.Contract }).(pulumi.StringOutput)
}

func (o CpCodeOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// Deprecated: The setting "group" has been deprecated.
func (o CpCodeOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

func (o CpCodeOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o CpCodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: The setting "product" has been deprecated.
func (o CpCodeOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.Product }).(pulumi.StringOutput)
}

func (o CpCodeOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *CpCode) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

type CpCodeArrayOutput struct{ *pulumi.OutputState }

func (CpCodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpCode)(nil)).Elem()
}

func (o CpCodeArrayOutput) ToCpCodeArrayOutput() CpCodeArrayOutput {
	return o
}

func (o CpCodeArrayOutput) ToCpCodeArrayOutputWithContext(ctx context.Context) CpCodeArrayOutput {
	return o
}

func (o CpCodeArrayOutput) Index(i pulumi.IntInput) CpCodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CpCode {
		return vs[0].([]*CpCode)[vs[1].(int)]
	}).(CpCodeOutput)
}

type CpCodeMapOutput struct{ *pulumi.OutputState }

func (CpCodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpCode)(nil)).Elem()
}

func (o CpCodeMapOutput) ToCpCodeMapOutput() CpCodeMapOutput {
	return o
}

func (o CpCodeMapOutput) ToCpCodeMapOutputWithContext(ctx context.Context) CpCodeMapOutput {
	return o
}

func (o CpCodeMapOutput) MapIndex(k pulumi.StringInput) CpCodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CpCode {
		return vs[0].(map[string]*CpCode)[vs[1].(string)]
	}).(CpCodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CpCodeInput)(nil)).Elem(), &CpCode{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpCodeArrayInput)(nil)).Elem(), CpCodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpCodeMapInput)(nil)).Elem(), CpCodeMap{})
	pulumi.RegisterOutputType(CpCodeOutput{})
	pulumi.RegisterOutputType(CpCodeArrayOutput{})
	pulumi.RegisterOutputType(CpCodeMapOutput{})
}
