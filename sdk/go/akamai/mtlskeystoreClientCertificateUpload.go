// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v10/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MtlskeystoreClientCertificateUpload struct {
	pulumi.CustomResourceState

	// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
	AutoAcknowledgeWarnings pulumi.BoolOutput `pulumi:"autoAcknowledgeWarnings"`
	// The ID of the client certificate to which the signed certificate will be uploaded.
	ClientCertificateId pulumi.IntOutput `pulumi:"clientCertificateId"`
	// The signed certificate to upload.
	SignedCertificate pulumi.StringOutput                                  `pulumi:"signedCertificate"`
	Timeouts          MtlskeystoreClientCertificateUploadTimeoutsPtrOutput `pulumi:"timeouts"`
	// The optional trust chain associated with the signed certificate.
	TrustChain pulumi.StringPtrOutput `pulumi:"trustChain"`
	// A unique identifier for the client certificate version.
	VersionGuid pulumi.StringOutput `pulumi:"versionGuid"`
	// The version number of the client certificate to upload the signed certificate to.
	VersionNumber pulumi.IntOutput `pulumi:"versionNumber"`
	// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
	WaitForDeployment pulumi.BoolOutput `pulumi:"waitForDeployment"`
}

// NewMtlskeystoreClientCertificateUpload registers a new resource with the given unique name, arguments, and options.
func NewMtlskeystoreClientCertificateUpload(ctx *pulumi.Context,
	name string, args *MtlskeystoreClientCertificateUploadArgs, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateUpload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientCertificateId == nil {
		return nil, errors.New("invalid value for required argument 'ClientCertificateId'")
	}
	if args.SignedCertificate == nil {
		return nil, errors.New("invalid value for required argument 'SignedCertificate'")
	}
	if args.VersionNumber == nil {
		return nil, errors.New("invalid value for required argument 'VersionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MtlskeystoreClientCertificateUpload
	err := ctx.RegisterResource("akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMtlskeystoreClientCertificateUpload gets an existing MtlskeystoreClientCertificateUpload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMtlskeystoreClientCertificateUpload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MtlskeystoreClientCertificateUploadState, opts ...pulumi.ResourceOption) (*MtlskeystoreClientCertificateUpload, error) {
	var resource MtlskeystoreClientCertificateUpload
	err := ctx.ReadResource("akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MtlskeystoreClientCertificateUpload resources.
type mtlskeystoreClientCertificateUploadState struct {
	// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
	AutoAcknowledgeWarnings *bool `pulumi:"autoAcknowledgeWarnings"`
	// The ID of the client certificate to which the signed certificate will be uploaded.
	ClientCertificateId *int `pulumi:"clientCertificateId"`
	// The signed certificate to upload.
	SignedCertificate *string                                      `pulumi:"signedCertificate"`
	Timeouts          *MtlskeystoreClientCertificateUploadTimeouts `pulumi:"timeouts"`
	// The optional trust chain associated with the signed certificate.
	TrustChain *string `pulumi:"trustChain"`
	// A unique identifier for the client certificate version.
	VersionGuid *string `pulumi:"versionGuid"`
	// The version number of the client certificate to upload the signed certificate to.
	VersionNumber *int `pulumi:"versionNumber"`
	// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

type MtlskeystoreClientCertificateUploadState struct {
	// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
	AutoAcknowledgeWarnings pulumi.BoolPtrInput
	// The ID of the client certificate to which the signed certificate will be uploaded.
	ClientCertificateId pulumi.IntPtrInput
	// The signed certificate to upload.
	SignedCertificate pulumi.StringPtrInput
	Timeouts          MtlskeystoreClientCertificateUploadTimeoutsPtrInput
	// The optional trust chain associated with the signed certificate.
	TrustChain pulumi.StringPtrInput
	// A unique identifier for the client certificate version.
	VersionGuid pulumi.StringPtrInput
	// The version number of the client certificate to upload the signed certificate to.
	VersionNumber pulumi.IntPtrInput
	// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
	WaitForDeployment pulumi.BoolPtrInput
}

func (MtlskeystoreClientCertificateUploadState) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateUploadState)(nil)).Elem()
}

type mtlskeystoreClientCertificateUploadArgs struct {
	// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
	AutoAcknowledgeWarnings *bool `pulumi:"autoAcknowledgeWarnings"`
	// The ID of the client certificate to which the signed certificate will be uploaded.
	ClientCertificateId int `pulumi:"clientCertificateId"`
	// The signed certificate to upload.
	SignedCertificate string                                       `pulumi:"signedCertificate"`
	Timeouts          *MtlskeystoreClientCertificateUploadTimeouts `pulumi:"timeouts"`
	// The optional trust chain associated with the signed certificate.
	TrustChain *string `pulumi:"trustChain"`
	// The version number of the client certificate to upload the signed certificate to.
	VersionNumber int `pulumi:"versionNumber"`
	// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
	WaitForDeployment *bool `pulumi:"waitForDeployment"`
}

// The set of arguments for constructing a MtlskeystoreClientCertificateUpload resource.
type MtlskeystoreClientCertificateUploadArgs struct {
	// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
	AutoAcknowledgeWarnings pulumi.BoolPtrInput
	// The ID of the client certificate to which the signed certificate will be uploaded.
	ClientCertificateId pulumi.IntInput
	// The signed certificate to upload.
	SignedCertificate pulumi.StringInput
	Timeouts          MtlskeystoreClientCertificateUploadTimeoutsPtrInput
	// The optional trust chain associated with the signed certificate.
	TrustChain pulumi.StringPtrInput
	// The version number of the client certificate to upload the signed certificate to.
	VersionNumber pulumi.IntInput
	// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
	WaitForDeployment pulumi.BoolPtrInput
}

func (MtlskeystoreClientCertificateUploadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mtlskeystoreClientCertificateUploadArgs)(nil)).Elem()
}

type MtlskeystoreClientCertificateUploadInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateUploadOutput() MtlskeystoreClientCertificateUploadOutput
	ToMtlskeystoreClientCertificateUploadOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadOutput
}

func (*MtlskeystoreClientCertificateUpload) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (i *MtlskeystoreClientCertificateUpload) ToMtlskeystoreClientCertificateUploadOutput() MtlskeystoreClientCertificateUploadOutput {
	return i.ToMtlskeystoreClientCertificateUploadOutputWithContext(context.Background())
}

func (i *MtlskeystoreClientCertificateUpload) ToMtlskeystoreClientCertificateUploadOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateUploadOutput)
}

// MtlskeystoreClientCertificateUploadArrayInput is an input type that accepts MtlskeystoreClientCertificateUploadArray and MtlskeystoreClientCertificateUploadArrayOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateUploadArrayInput` via:
//
//	MtlskeystoreClientCertificateUploadArray{ MtlskeystoreClientCertificateUploadArgs{...} }
type MtlskeystoreClientCertificateUploadArrayInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateUploadArrayOutput() MtlskeystoreClientCertificateUploadArrayOutput
	ToMtlskeystoreClientCertificateUploadArrayOutputWithContext(context.Context) MtlskeystoreClientCertificateUploadArrayOutput
}

type MtlskeystoreClientCertificateUploadArray []MtlskeystoreClientCertificateUploadInput

func (MtlskeystoreClientCertificateUploadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateUploadArray) ToMtlskeystoreClientCertificateUploadArrayOutput() MtlskeystoreClientCertificateUploadArrayOutput {
	return i.ToMtlskeystoreClientCertificateUploadArrayOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateUploadArray) ToMtlskeystoreClientCertificateUploadArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateUploadArrayOutput)
}

// MtlskeystoreClientCertificateUploadMapInput is an input type that accepts MtlskeystoreClientCertificateUploadMap and MtlskeystoreClientCertificateUploadMapOutput values.
// You can construct a concrete instance of `MtlskeystoreClientCertificateUploadMapInput` via:
//
//	MtlskeystoreClientCertificateUploadMap{ "key": MtlskeystoreClientCertificateUploadArgs{...} }
type MtlskeystoreClientCertificateUploadMapInput interface {
	pulumi.Input

	ToMtlskeystoreClientCertificateUploadMapOutput() MtlskeystoreClientCertificateUploadMapOutput
	ToMtlskeystoreClientCertificateUploadMapOutputWithContext(context.Context) MtlskeystoreClientCertificateUploadMapOutput
}

type MtlskeystoreClientCertificateUploadMap map[string]MtlskeystoreClientCertificateUploadInput

func (MtlskeystoreClientCertificateUploadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (i MtlskeystoreClientCertificateUploadMap) ToMtlskeystoreClientCertificateUploadMapOutput() MtlskeystoreClientCertificateUploadMapOutput {
	return i.ToMtlskeystoreClientCertificateUploadMapOutputWithContext(context.Background())
}

func (i MtlskeystoreClientCertificateUploadMap) ToMtlskeystoreClientCertificateUploadMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlskeystoreClientCertificateUploadMapOutput)
}

type MtlskeystoreClientCertificateUploadOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateUploadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateUploadOutput) ToMtlskeystoreClientCertificateUploadOutput() MtlskeystoreClientCertificateUploadOutput {
	return o
}

func (o MtlskeystoreClientCertificateUploadOutput) ToMtlskeystoreClientCertificateUploadOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadOutput {
	return o
}

// If set to true, all warnings will be acknowledged automatically. Defaults to `false`.
func (o MtlskeystoreClientCertificateUploadOutput) AutoAcknowledgeWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.BoolOutput { return v.AutoAcknowledgeWarnings }).(pulumi.BoolOutput)
}

// The ID of the client certificate to which the signed certificate will be uploaded.
func (o MtlskeystoreClientCertificateUploadOutput) ClientCertificateId() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.IntOutput { return v.ClientCertificateId }).(pulumi.IntOutput)
}

// The signed certificate to upload.
func (o MtlskeystoreClientCertificateUploadOutput) SignedCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.StringOutput { return v.SignedCertificate }).(pulumi.StringOutput)
}

func (o MtlskeystoreClientCertificateUploadOutput) Timeouts() MtlskeystoreClientCertificateUploadTimeoutsPtrOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) MtlskeystoreClientCertificateUploadTimeoutsPtrOutput {
		return v.Timeouts
	}).(MtlskeystoreClientCertificateUploadTimeoutsPtrOutput)
}

// The optional trust chain associated with the signed certificate.
func (o MtlskeystoreClientCertificateUploadOutput) TrustChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.StringPtrOutput { return v.TrustChain }).(pulumi.StringPtrOutput)
}

// A unique identifier for the client certificate version.
func (o MtlskeystoreClientCertificateUploadOutput) VersionGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.StringOutput { return v.VersionGuid }).(pulumi.StringOutput)
}

// The version number of the client certificate to upload the signed certificate to.
func (o MtlskeystoreClientCertificateUploadOutput) VersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.IntOutput { return v.VersionNumber }).(pulumi.IntOutput)
}

// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `true`.
func (o MtlskeystoreClientCertificateUploadOutput) WaitForDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v *MtlskeystoreClientCertificateUpload) pulumi.BoolOutput { return v.WaitForDeployment }).(pulumi.BoolOutput)
}

type MtlskeystoreClientCertificateUploadArrayOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateUploadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateUploadArrayOutput) ToMtlskeystoreClientCertificateUploadArrayOutput() MtlskeystoreClientCertificateUploadArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateUploadArrayOutput) ToMtlskeystoreClientCertificateUploadArrayOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadArrayOutput {
	return o
}

func (o MtlskeystoreClientCertificateUploadArrayOutput) Index(i pulumi.IntInput) MtlskeystoreClientCertificateUploadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateUpload {
		return vs[0].([]*MtlskeystoreClientCertificateUpload)[vs[1].(int)]
	}).(MtlskeystoreClientCertificateUploadOutput)
}

type MtlskeystoreClientCertificateUploadMapOutput struct{ *pulumi.OutputState }

func (MtlskeystoreClientCertificateUploadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MtlskeystoreClientCertificateUpload)(nil)).Elem()
}

func (o MtlskeystoreClientCertificateUploadMapOutput) ToMtlskeystoreClientCertificateUploadMapOutput() MtlskeystoreClientCertificateUploadMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateUploadMapOutput) ToMtlskeystoreClientCertificateUploadMapOutputWithContext(ctx context.Context) MtlskeystoreClientCertificateUploadMapOutput {
	return o
}

func (o MtlskeystoreClientCertificateUploadMapOutput) MapIndex(k pulumi.StringInput) MtlskeystoreClientCertificateUploadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MtlskeystoreClientCertificateUpload {
		return vs[0].(map[string]*MtlskeystoreClientCertificateUpload)[vs[1].(string)]
	}).(MtlskeystoreClientCertificateUploadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateUploadInput)(nil)).Elem(), &MtlskeystoreClientCertificateUpload{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateUploadArrayInput)(nil)).Elem(), MtlskeystoreClientCertificateUploadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MtlskeystoreClientCertificateUploadMapInput)(nil)).Elem(), MtlskeystoreClientCertificateUploadMap{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateUploadOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateUploadArrayOutput{})
	pulumi.RegisterOutputType(MtlskeystoreClientCertificateUploadMapOutput{})
}
