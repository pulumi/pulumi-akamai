// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v8/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanCustomCode struct {
	pulumi.CustomResourceState

	ConfigId   pulumi.IntOutput    `pulumi:"configId"`
	CustomCode pulumi.StringOutput `pulumi:"customCode"`
}

// NewBotmanCustomCode registers a new resource with the given unique name, arguments, and options.
func NewBotmanCustomCode(ctx *pulumi.Context,
	name string, args *BotmanCustomCodeArgs, opts ...pulumi.ResourceOption) (*BotmanCustomCode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.CustomCode == nil {
		return nil, errors.New("invalid value for required argument 'CustomCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BotmanCustomCode
	err := ctx.RegisterResource("akamai:index/botmanCustomCode:BotmanCustomCode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanCustomCode gets an existing BotmanCustomCode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanCustomCode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanCustomCodeState, opts ...pulumi.ResourceOption) (*BotmanCustomCode, error) {
	var resource BotmanCustomCode
	err := ctx.ReadResource("akamai:index/botmanCustomCode:BotmanCustomCode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanCustomCode resources.
type botmanCustomCodeState struct {
	ConfigId   *int    `pulumi:"configId"`
	CustomCode *string `pulumi:"customCode"`
}

type BotmanCustomCodeState struct {
	ConfigId   pulumi.IntPtrInput
	CustomCode pulumi.StringPtrInput
}

func (BotmanCustomCodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanCustomCodeState)(nil)).Elem()
}

type botmanCustomCodeArgs struct {
	ConfigId   int    `pulumi:"configId"`
	CustomCode string `pulumi:"customCode"`
}

// The set of arguments for constructing a BotmanCustomCode resource.
type BotmanCustomCodeArgs struct {
	ConfigId   pulumi.IntInput
	CustomCode pulumi.StringInput
}

func (BotmanCustomCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanCustomCodeArgs)(nil)).Elem()
}

type BotmanCustomCodeInput interface {
	pulumi.Input

	ToBotmanCustomCodeOutput() BotmanCustomCodeOutput
	ToBotmanCustomCodeOutputWithContext(ctx context.Context) BotmanCustomCodeOutput
}

func (*BotmanCustomCode) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanCustomCode)(nil)).Elem()
}

func (i *BotmanCustomCode) ToBotmanCustomCodeOutput() BotmanCustomCodeOutput {
	return i.ToBotmanCustomCodeOutputWithContext(context.Background())
}

func (i *BotmanCustomCode) ToBotmanCustomCodeOutputWithContext(ctx context.Context) BotmanCustomCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanCustomCodeOutput)
}

// BotmanCustomCodeArrayInput is an input type that accepts BotmanCustomCodeArray and BotmanCustomCodeArrayOutput values.
// You can construct a concrete instance of `BotmanCustomCodeArrayInput` via:
//
//	BotmanCustomCodeArray{ BotmanCustomCodeArgs{...} }
type BotmanCustomCodeArrayInput interface {
	pulumi.Input

	ToBotmanCustomCodeArrayOutput() BotmanCustomCodeArrayOutput
	ToBotmanCustomCodeArrayOutputWithContext(context.Context) BotmanCustomCodeArrayOutput
}

type BotmanCustomCodeArray []BotmanCustomCodeInput

func (BotmanCustomCodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanCustomCode)(nil)).Elem()
}

func (i BotmanCustomCodeArray) ToBotmanCustomCodeArrayOutput() BotmanCustomCodeArrayOutput {
	return i.ToBotmanCustomCodeArrayOutputWithContext(context.Background())
}

func (i BotmanCustomCodeArray) ToBotmanCustomCodeArrayOutputWithContext(ctx context.Context) BotmanCustomCodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanCustomCodeArrayOutput)
}

// BotmanCustomCodeMapInput is an input type that accepts BotmanCustomCodeMap and BotmanCustomCodeMapOutput values.
// You can construct a concrete instance of `BotmanCustomCodeMapInput` via:
//
//	BotmanCustomCodeMap{ "key": BotmanCustomCodeArgs{...} }
type BotmanCustomCodeMapInput interface {
	pulumi.Input

	ToBotmanCustomCodeMapOutput() BotmanCustomCodeMapOutput
	ToBotmanCustomCodeMapOutputWithContext(context.Context) BotmanCustomCodeMapOutput
}

type BotmanCustomCodeMap map[string]BotmanCustomCodeInput

func (BotmanCustomCodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanCustomCode)(nil)).Elem()
}

func (i BotmanCustomCodeMap) ToBotmanCustomCodeMapOutput() BotmanCustomCodeMapOutput {
	return i.ToBotmanCustomCodeMapOutputWithContext(context.Background())
}

func (i BotmanCustomCodeMap) ToBotmanCustomCodeMapOutputWithContext(ctx context.Context) BotmanCustomCodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanCustomCodeMapOutput)
}

type BotmanCustomCodeOutput struct{ *pulumi.OutputState }

func (BotmanCustomCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanCustomCode)(nil)).Elem()
}

func (o BotmanCustomCodeOutput) ToBotmanCustomCodeOutput() BotmanCustomCodeOutput {
	return o
}

func (o BotmanCustomCodeOutput) ToBotmanCustomCodeOutputWithContext(ctx context.Context) BotmanCustomCodeOutput {
	return o
}

func (o BotmanCustomCodeOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanCustomCode) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanCustomCodeOutput) CustomCode() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanCustomCode) pulumi.StringOutput { return v.CustomCode }).(pulumi.StringOutput)
}

type BotmanCustomCodeArrayOutput struct{ *pulumi.OutputState }

func (BotmanCustomCodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanCustomCode)(nil)).Elem()
}

func (o BotmanCustomCodeArrayOutput) ToBotmanCustomCodeArrayOutput() BotmanCustomCodeArrayOutput {
	return o
}

func (o BotmanCustomCodeArrayOutput) ToBotmanCustomCodeArrayOutputWithContext(ctx context.Context) BotmanCustomCodeArrayOutput {
	return o
}

func (o BotmanCustomCodeArrayOutput) Index(i pulumi.IntInput) BotmanCustomCodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanCustomCode {
		return vs[0].([]*BotmanCustomCode)[vs[1].(int)]
	}).(BotmanCustomCodeOutput)
}

type BotmanCustomCodeMapOutput struct{ *pulumi.OutputState }

func (BotmanCustomCodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanCustomCode)(nil)).Elem()
}

func (o BotmanCustomCodeMapOutput) ToBotmanCustomCodeMapOutput() BotmanCustomCodeMapOutput {
	return o
}

func (o BotmanCustomCodeMapOutput) ToBotmanCustomCodeMapOutputWithContext(ctx context.Context) BotmanCustomCodeMapOutput {
	return o
}

func (o BotmanCustomCodeMapOutput) MapIndex(k pulumi.StringInput) BotmanCustomCodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanCustomCode {
		return vs[0].(map[string]*BotmanCustomCode)[vs[1].(string)]
	}).(BotmanCustomCodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanCustomCodeInput)(nil)).Elem(), &BotmanCustomCode{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanCustomCodeArrayInput)(nil)).Elem(), BotmanCustomCodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanCustomCodeMapInput)(nil)).Elem(), BotmanCustomCodeMap{})
	pulumi.RegisterOutputType(BotmanCustomCodeOutput{})
	pulumi.RegisterOutputType(BotmanCustomCodeArrayOutput{})
	pulumi.RegisterOutputType(BotmanCustomCodeMapOutput{})
}
