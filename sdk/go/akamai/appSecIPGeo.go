// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppSecIPGeo struct {
	pulumi.CustomResourceState

	// Unique identifier of the security configuration
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// List of IDs of network list that are always allowed
	ExceptionIpNetworkLists pulumi.StringArrayOutput `pulumi:"exceptionIpNetworkLists"`
	// List of IDs of geographic network list to be blocked
	GeoNetworkLists pulumi.StringArrayOutput `pulumi:"geoNetworkLists"`
	// List of IDs of IP network list to be blocked
	IpNetworkLists pulumi.StringArrayOutput `pulumi:"ipNetworkLists"`
	// Protection mode (block or allow)
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// Action set for Ukraine geo control
	UkraineGeoControlAction pulumi.StringPtrOutput `pulumi:"ukraineGeoControlAction"`
}

// NewAppSecIPGeo registers a new resource with the given unique name, arguments, and options.
func NewAppSecIPGeo(ctx *pulumi.Context,
	name string, args *AppSecIPGeoArgs, opts ...pulumi.ResourceOption) (*AppSecIPGeo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppSecIPGeo
	err := ctx.RegisterResource("akamai:index/appSecIPGeo:AppSecIPGeo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecIPGeo gets an existing AppSecIPGeo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecIPGeo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecIPGeoState, opts ...pulumi.ResourceOption) (*AppSecIPGeo, error) {
	var resource AppSecIPGeo
	err := ctx.ReadResource("akamai:index/appSecIPGeo:AppSecIPGeo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecIPGeo resources.
type appSecIPGeoState struct {
	// Unique identifier of the security configuration
	ConfigId *int `pulumi:"configId"`
	// List of IDs of network list that are always allowed
	ExceptionIpNetworkLists []string `pulumi:"exceptionIpNetworkLists"`
	// List of IDs of geographic network list to be blocked
	GeoNetworkLists []string `pulumi:"geoNetworkLists"`
	// List of IDs of IP network list to be blocked
	IpNetworkLists []string `pulumi:"ipNetworkLists"`
	// Protection mode (block or allow)
	Mode *string `pulumi:"mode"`
	// Unique identifier of the security policy
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// Action set for Ukraine geo control
	UkraineGeoControlAction *string `pulumi:"ukraineGeoControlAction"`
}

type AppSecIPGeoState struct {
	// Unique identifier of the security configuration
	ConfigId pulumi.IntPtrInput
	// List of IDs of network list that are always allowed
	ExceptionIpNetworkLists pulumi.StringArrayInput
	// List of IDs of geographic network list to be blocked
	GeoNetworkLists pulumi.StringArrayInput
	// List of IDs of IP network list to be blocked
	IpNetworkLists pulumi.StringArrayInput
	// Protection mode (block or allow)
	Mode pulumi.StringPtrInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringPtrInput
	// Action set for Ukraine geo control
	UkraineGeoControlAction pulumi.StringPtrInput
}

func (AppSecIPGeoState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecIPGeoState)(nil)).Elem()
}

type appSecIPGeoArgs struct {
	// Unique identifier of the security configuration
	ConfigId int `pulumi:"configId"`
	// List of IDs of network list that are always allowed
	ExceptionIpNetworkLists []string `pulumi:"exceptionIpNetworkLists"`
	// List of IDs of geographic network list to be blocked
	GeoNetworkLists []string `pulumi:"geoNetworkLists"`
	// List of IDs of IP network list to be blocked
	IpNetworkLists []string `pulumi:"ipNetworkLists"`
	// Protection mode (block or allow)
	Mode string `pulumi:"mode"`
	// Unique identifier of the security policy
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// Action set for Ukraine geo control
	UkraineGeoControlAction *string `pulumi:"ukraineGeoControlAction"`
}

// The set of arguments for constructing a AppSecIPGeo resource.
type AppSecIPGeoArgs struct {
	// Unique identifier of the security configuration
	ConfigId pulumi.IntInput
	// List of IDs of network list that are always allowed
	ExceptionIpNetworkLists pulumi.StringArrayInput
	// List of IDs of geographic network list to be blocked
	GeoNetworkLists pulumi.StringArrayInput
	// List of IDs of IP network list to be blocked
	IpNetworkLists pulumi.StringArrayInput
	// Protection mode (block or allow)
	Mode pulumi.StringInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringInput
	// Action set for Ukraine geo control
	UkraineGeoControlAction pulumi.StringPtrInput
}

func (AppSecIPGeoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecIPGeoArgs)(nil)).Elem()
}

type AppSecIPGeoInput interface {
	pulumi.Input

	ToAppSecIPGeoOutput() AppSecIPGeoOutput
	ToAppSecIPGeoOutputWithContext(ctx context.Context) AppSecIPGeoOutput
}

func (*AppSecIPGeo) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecIPGeo)(nil)).Elem()
}

func (i *AppSecIPGeo) ToAppSecIPGeoOutput() AppSecIPGeoOutput {
	return i.ToAppSecIPGeoOutputWithContext(context.Background())
}

func (i *AppSecIPGeo) ToAppSecIPGeoOutputWithContext(ctx context.Context) AppSecIPGeoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecIPGeoOutput)
}

// AppSecIPGeoArrayInput is an input type that accepts AppSecIPGeoArray and AppSecIPGeoArrayOutput values.
// You can construct a concrete instance of `AppSecIPGeoArrayInput` via:
//
//	AppSecIPGeoArray{ AppSecIPGeoArgs{...} }
type AppSecIPGeoArrayInput interface {
	pulumi.Input

	ToAppSecIPGeoArrayOutput() AppSecIPGeoArrayOutput
	ToAppSecIPGeoArrayOutputWithContext(context.Context) AppSecIPGeoArrayOutput
}

type AppSecIPGeoArray []AppSecIPGeoInput

func (AppSecIPGeoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecIPGeo)(nil)).Elem()
}

func (i AppSecIPGeoArray) ToAppSecIPGeoArrayOutput() AppSecIPGeoArrayOutput {
	return i.ToAppSecIPGeoArrayOutputWithContext(context.Background())
}

func (i AppSecIPGeoArray) ToAppSecIPGeoArrayOutputWithContext(ctx context.Context) AppSecIPGeoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecIPGeoArrayOutput)
}

// AppSecIPGeoMapInput is an input type that accepts AppSecIPGeoMap and AppSecIPGeoMapOutput values.
// You can construct a concrete instance of `AppSecIPGeoMapInput` via:
//
//	AppSecIPGeoMap{ "key": AppSecIPGeoArgs{...} }
type AppSecIPGeoMapInput interface {
	pulumi.Input

	ToAppSecIPGeoMapOutput() AppSecIPGeoMapOutput
	ToAppSecIPGeoMapOutputWithContext(context.Context) AppSecIPGeoMapOutput
}

type AppSecIPGeoMap map[string]AppSecIPGeoInput

func (AppSecIPGeoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecIPGeo)(nil)).Elem()
}

func (i AppSecIPGeoMap) ToAppSecIPGeoMapOutput() AppSecIPGeoMapOutput {
	return i.ToAppSecIPGeoMapOutputWithContext(context.Background())
}

func (i AppSecIPGeoMap) ToAppSecIPGeoMapOutputWithContext(ctx context.Context) AppSecIPGeoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecIPGeoMapOutput)
}

type AppSecIPGeoOutput struct{ *pulumi.OutputState }

func (AppSecIPGeoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecIPGeo)(nil)).Elem()
}

func (o AppSecIPGeoOutput) ToAppSecIPGeoOutput() AppSecIPGeoOutput {
	return o
}

func (o AppSecIPGeoOutput) ToAppSecIPGeoOutputWithContext(ctx context.Context) AppSecIPGeoOutput {
	return o
}

// Unique identifier of the security configuration
func (o AppSecIPGeoOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// List of IDs of network list that are always allowed
func (o AppSecIPGeoOutput) ExceptionIpNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringArrayOutput { return v.ExceptionIpNetworkLists }).(pulumi.StringArrayOutput)
}

// List of IDs of geographic network list to be blocked
func (o AppSecIPGeoOutput) GeoNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringArrayOutput { return v.GeoNetworkLists }).(pulumi.StringArrayOutput)
}

// List of IDs of IP network list to be blocked
func (o AppSecIPGeoOutput) IpNetworkLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringArrayOutput { return v.IpNetworkLists }).(pulumi.StringArrayOutput)
}

// Protection mode (block or allow)
func (o AppSecIPGeoOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Unique identifier of the security policy
func (o AppSecIPGeoOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// Action set for Ukraine geo control
func (o AppSecIPGeoOutput) UkraineGeoControlAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSecIPGeo) pulumi.StringPtrOutput { return v.UkraineGeoControlAction }).(pulumi.StringPtrOutput)
}

type AppSecIPGeoArrayOutput struct{ *pulumi.OutputState }

func (AppSecIPGeoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecIPGeo)(nil)).Elem()
}

func (o AppSecIPGeoArrayOutput) ToAppSecIPGeoArrayOutput() AppSecIPGeoArrayOutput {
	return o
}

func (o AppSecIPGeoArrayOutput) ToAppSecIPGeoArrayOutputWithContext(ctx context.Context) AppSecIPGeoArrayOutput {
	return o
}

func (o AppSecIPGeoArrayOutput) Index(i pulumi.IntInput) AppSecIPGeoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecIPGeo {
		return vs[0].([]*AppSecIPGeo)[vs[1].(int)]
	}).(AppSecIPGeoOutput)
}

type AppSecIPGeoMapOutput struct{ *pulumi.OutputState }

func (AppSecIPGeoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecIPGeo)(nil)).Elem()
}

func (o AppSecIPGeoMapOutput) ToAppSecIPGeoMapOutput() AppSecIPGeoMapOutput {
	return o
}

func (o AppSecIPGeoMapOutput) ToAppSecIPGeoMapOutputWithContext(ctx context.Context) AppSecIPGeoMapOutput {
	return o
}

func (o AppSecIPGeoMapOutput) MapIndex(k pulumi.StringInput) AppSecIPGeoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecIPGeo {
		return vs[0].(map[string]*AppSecIPGeo)[vs[1].(string)]
	}).(AppSecIPGeoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecIPGeoInput)(nil)).Elem(), &AppSecIPGeo{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecIPGeoArrayInput)(nil)).Elem(), AppSecIPGeoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecIPGeoMapInput)(nil)).Elem(), AppSecIPGeoMap{})
	pulumi.RegisterOutputType(AppSecIPGeoOutput{})
	pulumi.RegisterOutputType(AppSecIPGeoArrayOutput{})
	pulumi.RegisterOutputType(AppSecIPGeoMapOutput{})
}
