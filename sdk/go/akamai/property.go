// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Property` resource represents an Akamai property configuration.
// This resource lets you to create, update, and activate properties on the
// Akamai platform.
//
// Akamai's edge network caches your web assets near to servers that request them.
// A property provides the main way to control how edge servers respond to various
// kinds of requests for those assets. Properties apply rules to a set of hostnames,
// and you can only apply one property at a time to any given hostname. Each property
// is assigned to a product, which determines which behaviors you can use. Each
// property's default rule needs a valid content provider (CP) code assigned to bill
// and report for the service.
//
// > **Note** In version 0.10 and earlier of this resource, it also controlled content provider (CP) codes, origin settings, rules, and hostname associations. Starting with version 1.0.0, this logic is broken out into individual resources.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewProperty(ctx, "example", &akamai.PropertyArgs{
// 			ProductId:  pulumi.String("prd_SPM"),
// 			ContractId: pulumi.Any(_var.Contractid),
// 			GroupId:    pulumi.Any(_var.Groupid),
// 			Hostnames: PropertyHostnameArray{
// 				&PropertyHostnameArgs{
// 					CnameFrom:            pulumi.String("example.com"),
// 					CnameTo:              pulumi.String("example.com.edgekey.net"),
// 					CertProvisioningType: pulumi.String("DEFAULT"),
// 				},
// 				&PropertyHostnameArgs{
// 					CnameFrom:            pulumi.String("www.example.com"),
// 					CnameTo:              pulumi.String("example.com.edgesuite.net"),
// 					CertProvisioningType: pulumi.String("CPS_MANAGED"),
// 				},
// 			},
// 			RuleFormat: pulumi.String("v2020-03-04"),
// 			Rules:      pulumi.Any(data.Akamai_property_rules_template.Example.Json),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// This resource supports these arguments:
//
// * `name` - (Required) The property name.
// * `contractId` - (Required) A contract's unique ID, including the `ctr_` prefix.
// * `groupId` - (Required) A group's unique ID, including the `grp_` prefix.
// * `productId` - (Required to create, otherwise Optional) A product's unique ID, including the `prd_` prefix.
// * `hostnames` - (Optional) A mapping of public hostnames to edge hostnames. See the `getPropertyHostnames` data source for details on the necessary DNS configuration.
//
//     > **Note** Starting from version 1.5.0, the `hostnames` argument supports a new block type. If you created your code and state in version 1.4 or earlier, you need to manually update your configuration and replace the previous input for `hostnames` with the new syntax. This error indicates that the state is outdated: `Error: missing expected [`. To fix it, remove `Property` from the state and import it again.
//
//   Requires these additional arguments:
//
//       * `cnameFrom` - (Required) A string containing the original origin's hostname. For example, `"example.org"`.
//       * `cnameTo` - (Required) A string containing the hostname for edge content. For example,  `"example.org.edgesuite.net"`.
//       * `certProvisioningType` - (Required) The certificate's provisioning type, either the default `CPS_MANAGED` type for the custom certificates you provision with the [Certificate Provisioning System (CPS)](https://learn.akamai.com/en-us/products/core_features/certificate_provisioning_system.html), or `DEFAULT` for certificates provisioned automatically.
// * `rules` - (Optional) A JSON-encoded rule tree for a given property. For this argument, you need to enter a complete JSON rule tree, unless you set up a series of JSON templates. See the `getPropertyRules` data source.
// * `ruleFormat` - (Optional) The [rule format](https://developer.akamai.com/api/core_features/property_manager/v1.html#getruleformats) to use. Uses the latest rule format by default.
// * `contract` - (Deprecated) Replaced by `contractId`. Maintained for legacy purposes.
// * `group` - (Deprecated) Replaced by `groupId`. Maintained for legacy purposes.
// * `product` - (Deprecated) Optional argument replaced by the now required `productId`. Maintained for legacy purposes.
//
// ## Attribute reference
//
// The resource returns these attributes:
//
// * `ruleErrors` - The contents of `errors` field returned by the API. For more information see [Errors](https://developer.akamai.com/api/core_features/property_manager/v1.html#errors) in the PAPI documentation.
// * `latestVersion` - The version of the property you've created or updated rules for. The Akamai Provider always uses the latest version or creates a new version if latest is not editable.
// * `productionVersion` - The current version of the property active on the Akamai production network.
// * `stagingVersion` - The current version of the property active on the Akamai staging network.
//
// ### Deprecated attributes
//
// * `ruleWarnings` - (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
//
// ## Import
//
// Basic Usagehcl resource "akamai_property" "example" {
//
// # (resource arguments)
//
//  } You can import the latest Akamai property version by using either the `property_id` or a comma-delimited string of the property, contract, and group IDs. You'll need to enter the string of IDs if the property belongs to multiple groups or contracts. If using the string of IDs, you need to enter them in this order`property_id,contract_id,group_id` To import a specific property version, pass additional parameters, either* `LATEST` to import the latest version of the property, regardless of whether it's active or not. This works the same as providing just the `property_id` or a string of the property, contract, and group IDs, which is the default behavior. * `PRODUCTION`, `PROD`, or `P` to import the latest version activated on the production environment. * `STAGING`, `STAGE`, `STAG`, or `S` to import the latest version activated on the staging environment. * Version number or version number with the `ver_` prefix to import a specific property version. For example `3` and `ver_3` correspond to the same version number. Here are some examples for the latest property version
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123
// ```
//
//  Or
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123,ctr_1-AB123,grp_123
// ```
//
//  Here are some examples for the latest active property version on the production network
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123,P
// ```
//
//  Or
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123,ctr_1-AB123,grp_123,PROD
// ```
//
//  Here are some examples for the specific property version
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123,3
// ```
//
//  Or
//
// ```sh
//  $ pulumi import akamai:index/property:Property example prp_123,ctr_1-AB123,grp_123,ver_3
// ```
type Property struct {
	pulumi.CustomResourceState

	// Deprecated: The setting "contact" has been deprecated.
	Contacts pulumi.StringArrayOutput `pulumi:"contacts"`
	// Deprecated: The setting "contract" has been deprecated.
	Contract pulumi.StringOutput `pulumi:"contract"`
	// Contract ID to be assigned to the Property
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Deprecated: The setting "cp_code" has been deprecated.
	CpCode pulumi.StringPtrOutput `pulumi:"cpCode"`
	// Deprecated: The setting "group" has been deprecated.
	Group pulumi.StringOutput `pulumi:"group"`
	// Group ID to be assigned to the Property
	GroupId   pulumi.StringOutput         `pulumi:"groupId"`
	Hostnames PropertyHostnameArrayOutput `pulumi:"hostnames"`
	// Deprecated: The setting "is_secure" has been deprecated.
	IsSecure pulumi.BoolPtrOutput `pulumi:"isSecure"`
	// Property's current latest version number
	LatestVersion pulumi.IntOutput `pulumi:"latestVersion"`
	// Name to give to the Property (must be unique)
	Name pulumi.StringOutput `pulumi:"name"`
	// Deprecated: The setting "origin" has been deprecated.
	Origins PropertyOriginArrayOutput `pulumi:"origins"`
	// Deprecated: The setting "product" has been deprecated.
	Product pulumi.StringOutput `pulumi:"product"`
	// Product ID to be assigned to the Property
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Property's version currently activated in production (zero when not active in production)
	ProductionVersion pulumi.IntOutput `pulumi:"productionVersion"`
	// Required property's version to be read
	ReadVersion pulumi.IntOutput             `pulumi:"readVersion"`
	RuleErrors  PropertyRuleErrorArrayOutput `pulumi:"ruleErrors"`
	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat pulumi.StringOutput `pulumi:"ruleFormat"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyRuleWarningArrayOutput `pulumi:"ruleWarnings"`
	// Property Rules as JSON
	Rules pulumi.StringOutput `pulumi:"rules"`
	// Property's version currently activated in staging (zero when not active in staging)
	StagingVersion pulumi.IntOutput `pulumi:"stagingVersion"`
	// Deprecated: The setting "variables" has been deprecated.
	Variables pulumi.StringPtrOutput `pulumi:"variables"`
}

// NewProperty registers a new resource with the given unique name, arguments, and options.
func NewProperty(ctx *pulumi.Context,
	name string, args *PropertyArgs, opts ...pulumi.ResourceOption) (*Property, error) {
	if args == nil {
		args = &PropertyArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:properties/property:Property"),
		},
	})
	opts = append(opts, aliases)
	var resource Property
	err := ctx.RegisterResource("akamai:index/property:Property", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProperty gets an existing Property resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProperty(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyState, opts ...pulumi.ResourceOption) (*Property, error) {
	var resource Property
	err := ctx.ReadResource("akamai:index/property:Property", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Property resources.
type propertyState struct {
	// Deprecated: The setting "contact" has been deprecated.
	Contacts []string `pulumi:"contacts"`
	// Deprecated: The setting "contract" has been deprecated.
	Contract *string `pulumi:"contract"`
	// Contract ID to be assigned to the Property
	ContractId *string `pulumi:"contractId"`
	// Deprecated: The setting "cp_code" has been deprecated.
	CpCode *string `pulumi:"cpCode"`
	// Deprecated: The setting "group" has been deprecated.
	Group *string `pulumi:"group"`
	// Group ID to be assigned to the Property
	GroupId   *string            `pulumi:"groupId"`
	Hostnames []PropertyHostname `pulumi:"hostnames"`
	// Deprecated: The setting "is_secure" has been deprecated.
	IsSecure *bool `pulumi:"isSecure"`
	// Property's current latest version number
	LatestVersion *int `pulumi:"latestVersion"`
	// Name to give to the Property (must be unique)
	Name *string `pulumi:"name"`
	// Deprecated: The setting "origin" has been deprecated.
	Origins []PropertyOrigin `pulumi:"origins"`
	// Deprecated: The setting "product" has been deprecated.
	Product *string `pulumi:"product"`
	// Product ID to be assigned to the Property
	ProductId *string `pulumi:"productId"`
	// Property's version currently activated in production (zero when not active in production)
	ProductionVersion *int `pulumi:"productionVersion"`
	// Required property's version to be read
	ReadVersion *int                `pulumi:"readVersion"`
	RuleErrors  []PropertyRuleError `pulumi:"ruleErrors"`
	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat *string `pulumi:"ruleFormat"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyRuleWarning `pulumi:"ruleWarnings"`
	// Property Rules as JSON
	Rules *string `pulumi:"rules"`
	// Property's version currently activated in staging (zero when not active in staging)
	StagingVersion *int `pulumi:"stagingVersion"`
	// Deprecated: The setting "variables" has been deprecated.
	Variables *string `pulumi:"variables"`
}

type PropertyState struct {
	// Deprecated: The setting "contact" has been deprecated.
	Contacts pulumi.StringArrayInput
	// Deprecated: The setting "contract" has been deprecated.
	Contract pulumi.StringPtrInput
	// Contract ID to be assigned to the Property
	ContractId pulumi.StringPtrInput
	// Deprecated: The setting "cp_code" has been deprecated.
	CpCode pulumi.StringPtrInput
	// Deprecated: The setting "group" has been deprecated.
	Group pulumi.StringPtrInput
	// Group ID to be assigned to the Property
	GroupId   pulumi.StringPtrInput
	Hostnames PropertyHostnameArrayInput
	// Deprecated: The setting "is_secure" has been deprecated.
	IsSecure pulumi.BoolPtrInput
	// Property's current latest version number
	LatestVersion pulumi.IntPtrInput
	// Name to give to the Property (must be unique)
	Name pulumi.StringPtrInput
	// Deprecated: The setting "origin" has been deprecated.
	Origins PropertyOriginArrayInput
	// Deprecated: The setting "product" has been deprecated.
	Product pulumi.StringPtrInput
	// Product ID to be assigned to the Property
	ProductId pulumi.StringPtrInput
	// Property's version currently activated in production (zero when not active in production)
	ProductionVersion pulumi.IntPtrInput
	// Required property's version to be read
	ReadVersion pulumi.IntPtrInput
	RuleErrors  PropertyRuleErrorArrayInput
	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat pulumi.StringPtrInput
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyRuleWarningArrayInput
	// Property Rules as JSON
	Rules pulumi.StringPtrInput
	// Property's version currently activated in staging (zero when not active in staging)
	StagingVersion pulumi.IntPtrInput
	// Deprecated: The setting "variables" has been deprecated.
	Variables pulumi.StringPtrInput
}

func (PropertyState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyState)(nil)).Elem()
}

type propertyArgs struct {
	// Deprecated: The setting "contact" has been deprecated.
	Contacts []string `pulumi:"contacts"`
	// Deprecated: The setting "contract" has been deprecated.
	Contract *string `pulumi:"contract"`
	// Contract ID to be assigned to the Property
	ContractId *string `pulumi:"contractId"`
	// Deprecated: The setting "cp_code" has been deprecated.
	CpCode *string `pulumi:"cpCode"`
	// Deprecated: The setting "group" has been deprecated.
	Group *string `pulumi:"group"`
	// Group ID to be assigned to the Property
	GroupId   *string            `pulumi:"groupId"`
	Hostnames []PropertyHostname `pulumi:"hostnames"`
	// Deprecated: The setting "is_secure" has been deprecated.
	IsSecure *bool `pulumi:"isSecure"`
	// Name to give to the Property (must be unique)
	Name *string `pulumi:"name"`
	// Deprecated: The setting "origin" has been deprecated.
	Origins []PropertyOrigin `pulumi:"origins"`
	// Deprecated: The setting "product" has been deprecated.
	Product *string `pulumi:"product"`
	// Product ID to be assigned to the Property
	ProductId *string `pulumi:"productId"`
	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat *string `pulumi:"ruleFormat"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyRuleWarning `pulumi:"ruleWarnings"`
	// Property Rules as JSON
	Rules *string `pulumi:"rules"`
	// Deprecated: The setting "variables" has been deprecated.
	Variables *string `pulumi:"variables"`
}

// The set of arguments for constructing a Property resource.
type PropertyArgs struct {
	// Deprecated: The setting "contact" has been deprecated.
	Contacts pulumi.StringArrayInput
	// Deprecated: The setting "contract" has been deprecated.
	Contract pulumi.StringPtrInput
	// Contract ID to be assigned to the Property
	ContractId pulumi.StringPtrInput
	// Deprecated: The setting "cp_code" has been deprecated.
	CpCode pulumi.StringPtrInput
	// Deprecated: The setting "group" has been deprecated.
	Group pulumi.StringPtrInput
	// Group ID to be assigned to the Property
	GroupId   pulumi.StringPtrInput
	Hostnames PropertyHostnameArrayInput
	// Deprecated: The setting "is_secure" has been deprecated.
	IsSecure pulumi.BoolPtrInput
	// Name to give to the Property (must be unique)
	Name pulumi.StringPtrInput
	// Deprecated: The setting "origin" has been deprecated.
	Origins PropertyOriginArrayInput
	// Deprecated: The setting "product" has been deprecated.
	Product pulumi.StringPtrInput
	// Product ID to be assigned to the Property
	ProductId pulumi.StringPtrInput
	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat pulumi.StringPtrInput
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyRuleWarningArrayInput
	// Property Rules as JSON
	Rules pulumi.StringPtrInput
	// Deprecated: The setting "variables" has been deprecated.
	Variables pulumi.StringPtrInput
}

func (PropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyArgs)(nil)).Elem()
}

type PropertyInput interface {
	pulumi.Input

	ToPropertyOutput() PropertyOutput
	ToPropertyOutputWithContext(ctx context.Context) PropertyOutput
}

func (*Property) ElementType() reflect.Type {
	return reflect.TypeOf((*Property)(nil))
}

func (i *Property) ToPropertyOutput() PropertyOutput {
	return i.ToPropertyOutputWithContext(context.Background())
}

func (i *Property) ToPropertyOutputWithContext(ctx context.Context) PropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyOutput)
}

func (i *Property) ToPropertyPtrOutput() PropertyPtrOutput {
	return i.ToPropertyPtrOutputWithContext(context.Background())
}

func (i *Property) ToPropertyPtrOutputWithContext(ctx context.Context) PropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyPtrOutput)
}

type PropertyPtrInput interface {
	pulumi.Input

	ToPropertyPtrOutput() PropertyPtrOutput
	ToPropertyPtrOutputWithContext(ctx context.Context) PropertyPtrOutput
}

type propertyPtrType PropertyArgs

func (*propertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Property)(nil))
}

func (i *propertyPtrType) ToPropertyPtrOutput() PropertyPtrOutput {
	return i.ToPropertyPtrOutputWithContext(context.Background())
}

func (i *propertyPtrType) ToPropertyPtrOutputWithContext(ctx context.Context) PropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyPtrOutput)
}

// PropertyArrayInput is an input type that accepts PropertyArray and PropertyArrayOutput values.
// You can construct a concrete instance of `PropertyArrayInput` via:
//
//          PropertyArray{ PropertyArgs{...} }
type PropertyArrayInput interface {
	pulumi.Input

	ToPropertyArrayOutput() PropertyArrayOutput
	ToPropertyArrayOutputWithContext(context.Context) PropertyArrayOutput
}

type PropertyArray []PropertyInput

func (PropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Property)(nil)).Elem()
}

func (i PropertyArray) ToPropertyArrayOutput() PropertyArrayOutput {
	return i.ToPropertyArrayOutputWithContext(context.Background())
}

func (i PropertyArray) ToPropertyArrayOutputWithContext(ctx context.Context) PropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyArrayOutput)
}

// PropertyMapInput is an input type that accepts PropertyMap and PropertyMapOutput values.
// You can construct a concrete instance of `PropertyMapInput` via:
//
//          PropertyMap{ "key": PropertyArgs{...} }
type PropertyMapInput interface {
	pulumi.Input

	ToPropertyMapOutput() PropertyMapOutput
	ToPropertyMapOutputWithContext(context.Context) PropertyMapOutput
}

type PropertyMap map[string]PropertyInput

func (PropertyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Property)(nil)).Elem()
}

func (i PropertyMap) ToPropertyMapOutput() PropertyMapOutput {
	return i.ToPropertyMapOutputWithContext(context.Background())
}

func (i PropertyMap) ToPropertyMapOutputWithContext(ctx context.Context) PropertyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyMapOutput)
}

type PropertyOutput struct{ *pulumi.OutputState }

func (PropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Property)(nil))
}

func (o PropertyOutput) ToPropertyOutput() PropertyOutput {
	return o
}

func (o PropertyOutput) ToPropertyOutputWithContext(ctx context.Context) PropertyOutput {
	return o
}

func (o PropertyOutput) ToPropertyPtrOutput() PropertyPtrOutput {
	return o.ToPropertyPtrOutputWithContext(context.Background())
}

func (o PropertyOutput) ToPropertyPtrOutputWithContext(ctx context.Context) PropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Property) *Property {
		return &v
	}).(PropertyPtrOutput)
}

type PropertyPtrOutput struct{ *pulumi.OutputState }

func (PropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Property)(nil))
}

func (o PropertyPtrOutput) ToPropertyPtrOutput() PropertyPtrOutput {
	return o
}

func (o PropertyPtrOutput) ToPropertyPtrOutputWithContext(ctx context.Context) PropertyPtrOutput {
	return o
}

func (o PropertyPtrOutput) Elem() PropertyOutput {
	return o.ApplyT(func(v *Property) Property {
		if v != nil {
			return *v
		}
		var ret Property
		return ret
	}).(PropertyOutput)
}

type PropertyArrayOutput struct{ *pulumi.OutputState }

func (PropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Property)(nil))
}

func (o PropertyArrayOutput) ToPropertyArrayOutput() PropertyArrayOutput {
	return o
}

func (o PropertyArrayOutput) ToPropertyArrayOutputWithContext(ctx context.Context) PropertyArrayOutput {
	return o
}

func (o PropertyArrayOutput) Index(i pulumi.IntInput) PropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Property {
		return vs[0].([]Property)[vs[1].(int)]
	}).(PropertyOutput)
}

type PropertyMapOutput struct{ *pulumi.OutputState }

func (PropertyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Property)(nil))
}

func (o PropertyMapOutput) ToPropertyMapOutput() PropertyMapOutput {
	return o
}

func (o PropertyMapOutput) ToPropertyMapOutputWithContext(ctx context.Context) PropertyMapOutput {
	return o
}

func (o PropertyMapOutput) MapIndex(k pulumi.StringInput) PropertyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Property {
		return vs[0].(map[string]Property)[vs[1].(string)]
	}).(PropertyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyInput)(nil)).Elem(), &Property{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyPtrInput)(nil)).Elem(), &Property{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyArrayInput)(nil)).Elem(), PropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyMapInput)(nil)).Elem(), PropertyMap{})
	pulumi.RegisterOutputType(PropertyOutput{})
	pulumi.RegisterOutputType(PropertyPtrOutput{})
	pulumi.RegisterOutputType(PropertyArrayOutput{})
	pulumi.RegisterOutputType(PropertyMapOutput{})
}
