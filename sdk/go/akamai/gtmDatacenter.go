// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `GtmDatacenter` resource to create, configure, and import a GTM data center. A GTM data center represents a customer data center and is also known as a traffic target, a location containing many servers GTM can direct traffic to.
//
// GTM uses data centers to scale load balancing. For example, you might have data centers in both New York and Amsterdam and want to balance load between them. You can configure GTM to send US users to the New York data center and European users to the data center in Amsterdam.
//
// > **Note** Import requires an ID with this format: `existingDomainName`:`existingDatacenterId`.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := akamai.NewGtmDatacenter(ctx, "demoDatacenter", &akamai.GtmDatacenterArgs{
//				Domain:   pulumi.String("demo_domain.akadns.net"),
//				Nickname: pulumi.String("demo_datacenter"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GtmDatacenter struct {
	pulumi.CustomResourceState

	// The name of the city where the data center is located.
	City pulumi.StringPtrOutput `pulumi:"city"`
	// Identifies the data center's `datacenterId` of which this data center is a clone.
	CloneOf pulumi.IntPtrOutput `pulumi:"cloneOf"`
	// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
	CloudServerHostHeaderOverride pulumi.BoolPtrOutput `pulumi:"cloudServerHostHeaderOverride"`
	// A boolean indicating whether to balance load between two or more servers in a cloud environment.
	CloudServerTargeting pulumi.BoolPtrOutput `pulumi:"cloudServerTargeting"`
	// A two-letter code that specifies the continent where the data center maps to.
	Continent pulumi.StringPtrOutput `pulumi:"continent"`
	// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// A unique identifier for an existing data center in the domain.
	DatacenterId pulumi.IntOutput `pulumi:"datacenterId"`
	// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
	DefaultLoadObject GtmDatacenterDefaultLoadObjectPtrOutput `pulumi:"defaultLoadObject"`
	// The GTM domain name for the data center.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Specifies the geographical latitude of the data center's position. See also longitude within this object.
	Latitude pulumi.Float64PtrOutput `pulumi:"latitude"`
	// Specifies the geographic longitude of the data center's position. See also latitude within this object.
	Longitude pulumi.Float64PtrOutput `pulumi:"longitude"`
	// A descriptive label for the data center.
	Nickname                   pulumi.StringPtrOutput `pulumi:"nickname"`
	PingInterval               pulumi.IntOutput       `pulumi:"pingInterval"`
	PingPacketSize             pulumi.IntOutput       `pulumi:"pingPacketSize"`
	ScorePenalty               pulumi.IntOutput       `pulumi:"scorePenalty"`
	ServermonitorLivenessCount pulumi.IntOutput       `pulumi:"servermonitorLivenessCount"`
	ServermonitorLoadCount     pulumi.IntOutput       `pulumi:"servermonitorLoadCount"`
	ServermonitorPool          pulumi.StringOutput    `pulumi:"servermonitorPool"`
	// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
	StateOrProvince pulumi.StringPtrOutput `pulumi:"stateOrProvince"`
	// A boolean indicating whether the data center is virtual or physical, the latter meaning the data center has an Akamai Network Agent installed, and its physical location (`latitude`, `longitude`) is fixed. Either `true` if virtual or `false` if physical.
	Virtual pulumi.BoolOutput `pulumi:"virtual"`
	// A boolean, that if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrOutput `pulumi:"waitOnComplete"`
}

// NewGtmDatacenter registers a new resource with the given unique name, arguments, and options.
func NewGtmDatacenter(ctx *pulumi.Context,
	name string, args *GtmDatacenterArgs, opts ...pulumi.ResourceOption) (*GtmDatacenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmDatacenter:GtmDatacenter"),
		},
	})
	opts = append(opts, aliases)
	var resource GtmDatacenter
	err := ctx.RegisterResource("akamai:index/gtmDatacenter:GtmDatacenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmDatacenter gets an existing GtmDatacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmDatacenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmDatacenterState, opts ...pulumi.ResourceOption) (*GtmDatacenter, error) {
	var resource GtmDatacenter
	err := ctx.ReadResource("akamai:index/gtmDatacenter:GtmDatacenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmDatacenter resources.
type gtmDatacenterState struct {
	// The name of the city where the data center is located.
	City *string `pulumi:"city"`
	// Identifies the data center's `datacenterId` of which this data center is a clone.
	CloneOf *int `pulumi:"cloneOf"`
	// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
	CloudServerHostHeaderOverride *bool `pulumi:"cloudServerHostHeaderOverride"`
	// A boolean indicating whether to balance load between two or more servers in a cloud environment.
	CloudServerTargeting *bool `pulumi:"cloudServerTargeting"`
	// A two-letter code that specifies the continent where the data center maps to.
	Continent *string `pulumi:"continent"`
	// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
	Country *string `pulumi:"country"`
	// A unique identifier for an existing data center in the domain.
	DatacenterId *int `pulumi:"datacenterId"`
	// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
	DefaultLoadObject *GtmDatacenterDefaultLoadObject `pulumi:"defaultLoadObject"`
	// The GTM domain name for the data center.
	Domain *string `pulumi:"domain"`
	// Specifies the geographical latitude of the data center's position. See also longitude within this object.
	Latitude *float64 `pulumi:"latitude"`
	// Specifies the geographic longitude of the data center's position. See also latitude within this object.
	Longitude *float64 `pulumi:"longitude"`
	// A descriptive label for the data center.
	Nickname                   *string `pulumi:"nickname"`
	PingInterval               *int    `pulumi:"pingInterval"`
	PingPacketSize             *int    `pulumi:"pingPacketSize"`
	ScorePenalty               *int    `pulumi:"scorePenalty"`
	ServermonitorLivenessCount *int    `pulumi:"servermonitorLivenessCount"`
	ServermonitorLoadCount     *int    `pulumi:"servermonitorLoadCount"`
	ServermonitorPool          *string `pulumi:"servermonitorPool"`
	// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
	StateOrProvince *string `pulumi:"stateOrProvince"`
	// A boolean indicating whether the data center is virtual or physical, the latter meaning the data center has an Akamai Network Agent installed, and its physical location (`latitude`, `longitude`) is fixed. Either `true` if virtual or `false` if physical.
	Virtual *bool `pulumi:"virtual"`
	// A boolean, that if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

type GtmDatacenterState struct {
	// The name of the city where the data center is located.
	City pulumi.StringPtrInput
	// Identifies the data center's `datacenterId` of which this data center is a clone.
	CloneOf pulumi.IntPtrInput
	// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
	CloudServerHostHeaderOverride pulumi.BoolPtrInput
	// A boolean indicating whether to balance load between two or more servers in a cloud environment.
	CloudServerTargeting pulumi.BoolPtrInput
	// A two-letter code that specifies the continent where the data center maps to.
	Continent pulumi.StringPtrInput
	// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
	Country pulumi.StringPtrInput
	// A unique identifier for an existing data center in the domain.
	DatacenterId pulumi.IntPtrInput
	// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
	DefaultLoadObject GtmDatacenterDefaultLoadObjectPtrInput
	// The GTM domain name for the data center.
	Domain pulumi.StringPtrInput
	// Specifies the geographical latitude of the data center's position. See also longitude within this object.
	Latitude pulumi.Float64PtrInput
	// Specifies the geographic longitude of the data center's position. See also latitude within this object.
	Longitude pulumi.Float64PtrInput
	// A descriptive label for the data center.
	Nickname                   pulumi.StringPtrInput
	PingInterval               pulumi.IntPtrInput
	PingPacketSize             pulumi.IntPtrInput
	ScorePenalty               pulumi.IntPtrInput
	ServermonitorLivenessCount pulumi.IntPtrInput
	ServermonitorLoadCount     pulumi.IntPtrInput
	ServermonitorPool          pulumi.StringPtrInput
	// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
	StateOrProvince pulumi.StringPtrInput
	// A boolean indicating whether the data center is virtual or physical, the latter meaning the data center has an Akamai Network Agent installed, and its physical location (`latitude`, `longitude`) is fixed. Either `true` if virtual or `false` if physical.
	Virtual pulumi.BoolPtrInput
	// A boolean, that if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmDatacenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmDatacenterState)(nil)).Elem()
}

type gtmDatacenterArgs struct {
	// The name of the city where the data center is located.
	City *string `pulumi:"city"`
	// Identifies the data center's `datacenterId` of which this data center is a clone.
	CloneOf *int `pulumi:"cloneOf"`
	// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
	CloudServerHostHeaderOverride *bool `pulumi:"cloudServerHostHeaderOverride"`
	// A boolean indicating whether to balance load between two or more servers in a cloud environment.
	CloudServerTargeting *bool `pulumi:"cloudServerTargeting"`
	// A two-letter code that specifies the continent where the data center maps to.
	Continent *string `pulumi:"continent"`
	// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
	Country *string `pulumi:"country"`
	// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
	DefaultLoadObject *GtmDatacenterDefaultLoadObject `pulumi:"defaultLoadObject"`
	// The GTM domain name for the data center.
	Domain string `pulumi:"domain"`
	// Specifies the geographical latitude of the data center's position. See also longitude within this object.
	Latitude *float64 `pulumi:"latitude"`
	// Specifies the geographic longitude of the data center's position. See also latitude within this object.
	Longitude *float64 `pulumi:"longitude"`
	// A descriptive label for the data center.
	Nickname *string `pulumi:"nickname"`
	// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
	StateOrProvince *string `pulumi:"stateOrProvince"`
	// A boolean, that if set to `true`, waits for transaction to complete.
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmDatacenter resource.
type GtmDatacenterArgs struct {
	// The name of the city where the data center is located.
	City pulumi.StringPtrInput
	// Identifies the data center's `datacenterId` of which this data center is a clone.
	CloneOf pulumi.IntPtrInput
	// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
	CloudServerHostHeaderOverride pulumi.BoolPtrInput
	// A boolean indicating whether to balance load between two or more servers in a cloud environment.
	CloudServerTargeting pulumi.BoolPtrInput
	// A two-letter code that specifies the continent where the data center maps to.
	Continent pulumi.StringPtrInput
	// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
	Country pulumi.StringPtrInput
	// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
	DefaultLoadObject GtmDatacenterDefaultLoadObjectPtrInput
	// The GTM domain name for the data center.
	Domain pulumi.StringInput
	// Specifies the geographical latitude of the data center's position. See also longitude within this object.
	Latitude pulumi.Float64PtrInput
	// Specifies the geographic longitude of the data center's position. See also latitude within this object.
	Longitude pulumi.Float64PtrInput
	// A descriptive label for the data center.
	Nickname pulumi.StringPtrInput
	// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
	StateOrProvince pulumi.StringPtrInput
	// A boolean, that if set to `true`, waits for transaction to complete.
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmDatacenterArgs)(nil)).Elem()
}

type GtmDatacenterInput interface {
	pulumi.Input

	ToGtmDatacenterOutput() GtmDatacenterOutput
	ToGtmDatacenterOutputWithContext(ctx context.Context) GtmDatacenterOutput
}

func (*GtmDatacenter) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmDatacenter)(nil)).Elem()
}

func (i *GtmDatacenter) ToGtmDatacenterOutput() GtmDatacenterOutput {
	return i.ToGtmDatacenterOutputWithContext(context.Background())
}

func (i *GtmDatacenter) ToGtmDatacenterOutputWithContext(ctx context.Context) GtmDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDatacenterOutput)
}

// GtmDatacenterArrayInput is an input type that accepts GtmDatacenterArray and GtmDatacenterArrayOutput values.
// You can construct a concrete instance of `GtmDatacenterArrayInput` via:
//
//	GtmDatacenterArray{ GtmDatacenterArgs{...} }
type GtmDatacenterArrayInput interface {
	pulumi.Input

	ToGtmDatacenterArrayOutput() GtmDatacenterArrayOutput
	ToGtmDatacenterArrayOutputWithContext(context.Context) GtmDatacenterArrayOutput
}

type GtmDatacenterArray []GtmDatacenterInput

func (GtmDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmDatacenter)(nil)).Elem()
}

func (i GtmDatacenterArray) ToGtmDatacenterArrayOutput() GtmDatacenterArrayOutput {
	return i.ToGtmDatacenterArrayOutputWithContext(context.Background())
}

func (i GtmDatacenterArray) ToGtmDatacenterArrayOutputWithContext(ctx context.Context) GtmDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDatacenterArrayOutput)
}

// GtmDatacenterMapInput is an input type that accepts GtmDatacenterMap and GtmDatacenterMapOutput values.
// You can construct a concrete instance of `GtmDatacenterMapInput` via:
//
//	GtmDatacenterMap{ "key": GtmDatacenterArgs{...} }
type GtmDatacenterMapInput interface {
	pulumi.Input

	ToGtmDatacenterMapOutput() GtmDatacenterMapOutput
	ToGtmDatacenterMapOutputWithContext(context.Context) GtmDatacenterMapOutput
}

type GtmDatacenterMap map[string]GtmDatacenterInput

func (GtmDatacenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmDatacenter)(nil)).Elem()
}

func (i GtmDatacenterMap) ToGtmDatacenterMapOutput() GtmDatacenterMapOutput {
	return i.ToGtmDatacenterMapOutputWithContext(context.Background())
}

func (i GtmDatacenterMap) ToGtmDatacenterMapOutputWithContext(ctx context.Context) GtmDatacenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmDatacenterMapOutput)
}

type GtmDatacenterOutput struct{ *pulumi.OutputState }

func (GtmDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmDatacenter)(nil)).Elem()
}

func (o GtmDatacenterOutput) ToGtmDatacenterOutput() GtmDatacenterOutput {
	return o
}

func (o GtmDatacenterOutput) ToGtmDatacenterOutputWithContext(ctx context.Context) GtmDatacenterOutput {
	return o
}

// The name of the city where the data center is located.
func (o GtmDatacenterOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringPtrOutput { return v.City }).(pulumi.StringPtrOutput)
}

// Identifies the data center's `datacenterId` of which this data center is a clone.
func (o GtmDatacenterOutput) CloneOf() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntPtrOutput { return v.CloneOf }).(pulumi.IntPtrOutput)
}

// A boolean that, if set to `true`, Akamai's liveness test agents use the Host header configured in the liveness test.
func (o GtmDatacenterOutput) CloudServerHostHeaderOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.BoolPtrOutput { return v.CloudServerHostHeaderOverride }).(pulumi.BoolPtrOutput)
}

// A boolean indicating whether to balance load between two or more servers in a cloud environment.
func (o GtmDatacenterOutput) CloudServerTargeting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.BoolPtrOutput { return v.CloudServerTargeting }).(pulumi.BoolPtrOutput)
}

// A two-letter code that specifies the continent where the data center maps to.
func (o GtmDatacenterOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringPtrOutput { return v.Continent }).(pulumi.StringPtrOutput)
}

// A two-letter ISO 3166 country code that specifies the country where the data center maps to.
func (o GtmDatacenterOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// A unique identifier for an existing data center in the domain.
func (o GtmDatacenterOutput) DatacenterId() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.DatacenterId }).(pulumi.IntOutput)
}

// Specifies the load reporting interface between you and the GTM system. If used, requires these additional arguments:
func (o GtmDatacenterOutput) DefaultLoadObject() GtmDatacenterDefaultLoadObjectPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) GtmDatacenterDefaultLoadObjectPtrOutput { return v.DefaultLoadObject }).(GtmDatacenterDefaultLoadObjectPtrOutput)
}

// The GTM domain name for the data center.
func (o GtmDatacenterOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Specifies the geographical latitude of the data center's position. See also longitude within this object.
func (o GtmDatacenterOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.Float64PtrOutput { return v.Latitude }).(pulumi.Float64PtrOutput)
}

// Specifies the geographic longitude of the data center's position. See also latitude within this object.
func (o GtmDatacenterOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.Float64PtrOutput { return v.Longitude }).(pulumi.Float64PtrOutput)
}

// A descriptive label for the data center.
func (o GtmDatacenterOutput) Nickname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringPtrOutput { return v.Nickname }).(pulumi.StringPtrOutput)
}

func (o GtmDatacenterOutput) PingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.PingInterval }).(pulumi.IntOutput)
}

func (o GtmDatacenterOutput) PingPacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.PingPacketSize }).(pulumi.IntOutput)
}

func (o GtmDatacenterOutput) ScorePenalty() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.ScorePenalty }).(pulumi.IntOutput)
}

func (o GtmDatacenterOutput) ServermonitorLivenessCount() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.ServermonitorLivenessCount }).(pulumi.IntOutput)
}

func (o GtmDatacenterOutput) ServermonitorLoadCount() pulumi.IntOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.IntOutput { return v.ServermonitorLoadCount }).(pulumi.IntOutput)
}

func (o GtmDatacenterOutput) ServermonitorPool() pulumi.StringOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringOutput { return v.ServermonitorPool }).(pulumi.StringOutput)
}

// Specifies a two-letter ISO 3166 country code for the state or province where the data center is located.
func (o GtmDatacenterOutput) StateOrProvince() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.StringPtrOutput { return v.StateOrProvince }).(pulumi.StringPtrOutput)
}

// A boolean indicating whether the data center is virtual or physical, the latter meaning the data center has an Akamai Network Agent installed, and its physical location (`latitude`, `longitude`) is fixed. Either `true` if virtual or `false` if physical.
func (o GtmDatacenterOutput) Virtual() pulumi.BoolOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.BoolOutput { return v.Virtual }).(pulumi.BoolOutput)
}

// A boolean, that if set to `true`, waits for transaction to complete.
func (o GtmDatacenterOutput) WaitOnComplete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GtmDatacenter) pulumi.BoolPtrOutput { return v.WaitOnComplete }).(pulumi.BoolPtrOutput)
}

type GtmDatacenterArrayOutput struct{ *pulumi.OutputState }

func (GtmDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmDatacenter)(nil)).Elem()
}

func (o GtmDatacenterArrayOutput) ToGtmDatacenterArrayOutput() GtmDatacenterArrayOutput {
	return o
}

func (o GtmDatacenterArrayOutput) ToGtmDatacenterArrayOutputWithContext(ctx context.Context) GtmDatacenterArrayOutput {
	return o
}

func (o GtmDatacenterArrayOutput) Index(i pulumi.IntInput) GtmDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GtmDatacenter {
		return vs[0].([]*GtmDatacenter)[vs[1].(int)]
	}).(GtmDatacenterOutput)
}

type GtmDatacenterMapOutput struct{ *pulumi.OutputState }

func (GtmDatacenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmDatacenter)(nil)).Elem()
}

func (o GtmDatacenterMapOutput) ToGtmDatacenterMapOutput() GtmDatacenterMapOutput {
	return o
}

func (o GtmDatacenterMapOutput) ToGtmDatacenterMapOutputWithContext(ctx context.Context) GtmDatacenterMapOutput {
	return o
}

func (o GtmDatacenterMapOutput) MapIndex(k pulumi.StringInput) GtmDatacenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GtmDatacenter {
		return vs[0].(map[string]*GtmDatacenter)[vs[1].(string)]
	}).(GtmDatacenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDatacenterInput)(nil)).Elem(), &GtmDatacenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDatacenterArrayInput)(nil)).Elem(), GtmDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmDatacenterMapInput)(nil)).Elem(), GtmDatacenterMap{})
	pulumi.RegisterOutputType(GtmDatacenterOutput{})
	pulumi.RegisterOutputType(GtmDatacenterArrayOutput{})
	pulumi.RegisterOutputType(GtmDatacenterMapOutput{})
}
