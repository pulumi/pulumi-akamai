// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CloudletsPolicyActivation struct {
	pulumi.CustomResourceState

	// Set of property IDs to link to this Cloudlets policy
	AssociatedProperties pulumi.StringArrayOutput `pulumi:"associatedProperties"`
	// The network you want to activate the policy version on (options are Staging and Production)
	Network pulumi.StringOutput `pulumi:"network"`
	// ID of the Cloudlets policy you want to activate
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Activation status for this Cloudlets policy
	Status pulumi.StringOutput `pulumi:"status"`
	// Cloudlets policy version you want to activate
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCloudletsPolicyActivation registers a new resource with the given unique name, arguments, and options.
func NewCloudletsPolicyActivation(ctx *pulumi.Context,
	name string, args *CloudletsPolicyActivationArgs, opts ...pulumi.ResourceOption) (*CloudletsPolicyActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssociatedProperties == nil {
		return nil, errors.New("invalid value for required argument 'AssociatedProperties'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudletsPolicyActivation
	err := ctx.RegisterResource("akamai:index/cloudletsPolicyActivation:CloudletsPolicyActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudletsPolicyActivation gets an existing CloudletsPolicyActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudletsPolicyActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudletsPolicyActivationState, opts ...pulumi.ResourceOption) (*CloudletsPolicyActivation, error) {
	var resource CloudletsPolicyActivation
	err := ctx.ReadResource("akamai:index/cloudletsPolicyActivation:CloudletsPolicyActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudletsPolicyActivation resources.
type cloudletsPolicyActivationState struct {
	// Set of property IDs to link to this Cloudlets policy
	AssociatedProperties []string `pulumi:"associatedProperties"`
	// The network you want to activate the policy version on (options are Staging and Production)
	Network *string `pulumi:"network"`
	// ID of the Cloudlets policy you want to activate
	PolicyId *int `pulumi:"policyId"`
	// Activation status for this Cloudlets policy
	Status *string `pulumi:"status"`
	// Cloudlets policy version you want to activate
	Version *int `pulumi:"version"`
}

type CloudletsPolicyActivationState struct {
	// Set of property IDs to link to this Cloudlets policy
	AssociatedProperties pulumi.StringArrayInput
	// The network you want to activate the policy version on (options are Staging and Production)
	Network pulumi.StringPtrInput
	// ID of the Cloudlets policy you want to activate
	PolicyId pulumi.IntPtrInput
	// Activation status for this Cloudlets policy
	Status pulumi.StringPtrInput
	// Cloudlets policy version you want to activate
	Version pulumi.IntPtrInput
}

func (CloudletsPolicyActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudletsPolicyActivationState)(nil)).Elem()
}

type cloudletsPolicyActivationArgs struct {
	// Set of property IDs to link to this Cloudlets policy
	AssociatedProperties []string `pulumi:"associatedProperties"`
	// The network you want to activate the policy version on (options are Staging and Production)
	Network string `pulumi:"network"`
	// ID of the Cloudlets policy you want to activate
	PolicyId int `pulumi:"policyId"`
	// Cloudlets policy version you want to activate
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a CloudletsPolicyActivation resource.
type CloudletsPolicyActivationArgs struct {
	// Set of property IDs to link to this Cloudlets policy
	AssociatedProperties pulumi.StringArrayInput
	// The network you want to activate the policy version on (options are Staging and Production)
	Network pulumi.StringInput
	// ID of the Cloudlets policy you want to activate
	PolicyId pulumi.IntInput
	// Cloudlets policy version you want to activate
	Version pulumi.IntInput
}

func (CloudletsPolicyActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudletsPolicyActivationArgs)(nil)).Elem()
}

type CloudletsPolicyActivationInput interface {
	pulumi.Input

	ToCloudletsPolicyActivationOutput() CloudletsPolicyActivationOutput
	ToCloudletsPolicyActivationOutputWithContext(ctx context.Context) CloudletsPolicyActivationOutput
}

func (*CloudletsPolicyActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudletsPolicyActivation)(nil)).Elem()
}

func (i *CloudletsPolicyActivation) ToCloudletsPolicyActivationOutput() CloudletsPolicyActivationOutput {
	return i.ToCloudletsPolicyActivationOutputWithContext(context.Background())
}

func (i *CloudletsPolicyActivation) ToCloudletsPolicyActivationOutputWithContext(ctx context.Context) CloudletsPolicyActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsPolicyActivationOutput)
}

// CloudletsPolicyActivationArrayInput is an input type that accepts CloudletsPolicyActivationArray and CloudletsPolicyActivationArrayOutput values.
// You can construct a concrete instance of `CloudletsPolicyActivationArrayInput` via:
//
//	CloudletsPolicyActivationArray{ CloudletsPolicyActivationArgs{...} }
type CloudletsPolicyActivationArrayInput interface {
	pulumi.Input

	ToCloudletsPolicyActivationArrayOutput() CloudletsPolicyActivationArrayOutput
	ToCloudletsPolicyActivationArrayOutputWithContext(context.Context) CloudletsPolicyActivationArrayOutput
}

type CloudletsPolicyActivationArray []CloudletsPolicyActivationInput

func (CloudletsPolicyActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudletsPolicyActivation)(nil)).Elem()
}

func (i CloudletsPolicyActivationArray) ToCloudletsPolicyActivationArrayOutput() CloudletsPolicyActivationArrayOutput {
	return i.ToCloudletsPolicyActivationArrayOutputWithContext(context.Background())
}

func (i CloudletsPolicyActivationArray) ToCloudletsPolicyActivationArrayOutputWithContext(ctx context.Context) CloudletsPolicyActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsPolicyActivationArrayOutput)
}

// CloudletsPolicyActivationMapInput is an input type that accepts CloudletsPolicyActivationMap and CloudletsPolicyActivationMapOutput values.
// You can construct a concrete instance of `CloudletsPolicyActivationMapInput` via:
//
//	CloudletsPolicyActivationMap{ "key": CloudletsPolicyActivationArgs{...} }
type CloudletsPolicyActivationMapInput interface {
	pulumi.Input

	ToCloudletsPolicyActivationMapOutput() CloudletsPolicyActivationMapOutput
	ToCloudletsPolicyActivationMapOutputWithContext(context.Context) CloudletsPolicyActivationMapOutput
}

type CloudletsPolicyActivationMap map[string]CloudletsPolicyActivationInput

func (CloudletsPolicyActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudletsPolicyActivation)(nil)).Elem()
}

func (i CloudletsPolicyActivationMap) ToCloudletsPolicyActivationMapOutput() CloudletsPolicyActivationMapOutput {
	return i.ToCloudletsPolicyActivationMapOutputWithContext(context.Background())
}

func (i CloudletsPolicyActivationMap) ToCloudletsPolicyActivationMapOutputWithContext(ctx context.Context) CloudletsPolicyActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudletsPolicyActivationMapOutput)
}

type CloudletsPolicyActivationOutput struct{ *pulumi.OutputState }

func (CloudletsPolicyActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudletsPolicyActivation)(nil)).Elem()
}

func (o CloudletsPolicyActivationOutput) ToCloudletsPolicyActivationOutput() CloudletsPolicyActivationOutput {
	return o
}

func (o CloudletsPolicyActivationOutput) ToCloudletsPolicyActivationOutputWithContext(ctx context.Context) CloudletsPolicyActivationOutput {
	return o
}

// Set of property IDs to link to this Cloudlets policy
func (o CloudletsPolicyActivationOutput) AssociatedProperties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudletsPolicyActivation) pulumi.StringArrayOutput { return v.AssociatedProperties }).(pulumi.StringArrayOutput)
}

// The network you want to activate the policy version on (options are Staging and Production)
func (o CloudletsPolicyActivationOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudletsPolicyActivation) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// ID of the Cloudlets policy you want to activate
func (o CloudletsPolicyActivationOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudletsPolicyActivation) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// Activation status for this Cloudlets policy
func (o CloudletsPolicyActivationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudletsPolicyActivation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Cloudlets policy version you want to activate
func (o CloudletsPolicyActivationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudletsPolicyActivation) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CloudletsPolicyActivationArrayOutput struct{ *pulumi.OutputState }

func (CloudletsPolicyActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudletsPolicyActivation)(nil)).Elem()
}

func (o CloudletsPolicyActivationArrayOutput) ToCloudletsPolicyActivationArrayOutput() CloudletsPolicyActivationArrayOutput {
	return o
}

func (o CloudletsPolicyActivationArrayOutput) ToCloudletsPolicyActivationArrayOutputWithContext(ctx context.Context) CloudletsPolicyActivationArrayOutput {
	return o
}

func (o CloudletsPolicyActivationArrayOutput) Index(i pulumi.IntInput) CloudletsPolicyActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudletsPolicyActivation {
		return vs[0].([]*CloudletsPolicyActivation)[vs[1].(int)]
	}).(CloudletsPolicyActivationOutput)
}

type CloudletsPolicyActivationMapOutput struct{ *pulumi.OutputState }

func (CloudletsPolicyActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudletsPolicyActivation)(nil)).Elem()
}

func (o CloudletsPolicyActivationMapOutput) ToCloudletsPolicyActivationMapOutput() CloudletsPolicyActivationMapOutput {
	return o
}

func (o CloudletsPolicyActivationMapOutput) ToCloudletsPolicyActivationMapOutputWithContext(ctx context.Context) CloudletsPolicyActivationMapOutput {
	return o
}

func (o CloudletsPolicyActivationMapOutput) MapIndex(k pulumi.StringInput) CloudletsPolicyActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudletsPolicyActivation {
		return vs[0].(map[string]*CloudletsPolicyActivation)[vs[1].(string)]
	}).(CloudletsPolicyActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsPolicyActivationInput)(nil)).Elem(), &CloudletsPolicyActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsPolicyActivationArrayInput)(nil)).Elem(), CloudletsPolicyActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudletsPolicyActivationMapInput)(nil)).Elem(), CloudletsPolicyActivationMap{})
	pulumi.RegisterOutputType(CloudletsPolicyActivationOutput{})
	pulumi.RegisterOutputType(CloudletsPolicyActivationArrayOutput{})
	pulumi.RegisterOutputType(CloudletsPolicyActivationMapOutput{})
}
