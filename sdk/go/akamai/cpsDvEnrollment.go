// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `CpsDvEnrollment` resource to create an enrollment with all the information about your certificate life cycle, from the time you request it, through removal or automatic renewal. You can treat an enrollment as a core container for all the operations you perform within CPS.
//
// You can use this resource with `DnsRecord` or other third-party DNS provider to create DNS records, and `CpsDvValidation` to complete the certificate validation.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := akamai.NewCpsDvEnrollment(ctx, "example", &akamai.CpsDvEnrollmentArgs{
// 			ContractId:                         pulumi.String("ctr_1-AB123"),
// 			AcknowledgePreVerificationWarnings: pulumi.Bool(true),
// 			CommonName:                         pulumi.String("cps-test.example.net"),
// 			Sans: pulumi.StringArray{
// 				pulumi.String("san1.cps-test.example.net"),
// 				pulumi.String("san2.cps-test.example.net"),
// 			},
// 			SecureNetwork: pulumi.String("enhanced-tls"),
// 			SniOnly:       pulumi.Bool(true),
// 			AdminContact: &CpsDvEnrollmentAdminContactArgs{
// 				FirstName:      pulumi.String("x1"),
// 				LastName:       pulumi.String("x2"),
// 				Phone:          pulumi.String("123123123"),
// 				Email:          pulumi.String("x1x2@example.net"),
// 				AddressLineOne: pulumi.String("150 Broadway"),
// 				City:           pulumi.String("Cambridge"),
// 				CountryCode:    pulumi.String("US"),
// 				Organization:   pulumi.String("Akamai"),
// 				PostalCode:     pulumi.String("02142"),
// 				Region:         pulumi.String("MA"),
// 				Title:          pulumi.String("Administrator"),
// 			},
// 			TechContact: &CpsDvEnrollmentTechContactArgs{
// 				FirstName:      pulumi.String("x3"),
// 				LastName:       pulumi.String("x4"),
// 				Phone:          pulumi.String("123123123"),
// 				Email:          pulumi.String("x3x4@akamai.com"),
// 				AddressLineOne: pulumi.String("150 Broadway"),
// 				City:           pulumi.String("Cambridge"),
// 				CountryCode:    pulumi.String("US"),
// 				Organization:   pulumi.String("Akamai"),
// 				PostalCode:     pulumi.String("02142"),
// 				Region:         pulumi.String("MA"),
// 				Title:          pulumi.String("Administrator"),
// 			},
// 			CertificateChainType: pulumi.String("default"),
// 			Csr: &CpsDvEnrollmentCsrArgs{
// 				CountryCode:        pulumi.String("US"),
// 				City:               pulumi.String("cambridge"),
// 				Organization:       pulumi.String("Akamai"),
// 				OrganizationalUnit: pulumi.String("Dev"),
// 				State:              pulumi.String("MA"),
// 			},
// 			EnableMultiStackedCertificates: pulumi.Bool(false),
// 			NetworkConfiguration: &CpsDvEnrollmentNetworkConfigurationArgs{
// 				DisallowedTlsVersions: pulumi.StringArray{
// 					pulumi.String("TLSv1"),
// 					pulumi.String("TLSv1_1"),
// 				},
// 				CloneDnsNames:    pulumi.Bool(false),
// 				Geography:        pulumi.String("core"),
// 				OcspStapling:     pulumi.String("on"),
// 				PreferredCiphers: pulumi.String("ak-akamai-2020q1"),
// 				MustHaveCiphers:  pulumi.String("ak-akamai-2020q1"),
// 				QuicEnabled:      pulumi.Bool(false),
// 			},
// 			SignatureAlgorithm: pulumi.String("SHA-256"),
// 			Organization: &CpsDvEnrollmentOrganizationArgs{
// 				Name:           pulumi.String("Akamai"),
// 				Phone:          pulumi.String("123123123"),
// 				AddressLineOne: pulumi.String("150 Broadway"),
// 				City:           pulumi.String("Cambridge"),
// 				CountryCode:    pulumi.String("US"),
// 				PostalCode:     pulumi.String("02142"),
// 				Region:         pulumi.String("MA"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("dnsChallenges", example.DnsChallenges)
// 		ctx.Export("httpChallenges", example.HttpChallenges)
// 		ctx.Export("enrollmentId", example.ID())
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// The resource returns these attributes:
//
// * `registrationAuthority` - (Required) This value populates automatically with the `lets-encrypt` certificate type and is preserved in the `state` file.
// * `certificateType` - (Required) This value populates automatically with the `san` certificate type and is preserved in the `state` file.
// * `validationType` - (Required) This value populates automatically with the `dv` validation type and is preserved in the `state` file.
// * `id` - The unique identifier for this enrollment.
// * `dnsChallenges` - The validation challenge for the domains listed in the certificate. To successfully perform the validation, only one challenge for each domain must be complete, either `dnsChallenges` or `httpChallenges`.
//
//   Returns these additional attributes:
//
//       * `domain` - The domain to validate.
//       * `fullPath` - The URL where Akamai publishes `responseBody` for Let's Encrypt to validate.
//       * `responseBody` - The data Let's Encrypt expects to find served at `fullPath` URL.
// * `httpChallenges` - The validation challenge for the domains listed in the certificate. To successfully perform the validation, only one challenge for each domain must be complete, either `dnsChallenges` or `httpChallenges`.
//
//   Returns these additional attributes:
//
//       * `domain` - The domain to validate.
//       * `fullPath` - The URL where Akamai publishes `responseBody` for Let's Encrypt to validate.
//       * `responseBody` - The data Let's Encrypt expects to find served at `fullPath` URL.
//
// ## Import
//
// Basic Usagehcl resource "akamai_cps_dv_enrollment" "example" { # (resource arguments) } You can import your Akamai DV enrollment using a comma-delimited string of the enrollment ID and
//
//  contract ID, optionally with the `ctr_` prefix. You have to enter the IDs in this order`enrollment_id,contract_id` For example
//
// ```sh
//  $ pulumi import akamai:index/cpsDvEnrollment:CpsDvEnrollment example 12345,1-AB123
// ```
type CpsDvEnrollment struct {
	pulumi.CustomResourceState

	// Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
	AcknowledgePreVerificationWarnings pulumi.BoolPtrOutput `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator at your company.
	AdminContact CpsDvEnrollmentAdminContactOutput `pulumi:"adminContact"`
	// Certificate trust chain type.
	CertificateChainType pulumi.StringPtrOutput `pulumi:"certificateChainType"`
	CertificateType      pulumi.StringOutput    `pulumi:"certificateType"`
	// - (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// - (Required) A contract's ID, optionally with the `ctr_` prefix.
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
	Csr           CpsDvEnrollmentCsrOutput               `pulumi:"csr"`
	DnsChallenges CpsDvEnrollmentDnsChallengeArrayOutput `pulumi:"dnsChallenges"`
	// Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
	EnableMultiStackedCertificates pulumi.BoolPtrOutput                    `pulumi:"enableMultiStackedCertificates"`
	HttpChallenges                 CpsDvEnrollmentHttpChallengeArrayOutput `pulumi:"httpChallenges"`
	// The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationOutput `pulumi:"networkConfiguration"`
	// Your organization information.
	Organization          CpsDvEnrollmentOrganizationOutput `pulumi:"organization"`
	RegistrationAuthority pulumi.StringOutput               `pulumi:"registrationAuthority"`
	// Additional common names to create a Subject Alternative Names (SAN) list.
	Sans pulumi.StringArrayOutput `pulumi:"sans"`
	// The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
	SecureNetwork pulumi.StringOutput `pulumi:"secureNetwork"`
	// The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
	SignatureAlgorithm pulumi.StringOutput `pulumi:"signatureAlgorithm"`
	// Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
	SniOnly pulumi.BoolOutput `pulumi:"sniOnly"`
	// The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
	TechContact    CpsDvEnrollmentTechContactOutput `pulumi:"techContact"`
	ValidationType pulumi.StringOutput              `pulumi:"validationType"`
}

// NewCpsDvEnrollment registers a new resource with the given unique name, arguments, and options.
func NewCpsDvEnrollment(ctx *pulumi.Context,
	name string, args *CpsDvEnrollmentArgs, opts ...pulumi.ResourceOption) (*CpsDvEnrollment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminContact == nil {
		return nil, errors.New("invalid value for required argument 'AdminContact'")
	}
	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.Csr == nil {
		return nil, errors.New("invalid value for required argument 'Csr'")
	}
	if args.NetworkConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfiguration'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.SecureNetwork == nil {
		return nil, errors.New("invalid value for required argument 'SecureNetwork'")
	}
	if args.SignatureAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'SignatureAlgorithm'")
	}
	if args.SniOnly == nil {
		return nil, errors.New("invalid value for required argument 'SniOnly'")
	}
	if args.TechContact == nil {
		return nil, errors.New("invalid value for required argument 'TechContact'")
	}
	var resource CpsDvEnrollment
	err := ctx.RegisterResource("akamai:index/cpsDvEnrollment:CpsDvEnrollment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpsDvEnrollment gets an existing CpsDvEnrollment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpsDvEnrollment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpsDvEnrollmentState, opts ...pulumi.ResourceOption) (*CpsDvEnrollment, error) {
	var resource CpsDvEnrollment
	err := ctx.ReadResource("akamai:index/cpsDvEnrollment:CpsDvEnrollment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpsDvEnrollment resources.
type cpsDvEnrollmentState struct {
	// Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
	AcknowledgePreVerificationWarnings *bool `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator at your company.
	AdminContact *CpsDvEnrollmentAdminContact `pulumi:"adminContact"`
	// Certificate trust chain type.
	CertificateChainType *string `pulumi:"certificateChainType"`
	CertificateType      *string `pulumi:"certificateType"`
	// - (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
	CommonName *string `pulumi:"commonName"`
	// - (Required) A contract's ID, optionally with the `ctr_` prefix.
	ContractId *string `pulumi:"contractId"`
	// When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
	Csr           *CpsDvEnrollmentCsr           `pulumi:"csr"`
	DnsChallenges []CpsDvEnrollmentDnsChallenge `pulumi:"dnsChallenges"`
	// Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
	EnableMultiStackedCertificates *bool                          `pulumi:"enableMultiStackedCertificates"`
	HttpChallenges                 []CpsDvEnrollmentHttpChallenge `pulumi:"httpChallenges"`
	// The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
	NetworkConfiguration *CpsDvEnrollmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// Your organization information.
	Organization          *CpsDvEnrollmentOrganization `pulumi:"organization"`
	RegistrationAuthority *string                      `pulumi:"registrationAuthority"`
	// Additional common names to create a Subject Alternative Names (SAN) list.
	Sans []string `pulumi:"sans"`
	// The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
	SecureNetwork *string `pulumi:"secureNetwork"`
	// The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
	SniOnly *bool `pulumi:"sniOnly"`
	// The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
	TechContact    *CpsDvEnrollmentTechContact `pulumi:"techContact"`
	ValidationType *string                     `pulumi:"validationType"`
}

type CpsDvEnrollmentState struct {
	// Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
	AcknowledgePreVerificationWarnings pulumi.BoolPtrInput
	// Contact information for the certificate administrator at your company.
	AdminContact CpsDvEnrollmentAdminContactPtrInput
	// Certificate trust chain type.
	CertificateChainType pulumi.StringPtrInput
	CertificateType      pulumi.StringPtrInput
	// - (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
	CommonName pulumi.StringPtrInput
	// - (Required) A contract's ID, optionally with the `ctr_` prefix.
	ContractId pulumi.StringPtrInput
	// When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
	Csr           CpsDvEnrollmentCsrPtrInput
	DnsChallenges CpsDvEnrollmentDnsChallengeArrayInput
	// Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
	EnableMultiStackedCertificates pulumi.BoolPtrInput
	HttpChallenges                 CpsDvEnrollmentHttpChallengeArrayInput
	// The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationPtrInput
	// Your organization information.
	Organization          CpsDvEnrollmentOrganizationPtrInput
	RegistrationAuthority pulumi.StringPtrInput
	// Additional common names to create a Subject Alternative Names (SAN) list.
	Sans pulumi.StringArrayInput
	// The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
	SecureNetwork pulumi.StringPtrInput
	// The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
	SignatureAlgorithm pulumi.StringPtrInput
	// Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
	SniOnly pulumi.BoolPtrInput
	// The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
	TechContact    CpsDvEnrollmentTechContactPtrInput
	ValidationType pulumi.StringPtrInput
}

func (CpsDvEnrollmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsDvEnrollmentState)(nil)).Elem()
}

type cpsDvEnrollmentArgs struct {
	// Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
	AcknowledgePreVerificationWarnings *bool `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator at your company.
	AdminContact CpsDvEnrollmentAdminContact `pulumi:"adminContact"`
	// Certificate trust chain type.
	CertificateChainType *string `pulumi:"certificateChainType"`
	// - (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
	CommonName string `pulumi:"commonName"`
	// - (Required) A contract's ID, optionally with the `ctr_` prefix.
	ContractId string `pulumi:"contractId"`
	// When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
	Csr CpsDvEnrollmentCsr `pulumi:"csr"`
	// Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
	EnableMultiStackedCertificates *bool `pulumi:"enableMultiStackedCertificates"`
	// The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
	NetworkConfiguration CpsDvEnrollmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// Your organization information.
	Organization CpsDvEnrollmentOrganization `pulumi:"organization"`
	// Additional common names to create a Subject Alternative Names (SAN) list.
	Sans []string `pulumi:"sans"`
	// The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
	SecureNetwork string `pulumi:"secureNetwork"`
	// The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
	SniOnly bool `pulumi:"sniOnly"`
	// The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
	TechContact CpsDvEnrollmentTechContact `pulumi:"techContact"`
}

// The set of arguments for constructing a CpsDvEnrollment resource.
type CpsDvEnrollmentArgs struct {
	// Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
	AcknowledgePreVerificationWarnings pulumi.BoolPtrInput
	// Contact information for the certificate administrator at your company.
	AdminContact CpsDvEnrollmentAdminContactInput
	// Certificate trust chain type.
	CertificateChainType pulumi.StringPtrInput
	// - (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
	CommonName pulumi.StringInput
	// - (Required) A contract's ID, optionally with the `ctr_` prefix.
	ContractId pulumi.StringInput
	// When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
	Csr CpsDvEnrollmentCsrInput
	// Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
	EnableMultiStackedCertificates pulumi.BoolPtrInput
	// The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationInput
	// Your organization information.
	Organization CpsDvEnrollmentOrganizationInput
	// Additional common names to create a Subject Alternative Names (SAN) list.
	Sans pulumi.StringArrayInput
	// The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai's standard secure network, but it isn't PCI compliant. `enhanced-tls` deploys your certificate to Akamai's more secure network with PCI compliance capability.
	SecureNetwork pulumi.StringInput
	// The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
	SignatureAlgorithm pulumi.StringInput
	// Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can't change this setting once an enrollment is created.
	SniOnly pulumi.BoolInput
	// The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can't reach the `adminContact`.
	TechContact CpsDvEnrollmentTechContactInput
}

func (CpsDvEnrollmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsDvEnrollmentArgs)(nil)).Elem()
}

type CpsDvEnrollmentInput interface {
	pulumi.Input

	ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput
	ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput
}

func (*CpsDvEnrollment) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsDvEnrollment)(nil)).Elem()
}

func (i *CpsDvEnrollment) ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput {
	return i.ToCpsDvEnrollmentOutputWithContext(context.Background())
}

func (i *CpsDvEnrollment) ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentOutput)
}

// CpsDvEnrollmentArrayInput is an input type that accepts CpsDvEnrollmentArray and CpsDvEnrollmentArrayOutput values.
// You can construct a concrete instance of `CpsDvEnrollmentArrayInput` via:
//
//          CpsDvEnrollmentArray{ CpsDvEnrollmentArgs{...} }
type CpsDvEnrollmentArrayInput interface {
	pulumi.Input

	ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput
	ToCpsDvEnrollmentArrayOutputWithContext(context.Context) CpsDvEnrollmentArrayOutput
}

type CpsDvEnrollmentArray []CpsDvEnrollmentInput

func (CpsDvEnrollmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsDvEnrollment)(nil)).Elem()
}

func (i CpsDvEnrollmentArray) ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput {
	return i.ToCpsDvEnrollmentArrayOutputWithContext(context.Background())
}

func (i CpsDvEnrollmentArray) ToCpsDvEnrollmentArrayOutputWithContext(ctx context.Context) CpsDvEnrollmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentArrayOutput)
}

// CpsDvEnrollmentMapInput is an input type that accepts CpsDvEnrollmentMap and CpsDvEnrollmentMapOutput values.
// You can construct a concrete instance of `CpsDvEnrollmentMapInput` via:
//
//          CpsDvEnrollmentMap{ "key": CpsDvEnrollmentArgs{...} }
type CpsDvEnrollmentMapInput interface {
	pulumi.Input

	ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput
	ToCpsDvEnrollmentMapOutputWithContext(context.Context) CpsDvEnrollmentMapOutput
}

type CpsDvEnrollmentMap map[string]CpsDvEnrollmentInput

func (CpsDvEnrollmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsDvEnrollment)(nil)).Elem()
}

func (i CpsDvEnrollmentMap) ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput {
	return i.ToCpsDvEnrollmentMapOutputWithContext(context.Background())
}

func (i CpsDvEnrollmentMap) ToCpsDvEnrollmentMapOutputWithContext(ctx context.Context) CpsDvEnrollmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentMapOutput)
}

type CpsDvEnrollmentOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentOutput) ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput {
	return o
}

func (o CpsDvEnrollmentOutput) ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput {
	return o
}

type CpsDvEnrollmentArrayOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentArrayOutput) ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput {
	return o
}

func (o CpsDvEnrollmentArrayOutput) ToCpsDvEnrollmentArrayOutputWithContext(ctx context.Context) CpsDvEnrollmentArrayOutput {
	return o
}

func (o CpsDvEnrollmentArrayOutput) Index(i pulumi.IntInput) CpsDvEnrollmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CpsDvEnrollment {
		return vs[0].([]*CpsDvEnrollment)[vs[1].(int)]
	}).(CpsDvEnrollmentOutput)
}

type CpsDvEnrollmentMapOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentMapOutput) ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput {
	return o
}

func (o CpsDvEnrollmentMapOutput) ToCpsDvEnrollmentMapOutputWithContext(ctx context.Context) CpsDvEnrollmentMapOutput {
	return o
}

func (o CpsDvEnrollmentMapOutput) MapIndex(k pulumi.StringInput) CpsDvEnrollmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CpsDvEnrollment {
		return vs[0].(map[string]*CpsDvEnrollment)[vs[1].(string)]
	}).(CpsDvEnrollmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentInput)(nil)).Elem(), &CpsDvEnrollment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentArrayInput)(nil)).Elem(), CpsDvEnrollmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentMapInput)(nil)).Elem(), CpsDvEnrollmentMap{})
	pulumi.RegisterOutputType(CpsDvEnrollmentOutput{})
	pulumi.RegisterOutputType(CpsDvEnrollmentArrayOutput{})
	pulumi.RegisterOutputType(CpsDvEnrollmentMapOutput{})
}
