// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CpsDvEnrollment struct {
	pulumi.CustomResourceState

	// Whether acknowledge warnings before certificate verification
	AcknowledgePreVerificationWarnings pulumi.BoolPtrOutput `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator to use at organization
	AdminContact CpsDvEnrollmentAdminContactOutput `pulumi:"adminContact"`
	// Allow to duplicate common name
	AllowDuplicateCommonName pulumi.BoolPtrOutput `pulumi:"allowDuplicateCommonName"`
	// Certificate trust chain type
	CertificateChainType pulumi.StringPtrOutput `pulumi:"certificateChainType"`
	// Certificate type of enrollment
	CertificateType pulumi.StringOutput `pulumi:"certificateType"`
	// Common name used for enrollment
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// Contract ID for which enrollment is retrieved
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Certificate signing request generated during enrollment creation
	Csr CpsDvEnrollmentCsrOutput `pulumi:"csr"`
	// DNS challenge information
	DnsChallenges CpsDvEnrollmentDnsChallengeArrayOutput `pulumi:"dnsChallenges"`
	// HTTP challenge information
	HttpChallenges CpsDvEnrollmentHttpChallengeArrayOutput `pulumi:"httpChallenges"`
	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationOutput `pulumi:"networkConfiguration"`
	// Organization information
	Organization CpsDvEnrollmentOrganizationOutput `pulumi:"organization"`
	// The registration authority or certificate authority (CA) used to obtain a certificate
	RegistrationAuthority pulumi.StringOutput `pulumi:"registrationAuthority"`
	// List of SANs
	Sans pulumi.StringArrayOutput `pulumi:"sans"`
	// Type of TLS deployment network
	SecureNetwork pulumi.StringOutput `pulumi:"secureNetwork"`
	// SHA algorithm type
	SignatureAlgorithm pulumi.StringOutput `pulumi:"signatureAlgorithm"`
	// Whether Server Name Indication is used for enrollment
	SniOnly pulumi.BoolOutput `pulumi:"sniOnly"`
	// Contact information for an administrator at Akamai
	TechContact CpsDvEnrollmentTechContactOutput `pulumi:"techContact"`
	// Enrolment validation type
	ValidationType pulumi.StringOutput `pulumi:"validationType"`
}

// NewCpsDvEnrollment registers a new resource with the given unique name, arguments, and options.
func NewCpsDvEnrollment(ctx *pulumi.Context,
	name string, args *CpsDvEnrollmentArgs, opts ...pulumi.ResourceOption) (*CpsDvEnrollment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminContact == nil {
		return nil, errors.New("invalid value for required argument 'AdminContact'")
	}
	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.Csr == nil {
		return nil, errors.New("invalid value for required argument 'Csr'")
	}
	if args.NetworkConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'NetworkConfiguration'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.SecureNetwork == nil {
		return nil, errors.New("invalid value for required argument 'SecureNetwork'")
	}
	if args.SignatureAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'SignatureAlgorithm'")
	}
	if args.SniOnly == nil {
		return nil, errors.New("invalid value for required argument 'SniOnly'")
	}
	if args.TechContact == nil {
		return nil, errors.New("invalid value for required argument 'TechContact'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CpsDvEnrollment
	err := ctx.RegisterResource("akamai:index/cpsDvEnrollment:CpsDvEnrollment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpsDvEnrollment gets an existing CpsDvEnrollment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpsDvEnrollment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpsDvEnrollmentState, opts ...pulumi.ResourceOption) (*CpsDvEnrollment, error) {
	var resource CpsDvEnrollment
	err := ctx.ReadResource("akamai:index/cpsDvEnrollment:CpsDvEnrollment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpsDvEnrollment resources.
type cpsDvEnrollmentState struct {
	// Whether acknowledge warnings before certificate verification
	AcknowledgePreVerificationWarnings *bool `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator to use at organization
	AdminContact *CpsDvEnrollmentAdminContact `pulumi:"adminContact"`
	// Allow to duplicate common name
	AllowDuplicateCommonName *bool `pulumi:"allowDuplicateCommonName"`
	// Certificate trust chain type
	CertificateChainType *string `pulumi:"certificateChainType"`
	// Certificate type of enrollment
	CertificateType *string `pulumi:"certificateType"`
	// Common name used for enrollment
	CommonName *string `pulumi:"commonName"`
	// Contract ID for which enrollment is retrieved
	ContractId *string `pulumi:"contractId"`
	// Certificate signing request generated during enrollment creation
	Csr *CpsDvEnrollmentCsr `pulumi:"csr"`
	// DNS challenge information
	DnsChallenges []CpsDvEnrollmentDnsChallenge `pulumi:"dnsChallenges"`
	// HTTP challenge information
	HttpChallenges []CpsDvEnrollmentHttpChallenge `pulumi:"httpChallenges"`
	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration *CpsDvEnrollmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// Organization information
	Organization *CpsDvEnrollmentOrganization `pulumi:"organization"`
	// The registration authority or certificate authority (CA) used to obtain a certificate
	RegistrationAuthority *string `pulumi:"registrationAuthority"`
	// List of SANs
	Sans []string `pulumi:"sans"`
	// Type of TLS deployment network
	SecureNetwork *string `pulumi:"secureNetwork"`
	// SHA algorithm type
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Whether Server Name Indication is used for enrollment
	SniOnly *bool `pulumi:"sniOnly"`
	// Contact information for an administrator at Akamai
	TechContact *CpsDvEnrollmentTechContact `pulumi:"techContact"`
	// Enrolment validation type
	ValidationType *string `pulumi:"validationType"`
}

type CpsDvEnrollmentState struct {
	// Whether acknowledge warnings before certificate verification
	AcknowledgePreVerificationWarnings pulumi.BoolPtrInput
	// Contact information for the certificate administrator to use at organization
	AdminContact CpsDvEnrollmentAdminContactPtrInput
	// Allow to duplicate common name
	AllowDuplicateCommonName pulumi.BoolPtrInput
	// Certificate trust chain type
	CertificateChainType pulumi.StringPtrInput
	// Certificate type of enrollment
	CertificateType pulumi.StringPtrInput
	// Common name used for enrollment
	CommonName pulumi.StringPtrInput
	// Contract ID for which enrollment is retrieved
	ContractId pulumi.StringPtrInput
	// Certificate signing request generated during enrollment creation
	Csr CpsDvEnrollmentCsrPtrInput
	// DNS challenge information
	DnsChallenges CpsDvEnrollmentDnsChallengeArrayInput
	// HTTP challenge information
	HttpChallenges CpsDvEnrollmentHttpChallengeArrayInput
	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationPtrInput
	// Organization information
	Organization CpsDvEnrollmentOrganizationPtrInput
	// The registration authority or certificate authority (CA) used to obtain a certificate
	RegistrationAuthority pulumi.StringPtrInput
	// List of SANs
	Sans pulumi.StringArrayInput
	// Type of TLS deployment network
	SecureNetwork pulumi.StringPtrInput
	// SHA algorithm type
	SignatureAlgorithm pulumi.StringPtrInput
	// Whether Server Name Indication is used for enrollment
	SniOnly pulumi.BoolPtrInput
	// Contact information for an administrator at Akamai
	TechContact CpsDvEnrollmentTechContactPtrInput
	// Enrolment validation type
	ValidationType pulumi.StringPtrInput
}

func (CpsDvEnrollmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsDvEnrollmentState)(nil)).Elem()
}

type cpsDvEnrollmentArgs struct {
	// Whether acknowledge warnings before certificate verification
	AcknowledgePreVerificationWarnings *bool `pulumi:"acknowledgePreVerificationWarnings"`
	// Contact information for the certificate administrator to use at organization
	AdminContact CpsDvEnrollmentAdminContact `pulumi:"adminContact"`
	// Allow to duplicate common name
	AllowDuplicateCommonName *bool `pulumi:"allowDuplicateCommonName"`
	// Certificate trust chain type
	CertificateChainType *string `pulumi:"certificateChainType"`
	// Common name used for enrollment
	CommonName string `pulumi:"commonName"`
	// Contract ID for which enrollment is retrieved
	ContractId string `pulumi:"contractId"`
	// Certificate signing request generated during enrollment creation
	Csr CpsDvEnrollmentCsr `pulumi:"csr"`
	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration CpsDvEnrollmentNetworkConfiguration `pulumi:"networkConfiguration"`
	// Organization information
	Organization CpsDvEnrollmentOrganization `pulumi:"organization"`
	// List of SANs
	Sans []string `pulumi:"sans"`
	// Type of TLS deployment network
	SecureNetwork string `pulumi:"secureNetwork"`
	// SHA algorithm type
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
	// Whether Server Name Indication is used for enrollment
	SniOnly bool `pulumi:"sniOnly"`
	// Contact information for an administrator at Akamai
	TechContact CpsDvEnrollmentTechContact `pulumi:"techContact"`
}

// The set of arguments for constructing a CpsDvEnrollment resource.
type CpsDvEnrollmentArgs struct {
	// Whether acknowledge warnings before certificate verification
	AcknowledgePreVerificationWarnings pulumi.BoolPtrInput
	// Contact information for the certificate administrator to use at organization
	AdminContact CpsDvEnrollmentAdminContactInput
	// Allow to duplicate common name
	AllowDuplicateCommonName pulumi.BoolPtrInput
	// Certificate trust chain type
	CertificateChainType pulumi.StringPtrInput
	// Common name used for enrollment
	CommonName pulumi.StringInput
	// Contract ID for which enrollment is retrieved
	ContractId pulumi.StringInput
	// Certificate signing request generated during enrollment creation
	Csr CpsDvEnrollmentCsrInput
	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration CpsDvEnrollmentNetworkConfigurationInput
	// Organization information
	Organization CpsDvEnrollmentOrganizationInput
	// List of SANs
	Sans pulumi.StringArrayInput
	// Type of TLS deployment network
	SecureNetwork pulumi.StringInput
	// SHA algorithm type
	SignatureAlgorithm pulumi.StringInput
	// Whether Server Name Indication is used for enrollment
	SniOnly pulumi.BoolInput
	// Contact information for an administrator at Akamai
	TechContact CpsDvEnrollmentTechContactInput
}

func (CpsDvEnrollmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpsDvEnrollmentArgs)(nil)).Elem()
}

type CpsDvEnrollmentInput interface {
	pulumi.Input

	ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput
	ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput
}

func (*CpsDvEnrollment) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsDvEnrollment)(nil)).Elem()
}

func (i *CpsDvEnrollment) ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput {
	return i.ToCpsDvEnrollmentOutputWithContext(context.Background())
}

func (i *CpsDvEnrollment) ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentOutput)
}

// CpsDvEnrollmentArrayInput is an input type that accepts CpsDvEnrollmentArray and CpsDvEnrollmentArrayOutput values.
// You can construct a concrete instance of `CpsDvEnrollmentArrayInput` via:
//
//	CpsDvEnrollmentArray{ CpsDvEnrollmentArgs{...} }
type CpsDvEnrollmentArrayInput interface {
	pulumi.Input

	ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput
	ToCpsDvEnrollmentArrayOutputWithContext(context.Context) CpsDvEnrollmentArrayOutput
}

type CpsDvEnrollmentArray []CpsDvEnrollmentInput

func (CpsDvEnrollmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsDvEnrollment)(nil)).Elem()
}

func (i CpsDvEnrollmentArray) ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput {
	return i.ToCpsDvEnrollmentArrayOutputWithContext(context.Background())
}

func (i CpsDvEnrollmentArray) ToCpsDvEnrollmentArrayOutputWithContext(ctx context.Context) CpsDvEnrollmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentArrayOutput)
}

// CpsDvEnrollmentMapInput is an input type that accepts CpsDvEnrollmentMap and CpsDvEnrollmentMapOutput values.
// You can construct a concrete instance of `CpsDvEnrollmentMapInput` via:
//
//	CpsDvEnrollmentMap{ "key": CpsDvEnrollmentArgs{...} }
type CpsDvEnrollmentMapInput interface {
	pulumi.Input

	ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput
	ToCpsDvEnrollmentMapOutputWithContext(context.Context) CpsDvEnrollmentMapOutput
}

type CpsDvEnrollmentMap map[string]CpsDvEnrollmentInput

func (CpsDvEnrollmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsDvEnrollment)(nil)).Elem()
}

func (i CpsDvEnrollmentMap) ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput {
	return i.ToCpsDvEnrollmentMapOutputWithContext(context.Background())
}

func (i CpsDvEnrollmentMap) ToCpsDvEnrollmentMapOutputWithContext(ctx context.Context) CpsDvEnrollmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpsDvEnrollmentMapOutput)
}

type CpsDvEnrollmentOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentOutput) ToCpsDvEnrollmentOutput() CpsDvEnrollmentOutput {
	return o
}

func (o CpsDvEnrollmentOutput) ToCpsDvEnrollmentOutputWithContext(ctx context.Context) CpsDvEnrollmentOutput {
	return o
}

// Whether acknowledge warnings before certificate verification
func (o CpsDvEnrollmentOutput) AcknowledgePreVerificationWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.BoolPtrOutput { return v.AcknowledgePreVerificationWarnings }).(pulumi.BoolPtrOutput)
}

// Contact information for the certificate administrator to use at organization
func (o CpsDvEnrollmentOutput) AdminContact() CpsDvEnrollmentAdminContactOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentAdminContactOutput { return v.AdminContact }).(CpsDvEnrollmentAdminContactOutput)
}

// Allow to duplicate common name
func (o CpsDvEnrollmentOutput) AllowDuplicateCommonName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.BoolPtrOutput { return v.AllowDuplicateCommonName }).(pulumi.BoolPtrOutput)
}

// Certificate trust chain type
func (o CpsDvEnrollmentOutput) CertificateChainType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringPtrOutput { return v.CertificateChainType }).(pulumi.StringPtrOutput)
}

// Certificate type of enrollment
func (o CpsDvEnrollmentOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.CertificateType }).(pulumi.StringOutput)
}

// Common name used for enrollment
func (o CpsDvEnrollmentOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

// Contract ID for which enrollment is retrieved
func (o CpsDvEnrollmentOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// Certificate signing request generated during enrollment creation
func (o CpsDvEnrollmentOutput) Csr() CpsDvEnrollmentCsrOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentCsrOutput { return v.Csr }).(CpsDvEnrollmentCsrOutput)
}

// DNS challenge information
func (o CpsDvEnrollmentOutput) DnsChallenges() CpsDvEnrollmentDnsChallengeArrayOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentDnsChallengeArrayOutput { return v.DnsChallenges }).(CpsDvEnrollmentDnsChallengeArrayOutput)
}

// HTTP challenge information
func (o CpsDvEnrollmentOutput) HttpChallenges() CpsDvEnrollmentHttpChallengeArrayOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentHttpChallengeArrayOutput { return v.HttpChallenges }).(CpsDvEnrollmentHttpChallengeArrayOutput)
}

// Settings containing network information and TLS Metadata used by CPS
func (o CpsDvEnrollmentOutput) NetworkConfiguration() CpsDvEnrollmentNetworkConfigurationOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentNetworkConfigurationOutput { return v.NetworkConfiguration }).(CpsDvEnrollmentNetworkConfigurationOutput)
}

// Organization information
func (o CpsDvEnrollmentOutput) Organization() CpsDvEnrollmentOrganizationOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentOrganizationOutput { return v.Organization }).(CpsDvEnrollmentOrganizationOutput)
}

// The registration authority or certificate authority (CA) used to obtain a certificate
func (o CpsDvEnrollmentOutput) RegistrationAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.RegistrationAuthority }).(pulumi.StringOutput)
}

// List of SANs
func (o CpsDvEnrollmentOutput) Sans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringArrayOutput { return v.Sans }).(pulumi.StringArrayOutput)
}

// Type of TLS deployment network
func (o CpsDvEnrollmentOutput) SecureNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.SecureNetwork }).(pulumi.StringOutput)
}

// SHA algorithm type
func (o CpsDvEnrollmentOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// Whether Server Name Indication is used for enrollment
func (o CpsDvEnrollmentOutput) SniOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.BoolOutput { return v.SniOnly }).(pulumi.BoolOutput)
}

// Contact information for an administrator at Akamai
func (o CpsDvEnrollmentOutput) TechContact() CpsDvEnrollmentTechContactOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) CpsDvEnrollmentTechContactOutput { return v.TechContact }).(CpsDvEnrollmentTechContactOutput)
}

// Enrolment validation type
func (o CpsDvEnrollmentOutput) ValidationType() pulumi.StringOutput {
	return o.ApplyT(func(v *CpsDvEnrollment) pulumi.StringOutput { return v.ValidationType }).(pulumi.StringOutput)
}

type CpsDvEnrollmentArrayOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentArrayOutput) ToCpsDvEnrollmentArrayOutput() CpsDvEnrollmentArrayOutput {
	return o
}

func (o CpsDvEnrollmentArrayOutput) ToCpsDvEnrollmentArrayOutputWithContext(ctx context.Context) CpsDvEnrollmentArrayOutput {
	return o
}

func (o CpsDvEnrollmentArrayOutput) Index(i pulumi.IntInput) CpsDvEnrollmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CpsDvEnrollment {
		return vs[0].([]*CpsDvEnrollment)[vs[1].(int)]
	}).(CpsDvEnrollmentOutput)
}

type CpsDvEnrollmentMapOutput struct{ *pulumi.OutputState }

func (CpsDvEnrollmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CpsDvEnrollment)(nil)).Elem()
}

func (o CpsDvEnrollmentMapOutput) ToCpsDvEnrollmentMapOutput() CpsDvEnrollmentMapOutput {
	return o
}

func (o CpsDvEnrollmentMapOutput) ToCpsDvEnrollmentMapOutputWithContext(ctx context.Context) CpsDvEnrollmentMapOutput {
	return o
}

func (o CpsDvEnrollmentMapOutput) MapIndex(k pulumi.StringInput) CpsDvEnrollmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CpsDvEnrollment {
		return vs[0].(map[string]*CpsDvEnrollment)[vs[1].(string)]
	}).(CpsDvEnrollmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentInput)(nil)).Elem(), &CpsDvEnrollment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentArrayInput)(nil)).Elem(), CpsDvEnrollmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CpsDvEnrollmentMapInput)(nil)).Elem(), CpsDvEnrollmentMap{})
	pulumi.RegisterOutputType(CpsDvEnrollmentOutput{})
	pulumi.RegisterOutputType(CpsDvEnrollmentArrayOutput{})
	pulumi.RegisterOutputType(CpsDvEnrollmentMapOutput{})
}
