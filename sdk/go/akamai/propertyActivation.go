// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v10/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PropertyActivation struct {
	pulumi.CustomResourceState

	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringOutput `pulumi:"activationId"`
	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrOutput `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network.
	ComplianceRecord PropertyActivationComplianceRecordPtrOutput `pulumi:"complianceRecord"`
	// One or more email addresses to which to send activation status changes.
	Contacts pulumi.StringArrayOutput `pulumi:"contacts"`
	// Errors returned during activation.
	Errors pulumi.StringOutput `pulumi:"errors"`
	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// Assigns a log message to the activation request.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Your property's ID, including the prp_ prefix.
	PropertyId pulumi.StringOutput `pulumi:"propertyId"`
	// Any errors returned by the API about rules.
	RuleErrors PropertyActivationRuleErrorArrayOutput `pulumi:"ruleErrors"`
	// The property version's activation status on the given network.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enables to set timeout for processing.
	Timeouts PropertyActivationTimeoutsPtrOutput `pulumi:"timeouts"`
	// Your property's version number.
	Version pulumi.IntOutput `pulumi:"version"`
	// Warnings returned during activation.
	Warnings pulumi.StringOutput `pulumi:"warnings"`
}

// NewPropertyActivation registers a new resource with the given unique name, arguments, and options.
func NewPropertyActivation(ctx *pulumi.Context,
	name string, args *PropertyActivationArgs, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contacts == nil {
		return nil, errors.New("invalid value for required argument 'Contacts'")
	}
	if args.PropertyId == nil {
		return nil, errors.New("invalid value for required argument 'PropertyId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:properties/propertyActivation:PropertyActivation"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PropertyActivation
	err := ctx.RegisterResource("akamai:index/propertyActivation:PropertyActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyActivation gets an existing PropertyActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyActivationState, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	var resource PropertyActivation
	err := ctx.ReadResource("akamai:index/propertyActivation:PropertyActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyActivation resources.
type propertyActivationState struct {
	// The ID given to the activation event while it's in progress.
	ActivationId *string `pulumi:"activationId"`
	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network.
	ComplianceRecord *PropertyActivationComplianceRecord `pulumi:"complianceRecord"`
	// One or more email addresses to which to send activation status changes.
	Contacts []string `pulumi:"contacts"`
	// Errors returned during activation.
	Errors *string `pulumi:"errors"`
	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network *string `pulumi:"network"`
	// Assigns a log message to the activation request.
	Note *string `pulumi:"note"`
	// Your property's ID, including the prp_ prefix.
	PropertyId *string `pulumi:"propertyId"`
	// Any errors returned by the API about rules.
	RuleErrors []PropertyActivationRuleError `pulumi:"ruleErrors"`
	// The property version's activation status on the given network.
	Status *string `pulumi:"status"`
	// Enables to set timeout for processing.
	Timeouts *PropertyActivationTimeouts `pulumi:"timeouts"`
	// Your property's version number.
	Version *int `pulumi:"version"`
	// Warnings returned during activation.
	Warnings *string `pulumi:"warnings"`
}

type PropertyActivationState struct {
	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringPtrInput
	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// Provides an audit record when activating on a production network.
	ComplianceRecord PropertyActivationComplianceRecordPtrInput
	// One or more email addresses to which to send activation status changes.
	Contacts pulumi.StringArrayInput
	// Errors returned during activation.
	Errors pulumi.StringPtrInput
	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network pulumi.StringPtrInput
	// Assigns a log message to the activation request.
	Note pulumi.StringPtrInput
	// Your property's ID, including the prp_ prefix.
	PropertyId pulumi.StringPtrInput
	// Any errors returned by the API about rules.
	RuleErrors PropertyActivationRuleErrorArrayInput
	// The property version's activation status on the given network.
	Status pulumi.StringPtrInput
	// Enables to set timeout for processing.
	Timeouts PropertyActivationTimeoutsPtrInput
	// Your property's version number.
	Version pulumi.IntPtrInput
	// Warnings returned during activation.
	Warnings pulumi.StringPtrInput
}

func (PropertyActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationState)(nil)).Elem()
}

type propertyActivationArgs struct {
	// The ID given to the activation event while it's in progress.
	ActivationId *string `pulumi:"activationId"`
	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings *bool `pulumi:"autoAcknowledgeRuleWarnings"`
	// Provides an audit record when activating on a production network.
	ComplianceRecord *PropertyActivationComplianceRecord `pulumi:"complianceRecord"`
	// One or more email addresses to which to send activation status changes.
	Contacts []string `pulumi:"contacts"`
	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network *string `pulumi:"network"`
	// Assigns a log message to the activation request.
	Note *string `pulumi:"note"`
	// Your property's ID, including the prp_ prefix.
	PropertyId string `pulumi:"propertyId"`
	// Enables to set timeout for processing.
	Timeouts *PropertyActivationTimeouts `pulumi:"timeouts"`
	// Your property's version number.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a PropertyActivation resource.
type PropertyActivationArgs struct {
	// The ID given to the activation event while it's in progress.
	ActivationId pulumi.StringPtrInput
	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	// Provides an audit record when activating on a production network.
	ComplianceRecord PropertyActivationComplianceRecordPtrInput
	// One or more email addresses to which to send activation status changes.
	Contacts pulumi.StringArrayInput
	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network pulumi.StringPtrInput
	// Assigns a log message to the activation request.
	Note pulumi.StringPtrInput
	// Your property's ID, including the prp_ prefix.
	PropertyId pulumi.StringInput
	// Enables to set timeout for processing.
	Timeouts PropertyActivationTimeoutsPtrInput
	// Your property's version number.
	Version pulumi.IntInput
}

func (PropertyActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationArgs)(nil)).Elem()
}

type PropertyActivationInput interface {
	pulumi.Input

	ToPropertyActivationOutput() PropertyActivationOutput
	ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput
}

func (*PropertyActivation) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil)).Elem()
}

func (i *PropertyActivation) ToPropertyActivationOutput() PropertyActivationOutput {
	return i.ToPropertyActivationOutputWithContext(context.Background())
}

func (i *PropertyActivation) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationOutput)
}

// PropertyActivationArrayInput is an input type that accepts PropertyActivationArray and PropertyActivationArrayOutput values.
// You can construct a concrete instance of `PropertyActivationArrayInput` via:
//
//	PropertyActivationArray{ PropertyActivationArgs{...} }
type PropertyActivationArrayInput interface {
	pulumi.Input

	ToPropertyActivationArrayOutput() PropertyActivationArrayOutput
	ToPropertyActivationArrayOutputWithContext(context.Context) PropertyActivationArrayOutput
}

type PropertyActivationArray []PropertyActivationInput

func (PropertyActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return i.ToPropertyActivationArrayOutputWithContext(context.Background())
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationArrayOutput)
}

// PropertyActivationMapInput is an input type that accepts PropertyActivationMap and PropertyActivationMapOutput values.
// You can construct a concrete instance of `PropertyActivationMapInput` via:
//
//	PropertyActivationMap{ "key": PropertyActivationArgs{...} }
type PropertyActivationMapInput interface {
	pulumi.Input

	ToPropertyActivationMapOutput() PropertyActivationMapOutput
	ToPropertyActivationMapOutputWithContext(context.Context) PropertyActivationMapOutput
}

type PropertyActivationMap map[string]PropertyActivationInput

func (PropertyActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationMap) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return i.ToPropertyActivationMapOutputWithContext(context.Background())
}

func (i PropertyActivationMap) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationMapOutput)
}

type PropertyActivationOutput struct{ *pulumi.OutputState }

func (PropertyActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationOutput) ToPropertyActivationOutput() PropertyActivationOutput {
	return o
}

func (o PropertyActivationOutput) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return o
}

// The ID given to the activation event while it's in progress.
func (o PropertyActivationOutput) ActivationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.ActivationId }).(pulumi.StringOutput)
}

// Automatically acknowledge all rule warnings for activation to continue. Default is false
func (o PropertyActivationOutput) AutoAcknowledgeRuleWarnings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.BoolPtrOutput { return v.AutoAcknowledgeRuleWarnings }).(pulumi.BoolPtrOutput)
}

// Provides an audit record when activating on a production network.
func (o PropertyActivationOutput) ComplianceRecord() PropertyActivationComplianceRecordPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivationComplianceRecordPtrOutput { return v.ComplianceRecord }).(PropertyActivationComplianceRecordPtrOutput)
}

// One or more email addresses to which to send activation status changes.
func (o PropertyActivationOutput) Contacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringArrayOutput { return v.Contacts }).(pulumi.StringArrayOutput)
}

// Errors returned during activation.
func (o PropertyActivationOutput) Errors() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Errors }).(pulumi.StringOutput)
}

// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
func (o PropertyActivationOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// Assigns a log message to the activation request.
func (o PropertyActivationOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// Your property's ID, including the prp_ prefix.
func (o PropertyActivationOutput) PropertyId() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.PropertyId }).(pulumi.StringOutput)
}

// Any errors returned by the API about rules.
func (o PropertyActivationOutput) RuleErrors() PropertyActivationRuleErrorArrayOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivationRuleErrorArrayOutput { return v.RuleErrors }).(PropertyActivationRuleErrorArrayOutput)
}

// The property version's activation status on the given network.
func (o PropertyActivationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enables to set timeout for processing.
func (o PropertyActivationOutput) Timeouts() PropertyActivationTimeoutsPtrOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivationTimeoutsPtrOutput { return v.Timeouts }).(PropertyActivationTimeoutsPtrOutput)
}

// Your property's version number.
func (o PropertyActivationOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Warnings returned during activation.
func (o PropertyActivationOutput) Warnings() pulumi.StringOutput {
	return o.ApplyT(func(v *PropertyActivation) pulumi.StringOutput { return v.Warnings }).(pulumi.StringOutput)
}

type PropertyActivationArrayOutput struct{ *pulumi.OutputState }

func (PropertyActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) Index(i pulumi.IntInput) PropertyActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PropertyActivation {
		return vs[0].([]*PropertyActivation)[vs[1].(int)]
	}).(PropertyActivationOutput)
}

type PropertyActivationMapOutput struct{ *pulumi.OutputState }

func (PropertyActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyActivation)(nil)).Elem()
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) MapIndex(k pulumi.StringInput) PropertyActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PropertyActivation {
		return vs[0].(map[string]*PropertyActivation)[vs[1].(string)]
	}).(PropertyActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationInput)(nil)).Elem(), &PropertyActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationArrayInput)(nil)).Elem(), PropertyActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationMapInput)(nil)).Elem(), PropertyActivationMap{})
	pulumi.RegisterOutputType(PropertyActivationOutput{})
	pulumi.RegisterOutputType(PropertyActivationArrayOutput{})
	pulumi.RegisterOutputType(PropertyActivationMapOutput{})
}
