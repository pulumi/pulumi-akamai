// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `PropertyActivation` resource lets you activate a property version. An activation deploys the version to either the Akamai staging or production network. You can activate a specific version multiple times if you need to.
//
// Before activating on production, activate on staging first. This way you can detect any problems in staging before your changes progress to production.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		email := "user@example.org"
// 		ruleFormat := "v2020-03-04"
// 		example, err := akamai.NewProperty(ctx, "example", &akamai.PropertyArgs{
// 			ProductId:  pulumi.String("prd_SPM"),
// 			ContractId: pulumi.Any(_var.Contractid),
// 			GroupId:    pulumi.Any(_var.Groupid),
// 			Hostnames: PropertyHostnameArray{
// 				Example.org:     "example.org.edgesuite.net",
// 				Www.example.org: "example.org.edgesuite.net",
// 				Sub.example.org: "sub.example.org.edgesuite.net",
// 			},
// 			RuleFormat: pulumi.String(ruleFormat),
// 			Rules:      readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/main.json")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleStaging, err := akamai.NewPropertyActivation(ctx, "exampleStaging", &akamai.PropertyActivationArgs{
// 			PropertyId: example.ID(),
// 			Contacts: pulumi.StringArray{
// 				pulumi.String(email),
// 			},
// 			Version: example.LatestVersion,
// 			Note:    pulumi.String("Sample activation"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.NewPropertyActivation(ctx, "exampleProd", &akamai.PropertyActivationArgs{
// 			PropertyId: example.ID(),
// 			Network:    pulumi.String("PRODUCTION"),
// 			Version:    pulumi.Int(3),
// 			Contacts: pulumi.StringArray{
// 				pulumi.String(email),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleStaging,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// The following arguments are supported:
//
// * `propertyId` - (Required) The property's unique identifier, including the `prp_` prefix.
// * `contact` - (Required) One or more email addresses to send activation status changes to.
// * `version` - (Required) The property version to activate. Previously this field was optional. It now depends on the `Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latestVersion` attribute in the `Property` resource labeled `example`.
// * `network` - (Optional) Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
// * `note` - (Optional) A log message you can assign to the activation request.
// * `autoAcknowledgeRuleWarnings` - (Optional) Whether the activation should proceed despite any warnings. By default set to `true`.
//
// ### Deprecated arguments
//
// * `property` - (Deprecated) Replaced by `propertyId`. Maintained for legacy purposes.
//
// ## Attribute reference
//
// The following attributes are returned:
//
// * `id` - The unique identifier for this activation.
// * `warnings` - The contents of `warnings` field returned by the API. For more information see [Errors](https://developer.akamai.com/api/core_features/property_manager/v1.html#errors) in the PAPI documentation.
// * `errors` - The contents of `errors` field returned by the API. For more information see [Errors](https://developer.akamai.com/api/core_features/property_manager/v1.html#errors) in the PAPI documentation.
// * `activationId` - The ID given to the activation event while it's in progress.
// * `status` - The property version's activation status on the selected network.
//
// ### Deprecated attributes
//
// * `ruleWarnings` - (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
type PropertyActivation struct {
	pulumi.CustomResourceState

	ActivationId pulumi.StringOutput `pulumi:"activationId"`
	// automatically acknowledge all rule warnings for activation to continue. default is true
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrOutput     `pulumi:"autoAcknowledgeRuleWarnings"`
	Contacts                    pulumi.StringArrayOutput `pulumi:"contacts"`
	Errors                      pulumi.StringOutput      `pulumi:"errors"`
	Network                     pulumi.StringPtrOutput   `pulumi:"network"`
	// assigns a log message to the activation request
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Deprecated: The setting "property" has been deprecated.
	Property   pulumi.StringOutput                    `pulumi:"property"`
	PropertyId pulumi.StringOutput                    `pulumi:"propertyId"`
	RuleErrors PropertyActivationRuleErrorArrayOutput `pulumi:"ruleErrors"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayOutput `pulumi:"ruleWarnings"`
	Status       pulumi.StringOutput                      `pulumi:"status"`
	Version      pulumi.IntOutput                         `pulumi:"version"`
	Warnings     pulumi.StringOutput                      `pulumi:"warnings"`
}

// NewPropertyActivation registers a new resource with the given unique name, arguments, and options.
func NewPropertyActivation(ctx *pulumi.Context,
	name string, args *PropertyActivationArgs, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contacts == nil {
		return nil, errors.New("invalid value for required argument 'Contacts'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:properties/propertyActivation:PropertyActivation"),
		},
	})
	opts = append(opts, aliases)
	var resource PropertyActivation
	err := ctx.RegisterResource("akamai:index/propertyActivation:PropertyActivation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropertyActivation gets an existing PropertyActivation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropertyActivation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropertyActivationState, opts ...pulumi.ResourceOption) (*PropertyActivation, error) {
	var resource PropertyActivation
	err := ctx.ReadResource("akamai:index/propertyActivation:PropertyActivation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PropertyActivation resources.
type propertyActivationState struct {
	ActivationId *string `pulumi:"activationId"`
	// automatically acknowledge all rule warnings for activation to continue. default is true
	AutoAcknowledgeRuleWarnings *bool    `pulumi:"autoAcknowledgeRuleWarnings"`
	Contacts                    []string `pulumi:"contacts"`
	Errors                      *string  `pulumi:"errors"`
	Network                     *string  `pulumi:"network"`
	// assigns a log message to the activation request
	Note *string `pulumi:"note"`
	// Deprecated: The setting "property" has been deprecated.
	Property   *string                       `pulumi:"property"`
	PropertyId *string                       `pulumi:"propertyId"`
	RuleErrors []PropertyActivationRuleError `pulumi:"ruleErrors"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyActivationRuleWarning `pulumi:"ruleWarnings"`
	Status       *string                         `pulumi:"status"`
	Version      *int                            `pulumi:"version"`
	Warnings     *string                         `pulumi:"warnings"`
}

type PropertyActivationState struct {
	ActivationId pulumi.StringPtrInput
	// automatically acknowledge all rule warnings for activation to continue. default is true
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	Contacts                    pulumi.StringArrayInput
	Errors                      pulumi.StringPtrInput
	Network                     pulumi.StringPtrInput
	// assigns a log message to the activation request
	Note pulumi.StringPtrInput
	// Deprecated: The setting "property" has been deprecated.
	Property   pulumi.StringPtrInput
	PropertyId pulumi.StringPtrInput
	RuleErrors PropertyActivationRuleErrorArrayInput
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayInput
	Status       pulumi.StringPtrInput
	Version      pulumi.IntPtrInput
	Warnings     pulumi.StringPtrInput
}

func (PropertyActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationState)(nil)).Elem()
}

type propertyActivationArgs struct {
	ActivationId *string `pulumi:"activationId"`
	// automatically acknowledge all rule warnings for activation to continue. default is true
	AutoAcknowledgeRuleWarnings *bool    `pulumi:"autoAcknowledgeRuleWarnings"`
	Contacts                    []string `pulumi:"contacts"`
	Network                     *string  `pulumi:"network"`
	// assigns a log message to the activation request
	Note *string `pulumi:"note"`
	// Deprecated: The setting "property" has been deprecated.
	Property   *string                       `pulumi:"property"`
	PropertyId *string                       `pulumi:"propertyId"`
	RuleErrors []PropertyActivationRuleError `pulumi:"ruleErrors"`
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings []PropertyActivationRuleWarning `pulumi:"ruleWarnings"`
	Version      int                             `pulumi:"version"`
}

// The set of arguments for constructing a PropertyActivation resource.
type PropertyActivationArgs struct {
	ActivationId pulumi.StringPtrInput
	// automatically acknowledge all rule warnings for activation to continue. default is true
	AutoAcknowledgeRuleWarnings pulumi.BoolPtrInput
	Contacts                    pulumi.StringArrayInput
	Network                     pulumi.StringPtrInput
	// assigns a log message to the activation request
	Note pulumi.StringPtrInput
	// Deprecated: The setting "property" has been deprecated.
	Property   pulumi.StringPtrInput
	PropertyId pulumi.StringPtrInput
	RuleErrors PropertyActivationRuleErrorArrayInput
	// Deprecated: Rule warnings will not be set in state anymore
	RuleWarnings PropertyActivationRuleWarningArrayInput
	Version      pulumi.IntInput
}

func (PropertyActivationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propertyActivationArgs)(nil)).Elem()
}

type PropertyActivationInput interface {
	pulumi.Input

	ToPropertyActivationOutput() PropertyActivationOutput
	ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput
}

func (*PropertyActivation) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyActivation)(nil))
}

func (i *PropertyActivation) ToPropertyActivationOutput() PropertyActivationOutput {
	return i.ToPropertyActivationOutputWithContext(context.Background())
}

func (i *PropertyActivation) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationOutput)
}

func (i *PropertyActivation) ToPropertyActivationPtrOutput() PropertyActivationPtrOutput {
	return i.ToPropertyActivationPtrOutputWithContext(context.Background())
}

func (i *PropertyActivation) ToPropertyActivationPtrOutputWithContext(ctx context.Context) PropertyActivationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationPtrOutput)
}

type PropertyActivationPtrInput interface {
	pulumi.Input

	ToPropertyActivationPtrOutput() PropertyActivationPtrOutput
	ToPropertyActivationPtrOutputWithContext(ctx context.Context) PropertyActivationPtrOutput
}

type propertyActivationPtrType PropertyActivationArgs

func (*propertyActivationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil))
}

func (i *propertyActivationPtrType) ToPropertyActivationPtrOutput() PropertyActivationPtrOutput {
	return i.ToPropertyActivationPtrOutputWithContext(context.Background())
}

func (i *propertyActivationPtrType) ToPropertyActivationPtrOutputWithContext(ctx context.Context) PropertyActivationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationPtrOutput)
}

// PropertyActivationArrayInput is an input type that accepts PropertyActivationArray and PropertyActivationArrayOutput values.
// You can construct a concrete instance of `PropertyActivationArrayInput` via:
//
//          PropertyActivationArray{ PropertyActivationArgs{...} }
type PropertyActivationArrayInput interface {
	pulumi.Input

	ToPropertyActivationArrayOutput() PropertyActivationArrayOutput
	ToPropertyActivationArrayOutputWithContext(context.Context) PropertyActivationArrayOutput
}

type PropertyActivationArray []PropertyActivationInput

func (PropertyActivationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return i.ToPropertyActivationArrayOutputWithContext(context.Background())
}

func (i PropertyActivationArray) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationArrayOutput)
}

// PropertyActivationMapInput is an input type that accepts PropertyActivationMap and PropertyActivationMapOutput values.
// You can construct a concrete instance of `PropertyActivationMapInput` via:
//
//          PropertyActivationMap{ "key": PropertyActivationArgs{...} }
type PropertyActivationMapInput interface {
	pulumi.Input

	ToPropertyActivationMapOutput() PropertyActivationMapOutput
	ToPropertyActivationMapOutputWithContext(context.Context) PropertyActivationMapOutput
}

type PropertyActivationMap map[string]PropertyActivationInput

func (PropertyActivationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PropertyActivation)(nil)).Elem()
}

func (i PropertyActivationMap) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return i.ToPropertyActivationMapOutputWithContext(context.Background())
}

func (i PropertyActivationMap) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertyActivationMapOutput)
}

type PropertyActivationOutput struct{ *pulumi.OutputState }

func (PropertyActivationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyActivation)(nil))
}

func (o PropertyActivationOutput) ToPropertyActivationOutput() PropertyActivationOutput {
	return o
}

func (o PropertyActivationOutput) ToPropertyActivationOutputWithContext(ctx context.Context) PropertyActivationOutput {
	return o
}

func (o PropertyActivationOutput) ToPropertyActivationPtrOutput() PropertyActivationPtrOutput {
	return o.ToPropertyActivationPtrOutputWithContext(context.Background())
}

func (o PropertyActivationOutput) ToPropertyActivationPtrOutputWithContext(ctx context.Context) PropertyActivationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PropertyActivation) *PropertyActivation {
		return &v
	}).(PropertyActivationPtrOutput)
}

type PropertyActivationPtrOutput struct{ *pulumi.OutputState }

func (PropertyActivationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PropertyActivation)(nil))
}

func (o PropertyActivationPtrOutput) ToPropertyActivationPtrOutput() PropertyActivationPtrOutput {
	return o
}

func (o PropertyActivationPtrOutput) ToPropertyActivationPtrOutputWithContext(ctx context.Context) PropertyActivationPtrOutput {
	return o
}

func (o PropertyActivationPtrOutput) Elem() PropertyActivationOutput {
	return o.ApplyT(func(v *PropertyActivation) PropertyActivation {
		if v != nil {
			return *v
		}
		var ret PropertyActivation
		return ret
	}).(PropertyActivationOutput)
}

type PropertyActivationArrayOutput struct{ *pulumi.OutputState }

func (PropertyActivationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PropertyActivation)(nil))
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutput() PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) ToPropertyActivationArrayOutputWithContext(ctx context.Context) PropertyActivationArrayOutput {
	return o
}

func (o PropertyActivationArrayOutput) Index(i pulumi.IntInput) PropertyActivationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PropertyActivation {
		return vs[0].([]PropertyActivation)[vs[1].(int)]
	}).(PropertyActivationOutput)
}

type PropertyActivationMapOutput struct{ *pulumi.OutputState }

func (PropertyActivationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PropertyActivation)(nil))
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutput() PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) ToPropertyActivationMapOutputWithContext(ctx context.Context) PropertyActivationMapOutput {
	return o
}

func (o PropertyActivationMapOutput) MapIndex(k pulumi.StringInput) PropertyActivationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PropertyActivation {
		return vs[0].(map[string]PropertyActivation)[vs[1].(string)]
	}).(PropertyActivationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationInput)(nil)).Elem(), &PropertyActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationPtrInput)(nil)).Elem(), &PropertyActivation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationArrayInput)(nil)).Elem(), PropertyActivationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropertyActivationMapInput)(nil)).Elem(), PropertyActivationMap{})
	pulumi.RegisterOutputType(PropertyActivationOutput{})
	pulumi.RegisterOutputType(PropertyActivationPtrOutput{})
	pulumi.RegisterOutputType(PropertyActivationArrayOutput{})
	pulumi.RegisterOutputType(PropertyActivationMapOutput{})
}
