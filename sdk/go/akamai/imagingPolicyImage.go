// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImagingPolicyImage struct {
	pulumi.CustomResourceState

	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
	// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
	// it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction pulumi.BoolPtrOutput `pulumi:"activateOnProduction"`
	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// A JSON encoded policy
	Json pulumi.StringOutput `pulumi:"json"`
	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetId pulumi.StringOutput `pulumi:"policysetId"`
	// The version number of this policy version
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewImagingPolicyImage registers a new resource with the given unique name, arguments, and options.
func NewImagingPolicyImage(ctx *pulumi.Context,
	name string, args *ImagingPolicyImageArgs, opts ...pulumi.ResourceOption) (*ImagingPolicyImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContractId == nil {
		return nil, errors.New("invalid value for required argument 'ContractId'")
	}
	if args.Json == nil {
		return nil, errors.New("invalid value for required argument 'Json'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.PolicysetId == nil {
		return nil, errors.New("invalid value for required argument 'PolicysetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImagingPolicyImage
	err := ctx.RegisterResource("akamai:index/imagingPolicyImage:ImagingPolicyImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagingPolicyImage gets an existing ImagingPolicyImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagingPolicyImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagingPolicyImageState, opts ...pulumi.ResourceOption) (*ImagingPolicyImage, error) {
	var resource ImagingPolicyImage
	err := ctx.ReadResource("akamai:index/imagingPolicyImage:ImagingPolicyImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagingPolicyImage resources.
type imagingPolicyImageState struct {
	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
	// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
	// it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction *bool `pulumi:"activateOnProduction"`
	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractId *string `pulumi:"contractId"`
	// A JSON encoded policy
	Json *string `pulumi:"json"`
	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyId *string `pulumi:"policyId"`
	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetId *string `pulumi:"policysetId"`
	// The version number of this policy version
	Version *int `pulumi:"version"`
}

type ImagingPolicyImageState struct {
	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
	// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
	// it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction pulumi.BoolPtrInput
	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractId pulumi.StringPtrInput
	// A JSON encoded policy
	Json pulumi.StringPtrInput
	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyId pulumi.StringPtrInput
	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetId pulumi.StringPtrInput
	// The version number of this policy version
	Version pulumi.IntPtrInput
}

func (ImagingPolicyImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imagingPolicyImageState)(nil)).Elem()
}

type imagingPolicyImageArgs struct {
	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
	// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
	// it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction *bool `pulumi:"activateOnProduction"`
	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractId string `pulumi:"contractId"`
	// A JSON encoded policy
	Json string `pulumi:"json"`
	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyId string `pulumi:"policyId"`
	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetId string `pulumi:"policysetId"`
}

// The set of arguments for constructing a ImagingPolicyImage resource.
type ImagingPolicyImageArgs struct {
	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
	// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
	// it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction pulumi.BoolPtrInput
	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractId pulumi.StringInput
	// A JSON encoded policy
	Json pulumi.StringInput
	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyId pulumi.StringInput
	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetId pulumi.StringInput
}

func (ImagingPolicyImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imagingPolicyImageArgs)(nil)).Elem()
}

type ImagingPolicyImageInput interface {
	pulumi.Input

	ToImagingPolicyImageOutput() ImagingPolicyImageOutput
	ToImagingPolicyImageOutputWithContext(ctx context.Context) ImagingPolicyImageOutput
}

func (*ImagingPolicyImage) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagingPolicyImage)(nil)).Elem()
}

func (i *ImagingPolicyImage) ToImagingPolicyImageOutput() ImagingPolicyImageOutput {
	return i.ToImagingPolicyImageOutputWithContext(context.Background())
}

func (i *ImagingPolicyImage) ToImagingPolicyImageOutputWithContext(ctx context.Context) ImagingPolicyImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagingPolicyImageOutput)
}

// ImagingPolicyImageArrayInput is an input type that accepts ImagingPolicyImageArray and ImagingPolicyImageArrayOutput values.
// You can construct a concrete instance of `ImagingPolicyImageArrayInput` via:
//
//	ImagingPolicyImageArray{ ImagingPolicyImageArgs{...} }
type ImagingPolicyImageArrayInput interface {
	pulumi.Input

	ToImagingPolicyImageArrayOutput() ImagingPolicyImageArrayOutput
	ToImagingPolicyImageArrayOutputWithContext(context.Context) ImagingPolicyImageArrayOutput
}

type ImagingPolicyImageArray []ImagingPolicyImageInput

func (ImagingPolicyImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagingPolicyImage)(nil)).Elem()
}

func (i ImagingPolicyImageArray) ToImagingPolicyImageArrayOutput() ImagingPolicyImageArrayOutput {
	return i.ToImagingPolicyImageArrayOutputWithContext(context.Background())
}

func (i ImagingPolicyImageArray) ToImagingPolicyImageArrayOutputWithContext(ctx context.Context) ImagingPolicyImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagingPolicyImageArrayOutput)
}

// ImagingPolicyImageMapInput is an input type that accepts ImagingPolicyImageMap and ImagingPolicyImageMapOutput values.
// You can construct a concrete instance of `ImagingPolicyImageMapInput` via:
//
//	ImagingPolicyImageMap{ "key": ImagingPolicyImageArgs{...} }
type ImagingPolicyImageMapInput interface {
	pulumi.Input

	ToImagingPolicyImageMapOutput() ImagingPolicyImageMapOutput
	ToImagingPolicyImageMapOutputWithContext(context.Context) ImagingPolicyImageMapOutput
}

type ImagingPolicyImageMap map[string]ImagingPolicyImageInput

func (ImagingPolicyImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagingPolicyImage)(nil)).Elem()
}

func (i ImagingPolicyImageMap) ToImagingPolicyImageMapOutput() ImagingPolicyImageMapOutput {
	return i.ToImagingPolicyImageMapOutputWithContext(context.Background())
}

func (i ImagingPolicyImageMap) ToImagingPolicyImageMapOutputWithContext(ctx context.Context) ImagingPolicyImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagingPolicyImageMapOutput)
}

type ImagingPolicyImageOutput struct{ *pulumi.OutputState }

func (ImagingPolicyImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagingPolicyImage)(nil)).Elem()
}

func (o ImagingPolicyImageOutput) ToImagingPolicyImageOutput() ImagingPolicyImageOutput {
	return o
}

func (o ImagingPolicyImageOutput) ToImagingPolicyImageOutputWithContext(ctx context.Context) ImagingPolicyImageOutput {
	return o
}

// With this flag set to false, the user can perform modifications on staging without affecting the version already saved
// to production. With this flag set to true, the policy will be saved on the production network. It is possible to change
// it back to false only when there are any changes to the policy qualifying it for the new version.
func (o ImagingPolicyImageOutput) ActivateOnProduction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.BoolPtrOutput { return v.ActivateOnProduction }).(pulumi.BoolPtrOutput)
}

// Unique identifier for the Akamai Contract containing the Policy Set(s)
func (o ImagingPolicyImageOutput) ContractId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.StringOutput { return v.ContractId }).(pulumi.StringOutput)
}

// A JSON encoded policy
func (o ImagingPolicyImageOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.StringOutput { return v.Json }).(pulumi.StringOutput)
}

// Unique identifier for a Policy. It is not possible to modify the id of the policy.
func (o ImagingPolicyImageOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Unique identifier for the Image & Video Manager Policy Set.
func (o ImagingPolicyImageOutput) PolicysetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.StringOutput { return v.PolicysetId }).(pulumi.StringOutput)
}

// The version number of this policy version
func (o ImagingPolicyImageOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ImagingPolicyImage) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ImagingPolicyImageArrayOutput struct{ *pulumi.OutputState }

func (ImagingPolicyImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagingPolicyImage)(nil)).Elem()
}

func (o ImagingPolicyImageArrayOutput) ToImagingPolicyImageArrayOutput() ImagingPolicyImageArrayOutput {
	return o
}

func (o ImagingPolicyImageArrayOutput) ToImagingPolicyImageArrayOutputWithContext(ctx context.Context) ImagingPolicyImageArrayOutput {
	return o
}

func (o ImagingPolicyImageArrayOutput) Index(i pulumi.IntInput) ImagingPolicyImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagingPolicyImage {
		return vs[0].([]*ImagingPolicyImage)[vs[1].(int)]
	}).(ImagingPolicyImageOutput)
}

type ImagingPolicyImageMapOutput struct{ *pulumi.OutputState }

func (ImagingPolicyImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagingPolicyImage)(nil)).Elem()
}

func (o ImagingPolicyImageMapOutput) ToImagingPolicyImageMapOutput() ImagingPolicyImageMapOutput {
	return o
}

func (o ImagingPolicyImageMapOutput) ToImagingPolicyImageMapOutputWithContext(ctx context.Context) ImagingPolicyImageMapOutput {
	return o
}

func (o ImagingPolicyImageMapOutput) MapIndex(k pulumi.StringInput) ImagingPolicyImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagingPolicyImage {
		return vs[0].(map[string]*ImagingPolicyImage)[vs[1].(string)]
	}).(ImagingPolicyImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagingPolicyImageInput)(nil)).Elem(), &ImagingPolicyImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagingPolicyImageArrayInput)(nil)).Elem(), ImagingPolicyImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagingPolicyImageMapInput)(nil)).Elem(), ImagingPolicyImageMap{})
	pulumi.RegisterOutputType(ImagingPolicyImageOutput{})
	pulumi.RegisterOutputType(ImagingPolicyImageArrayOutput{})
	pulumi.RegisterOutputType(ImagingPolicyImageMapOutput{})
}
