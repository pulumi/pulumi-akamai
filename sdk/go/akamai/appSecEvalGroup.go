// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v6/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppSecEvalGroup struct {
	pulumi.CustomResourceState

	// Unique identifier of the evaluation attack group being modified
	AttackGroup pulumi.StringOutput `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringOutput `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the evaluation attack group
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecEvalGroup registers a new resource with the given unique name, arguments, and options.
func NewAppSecEvalGroup(ctx *pulumi.Context,
	name string, args *AppSecEvalGroupArgs, opts ...pulumi.ResourceOption) (*AppSecEvalGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackGroup == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroup'")
	}
	if args.AttackGroupAction == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroupAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppSecEvalGroup
	err := ctx.RegisterResource("akamai:index/appSecEvalGroup:AppSecEvalGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecEvalGroup gets an existing AppSecEvalGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecEvalGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecEvalGroupState, opts ...pulumi.ResourceOption) (*AppSecEvalGroup, error) {
	var resource AppSecEvalGroup
	err := ctx.ReadResource("akamai:index/appSecEvalGroup:AppSecEvalGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecEvalGroup resources.
type appSecEvalGroupState struct {
	// Unique identifier of the evaluation attack group being modified
	AttackGroup *string `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction *string `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the evaluation attack group
	ConditionException *string `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId *int `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecEvalGroupState struct {
	// Unique identifier of the evaluation attack group being modified
	AttackGroup pulumi.StringPtrInput
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringPtrInput
	// JSON-formatted condition and exception information for the evaluation attack group
	ConditionException pulumi.StringPtrInput
	// Unique identifier of the security configuration
	ConfigId pulumi.IntPtrInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecEvalGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalGroupState)(nil)).Elem()
}

type appSecEvalGroupArgs struct {
	// Unique identifier of the evaluation attack group being modified
	AttackGroup string `pulumi:"attackGroup"`
	// Action to be taken when the attack group is triggered
	AttackGroupAction string `pulumi:"attackGroupAction"`
	// JSON-formatted condition and exception information for the evaluation attack group
	ConditionException *string `pulumi:"conditionException"`
	// Unique identifier of the security configuration
	ConfigId int `pulumi:"configId"`
	// Unique identifier of the security policy
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecEvalGroup resource.
type AppSecEvalGroupArgs struct {
	// Unique identifier of the evaluation attack group being modified
	AttackGroup pulumi.StringInput
	// Action to be taken when the attack group is triggered
	AttackGroupAction pulumi.StringInput
	// JSON-formatted condition and exception information for the evaluation attack group
	ConditionException pulumi.StringPtrInput
	// Unique identifier of the security configuration
	ConfigId pulumi.IntInput
	// Unique identifier of the security policy
	SecurityPolicyId pulumi.StringInput
}

func (AppSecEvalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalGroupArgs)(nil)).Elem()
}

type AppSecEvalGroupInput interface {
	pulumi.Input

	ToAppSecEvalGroupOutput() AppSecEvalGroupOutput
	ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput
}

func (*AppSecEvalGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalGroup)(nil)).Elem()
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupOutput() AppSecEvalGroupOutput {
	return i.ToAppSecEvalGroupOutputWithContext(context.Background())
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupOutput)
}

// AppSecEvalGroupArrayInput is an input type that accepts AppSecEvalGroupArray and AppSecEvalGroupArrayOutput values.
// You can construct a concrete instance of `AppSecEvalGroupArrayInput` via:
//
//	AppSecEvalGroupArray{ AppSecEvalGroupArgs{...} }
type AppSecEvalGroupArrayInput interface {
	pulumi.Input

	ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput
	ToAppSecEvalGroupArrayOutputWithContext(context.Context) AppSecEvalGroupArrayOutput
}

type AppSecEvalGroupArray []AppSecEvalGroupInput

func (AppSecEvalGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecEvalGroup)(nil)).Elem()
}

func (i AppSecEvalGroupArray) ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput {
	return i.ToAppSecEvalGroupArrayOutputWithContext(context.Background())
}

func (i AppSecEvalGroupArray) ToAppSecEvalGroupArrayOutputWithContext(ctx context.Context) AppSecEvalGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupArrayOutput)
}

// AppSecEvalGroupMapInput is an input type that accepts AppSecEvalGroupMap and AppSecEvalGroupMapOutput values.
// You can construct a concrete instance of `AppSecEvalGroupMapInput` via:
//
//	AppSecEvalGroupMap{ "key": AppSecEvalGroupArgs{...} }
type AppSecEvalGroupMapInput interface {
	pulumi.Input

	ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput
	ToAppSecEvalGroupMapOutputWithContext(context.Context) AppSecEvalGroupMapOutput
}

type AppSecEvalGroupMap map[string]AppSecEvalGroupInput

func (AppSecEvalGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecEvalGroup)(nil)).Elem()
}

func (i AppSecEvalGroupMap) ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput {
	return i.ToAppSecEvalGroupMapOutputWithContext(context.Background())
}

func (i AppSecEvalGroupMap) ToAppSecEvalGroupMapOutputWithContext(ctx context.Context) AppSecEvalGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupMapOutput)
}

type AppSecEvalGroupOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalGroup)(nil)).Elem()
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupOutput() AppSecEvalGroupOutput {
	return o
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput {
	return o
}

// Unique identifier of the evaluation attack group being modified
func (o AppSecEvalGroupOutput) AttackGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) pulumi.StringOutput { return v.AttackGroup }).(pulumi.StringOutput)
}

// Action to be taken when the attack group is triggered
func (o AppSecEvalGroupOutput) AttackGroupAction() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) pulumi.StringOutput { return v.AttackGroupAction }).(pulumi.StringOutput)
}

// JSON-formatted condition and exception information for the evaluation attack group
func (o AppSecEvalGroupOutput) ConditionException() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) pulumi.StringPtrOutput { return v.ConditionException }).(pulumi.StringPtrOutput)
}

// Unique identifier of the security configuration
func (o AppSecEvalGroupOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// Unique identifier of the security policy
func (o AppSecEvalGroupOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

type AppSecEvalGroupArrayOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecEvalGroup)(nil)).Elem()
}

func (o AppSecEvalGroupArrayOutput) ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput {
	return o
}

func (o AppSecEvalGroupArrayOutput) ToAppSecEvalGroupArrayOutputWithContext(ctx context.Context) AppSecEvalGroupArrayOutput {
	return o
}

func (o AppSecEvalGroupArrayOutput) Index(i pulumi.IntInput) AppSecEvalGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecEvalGroup {
		return vs[0].([]*AppSecEvalGroup)[vs[1].(int)]
	}).(AppSecEvalGroupOutput)
}

type AppSecEvalGroupMapOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecEvalGroup)(nil)).Elem()
}

func (o AppSecEvalGroupMapOutput) ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput {
	return o
}

func (o AppSecEvalGroupMapOutput) ToAppSecEvalGroupMapOutputWithContext(ctx context.Context) AppSecEvalGroupMapOutput {
	return o
}

func (o AppSecEvalGroupMapOutput) MapIndex(k pulumi.StringInput) AppSecEvalGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecEvalGroup {
		return vs[0].(map[string]*AppSecEvalGroup)[vs[1].(string)]
	}).(AppSecEvalGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupInput)(nil)).Elem(), &AppSecEvalGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupArrayInput)(nil)).Elem(), AppSecEvalGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupMapInput)(nil)).Elem(), AppSecEvalGroupMap{})
	pulumi.RegisterOutputType(AppSecEvalGroupOutput{})
	pulumi.RegisterOutputType(AppSecEvalGroupArrayOutput{})
	pulumi.RegisterOutputType(AppSecEvalGroupMapOutput{})
}
