// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanTransactionalEndpoint struct {
	pulumi.CustomResourceState

	ConfigId              pulumi.IntOutput    `pulumi:"configId"`
	OperationId           pulumi.StringOutput `pulumi:"operationId"`
	SecurityPolicyId      pulumi.StringOutput `pulumi:"securityPolicyId"`
	TransactionalEndpoint pulumi.StringOutput `pulumi:"transactionalEndpoint"`
}

// NewBotmanTransactionalEndpoint registers a new resource with the given unique name, arguments, and options.
func NewBotmanTransactionalEndpoint(ctx *pulumi.Context,
	name string, args *BotmanTransactionalEndpointArgs, opts ...pulumi.ResourceOption) (*BotmanTransactionalEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.OperationId == nil {
		return nil, errors.New("invalid value for required argument 'OperationId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	if args.TransactionalEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'TransactionalEndpoint'")
	}
	var resource BotmanTransactionalEndpoint
	err := ctx.RegisterResource("akamai:index/botmanTransactionalEndpoint:BotmanTransactionalEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanTransactionalEndpoint gets an existing BotmanTransactionalEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanTransactionalEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanTransactionalEndpointState, opts ...pulumi.ResourceOption) (*BotmanTransactionalEndpoint, error) {
	var resource BotmanTransactionalEndpoint
	err := ctx.ReadResource("akamai:index/botmanTransactionalEndpoint:BotmanTransactionalEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanTransactionalEndpoint resources.
type botmanTransactionalEndpointState struct {
	ConfigId              *int    `pulumi:"configId"`
	OperationId           *string `pulumi:"operationId"`
	SecurityPolicyId      *string `pulumi:"securityPolicyId"`
	TransactionalEndpoint *string `pulumi:"transactionalEndpoint"`
}

type BotmanTransactionalEndpointState struct {
	ConfigId              pulumi.IntPtrInput
	OperationId           pulumi.StringPtrInput
	SecurityPolicyId      pulumi.StringPtrInput
	TransactionalEndpoint pulumi.StringPtrInput
}

func (BotmanTransactionalEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanTransactionalEndpointState)(nil)).Elem()
}

type botmanTransactionalEndpointArgs struct {
	ConfigId              int    `pulumi:"configId"`
	OperationId           string `pulumi:"operationId"`
	SecurityPolicyId      string `pulumi:"securityPolicyId"`
	TransactionalEndpoint string `pulumi:"transactionalEndpoint"`
}

// The set of arguments for constructing a BotmanTransactionalEndpoint resource.
type BotmanTransactionalEndpointArgs struct {
	ConfigId              pulumi.IntInput
	OperationId           pulumi.StringInput
	SecurityPolicyId      pulumi.StringInput
	TransactionalEndpoint pulumi.StringInput
}

func (BotmanTransactionalEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanTransactionalEndpointArgs)(nil)).Elem()
}

type BotmanTransactionalEndpointInput interface {
	pulumi.Input

	ToBotmanTransactionalEndpointOutput() BotmanTransactionalEndpointOutput
	ToBotmanTransactionalEndpointOutputWithContext(ctx context.Context) BotmanTransactionalEndpointOutput
}

func (*BotmanTransactionalEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanTransactionalEndpoint)(nil)).Elem()
}

func (i *BotmanTransactionalEndpoint) ToBotmanTransactionalEndpointOutput() BotmanTransactionalEndpointOutput {
	return i.ToBotmanTransactionalEndpointOutputWithContext(context.Background())
}

func (i *BotmanTransactionalEndpoint) ToBotmanTransactionalEndpointOutputWithContext(ctx context.Context) BotmanTransactionalEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanTransactionalEndpointOutput)
}

// BotmanTransactionalEndpointArrayInput is an input type that accepts BotmanTransactionalEndpointArray and BotmanTransactionalEndpointArrayOutput values.
// You can construct a concrete instance of `BotmanTransactionalEndpointArrayInput` via:
//
//	BotmanTransactionalEndpointArray{ BotmanTransactionalEndpointArgs{...} }
type BotmanTransactionalEndpointArrayInput interface {
	pulumi.Input

	ToBotmanTransactionalEndpointArrayOutput() BotmanTransactionalEndpointArrayOutput
	ToBotmanTransactionalEndpointArrayOutputWithContext(context.Context) BotmanTransactionalEndpointArrayOutput
}

type BotmanTransactionalEndpointArray []BotmanTransactionalEndpointInput

func (BotmanTransactionalEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanTransactionalEndpoint)(nil)).Elem()
}

func (i BotmanTransactionalEndpointArray) ToBotmanTransactionalEndpointArrayOutput() BotmanTransactionalEndpointArrayOutput {
	return i.ToBotmanTransactionalEndpointArrayOutputWithContext(context.Background())
}

func (i BotmanTransactionalEndpointArray) ToBotmanTransactionalEndpointArrayOutputWithContext(ctx context.Context) BotmanTransactionalEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanTransactionalEndpointArrayOutput)
}

// BotmanTransactionalEndpointMapInput is an input type that accepts BotmanTransactionalEndpointMap and BotmanTransactionalEndpointMapOutput values.
// You can construct a concrete instance of `BotmanTransactionalEndpointMapInput` via:
//
//	BotmanTransactionalEndpointMap{ "key": BotmanTransactionalEndpointArgs{...} }
type BotmanTransactionalEndpointMapInput interface {
	pulumi.Input

	ToBotmanTransactionalEndpointMapOutput() BotmanTransactionalEndpointMapOutput
	ToBotmanTransactionalEndpointMapOutputWithContext(context.Context) BotmanTransactionalEndpointMapOutput
}

type BotmanTransactionalEndpointMap map[string]BotmanTransactionalEndpointInput

func (BotmanTransactionalEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanTransactionalEndpoint)(nil)).Elem()
}

func (i BotmanTransactionalEndpointMap) ToBotmanTransactionalEndpointMapOutput() BotmanTransactionalEndpointMapOutput {
	return i.ToBotmanTransactionalEndpointMapOutputWithContext(context.Background())
}

func (i BotmanTransactionalEndpointMap) ToBotmanTransactionalEndpointMapOutputWithContext(ctx context.Context) BotmanTransactionalEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanTransactionalEndpointMapOutput)
}

type BotmanTransactionalEndpointOutput struct{ *pulumi.OutputState }

func (BotmanTransactionalEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanTransactionalEndpoint)(nil)).Elem()
}

func (o BotmanTransactionalEndpointOutput) ToBotmanTransactionalEndpointOutput() BotmanTransactionalEndpointOutput {
	return o
}

func (o BotmanTransactionalEndpointOutput) ToBotmanTransactionalEndpointOutputWithContext(ctx context.Context) BotmanTransactionalEndpointOutput {
	return o
}

func (o BotmanTransactionalEndpointOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanTransactionalEndpoint) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanTransactionalEndpointOutput) OperationId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanTransactionalEndpoint) pulumi.StringOutput { return v.OperationId }).(pulumi.StringOutput)
}

func (o BotmanTransactionalEndpointOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanTransactionalEndpoint) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

func (o BotmanTransactionalEndpointOutput) TransactionalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanTransactionalEndpoint) pulumi.StringOutput { return v.TransactionalEndpoint }).(pulumi.StringOutput)
}

type BotmanTransactionalEndpointArrayOutput struct{ *pulumi.OutputState }

func (BotmanTransactionalEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanTransactionalEndpoint)(nil)).Elem()
}

func (o BotmanTransactionalEndpointArrayOutput) ToBotmanTransactionalEndpointArrayOutput() BotmanTransactionalEndpointArrayOutput {
	return o
}

func (o BotmanTransactionalEndpointArrayOutput) ToBotmanTransactionalEndpointArrayOutputWithContext(ctx context.Context) BotmanTransactionalEndpointArrayOutput {
	return o
}

func (o BotmanTransactionalEndpointArrayOutput) Index(i pulumi.IntInput) BotmanTransactionalEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanTransactionalEndpoint {
		return vs[0].([]*BotmanTransactionalEndpoint)[vs[1].(int)]
	}).(BotmanTransactionalEndpointOutput)
}

type BotmanTransactionalEndpointMapOutput struct{ *pulumi.OutputState }

func (BotmanTransactionalEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanTransactionalEndpoint)(nil)).Elem()
}

func (o BotmanTransactionalEndpointMapOutput) ToBotmanTransactionalEndpointMapOutput() BotmanTransactionalEndpointMapOutput {
	return o
}

func (o BotmanTransactionalEndpointMapOutput) ToBotmanTransactionalEndpointMapOutputWithContext(ctx context.Context) BotmanTransactionalEndpointMapOutput {
	return o
}

func (o BotmanTransactionalEndpointMapOutput) MapIndex(k pulumi.StringInput) BotmanTransactionalEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanTransactionalEndpoint {
		return vs[0].(map[string]*BotmanTransactionalEndpoint)[vs[1].(string)]
	}).(BotmanTransactionalEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanTransactionalEndpointInput)(nil)).Elem(), &BotmanTransactionalEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanTransactionalEndpointArrayInput)(nil)).Elem(), BotmanTransactionalEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanTransactionalEndpointMapInput)(nil)).Elem(), BotmanTransactionalEndpointMap{})
	pulumi.RegisterOutputType(BotmanTransactionalEndpointOutput{})
	pulumi.RegisterOutputType(BotmanTransactionalEndpointArrayOutput{})
	pulumi.RegisterOutputType(BotmanTransactionalEndpointMapOutput{})
}
