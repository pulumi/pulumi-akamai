// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Scopes**: Security configuration
//
// Creates a match target associated with a security configuration. Match targets determine which security policy should apply to an API, hostname or path.
//
// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/match-targets](https://techdocs.akamai.com/application-security/reference/post-match-targets)
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi-akamai/sdk/v4/go/akamai"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
//				Name: pulumi.StringRef("Documentation"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = akamai.NewAppSecMatchTarget(ctx, "matchTarget", &akamai.AppSecMatchTargetArgs{
//				ConfigId:    *pulumi.Int(configuration.ConfigId),
//				MatchTarget: readFileOrPanic(fmt.Sprintf("%v/match_targets.json", path.Module)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Output Options
//
// In addition to the arguments above, the following attribute is exported:
//
// - `matchTargetId`. ID of the match target.
type AppSecMatchTarget struct {
	pulumi.CustomResourceState

	// . Unique identifier of the security configuration associated with the match target being modified.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// . Path to a JSON file containing one or more match target definitions.
	MatchTarget pulumi.StringOutput `pulumi:"matchTarget"`
	// Unique identifier of the match target
	MatchTargetId pulumi.IntOutput `pulumi:"matchTargetId"`
}

// NewAppSecMatchTarget registers a new resource with the given unique name, arguments, and options.
func NewAppSecMatchTarget(ctx *pulumi.Context,
	name string, args *AppSecMatchTargetArgs, opts ...pulumi.ResourceOption) (*AppSecMatchTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.MatchTarget == nil {
		return nil, errors.New("invalid value for required argument 'MatchTarget'")
	}
	var resource AppSecMatchTarget
	err := ctx.RegisterResource("akamai:index/appSecMatchTarget:AppSecMatchTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecMatchTarget gets an existing AppSecMatchTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecMatchTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecMatchTargetState, opts ...pulumi.ResourceOption) (*AppSecMatchTarget, error) {
	var resource AppSecMatchTarget
	err := ctx.ReadResource("akamai:index/appSecMatchTarget:AppSecMatchTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecMatchTarget resources.
type appSecMatchTargetState struct {
	// . Unique identifier of the security configuration associated with the match target being modified.
	ConfigId *int `pulumi:"configId"`
	// . Path to a JSON file containing one or more match target definitions.
	MatchTarget *string `pulumi:"matchTarget"`
	// Unique identifier of the match target
	MatchTargetId *int `pulumi:"matchTargetId"`
}

type AppSecMatchTargetState struct {
	// . Unique identifier of the security configuration associated with the match target being modified.
	ConfigId pulumi.IntPtrInput
	// . Path to a JSON file containing one or more match target definitions.
	MatchTarget pulumi.StringPtrInput
	// Unique identifier of the match target
	MatchTargetId pulumi.IntPtrInput
}

func (AppSecMatchTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecMatchTargetState)(nil)).Elem()
}

type appSecMatchTargetArgs struct {
	// . Unique identifier of the security configuration associated with the match target being modified.
	ConfigId int `pulumi:"configId"`
	// . Path to a JSON file containing one or more match target definitions.
	MatchTarget string `pulumi:"matchTarget"`
}

// The set of arguments for constructing a AppSecMatchTarget resource.
type AppSecMatchTargetArgs struct {
	// . Unique identifier of the security configuration associated with the match target being modified.
	ConfigId pulumi.IntInput
	// . Path to a JSON file containing one or more match target definitions.
	MatchTarget pulumi.StringInput
}

func (AppSecMatchTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecMatchTargetArgs)(nil)).Elem()
}

type AppSecMatchTargetInput interface {
	pulumi.Input

	ToAppSecMatchTargetOutput() AppSecMatchTargetOutput
	ToAppSecMatchTargetOutputWithContext(ctx context.Context) AppSecMatchTargetOutput
}

func (*AppSecMatchTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecMatchTarget)(nil)).Elem()
}

func (i *AppSecMatchTarget) ToAppSecMatchTargetOutput() AppSecMatchTargetOutput {
	return i.ToAppSecMatchTargetOutputWithContext(context.Background())
}

func (i *AppSecMatchTarget) ToAppSecMatchTargetOutputWithContext(ctx context.Context) AppSecMatchTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecMatchTargetOutput)
}

// AppSecMatchTargetArrayInput is an input type that accepts AppSecMatchTargetArray and AppSecMatchTargetArrayOutput values.
// You can construct a concrete instance of `AppSecMatchTargetArrayInput` via:
//
//	AppSecMatchTargetArray{ AppSecMatchTargetArgs{...} }
type AppSecMatchTargetArrayInput interface {
	pulumi.Input

	ToAppSecMatchTargetArrayOutput() AppSecMatchTargetArrayOutput
	ToAppSecMatchTargetArrayOutputWithContext(context.Context) AppSecMatchTargetArrayOutput
}

type AppSecMatchTargetArray []AppSecMatchTargetInput

func (AppSecMatchTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecMatchTarget)(nil)).Elem()
}

func (i AppSecMatchTargetArray) ToAppSecMatchTargetArrayOutput() AppSecMatchTargetArrayOutput {
	return i.ToAppSecMatchTargetArrayOutputWithContext(context.Background())
}

func (i AppSecMatchTargetArray) ToAppSecMatchTargetArrayOutputWithContext(ctx context.Context) AppSecMatchTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecMatchTargetArrayOutput)
}

// AppSecMatchTargetMapInput is an input type that accepts AppSecMatchTargetMap and AppSecMatchTargetMapOutput values.
// You can construct a concrete instance of `AppSecMatchTargetMapInput` via:
//
//	AppSecMatchTargetMap{ "key": AppSecMatchTargetArgs{...} }
type AppSecMatchTargetMapInput interface {
	pulumi.Input

	ToAppSecMatchTargetMapOutput() AppSecMatchTargetMapOutput
	ToAppSecMatchTargetMapOutputWithContext(context.Context) AppSecMatchTargetMapOutput
}

type AppSecMatchTargetMap map[string]AppSecMatchTargetInput

func (AppSecMatchTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecMatchTarget)(nil)).Elem()
}

func (i AppSecMatchTargetMap) ToAppSecMatchTargetMapOutput() AppSecMatchTargetMapOutput {
	return i.ToAppSecMatchTargetMapOutputWithContext(context.Background())
}

func (i AppSecMatchTargetMap) ToAppSecMatchTargetMapOutputWithContext(ctx context.Context) AppSecMatchTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecMatchTargetMapOutput)
}

type AppSecMatchTargetOutput struct{ *pulumi.OutputState }

func (AppSecMatchTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecMatchTarget)(nil)).Elem()
}

func (o AppSecMatchTargetOutput) ToAppSecMatchTargetOutput() AppSecMatchTargetOutput {
	return o
}

func (o AppSecMatchTargetOutput) ToAppSecMatchTargetOutputWithContext(ctx context.Context) AppSecMatchTargetOutput {
	return o
}

// . Unique identifier of the security configuration associated with the match target being modified.
func (o AppSecMatchTargetOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecMatchTarget) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

// . Path to a JSON file containing one or more match target definitions.
func (o AppSecMatchTargetOutput) MatchTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *AppSecMatchTarget) pulumi.StringOutput { return v.MatchTarget }).(pulumi.StringOutput)
}

// Unique identifier of the match target
func (o AppSecMatchTargetOutput) MatchTargetId() pulumi.IntOutput {
	return o.ApplyT(func(v *AppSecMatchTarget) pulumi.IntOutput { return v.MatchTargetId }).(pulumi.IntOutput)
}

type AppSecMatchTargetArrayOutput struct{ *pulumi.OutputState }

func (AppSecMatchTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecMatchTarget)(nil)).Elem()
}

func (o AppSecMatchTargetArrayOutput) ToAppSecMatchTargetArrayOutput() AppSecMatchTargetArrayOutput {
	return o
}

func (o AppSecMatchTargetArrayOutput) ToAppSecMatchTargetArrayOutputWithContext(ctx context.Context) AppSecMatchTargetArrayOutput {
	return o
}

func (o AppSecMatchTargetArrayOutput) Index(i pulumi.IntInput) AppSecMatchTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppSecMatchTarget {
		return vs[0].([]*AppSecMatchTarget)[vs[1].(int)]
	}).(AppSecMatchTargetOutput)
}

type AppSecMatchTargetMapOutput struct{ *pulumi.OutputState }

func (AppSecMatchTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecMatchTarget)(nil)).Elem()
}

func (o AppSecMatchTargetMapOutput) ToAppSecMatchTargetMapOutput() AppSecMatchTargetMapOutput {
	return o
}

func (o AppSecMatchTargetMapOutput) ToAppSecMatchTargetMapOutputWithContext(ctx context.Context) AppSecMatchTargetMapOutput {
	return o
}

func (o AppSecMatchTargetMapOutput) MapIndex(k pulumi.StringInput) AppSecMatchTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppSecMatchTarget {
		return vs[0].(map[string]*AppSecMatchTarget)[vs[1].(string)]
	}).(AppSecMatchTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecMatchTargetInput)(nil)).Elem(), &AppSecMatchTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecMatchTargetArrayInput)(nil)).Elem(), AppSecMatchTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecMatchTargetMapInput)(nil)).Elem(), AppSecMatchTargetMap{})
	pulumi.RegisterOutputType(AppSecMatchTargetOutput{})
	pulumi.RegisterOutputType(AppSecMatchTargetArrayOutput{})
	pulumi.RegisterOutputType(AppSecMatchTargetMapOutput{})
}
