// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanAkamaiBotCategoryAction struct {
	pulumi.CustomResourceState

	AkamaiBotCategoryAction pulumi.StringOutput `pulumi:"akamaiBotCategoryAction"`
	CategoryId              pulumi.StringOutput `pulumi:"categoryId"`
	ConfigId                pulumi.IntOutput    `pulumi:"configId"`
	SecurityPolicyId        pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewBotmanAkamaiBotCategoryAction registers a new resource with the given unique name, arguments, and options.
func NewBotmanAkamaiBotCategoryAction(ctx *pulumi.Context,
	name string, args *BotmanAkamaiBotCategoryActionArgs, opts ...pulumi.ResourceOption) (*BotmanAkamaiBotCategoryAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AkamaiBotCategoryAction == nil {
		return nil, errors.New("invalid value for required argument 'AkamaiBotCategoryAction'")
	}
	if args.CategoryId == nil {
		return nil, errors.New("invalid value for required argument 'CategoryId'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource BotmanAkamaiBotCategoryAction
	err := ctx.RegisterResource("akamai:index/botmanAkamaiBotCategoryAction:BotmanAkamaiBotCategoryAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanAkamaiBotCategoryAction gets an existing BotmanAkamaiBotCategoryAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanAkamaiBotCategoryAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanAkamaiBotCategoryActionState, opts ...pulumi.ResourceOption) (*BotmanAkamaiBotCategoryAction, error) {
	var resource BotmanAkamaiBotCategoryAction
	err := ctx.ReadResource("akamai:index/botmanAkamaiBotCategoryAction:BotmanAkamaiBotCategoryAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanAkamaiBotCategoryAction resources.
type botmanAkamaiBotCategoryActionState struct {
	AkamaiBotCategoryAction *string `pulumi:"akamaiBotCategoryAction"`
	CategoryId              *string `pulumi:"categoryId"`
	ConfigId                *int    `pulumi:"configId"`
	SecurityPolicyId        *string `pulumi:"securityPolicyId"`
}

type BotmanAkamaiBotCategoryActionState struct {
	AkamaiBotCategoryAction pulumi.StringPtrInput
	CategoryId              pulumi.StringPtrInput
	ConfigId                pulumi.IntPtrInput
	SecurityPolicyId        pulumi.StringPtrInput
}

func (BotmanAkamaiBotCategoryActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanAkamaiBotCategoryActionState)(nil)).Elem()
}

type botmanAkamaiBotCategoryActionArgs struct {
	AkamaiBotCategoryAction string `pulumi:"akamaiBotCategoryAction"`
	CategoryId              string `pulumi:"categoryId"`
	ConfigId                int    `pulumi:"configId"`
	SecurityPolicyId        string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a BotmanAkamaiBotCategoryAction resource.
type BotmanAkamaiBotCategoryActionArgs struct {
	AkamaiBotCategoryAction pulumi.StringInput
	CategoryId              pulumi.StringInput
	ConfigId                pulumi.IntInput
	SecurityPolicyId        pulumi.StringInput
}

func (BotmanAkamaiBotCategoryActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanAkamaiBotCategoryActionArgs)(nil)).Elem()
}

type BotmanAkamaiBotCategoryActionInput interface {
	pulumi.Input

	ToBotmanAkamaiBotCategoryActionOutput() BotmanAkamaiBotCategoryActionOutput
	ToBotmanAkamaiBotCategoryActionOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionOutput
}

func (*BotmanAkamaiBotCategoryAction) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (i *BotmanAkamaiBotCategoryAction) ToBotmanAkamaiBotCategoryActionOutput() BotmanAkamaiBotCategoryActionOutput {
	return i.ToBotmanAkamaiBotCategoryActionOutputWithContext(context.Background())
}

func (i *BotmanAkamaiBotCategoryAction) ToBotmanAkamaiBotCategoryActionOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanAkamaiBotCategoryActionOutput)
}

// BotmanAkamaiBotCategoryActionArrayInput is an input type that accepts BotmanAkamaiBotCategoryActionArray and BotmanAkamaiBotCategoryActionArrayOutput values.
// You can construct a concrete instance of `BotmanAkamaiBotCategoryActionArrayInput` via:
//
//	BotmanAkamaiBotCategoryActionArray{ BotmanAkamaiBotCategoryActionArgs{...} }
type BotmanAkamaiBotCategoryActionArrayInput interface {
	pulumi.Input

	ToBotmanAkamaiBotCategoryActionArrayOutput() BotmanAkamaiBotCategoryActionArrayOutput
	ToBotmanAkamaiBotCategoryActionArrayOutputWithContext(context.Context) BotmanAkamaiBotCategoryActionArrayOutput
}

type BotmanAkamaiBotCategoryActionArray []BotmanAkamaiBotCategoryActionInput

func (BotmanAkamaiBotCategoryActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (i BotmanAkamaiBotCategoryActionArray) ToBotmanAkamaiBotCategoryActionArrayOutput() BotmanAkamaiBotCategoryActionArrayOutput {
	return i.ToBotmanAkamaiBotCategoryActionArrayOutputWithContext(context.Background())
}

func (i BotmanAkamaiBotCategoryActionArray) ToBotmanAkamaiBotCategoryActionArrayOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanAkamaiBotCategoryActionArrayOutput)
}

// BotmanAkamaiBotCategoryActionMapInput is an input type that accepts BotmanAkamaiBotCategoryActionMap and BotmanAkamaiBotCategoryActionMapOutput values.
// You can construct a concrete instance of `BotmanAkamaiBotCategoryActionMapInput` via:
//
//	BotmanAkamaiBotCategoryActionMap{ "key": BotmanAkamaiBotCategoryActionArgs{...} }
type BotmanAkamaiBotCategoryActionMapInput interface {
	pulumi.Input

	ToBotmanAkamaiBotCategoryActionMapOutput() BotmanAkamaiBotCategoryActionMapOutput
	ToBotmanAkamaiBotCategoryActionMapOutputWithContext(context.Context) BotmanAkamaiBotCategoryActionMapOutput
}

type BotmanAkamaiBotCategoryActionMap map[string]BotmanAkamaiBotCategoryActionInput

func (BotmanAkamaiBotCategoryActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (i BotmanAkamaiBotCategoryActionMap) ToBotmanAkamaiBotCategoryActionMapOutput() BotmanAkamaiBotCategoryActionMapOutput {
	return i.ToBotmanAkamaiBotCategoryActionMapOutputWithContext(context.Background())
}

func (i BotmanAkamaiBotCategoryActionMap) ToBotmanAkamaiBotCategoryActionMapOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanAkamaiBotCategoryActionMapOutput)
}

type BotmanAkamaiBotCategoryActionOutput struct{ *pulumi.OutputState }

func (BotmanAkamaiBotCategoryActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (o BotmanAkamaiBotCategoryActionOutput) ToBotmanAkamaiBotCategoryActionOutput() BotmanAkamaiBotCategoryActionOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionOutput) ToBotmanAkamaiBotCategoryActionOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionOutput) AkamaiBotCategoryAction() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanAkamaiBotCategoryAction) pulumi.StringOutput { return v.AkamaiBotCategoryAction }).(pulumi.StringOutput)
}

func (o BotmanAkamaiBotCategoryActionOutput) CategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanAkamaiBotCategoryAction) pulumi.StringOutput { return v.CategoryId }).(pulumi.StringOutput)
}

func (o BotmanAkamaiBotCategoryActionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanAkamaiBotCategoryAction) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanAkamaiBotCategoryActionOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanAkamaiBotCategoryAction) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

type BotmanAkamaiBotCategoryActionArrayOutput struct{ *pulumi.OutputState }

func (BotmanAkamaiBotCategoryActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (o BotmanAkamaiBotCategoryActionArrayOutput) ToBotmanAkamaiBotCategoryActionArrayOutput() BotmanAkamaiBotCategoryActionArrayOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionArrayOutput) ToBotmanAkamaiBotCategoryActionArrayOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionArrayOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionArrayOutput) Index(i pulumi.IntInput) BotmanAkamaiBotCategoryActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanAkamaiBotCategoryAction {
		return vs[0].([]*BotmanAkamaiBotCategoryAction)[vs[1].(int)]
	}).(BotmanAkamaiBotCategoryActionOutput)
}

type BotmanAkamaiBotCategoryActionMapOutput struct{ *pulumi.OutputState }

func (BotmanAkamaiBotCategoryActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanAkamaiBotCategoryAction)(nil)).Elem()
}

func (o BotmanAkamaiBotCategoryActionMapOutput) ToBotmanAkamaiBotCategoryActionMapOutput() BotmanAkamaiBotCategoryActionMapOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionMapOutput) ToBotmanAkamaiBotCategoryActionMapOutputWithContext(ctx context.Context) BotmanAkamaiBotCategoryActionMapOutput {
	return o
}

func (o BotmanAkamaiBotCategoryActionMapOutput) MapIndex(k pulumi.StringInput) BotmanAkamaiBotCategoryActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanAkamaiBotCategoryAction {
		return vs[0].(map[string]*BotmanAkamaiBotCategoryAction)[vs[1].(string)]
	}).(BotmanAkamaiBotCategoryActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanAkamaiBotCategoryActionInput)(nil)).Elem(), &BotmanAkamaiBotCategoryAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanAkamaiBotCategoryActionArrayInput)(nil)).Elem(), BotmanAkamaiBotCategoryActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanAkamaiBotCategoryActionMapInput)(nil)).Elem(), BotmanAkamaiBotCategoryActionMap{})
	pulumi.RegisterOutputType(BotmanAkamaiBotCategoryActionOutput{})
	pulumi.RegisterOutputType(BotmanAkamaiBotCategoryActionArrayOutput{})
	pulumi.RegisterOutputType(BotmanAkamaiBotCategoryActionMapOutput{})
}
