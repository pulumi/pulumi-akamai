// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v10/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamIpAllowlist struct {
	pulumi.CustomResourceState

	// Whether to enable or disable the allowlist.
	Enable pulumi.BoolOutput `pulumi:"enable"`
}

// NewIamIpAllowlist registers a new resource with the given unique name, arguments, and options.
func NewIamIpAllowlist(ctx *pulumi.Context,
	name string, args *IamIpAllowlistArgs, opts ...pulumi.ResourceOption) (*IamIpAllowlist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamIpAllowlist
	err := ctx.RegisterResource("akamai:index/iamIpAllowlist:IamIpAllowlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamIpAllowlist gets an existing IamIpAllowlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamIpAllowlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamIpAllowlistState, opts ...pulumi.ResourceOption) (*IamIpAllowlist, error) {
	var resource IamIpAllowlist
	err := ctx.ReadResource("akamai:index/iamIpAllowlist:IamIpAllowlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamIpAllowlist resources.
type iamIpAllowlistState struct {
	// Whether to enable or disable the allowlist.
	Enable *bool `pulumi:"enable"`
}

type IamIpAllowlistState struct {
	// Whether to enable or disable the allowlist.
	Enable pulumi.BoolPtrInput
}

func (IamIpAllowlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamIpAllowlistState)(nil)).Elem()
}

type iamIpAllowlistArgs struct {
	// Whether to enable or disable the allowlist.
	Enable bool `pulumi:"enable"`
}

// The set of arguments for constructing a IamIpAllowlist resource.
type IamIpAllowlistArgs struct {
	// Whether to enable or disable the allowlist.
	Enable pulumi.BoolInput
}

func (IamIpAllowlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamIpAllowlistArgs)(nil)).Elem()
}

type IamIpAllowlistInput interface {
	pulumi.Input

	ToIamIpAllowlistOutput() IamIpAllowlistOutput
	ToIamIpAllowlistOutputWithContext(ctx context.Context) IamIpAllowlistOutput
}

func (*IamIpAllowlist) ElementType() reflect.Type {
	return reflect.TypeOf((**IamIpAllowlist)(nil)).Elem()
}

func (i *IamIpAllowlist) ToIamIpAllowlistOutput() IamIpAllowlistOutput {
	return i.ToIamIpAllowlistOutputWithContext(context.Background())
}

func (i *IamIpAllowlist) ToIamIpAllowlistOutputWithContext(ctx context.Context) IamIpAllowlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpAllowlistOutput)
}

// IamIpAllowlistArrayInput is an input type that accepts IamIpAllowlistArray and IamIpAllowlistArrayOutput values.
// You can construct a concrete instance of `IamIpAllowlistArrayInput` via:
//
//	IamIpAllowlistArray{ IamIpAllowlistArgs{...} }
type IamIpAllowlistArrayInput interface {
	pulumi.Input

	ToIamIpAllowlistArrayOutput() IamIpAllowlistArrayOutput
	ToIamIpAllowlistArrayOutputWithContext(context.Context) IamIpAllowlistArrayOutput
}

type IamIpAllowlistArray []IamIpAllowlistInput

func (IamIpAllowlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamIpAllowlist)(nil)).Elem()
}

func (i IamIpAllowlistArray) ToIamIpAllowlistArrayOutput() IamIpAllowlistArrayOutput {
	return i.ToIamIpAllowlistArrayOutputWithContext(context.Background())
}

func (i IamIpAllowlistArray) ToIamIpAllowlistArrayOutputWithContext(ctx context.Context) IamIpAllowlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpAllowlistArrayOutput)
}

// IamIpAllowlistMapInput is an input type that accepts IamIpAllowlistMap and IamIpAllowlistMapOutput values.
// You can construct a concrete instance of `IamIpAllowlistMapInput` via:
//
//	IamIpAllowlistMap{ "key": IamIpAllowlistArgs{...} }
type IamIpAllowlistMapInput interface {
	pulumi.Input

	ToIamIpAllowlistMapOutput() IamIpAllowlistMapOutput
	ToIamIpAllowlistMapOutputWithContext(context.Context) IamIpAllowlistMapOutput
}

type IamIpAllowlistMap map[string]IamIpAllowlistInput

func (IamIpAllowlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamIpAllowlist)(nil)).Elem()
}

func (i IamIpAllowlistMap) ToIamIpAllowlistMapOutput() IamIpAllowlistMapOutput {
	return i.ToIamIpAllowlistMapOutputWithContext(context.Background())
}

func (i IamIpAllowlistMap) ToIamIpAllowlistMapOutputWithContext(ctx context.Context) IamIpAllowlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamIpAllowlistMapOutput)
}

type IamIpAllowlistOutput struct{ *pulumi.OutputState }

func (IamIpAllowlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamIpAllowlist)(nil)).Elem()
}

func (o IamIpAllowlistOutput) ToIamIpAllowlistOutput() IamIpAllowlistOutput {
	return o
}

func (o IamIpAllowlistOutput) ToIamIpAllowlistOutputWithContext(ctx context.Context) IamIpAllowlistOutput {
	return o
}

// Whether to enable or disable the allowlist.
func (o IamIpAllowlistOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamIpAllowlist) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

type IamIpAllowlistArrayOutput struct{ *pulumi.OutputState }

func (IamIpAllowlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamIpAllowlist)(nil)).Elem()
}

func (o IamIpAllowlistArrayOutput) ToIamIpAllowlistArrayOutput() IamIpAllowlistArrayOutput {
	return o
}

func (o IamIpAllowlistArrayOutput) ToIamIpAllowlistArrayOutputWithContext(ctx context.Context) IamIpAllowlistArrayOutput {
	return o
}

func (o IamIpAllowlistArrayOutput) Index(i pulumi.IntInput) IamIpAllowlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamIpAllowlist {
		return vs[0].([]*IamIpAllowlist)[vs[1].(int)]
	}).(IamIpAllowlistOutput)
}

type IamIpAllowlistMapOutput struct{ *pulumi.OutputState }

func (IamIpAllowlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamIpAllowlist)(nil)).Elem()
}

func (o IamIpAllowlistMapOutput) ToIamIpAllowlistMapOutput() IamIpAllowlistMapOutput {
	return o
}

func (o IamIpAllowlistMapOutput) ToIamIpAllowlistMapOutputWithContext(ctx context.Context) IamIpAllowlistMapOutput {
	return o
}

func (o IamIpAllowlistMapOutput) MapIndex(k pulumi.StringInput) IamIpAllowlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamIpAllowlist {
		return vs[0].(map[string]*IamIpAllowlist)[vs[1].(string)]
	}).(IamIpAllowlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpAllowlistInput)(nil)).Elem(), &IamIpAllowlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpAllowlistArrayInput)(nil)).Elem(), IamIpAllowlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamIpAllowlistMapInput)(nil)).Elem(), IamIpAllowlistMap{})
	pulumi.RegisterOutputType(IamIpAllowlistOutput{})
	pulumi.RegisterOutputType(IamIpAllowlistArrayOutput{})
	pulumi.RegisterOutputType(IamIpAllowlistMapOutput{})
}
