// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BotmanJavascriptInjection struct {
	pulumi.CustomResourceState

	ConfigId            pulumi.IntOutput    `pulumi:"configId"`
	JavascriptInjection pulumi.StringOutput `pulumi:"javascriptInjection"`
	SecurityPolicyId    pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewBotmanJavascriptInjection registers a new resource with the given unique name, arguments, and options.
func NewBotmanJavascriptInjection(ctx *pulumi.Context,
	name string, args *BotmanJavascriptInjectionArgs, opts ...pulumi.ResourceOption) (*BotmanJavascriptInjection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.JavascriptInjection == nil {
		return nil, errors.New("invalid value for required argument 'JavascriptInjection'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource BotmanJavascriptInjection
	err := ctx.RegisterResource("akamai:index/botmanJavascriptInjection:BotmanJavascriptInjection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBotmanJavascriptInjection gets an existing BotmanJavascriptInjection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBotmanJavascriptInjection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BotmanJavascriptInjectionState, opts ...pulumi.ResourceOption) (*BotmanJavascriptInjection, error) {
	var resource BotmanJavascriptInjection
	err := ctx.ReadResource("akamai:index/botmanJavascriptInjection:BotmanJavascriptInjection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BotmanJavascriptInjection resources.
type botmanJavascriptInjectionState struct {
	ConfigId            *int    `pulumi:"configId"`
	JavascriptInjection *string `pulumi:"javascriptInjection"`
	SecurityPolicyId    *string `pulumi:"securityPolicyId"`
}

type BotmanJavascriptInjectionState struct {
	ConfigId            pulumi.IntPtrInput
	JavascriptInjection pulumi.StringPtrInput
	SecurityPolicyId    pulumi.StringPtrInput
}

func (BotmanJavascriptInjectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanJavascriptInjectionState)(nil)).Elem()
}

type botmanJavascriptInjectionArgs struct {
	ConfigId            int    `pulumi:"configId"`
	JavascriptInjection string `pulumi:"javascriptInjection"`
	SecurityPolicyId    string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a BotmanJavascriptInjection resource.
type BotmanJavascriptInjectionArgs struct {
	ConfigId            pulumi.IntInput
	JavascriptInjection pulumi.StringInput
	SecurityPolicyId    pulumi.StringInput
}

func (BotmanJavascriptInjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*botmanJavascriptInjectionArgs)(nil)).Elem()
}

type BotmanJavascriptInjectionInput interface {
	pulumi.Input

	ToBotmanJavascriptInjectionOutput() BotmanJavascriptInjectionOutput
	ToBotmanJavascriptInjectionOutputWithContext(ctx context.Context) BotmanJavascriptInjectionOutput
}

func (*BotmanJavascriptInjection) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanJavascriptInjection)(nil)).Elem()
}

func (i *BotmanJavascriptInjection) ToBotmanJavascriptInjectionOutput() BotmanJavascriptInjectionOutput {
	return i.ToBotmanJavascriptInjectionOutputWithContext(context.Background())
}

func (i *BotmanJavascriptInjection) ToBotmanJavascriptInjectionOutputWithContext(ctx context.Context) BotmanJavascriptInjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanJavascriptInjectionOutput)
}

// BotmanJavascriptInjectionArrayInput is an input type that accepts BotmanJavascriptInjectionArray and BotmanJavascriptInjectionArrayOutput values.
// You can construct a concrete instance of `BotmanJavascriptInjectionArrayInput` via:
//
//	BotmanJavascriptInjectionArray{ BotmanJavascriptInjectionArgs{...} }
type BotmanJavascriptInjectionArrayInput interface {
	pulumi.Input

	ToBotmanJavascriptInjectionArrayOutput() BotmanJavascriptInjectionArrayOutput
	ToBotmanJavascriptInjectionArrayOutputWithContext(context.Context) BotmanJavascriptInjectionArrayOutput
}

type BotmanJavascriptInjectionArray []BotmanJavascriptInjectionInput

func (BotmanJavascriptInjectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanJavascriptInjection)(nil)).Elem()
}

func (i BotmanJavascriptInjectionArray) ToBotmanJavascriptInjectionArrayOutput() BotmanJavascriptInjectionArrayOutput {
	return i.ToBotmanJavascriptInjectionArrayOutputWithContext(context.Background())
}

func (i BotmanJavascriptInjectionArray) ToBotmanJavascriptInjectionArrayOutputWithContext(ctx context.Context) BotmanJavascriptInjectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanJavascriptInjectionArrayOutput)
}

// BotmanJavascriptInjectionMapInput is an input type that accepts BotmanJavascriptInjectionMap and BotmanJavascriptInjectionMapOutput values.
// You can construct a concrete instance of `BotmanJavascriptInjectionMapInput` via:
//
//	BotmanJavascriptInjectionMap{ "key": BotmanJavascriptInjectionArgs{...} }
type BotmanJavascriptInjectionMapInput interface {
	pulumi.Input

	ToBotmanJavascriptInjectionMapOutput() BotmanJavascriptInjectionMapOutput
	ToBotmanJavascriptInjectionMapOutputWithContext(context.Context) BotmanJavascriptInjectionMapOutput
}

type BotmanJavascriptInjectionMap map[string]BotmanJavascriptInjectionInput

func (BotmanJavascriptInjectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanJavascriptInjection)(nil)).Elem()
}

func (i BotmanJavascriptInjectionMap) ToBotmanJavascriptInjectionMapOutput() BotmanJavascriptInjectionMapOutput {
	return i.ToBotmanJavascriptInjectionMapOutputWithContext(context.Background())
}

func (i BotmanJavascriptInjectionMap) ToBotmanJavascriptInjectionMapOutputWithContext(ctx context.Context) BotmanJavascriptInjectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BotmanJavascriptInjectionMapOutput)
}

type BotmanJavascriptInjectionOutput struct{ *pulumi.OutputState }

func (BotmanJavascriptInjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BotmanJavascriptInjection)(nil)).Elem()
}

func (o BotmanJavascriptInjectionOutput) ToBotmanJavascriptInjectionOutput() BotmanJavascriptInjectionOutput {
	return o
}

func (o BotmanJavascriptInjectionOutput) ToBotmanJavascriptInjectionOutputWithContext(ctx context.Context) BotmanJavascriptInjectionOutput {
	return o
}

func (o BotmanJavascriptInjectionOutput) ConfigId() pulumi.IntOutput {
	return o.ApplyT(func(v *BotmanJavascriptInjection) pulumi.IntOutput { return v.ConfigId }).(pulumi.IntOutput)
}

func (o BotmanJavascriptInjectionOutput) JavascriptInjection() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanJavascriptInjection) pulumi.StringOutput { return v.JavascriptInjection }).(pulumi.StringOutput)
}

func (o BotmanJavascriptInjectionOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BotmanJavascriptInjection) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

type BotmanJavascriptInjectionArrayOutput struct{ *pulumi.OutputState }

func (BotmanJavascriptInjectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BotmanJavascriptInjection)(nil)).Elem()
}

func (o BotmanJavascriptInjectionArrayOutput) ToBotmanJavascriptInjectionArrayOutput() BotmanJavascriptInjectionArrayOutput {
	return o
}

func (o BotmanJavascriptInjectionArrayOutput) ToBotmanJavascriptInjectionArrayOutputWithContext(ctx context.Context) BotmanJavascriptInjectionArrayOutput {
	return o
}

func (o BotmanJavascriptInjectionArrayOutput) Index(i pulumi.IntInput) BotmanJavascriptInjectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BotmanJavascriptInjection {
		return vs[0].([]*BotmanJavascriptInjection)[vs[1].(int)]
	}).(BotmanJavascriptInjectionOutput)
}

type BotmanJavascriptInjectionMapOutput struct{ *pulumi.OutputState }

func (BotmanJavascriptInjectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BotmanJavascriptInjection)(nil)).Elem()
}

func (o BotmanJavascriptInjectionMapOutput) ToBotmanJavascriptInjectionMapOutput() BotmanJavascriptInjectionMapOutput {
	return o
}

func (o BotmanJavascriptInjectionMapOutput) ToBotmanJavascriptInjectionMapOutputWithContext(ctx context.Context) BotmanJavascriptInjectionMapOutput {
	return o
}

func (o BotmanJavascriptInjectionMapOutput) MapIndex(k pulumi.StringInput) BotmanJavascriptInjectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BotmanJavascriptInjection {
		return vs[0].(map[string]*BotmanJavascriptInjection)[vs[1].(string)]
	}).(BotmanJavascriptInjectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanJavascriptInjectionInput)(nil)).Elem(), &BotmanJavascriptInjection{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanJavascriptInjectionArrayInput)(nil)).Elem(), BotmanJavascriptInjectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BotmanJavascriptInjectionMapInput)(nil)).Elem(), BotmanJavascriptInjectionMap{})
	pulumi.RegisterOutputType(BotmanJavascriptInjectionOutput{})
	pulumi.RegisterOutputType(BotmanJavascriptInjectionArrayOutput{})
	pulumi.RegisterOutputType(BotmanJavascriptInjectionMapOutput{})
}
