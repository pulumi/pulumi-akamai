// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-akamai/sdk/v9/go/akamai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamCidrBlock struct {
	pulumi.CustomResourceState

	// Specifies activities available for the CIDR block.
	Actions IamCidrBlockActionsOutput `pulumi:"actions"`
	// The value of an IP address or IP address range.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// Unique identifier for each CIDR block.
	CidrBlockId pulumi.IntOutput `pulumi:"cidrBlockId"`
	// Descriptive label you provide for the CIDR block.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// The user who created the CIDR block.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// ISO 8601 timestamp indicating when the CIDR block was created.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// Enables the CIDR block on the account.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The user who last edited the CIDR block.
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// ISO 8601 timestamp indicating when the CIDR block was last modified.
	ModifiedDate pulumi.StringOutput `pulumi:"modifiedDate"`
}

// NewIamCidrBlock registers a new resource with the given unique name, arguments, and options.
func NewIamCidrBlock(ctx *pulumi.Context,
	name string, args *IamCidrBlockArgs, opts ...pulumi.ResourceOption) (*IamCidrBlock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamCidrBlock
	err := ctx.RegisterResource("akamai:index/iamCidrBlock:IamCidrBlock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamCidrBlock gets an existing IamCidrBlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamCidrBlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamCidrBlockState, opts ...pulumi.ResourceOption) (*IamCidrBlock, error) {
	var resource IamCidrBlock
	err := ctx.ReadResource("akamai:index/iamCidrBlock:IamCidrBlock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamCidrBlock resources.
type iamCidrBlockState struct {
	// Specifies activities available for the CIDR block.
	Actions *IamCidrBlockActions `pulumi:"actions"`
	// The value of an IP address or IP address range.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Unique identifier for each CIDR block.
	CidrBlockId *int `pulumi:"cidrBlockId"`
	// Descriptive label you provide for the CIDR block.
	Comments *string `pulumi:"comments"`
	// The user who created the CIDR block.
	CreatedBy *string `pulumi:"createdBy"`
	// ISO 8601 timestamp indicating when the CIDR block was created.
	CreatedDate *string `pulumi:"createdDate"`
	// Enables the CIDR block on the account.
	Enabled *bool `pulumi:"enabled"`
	// The user who last edited the CIDR block.
	ModifiedBy *string `pulumi:"modifiedBy"`
	// ISO 8601 timestamp indicating when the CIDR block was last modified.
	ModifiedDate *string `pulumi:"modifiedDate"`
}

type IamCidrBlockState struct {
	// Specifies activities available for the CIDR block.
	Actions IamCidrBlockActionsPtrInput
	// The value of an IP address or IP address range.
	CidrBlock pulumi.StringPtrInput
	// Unique identifier for each CIDR block.
	CidrBlockId pulumi.IntPtrInput
	// Descriptive label you provide for the CIDR block.
	Comments pulumi.StringPtrInput
	// The user who created the CIDR block.
	CreatedBy pulumi.StringPtrInput
	// ISO 8601 timestamp indicating when the CIDR block was created.
	CreatedDate pulumi.StringPtrInput
	// Enables the CIDR block on the account.
	Enabled pulumi.BoolPtrInput
	// The user who last edited the CIDR block.
	ModifiedBy pulumi.StringPtrInput
	// ISO 8601 timestamp indicating when the CIDR block was last modified.
	ModifiedDate pulumi.StringPtrInput
}

func (IamCidrBlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamCidrBlockState)(nil)).Elem()
}

type iamCidrBlockArgs struct {
	// The value of an IP address or IP address range.
	CidrBlock string `pulumi:"cidrBlock"`
	// Descriptive label you provide for the CIDR block.
	Comments *string `pulumi:"comments"`
	// Enables the CIDR block on the account.
	Enabled bool `pulumi:"enabled"`
}

// The set of arguments for constructing a IamCidrBlock resource.
type IamCidrBlockArgs struct {
	// The value of an IP address or IP address range.
	CidrBlock pulumi.StringInput
	// Descriptive label you provide for the CIDR block.
	Comments pulumi.StringPtrInput
	// Enables the CIDR block on the account.
	Enabled pulumi.BoolInput
}

func (IamCidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamCidrBlockArgs)(nil)).Elem()
}

type IamCidrBlockInput interface {
	pulumi.Input

	ToIamCidrBlockOutput() IamCidrBlockOutput
	ToIamCidrBlockOutputWithContext(ctx context.Context) IamCidrBlockOutput
}

func (*IamCidrBlock) ElementType() reflect.Type {
	return reflect.TypeOf((**IamCidrBlock)(nil)).Elem()
}

func (i *IamCidrBlock) ToIamCidrBlockOutput() IamCidrBlockOutput {
	return i.ToIamCidrBlockOutputWithContext(context.Background())
}

func (i *IamCidrBlock) ToIamCidrBlockOutputWithContext(ctx context.Context) IamCidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamCidrBlockOutput)
}

// IamCidrBlockArrayInput is an input type that accepts IamCidrBlockArray and IamCidrBlockArrayOutput values.
// You can construct a concrete instance of `IamCidrBlockArrayInput` via:
//
//	IamCidrBlockArray{ IamCidrBlockArgs{...} }
type IamCidrBlockArrayInput interface {
	pulumi.Input

	ToIamCidrBlockArrayOutput() IamCidrBlockArrayOutput
	ToIamCidrBlockArrayOutputWithContext(context.Context) IamCidrBlockArrayOutput
}

type IamCidrBlockArray []IamCidrBlockInput

func (IamCidrBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamCidrBlock)(nil)).Elem()
}

func (i IamCidrBlockArray) ToIamCidrBlockArrayOutput() IamCidrBlockArrayOutput {
	return i.ToIamCidrBlockArrayOutputWithContext(context.Background())
}

func (i IamCidrBlockArray) ToIamCidrBlockArrayOutputWithContext(ctx context.Context) IamCidrBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamCidrBlockArrayOutput)
}

// IamCidrBlockMapInput is an input type that accepts IamCidrBlockMap and IamCidrBlockMapOutput values.
// You can construct a concrete instance of `IamCidrBlockMapInput` via:
//
//	IamCidrBlockMap{ "key": IamCidrBlockArgs{...} }
type IamCidrBlockMapInput interface {
	pulumi.Input

	ToIamCidrBlockMapOutput() IamCidrBlockMapOutput
	ToIamCidrBlockMapOutputWithContext(context.Context) IamCidrBlockMapOutput
}

type IamCidrBlockMap map[string]IamCidrBlockInput

func (IamCidrBlockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamCidrBlock)(nil)).Elem()
}

func (i IamCidrBlockMap) ToIamCidrBlockMapOutput() IamCidrBlockMapOutput {
	return i.ToIamCidrBlockMapOutputWithContext(context.Background())
}

func (i IamCidrBlockMap) ToIamCidrBlockMapOutputWithContext(ctx context.Context) IamCidrBlockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamCidrBlockMapOutput)
}

type IamCidrBlockOutput struct{ *pulumi.OutputState }

func (IamCidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamCidrBlock)(nil)).Elem()
}

func (o IamCidrBlockOutput) ToIamCidrBlockOutput() IamCidrBlockOutput {
	return o
}

func (o IamCidrBlockOutput) ToIamCidrBlockOutputWithContext(ctx context.Context) IamCidrBlockOutput {
	return o
}

// Specifies activities available for the CIDR block.
func (o IamCidrBlockOutput) Actions() IamCidrBlockActionsOutput {
	return o.ApplyT(func(v *IamCidrBlock) IamCidrBlockActionsOutput { return v.Actions }).(IamCidrBlockActionsOutput)
}

// The value of an IP address or IP address range.
func (o IamCidrBlockOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// Unique identifier for each CIDR block.
func (o IamCidrBlockOutput) CidrBlockId() pulumi.IntOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.IntOutput { return v.CidrBlockId }).(pulumi.IntOutput)
}

// Descriptive label you provide for the CIDR block.
func (o IamCidrBlockOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// The user who created the CIDR block.
func (o IamCidrBlockOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// ISO 8601 timestamp indicating when the CIDR block was created.
func (o IamCidrBlockOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// Enables the CIDR block on the account.
func (o IamCidrBlockOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The user who last edited the CIDR block.
func (o IamCidrBlockOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// ISO 8601 timestamp indicating when the CIDR block was last modified.
func (o IamCidrBlockOutput) ModifiedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *IamCidrBlock) pulumi.StringOutput { return v.ModifiedDate }).(pulumi.StringOutput)
}

type IamCidrBlockArrayOutput struct{ *pulumi.OutputState }

func (IamCidrBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamCidrBlock)(nil)).Elem()
}

func (o IamCidrBlockArrayOutput) ToIamCidrBlockArrayOutput() IamCidrBlockArrayOutput {
	return o
}

func (o IamCidrBlockArrayOutput) ToIamCidrBlockArrayOutputWithContext(ctx context.Context) IamCidrBlockArrayOutput {
	return o
}

func (o IamCidrBlockArrayOutput) Index(i pulumi.IntInput) IamCidrBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamCidrBlock {
		return vs[0].([]*IamCidrBlock)[vs[1].(int)]
	}).(IamCidrBlockOutput)
}

type IamCidrBlockMapOutput struct{ *pulumi.OutputState }

func (IamCidrBlockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamCidrBlock)(nil)).Elem()
}

func (o IamCidrBlockMapOutput) ToIamCidrBlockMapOutput() IamCidrBlockMapOutput {
	return o
}

func (o IamCidrBlockMapOutput) ToIamCidrBlockMapOutputWithContext(ctx context.Context) IamCidrBlockMapOutput {
	return o
}

func (o IamCidrBlockMapOutput) MapIndex(k pulumi.StringInput) IamCidrBlockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamCidrBlock {
		return vs[0].(map[string]*IamCidrBlock)[vs[1].(string)]
	}).(IamCidrBlockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamCidrBlockInput)(nil)).Elem(), &IamCidrBlock{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamCidrBlockArrayInput)(nil)).Elem(), IamCidrBlockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamCidrBlockMapInput)(nil)).Elem(), IamCidrBlockMap{})
	pulumi.RegisterOutputType(IamCidrBlockOutput{})
	pulumi.RegisterOutputType(IamCidrBlockArrayOutput{})
	pulumi.RegisterOutputType(IamCidrBlockMapOutput{})
}
