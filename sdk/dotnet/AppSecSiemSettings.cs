// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/appSecSiemSettings:AppSecSiemSettings")]
    public partial class AppSecSiemSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// Whether Bot Manager events should be included in SIEM events
        /// </summary>
        [Output("enableBotmanSiem")]
        public Output<bool?> EnableBotmanSiem { get; private set; } = null!;

        /// <summary>
        /// Whether to enable SIEM on all security policies in the security configuration
        /// </summary>
        [Output("enableForAllPolicies")]
        public Output<bool> EnableForAllPolicies { get; private set; } = null!;

        /// <summary>
        /// Whether to enable SIEM
        /// </summary>
        [Output("enableSiem")]
        public Output<bool> EnableSiem { get; private set; } = null!;

        /// <summary>
        /// Describes all the protections and actions to be excluded from SIEM events
        /// </summary>
        [Output("exceptions")]
        public Output<Outputs.AppSecSiemSettingsExceptions?> Exceptions { get; private set; } = null!;

        /// <summary>
        /// List of IDs of security policy for which SIEM integration is to be enabled
        /// </summary>
        [Output("securityPolicyIds")]
        public Output<ImmutableArray<string>> SecurityPolicyIds { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the SIEM settings being modified
        /// </summary>
        [Output("siemId")]
        public Output<int> SiemId { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecSiemSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecSiemSettings(string name, AppSecSiemSettingsArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecSiemSettings:AppSecSiemSettings", name, args ?? new AppSecSiemSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecSiemSettings(string name, Input<string> id, AppSecSiemSettingsState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecSiemSettings:AppSecSiemSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecSiemSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecSiemSettings Get(string name, Input<string> id, AppSecSiemSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecSiemSettings(name, id, state, options);
        }
    }

    public sealed class AppSecSiemSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// Whether Bot Manager events should be included in SIEM events
        /// </summary>
        [Input("enableBotmanSiem")]
        public Input<bool>? EnableBotmanSiem { get; set; }

        /// <summary>
        /// Whether to enable SIEM on all security policies in the security configuration
        /// </summary>
        [Input("enableForAllPolicies", required: true)]
        public Input<bool> EnableForAllPolicies { get; set; } = null!;

        /// <summary>
        /// Whether to enable SIEM
        /// </summary>
        [Input("enableSiem", required: true)]
        public Input<bool> EnableSiem { get; set; } = null!;

        /// <summary>
        /// Describes all the protections and actions to be excluded from SIEM events
        /// </summary>
        [Input("exceptions")]
        public Input<Inputs.AppSecSiemSettingsExceptionsArgs>? Exceptions { get; set; }

        [Input("securityPolicyIds")]
        private InputList<string>? _securityPolicyIds;

        /// <summary>
        /// List of IDs of security policy for which SIEM integration is to be enabled
        /// </summary>
        public InputList<string> SecurityPolicyIds
        {
            get => _securityPolicyIds ?? (_securityPolicyIds = new InputList<string>());
            set => _securityPolicyIds = value;
        }

        /// <summary>
        /// Unique identifier of the SIEM settings being modified
        /// </summary>
        [Input("siemId", required: true)]
        public Input<int> SiemId { get; set; } = null!;

        public AppSecSiemSettingsArgs()
        {
        }
        public static new AppSecSiemSettingsArgs Empty => new AppSecSiemSettingsArgs();
    }

    public sealed class AppSecSiemSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        /// <summary>
        /// Whether Bot Manager events should be included in SIEM events
        /// </summary>
        [Input("enableBotmanSiem")]
        public Input<bool>? EnableBotmanSiem { get; set; }

        /// <summary>
        /// Whether to enable SIEM on all security policies in the security configuration
        /// </summary>
        [Input("enableForAllPolicies")]
        public Input<bool>? EnableForAllPolicies { get; set; }

        /// <summary>
        /// Whether to enable SIEM
        /// </summary>
        [Input("enableSiem")]
        public Input<bool>? EnableSiem { get; set; }

        /// <summary>
        /// Describes all the protections and actions to be excluded from SIEM events
        /// </summary>
        [Input("exceptions")]
        public Input<Inputs.AppSecSiemSettingsExceptionsGetArgs>? Exceptions { get; set; }

        [Input("securityPolicyIds")]
        private InputList<string>? _securityPolicyIds;

        /// <summary>
        /// List of IDs of security policy for which SIEM integration is to be enabled
        /// </summary>
        public InputList<string> SecurityPolicyIds
        {
            get => _securityPolicyIds ?? (_securityPolicyIds = new InputList<string>());
            set => _securityPolicyIds = value;
        }

        /// <summary>
        /// Unique identifier of the SIEM settings being modified
        /// </summary>
        [Input("siemId")]
        public Input<int>? SiemId { get; set; }

        public AppSecSiemSettingsState()
        {
        }
        public static new AppSecSiemSettingsState Empty => new AppSecSiemSettingsState();
    }
}
