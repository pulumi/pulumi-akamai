// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/datastream:Datastream")]
    public partial class Datastream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defining if stream should be active or not
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        [Output("azureConnector")]
        public Output<Outputs.DatastreamAzureConnector?> AzureConnector { get; private set; } = null!;

        /// <summary>
        /// Identifies if stream needs to collect midgress data
        /// </summary>
        [Output("collectMidgress")]
        public Output<bool?> CollectMidgress { get; private set; } = null!;

        /// <summary>
        /// Identifies the contract that has access to the product
        /// </summary>
        [Output("contractId")]
        public Output<string> ContractId { get; private set; } = null!;

        /// <summary>
        /// The username who created the stream
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The date and time when the stream was created
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        [Output("datadogConnector")]
        public Output<Outputs.DatastreamDatadogConnector?> DatadogConnector { get; private set; } = null!;

        /// <summary>
        /// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
        /// identifiers define how the value for these fields appear in the log lines
        /// </summary>
        [Output("datasetFields")]
        public Output<ImmutableArray<int>> DatasetFields { get; private set; } = null!;

        /// <summary>
        /// Provides information about the configuration related to logs (format, file names, delivery frequency)
        /// </summary>
        [Output("deliveryConfiguration")]
        public Output<Outputs.DatastreamDeliveryConfiguration> DeliveryConfiguration { get; private set; } = null!;

        [Output("elasticsearchConnector")]
        public Output<Outputs.DatastreamElasticsearchConnector?> ElasticsearchConnector { get; private set; } = null!;

        [Output("gcsConnector")]
        public Output<Outputs.DatastreamGcsConnector?> GcsConnector { get; private set; } = null!;

        /// <summary>
        /// Identifies the group that has access to the product and for which the stream configuration was created
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        [Output("httpsConnector")]
        public Output<Outputs.DatastreamHttpsConnector?> HttpsConnector { get; private set; } = null!;

        /// <summary>
        /// Identifies the latest active configuration version of the stream
        /// </summary>
        [Output("latestVersion")]
        public Output<int> LatestVersion { get; private set; } = null!;

        [Output("logglyConnector")]
        public Output<Outputs.DatastreamLogglyConnector?> LogglyConnector { get; private set; } = null!;

        /// <summary>
        /// The username who modified the stream
        /// </summary>
        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// The date and time when the stream was modified
        /// </summary>
        [Output("modifiedDate")]
        public Output<string> ModifiedDate { get; private set; } = null!;

        [Output("newRelicConnector")]
        public Output<Outputs.DatastreamNewRelicConnector?> NewRelicConnector { get; private set; } = null!;

        /// <summary>
        /// List of email addresses where the system sends notifications about activations and deactivations of the stream
        /// </summary>
        [Output("notificationEmails")]
        public Output<ImmutableArray<string>> NotificationEmails { get; private set; } = null!;

        [Output("oracleConnector")]
        public Output<Outputs.DatastreamOracleConnector?> OracleConnector { get; private set; } = null!;

        /// <summary>
        /// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
        /// </summary>
        [Output("papiJson")]
        public Output<string> PapiJson { get; private set; } = null!;

        /// <summary>
        /// The ID of the product for which the stream was created
        /// </summary>
        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;

        /// <summary>
        /// Identifies the properties monitored in the stream
        /// </summary>
        [Output("properties")]
        public Output<ImmutableArray<string>> Properties { get; private set; } = null!;

        [Output("s3Connector")]
        public Output<Outputs.DatastreamS3Connector?> S3Connector { get; private set; } = null!;

        [Output("splunkConnector")]
        public Output<Outputs.DatastreamSplunkConnector?> SplunkConnector { get; private set; } = null!;

        /// <summary>
        /// The name of the stream
        /// </summary>
        [Output("streamName")]
        public Output<string> StreamName { get; private set; } = null!;

        /// <summary>
        /// Identifies the configuration version of the stream
        /// </summary>
        [Output("streamVersion")]
        public Output<int> StreamVersion { get; private set; } = null!;

        [Output("sumologicConnector")]
        public Output<Outputs.DatastreamSumologicConnector?> SumologicConnector { get; private set; } = null!;


        /// <summary>
        /// Create a Datastream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Datastream(string name, DatastreamArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/datastream:Datastream", name, args ?? new DatastreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Datastream(string name, Input<string> id, DatastreamState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/datastream:Datastream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Datastream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Datastream Get(string name, Input<string> id, DatastreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Datastream(name, id, state, options);
        }
    }

    public sealed class DatastreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defining if stream should be active or not
        /// </summary>
        [Input("active", required: true)]
        public Input<bool> Active { get; set; } = null!;

        [Input("azureConnector")]
        public Input<Inputs.DatastreamAzureConnectorArgs>? AzureConnector { get; set; }

        /// <summary>
        /// Identifies if stream needs to collect midgress data
        /// </summary>
        [Input("collectMidgress")]
        public Input<bool>? CollectMidgress { get; set; }

        /// <summary>
        /// Identifies the contract that has access to the product
        /// </summary>
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        [Input("datadogConnector")]
        public Input<Inputs.DatastreamDatadogConnectorArgs>? DatadogConnector { get; set; }

        [Input("datasetFields", required: true)]
        private InputList<int>? _datasetFields;

        /// <summary>
        /// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
        /// identifiers define how the value for these fields appear in the log lines
        /// </summary>
        public InputList<int> DatasetFields
        {
            get => _datasetFields ?? (_datasetFields = new InputList<int>());
            set => _datasetFields = value;
        }

        /// <summary>
        /// Provides information about the configuration related to logs (format, file names, delivery frequency)
        /// </summary>
        [Input("deliveryConfiguration", required: true)]
        public Input<Inputs.DatastreamDeliveryConfigurationArgs> DeliveryConfiguration { get; set; } = null!;

        [Input("elasticsearchConnector")]
        public Input<Inputs.DatastreamElasticsearchConnectorArgs>? ElasticsearchConnector { get; set; }

        [Input("gcsConnector")]
        public Input<Inputs.DatastreamGcsConnectorArgs>? GcsConnector { get; set; }

        /// <summary>
        /// Identifies the group that has access to the product and for which the stream configuration was created
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        [Input("httpsConnector")]
        public Input<Inputs.DatastreamHttpsConnectorArgs>? HttpsConnector { get; set; }

        [Input("logglyConnector")]
        public Input<Inputs.DatastreamLogglyConnectorArgs>? LogglyConnector { get; set; }

        [Input("newRelicConnector")]
        public Input<Inputs.DatastreamNewRelicConnectorArgs>? NewRelicConnector { get; set; }

        [Input("notificationEmails")]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// List of email addresses where the system sends notifications about activations and deactivations of the stream
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        [Input("oracleConnector")]
        public Input<Inputs.DatastreamOracleConnectorArgs>? OracleConnector { get; set; }

        [Input("properties", required: true)]
        private InputList<string>? _properties;

        /// <summary>
        /// Identifies the properties monitored in the stream
        /// </summary>
        public InputList<string> Properties
        {
            get => _properties ?? (_properties = new InputList<string>());
            set => _properties = value;
        }

        [Input("s3Connector")]
        public Input<Inputs.DatastreamS3ConnectorArgs>? S3Connector { get; set; }

        [Input("splunkConnector")]
        public Input<Inputs.DatastreamSplunkConnectorArgs>? SplunkConnector { get; set; }

        /// <summary>
        /// The name of the stream
        /// </summary>
        [Input("streamName", required: true)]
        public Input<string> StreamName { get; set; } = null!;

        [Input("sumologicConnector")]
        public Input<Inputs.DatastreamSumologicConnectorArgs>? SumologicConnector { get; set; }

        public DatastreamArgs()
        {
        }
        public static new DatastreamArgs Empty => new DatastreamArgs();
    }

    public sealed class DatastreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defining if stream should be active or not
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("azureConnector")]
        public Input<Inputs.DatastreamAzureConnectorGetArgs>? AzureConnector { get; set; }

        /// <summary>
        /// Identifies if stream needs to collect midgress data
        /// </summary>
        [Input("collectMidgress")]
        public Input<bool>? CollectMidgress { get; set; }

        /// <summary>
        /// Identifies the contract that has access to the product
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// The username who created the stream
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The date and time when the stream was created
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        [Input("datadogConnector")]
        public Input<Inputs.DatastreamDatadogConnectorGetArgs>? DatadogConnector { get; set; }

        [Input("datasetFields")]
        private InputList<int>? _datasetFields;

        /// <summary>
        /// A list of data set fields selected from the associated template that the stream monitors in logs. The order of the
        /// identifiers define how the value for these fields appear in the log lines
        /// </summary>
        public InputList<int> DatasetFields
        {
            get => _datasetFields ?? (_datasetFields = new InputList<int>());
            set => _datasetFields = value;
        }

        /// <summary>
        /// Provides information about the configuration related to logs (format, file names, delivery frequency)
        /// </summary>
        [Input("deliveryConfiguration")]
        public Input<Inputs.DatastreamDeliveryConfigurationGetArgs>? DeliveryConfiguration { get; set; }

        [Input("elasticsearchConnector")]
        public Input<Inputs.DatastreamElasticsearchConnectorGetArgs>? ElasticsearchConnector { get; set; }

        [Input("gcsConnector")]
        public Input<Inputs.DatastreamGcsConnectorGetArgs>? GcsConnector { get; set; }

        /// <summary>
        /// Identifies the group that has access to the product and for which the stream configuration was created
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("httpsConnector")]
        public Input<Inputs.DatastreamHttpsConnectorGetArgs>? HttpsConnector { get; set; }

        /// <summary>
        /// Identifies the latest active configuration version of the stream
        /// </summary>
        [Input("latestVersion")]
        public Input<int>? LatestVersion { get; set; }

        [Input("logglyConnector")]
        public Input<Inputs.DatastreamLogglyConnectorGetArgs>? LogglyConnector { get; set; }

        /// <summary>
        /// The username who modified the stream
        /// </summary>
        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The date and time when the stream was modified
        /// </summary>
        [Input("modifiedDate")]
        public Input<string>? ModifiedDate { get; set; }

        [Input("newRelicConnector")]
        public Input<Inputs.DatastreamNewRelicConnectorGetArgs>? NewRelicConnector { get; set; }

        [Input("notificationEmails")]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// List of email addresses where the system sends notifications about activations and deactivations of the stream
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        [Input("oracleConnector")]
        public Input<Inputs.DatastreamOracleConnectorGetArgs>? OracleConnector { get; set; }

        /// <summary>
        /// The configuration in JSON format that can be copy-pasted into PAPI configuration to enable datastream behavior
        /// </summary>
        [Input("papiJson")]
        public Input<string>? PapiJson { get; set; }

        /// <summary>
        /// The ID of the product for which the stream was created
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        [Input("properties")]
        private InputList<string>? _properties;

        /// <summary>
        /// Identifies the properties monitored in the stream
        /// </summary>
        public InputList<string> Properties
        {
            get => _properties ?? (_properties = new InputList<string>());
            set => _properties = value;
        }

        [Input("s3Connector")]
        public Input<Inputs.DatastreamS3ConnectorGetArgs>? S3Connector { get; set; }

        [Input("splunkConnector")]
        public Input<Inputs.DatastreamSplunkConnectorGetArgs>? SplunkConnector { get; set; }

        /// <summary>
        /// The name of the stream
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        /// <summary>
        /// Identifies the configuration version of the stream
        /// </summary>
        [Input("streamVersion")]
        public Input<int>? StreamVersion { get; set; }

        [Input("sumologicConnector")]
        public Input<Inputs.DatastreamSumologicConnectorGetArgs>? SumologicConnector { get; set; }

        public DatastreamState()
        {
        }
        public static new DatastreamState Empty => new DatastreamState();
    }
}
