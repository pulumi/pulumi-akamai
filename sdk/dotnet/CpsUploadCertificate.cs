// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/cpsUploadCertificate:CpsUploadCertificate")]
    public partial class CpsUploadCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to acknowledge change management
        /// </summary>
        [Output("acknowledgeChangeManagement")]
        public Output<bool?> AcknowledgeChangeManagement { get; private set; } = null!;

        /// <summary>
        /// Whether to acknowledge post-verification warnings
        /// </summary>
        [Output("acknowledgePostVerificationWarnings")]
        public Output<bool?> AcknowledgePostVerificationWarnings { get; private set; } = null!;

        /// <summary>
        /// List of post-verification warnings to be automatically acknowledged
        /// </summary>
        [Output("autoApproveWarnings")]
        public Output<ImmutableArray<string>> AutoApproveWarnings { get; private set; } = null!;

        /// <summary>
        /// ECDSA certificate in pem format to be uploaded
        /// </summary>
        [Output("certificateEcdsaPem")]
        public Output<string?> CertificateEcdsaPem { get; private set; } = null!;

        /// <summary>
        /// RSA certificate in pem format to be uploaded
        /// </summary>
        [Output("certificateRsaPem")]
        public Output<string?> CertificateRsaPem { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the enrollment
        /// </summary>
        [Output("enrollmentId")]
        public Output<int> EnrollmentId { get; private set; } = null!;

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Output("timeouts")]
        public Output<Outputs.CpsUploadCertificateTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Trust chain in pem format for provided ECDSA certificate
        /// </summary>
        [Output("trustChainEcdsaPem")]
        public Output<string?> TrustChainEcdsaPem { get; private set; } = null!;

        /// <summary>
        /// Trust chain in pem format for provided RSA certificate
        /// </summary>
        [Output("trustChainRsaPem")]
        public Output<string?> TrustChainRsaPem { get; private set; } = null!;

        /// <summary>
        /// Used to distinguish whether there are unacknowledged warnings for a certificate
        /// </summary>
        [Output("unacknowledgedWarnings")]
        public Output<bool> UnacknowledgedWarnings { get; private set; } = null!;

        /// <summary>
        /// Whether to wait for certificate to be deployed
        /// </summary>
        [Output("waitForDeployment")]
        public Output<bool?> WaitForDeployment { get; private set; } = null!;


        /// <summary>
        /// Create a CpsUploadCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CpsUploadCertificate(string name, CpsUploadCertificateArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, args ?? new CpsUploadCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CpsUploadCertificate(string name, Input<string> id, CpsUploadCertificateState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/cpsUploadCertificate:CpsUploadCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CpsUploadCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CpsUploadCertificate Get(string name, Input<string> id, CpsUploadCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new CpsUploadCertificate(name, id, state, options);
        }
    }

    public sealed class CpsUploadCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to acknowledge change management
        /// </summary>
        [Input("acknowledgeChangeManagement")]
        public Input<bool>? AcknowledgeChangeManagement { get; set; }

        /// <summary>
        /// Whether to acknowledge post-verification warnings
        /// </summary>
        [Input("acknowledgePostVerificationWarnings")]
        public Input<bool>? AcknowledgePostVerificationWarnings { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// List of post-verification warnings to be automatically acknowledged
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// ECDSA certificate in pem format to be uploaded
        /// </summary>
        [Input("certificateEcdsaPem")]
        public Input<string>? CertificateEcdsaPem { get; set; }

        /// <summary>
        /// RSA certificate in pem format to be uploaded
        /// </summary>
        [Input("certificateRsaPem")]
        public Input<string>? CertificateRsaPem { get; set; }

        /// <summary>
        /// The unique identifier of the enrollment
        /// </summary>
        [Input("enrollmentId", required: true)]
        public Input<int> EnrollmentId { get; set; } = null!;

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.CpsUploadCertificateTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Trust chain in pem format for provided ECDSA certificate
        /// </summary>
        [Input("trustChainEcdsaPem")]
        public Input<string>? TrustChainEcdsaPem { get; set; }

        /// <summary>
        /// Trust chain in pem format for provided RSA certificate
        /// </summary>
        [Input("trustChainRsaPem")]
        public Input<string>? TrustChainRsaPem { get; set; }

        /// <summary>
        /// Whether to wait for certificate to be deployed
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public CpsUploadCertificateArgs()
        {
        }
        public static new CpsUploadCertificateArgs Empty => new CpsUploadCertificateArgs();
    }

    public sealed class CpsUploadCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to acknowledge change management
        /// </summary>
        [Input("acknowledgeChangeManagement")]
        public Input<bool>? AcknowledgeChangeManagement { get; set; }

        /// <summary>
        /// Whether to acknowledge post-verification warnings
        /// </summary>
        [Input("acknowledgePostVerificationWarnings")]
        public Input<bool>? AcknowledgePostVerificationWarnings { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// List of post-verification warnings to be automatically acknowledged
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// ECDSA certificate in pem format to be uploaded
        /// </summary>
        [Input("certificateEcdsaPem")]
        public Input<string>? CertificateEcdsaPem { get; set; }

        /// <summary>
        /// RSA certificate in pem format to be uploaded
        /// </summary>
        [Input("certificateRsaPem")]
        public Input<string>? CertificateRsaPem { get; set; }

        /// <summary>
        /// The unique identifier of the enrollment
        /// </summary>
        [Input("enrollmentId")]
        public Input<int>? EnrollmentId { get; set; }

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.CpsUploadCertificateTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Trust chain in pem format for provided ECDSA certificate
        /// </summary>
        [Input("trustChainEcdsaPem")]
        public Input<string>? TrustChainEcdsaPem { get; set; }

        /// <summary>
        /// Trust chain in pem format for provided RSA certificate
        /// </summary>
        [Input("trustChainRsaPem")]
        public Input<string>? TrustChainRsaPem { get; set; }

        /// <summary>
        /// Used to distinguish whether there are unacknowledged warnings for a certificate
        /// </summary>
        [Input("unacknowledgedWarnings")]
        public Input<bool>? UnacknowledgedWarnings { get; set; }

        /// <summary>
        /// Whether to wait for certificate to be deployed
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public CpsUploadCertificateState()
        {
        }
        public static new CpsUploadCertificateState Empty => new CpsUploadCertificateState();
    }
}
