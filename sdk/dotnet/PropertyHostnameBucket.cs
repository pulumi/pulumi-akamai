// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/propertyHostnameBucket:PropertyHostnameBucket")]
    public partial class PropertyHostnameBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the latest hostname bucket activation.
        /// </summary>
        [Output("activationId")]
        public Output<string> ActivationId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Output("contractId")]
        public Output<string> ContractId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about
        /// the number of hostnames that will be active after making the changes.
        /// </summary>
        [Output("hostnameCount")]
        public Output<int> HostnameCount { get; private set; } = null!;

        /// <summary>
        /// The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of
        /// certificate provisioning type and edge hostname.
        /// </summary>
        [Output("hostnames")]
        public Output<ImmutableDictionary<string, Outputs.PropertyHostnameBucketHostnames>> Hostnames { get; private set; } = null!;

        /// <summary>
        /// The network to activate on, either `STAGING` or `PRODUCTION`.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// Assigns a log message to the request.
        /// </summary>
        [Output("note")]
        public Output<string> Note { get; private set; } = null!;

        /// <summary>
        /// Email addresses to notify when the activation status changes.
        /// </summary>
        [Output("notifyEmails")]
        public Output<ImmutableArray<string>> NotifyEmails { get; private set; } = null!;

        /// <summary>
        /// The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
        /// </summary>
        [Output("pendingDefaultCerts")]
        public Output<int> PendingDefaultCerts { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the property.
        /// </summary>
        [Output("propertyId")]
        public Output<string> PropertyId { get; private set; } = null!;

        /// <summary>
        /// The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
        /// </summary>
        [Output("timeoutForActivation")]
        public Output<int> TimeoutForActivation { get; private set; } = null!;


        /// <summary>
        /// Create a PropertyHostnameBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PropertyHostnameBucket(string name, PropertyHostnameBucketArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/propertyHostnameBucket:PropertyHostnameBucket", name, args ?? new PropertyHostnameBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PropertyHostnameBucket(string name, Input<string> id, PropertyHostnameBucketState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/propertyHostnameBucket:PropertyHostnameBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PropertyHostnameBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PropertyHostnameBucket Get(string name, Input<string> id, PropertyHostnameBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new PropertyHostnameBucket(name, id, state, options);
        }
    }

    public sealed class PropertyHostnameBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about
        /// the number of hostnames that will be active after making the changes.
        /// </summary>
        [Input("hostnameCount")]
        public Input<int>? HostnameCount { get; set; }

        [Input("hostnames", required: true)]
        private InputMap<Inputs.PropertyHostnameBucketHostnamesArgs>? _hostnames;

        /// <summary>
        /// The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of
        /// certificate provisioning type and edge hostname.
        /// </summary>
        public InputMap<Inputs.PropertyHostnameBucketHostnamesArgs> Hostnames
        {
            get => _hostnames ?? (_hostnames = new InputMap<Inputs.PropertyHostnameBucketHostnamesArgs>());
            set => _hostnames = value;
        }

        /// <summary>
        /// The network to activate on, either `STAGING` or `PRODUCTION`.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Assigns a log message to the request.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Email addresses to notify when the activation status changes.
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// The unique identifier for the property.
        /// </summary>
        [Input("propertyId", required: true)]
        public Input<string> PropertyId { get; set; } = null!;

        /// <summary>
        /// The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
        /// </summary>
        [Input("timeoutForActivation")]
        public Input<int>? TimeoutForActivation { get; set; }

        public PropertyHostnameBucketArgs()
        {
        }
        public static new PropertyHostnameBucketArgs Empty => new PropertyHostnameBucketArgs();
    }

    public sealed class PropertyHostnameBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the latest hostname bucket activation.
        /// </summary>
        [Input("activationId")]
        public Input<string>? ActivationId { get; set; }

        /// <summary>
        /// The unique identifier for the contract. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// The unique identifier for the group. Provide it if resolving the property without 'contract_id' and 'group_id' is not
        /// possible
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about
        /// the number of hostnames that will be active after making the changes.
        /// </summary>
        [Input("hostnameCount")]
        public Input<int>? HostnameCount { get; set; }

        [Input("hostnames")]
        private InputMap<Inputs.PropertyHostnameBucketHostnamesGetArgs>? _hostnames;

        /// <summary>
        /// The hostnames mapping. The key represents 'cname_from' and the value contains hostnames details, consisting of
        /// certificate provisioning type and edge hostname.
        /// </summary>
        public InputMap<Inputs.PropertyHostnameBucketHostnamesGetArgs> Hostnames
        {
            get => _hostnames ?? (_hostnames = new InputMap<Inputs.PropertyHostnameBucketHostnamesGetArgs>());
            set => _hostnames = value;
        }

        /// <summary>
        /// The network to activate on, either `STAGING` or `PRODUCTION`.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Assigns a log message to the request.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Email addresses to notify when the activation status changes.
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
        /// </summary>
        [Input("pendingDefaultCerts")]
        public Input<int>? PendingDefaultCerts { get; set; }

        /// <summary>
        /// The unique identifier for the property.
        /// </summary>
        [Input("propertyId")]
        public Input<string>? PropertyId { get; set; }

        /// <summary>
        /// The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
        /// </summary>
        [Input("timeoutForActivation")]
        public Input<int>? TimeoutForActivation { get; set; }

        public PropertyHostnameBucketState()
        {
        }
        public static new PropertyHostnameBucketState Empty => new PropertyHostnameBucketState();
    }
}
