// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// Use the `akamai.GtmCidrmap` resource to create, configure, and import a GTM Classless Inter-Domain Routing (CIDR) map. CIDR mapping uses the IP addresses of the requesting name server to provide IP-specific CNAME entries. CNAMEs let you direct internal users to a specific environment or direct them to the origin. This lets you provide different responses to an internal corporate DNS infrastructure, such as internal test environments and another answer for all other name servers (`default_datacenter`).
    /// 
    ///  CIDR maps split the Internet into multiple CIDR block zones. Properties that use a map can specify a handout CNAME for each zone on the property's editing page. To configure a property for CIDR mapping, your domain needs at least one CIDR map defined.
    /// 
    /// &gt; **Note** Import requires an ID with this format: `existing_domain_name`:`existing_map_name`.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demoCidrmap = new Akamai.GtmCidrmap("demoCidrmap", new Akamai.GtmCidrmapArgs
    ///         {
    ///             DefaultDatacenter = new Akamai.Inputs.GtmCidrmapDefaultDatacenterArgs
    ///             {
    ///                 DatacenterId = 5400,
    ///                 Nickname = "All Other CIDR Blocks",
    ///             },
    ///             Domain = "demo_domain.akadns.net",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// This resource supports these arguments:
    /// 
    /// * `domain` - (Required) GTM Domain name for the AS Map.
    /// * `name` - (Required) A descriptive label for the CIDR map, up to 255 characters.
    /// * `default_datacenter` - (Required) A placeholder for all other CIDR zones not found in these CIDR zones. Requires these additional arguments:
    ///   * `datacenter_id` - (Required) For each property, an identifier for all other CIDR zones.
    ///   * `nickname` - (Required) A descriptive label for the all other CIDR blocks.
    /// * `wait_on_complete` - (Optional) A boolean that, if set to `true`, waits for transaction to complete.
    /// * `assignment` - (Optional) Contains information about the CIDR zone groupings of CIDR blocks. You can have multiple entries with this argument. If used, requires these additional arguments:
    ///   * `datacenter_id` - (Optional) A unique identifier for an existing data center in the domain.
    ///   * `nickname` - (Optional) A descriptive label for the CIDR zone group, up to 256 characters.
    ///   * `blocks` - (Optional, list) Specifies an array of CIDR blocks.
    /// 
    /// ## Schema reference
    /// 
    /// You can download the GTM CIDR Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#cidrmap) page.
    /// </summary>
    [AkamaiResourceType("akamai:index/gtmCidrmap:GtmCidrmap")]
    public partial class GtmCidrmap : Pulumi.CustomResource
    {
        [Output("assignments")]
        public Output<ImmutableArray<Outputs.GtmCidrmapAssignment>> Assignments { get; private set; } = null!;

        [Output("defaultDatacenter")]
        public Output<Outputs.GtmCidrmapDefaultDatacenter> DefaultDatacenter { get; private set; } = null!;

        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("waitOnComplete")]
        public Output<bool?> WaitOnComplete { get; private set; } = null!;


        /// <summary>
        /// Create a GtmCidrmap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GtmCidrmap(string name, GtmCidrmapArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/gtmCidrmap:GtmCidrmap", name, args ?? new GtmCidrmapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GtmCidrmap(string name, Input<string> id, GtmCidrmapState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/gtmCidrmap:GtmCidrmap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "akamai:trafficmanagement/gtmCidrmap:GtmCidrmap"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GtmCidrmap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GtmCidrmap Get(string name, Input<string> id, GtmCidrmapState? state = null, CustomResourceOptions? options = null)
        {
            return new GtmCidrmap(name, id, state, options);
        }
    }

    public sealed class GtmCidrmapArgs : Pulumi.ResourceArgs
    {
        [Input("assignments")]
        private InputList<Inputs.GtmCidrmapAssignmentArgs>? _assignments;
        public InputList<Inputs.GtmCidrmapAssignmentArgs> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<Inputs.GtmCidrmapAssignmentArgs>());
            set => _assignments = value;
        }

        [Input("defaultDatacenter", required: true)]
        public Input<Inputs.GtmCidrmapDefaultDatacenterArgs> DefaultDatacenter { get; set; } = null!;

        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("waitOnComplete")]
        public Input<bool>? WaitOnComplete { get; set; }

        public GtmCidrmapArgs()
        {
        }
    }

    public sealed class GtmCidrmapState : Pulumi.ResourceArgs
    {
        [Input("assignments")]
        private InputList<Inputs.GtmCidrmapAssignmentGetArgs>? _assignments;
        public InputList<Inputs.GtmCidrmapAssignmentGetArgs> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<Inputs.GtmCidrmapAssignmentGetArgs>());
            set => _assignments = value;
        }

        [Input("defaultDatacenter")]
        public Input<Inputs.GtmCidrmapDefaultDatacenterGetArgs>? DefaultDatacenter { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("waitOnComplete")]
        public Input<bool>? WaitOnComplete { get; set; }

        public GtmCidrmapState()
        {
        }
    }
}
