// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerResult
    {
        /// <summary>
        /// Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
        /// </summary>
        public readonly Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerAllDownNetStorageResult? AllDownNetStorage;
        /// <summary>
        /// Specifies the fallback maintenance page's filename, expressed as a full path from the root of the NetStorage server.
        /// </summary>
        public readonly string? AllDownNetStorageFile;
        /// <summary>
        /// Specifies the HTTP response code when all load-balancing origins are unavailable.
        /// </summary>
        public readonly string? AllDownStatusCode;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? AllDownTitle;
        /// <summary>
        /// Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
        /// </summary>
        public readonly bool? AllowCachePrefresh;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? CachedContentTitle;
        /// <summary>
        /// Identifies the Cloudlet policy.
        /// </summary>
        public readonly Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerCloudletPolicyResult? CloudletPolicy;
        /// <summary>
        /// Activates the Application Load Balancer Cloudlet.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Sets the number of failed requests that would trigger the failover process.
        /// </summary>
        public readonly int? FailoverAttemptsThreshold;
        /// <summary>
        /// Determines what to do if an origin fails.
        /// </summary>
        public readonly string? FailoverMode;
        /// <summary>
        /// Specifies a fixed set of failover mapping rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerFailoverOriginMapResult> FailoverOriginMaps;
        /// <summary>
        /// Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
        /// </summary>
        public readonly ImmutableArray<string> FailoverStatusCodes;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? FailoverTitle;
        /// <summary>
        /// A label to distinguish this Application Load Balancer policy from any others within the same property.
        /// </summary>
        public readonly string? Label;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Specifies the name for your session cookie.
        /// </summary>
        public readonly string? OriginCookieName;
        /// <summary>
        /// Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
        /// </summary>
        public readonly bool? SpecifyStickinessCookieDomain;
        /// <summary>
        /// Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
        /// </summary>
        public readonly bool? StickinessCookieAutomaticSalt;
        /// <summary>
        /// Specifies the domain to track the stickiness cookie.
        /// </summary>
        public readonly string? StickinessCookieDomain;
        /// <summary>
        /// Specifies the stickiness cookie's salt value. Use this option to share the cookie across many properties.
        /// </summary>
        public readonly string? StickinessCookieSalt;
        /// <summary>
        /// Ensures the cookie is transmitted only over HTTP.
        /// </summary>
        public readonly bool? StickinessCookieSetHttpOnlyFlag;
        /// <summary>
        /// Determines how a cookie persistently associates the client with a load-balanced origin.
        /// </summary>
        public readonly string? StickinessCookieType;
        /// <summary>
        /// Sets how long it is before the cookie expires.
        /// </summary>
        public readonly string? StickinessDuration;
        /// <summary>
        /// Specifies when the cookie expires.
        /// </summary>
        public readonly string? StickinessExpirationDate;
        /// <summary>
        /// Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
        /// </summary>
        public readonly bool? StickinessRefresh;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? StickinessTitle;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerResult(
            Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerAllDownNetStorageResult? allDownNetStorage,

            string? allDownNetStorageFile,

            string? allDownStatusCode,

            string? allDownTitle,

            bool? allowCachePrefresh,

            string? cachedContentTitle,

            Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerCloudletPolicyResult? cloudletPolicy,

            bool? enabled,

            int? failoverAttemptsThreshold,

            string? failoverMode,

            ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20240813BehaviorApplicationLoadBalancerFailoverOriginMapResult> failoverOriginMaps,

            ImmutableArray<string> failoverStatusCodes,

            string? failoverTitle,

            string? label,

            bool? locked,

            string? originCookieName,

            bool? specifyStickinessCookieDomain,

            bool? stickinessCookieAutomaticSalt,

            string? stickinessCookieDomain,

            string? stickinessCookieSalt,

            bool? stickinessCookieSetHttpOnlyFlag,

            string? stickinessCookieType,

            string? stickinessDuration,

            string? stickinessExpirationDate,

            bool? stickinessRefresh,

            string? stickinessTitle,

            string? templateUuid,

            string? uuid)
        {
            AllDownNetStorage = allDownNetStorage;
            AllDownNetStorageFile = allDownNetStorageFile;
            AllDownStatusCode = allDownStatusCode;
            AllDownTitle = allDownTitle;
            AllowCachePrefresh = allowCachePrefresh;
            CachedContentTitle = cachedContentTitle;
            CloudletPolicy = cloudletPolicy;
            Enabled = enabled;
            FailoverAttemptsThreshold = failoverAttemptsThreshold;
            FailoverMode = failoverMode;
            FailoverOriginMaps = failoverOriginMaps;
            FailoverStatusCodes = failoverStatusCodes;
            FailoverTitle = failoverTitle;
            Label = label;
            Locked = locked;
            OriginCookieName = originCookieName;
            SpecifyStickinessCookieDomain = specifyStickinessCookieDomain;
            StickinessCookieAutomaticSalt = stickinessCookieAutomaticSalt;
            StickinessCookieDomain = stickinessCookieDomain;
            StickinessCookieSalt = stickinessCookieSalt;
            StickinessCookieSetHttpOnlyFlag = stickinessCookieSetHttpOnlyFlag;
            StickinessCookieType = stickinessCookieType;
            StickinessDuration = stickinessDuration;
            StickinessExpirationDate = stickinessExpirationDate;
            StickinessRefresh = stickinessRefresh;
            StickinessTitle = stickinessTitle;
            TemplateUuid = templateUuid;
            Uuid = uuid;
        }
    }
}
