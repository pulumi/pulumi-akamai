// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult
    {
        /// <summary>
        /// Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        /// </summary>
        public readonly string? Gain;
        /// <summary>
        /// Set how much emphasis the filter applies to details. Higher values increase apparent sharpness of details.
        /// </summary>
        public readonly string? GainVar;
        /// <summary>
        /// The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        /// </summary>
        public readonly string? Sigma;
        /// <summary>
        /// The standard deviation of the Gaussian distribution used in the in unsharp mask, measured in pixels, `1.0` by default. High values emphasize large details and low values emphasize small details.
        /// </summary>
        public readonly string? SigmaVar;
        /// <summary>
        /// Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        /// </summary>
        public readonly string? Threshold;
        /// <summary>
        /// Set the minimum change required to include a detail in the filter. Higher values discard more changes.
        /// </summary>
        public readonly string? ThresholdVar;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult(
            string? gain,

            string? gainVar,

            string? sigma,

            string? sigmaVar,

            string? threshold,

            string? thresholdVar)
        {
            Gain = gain;
            GainVar = gainVar;
            Sigma = sigma;
            SigmaVar = sigmaVar;
            Threshold = threshold;
            ThresholdVar = thresholdVar;
        }
    }
}
