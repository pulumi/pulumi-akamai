// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult
    {
        /// <summary>
        /// The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        /// </summary>
        public readonly string ConditionalSamplingFrequency;
        /// <summary>
        /// Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
        /// </summary>
        public readonly string ForwardType;
        /// <summary>
        /// Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
        /// </summary>
        public readonly string RequestType;
        /// <summary>
        /// The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
        /// </summary>
        public readonly string SamplingFrequency;

        [OutputConstructor]
        private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBoccResult(
            string conditionalSamplingFrequency,

            bool enabled,

            string forwardType,

            string requestType,

            string samplingFrequency)
        {
            ConditionalSamplingFrequency = conditionalSamplingFrequency;
            Enabled = enabled;
            ForwardType = forwardType;
            RequestType = requestType;
            SamplingFrequency = samplingFrequency;
        }
    }
}
