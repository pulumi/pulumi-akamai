// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult
    {
        /// <summary>
        /// Fails POST request bodies that exceed 16 KB when enabled, otherwise allows them to pass with no validation for policy compliance.
        /// </summary>
        public readonly bool? AllowLargePostBody;
        /// <summary>
        /// Identifies the Cloudlet policy.
        /// </summary>
        public readonly Outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult? CloudletPolicy;
        /// <summary>
        /// Applies the Input Validation Cloudlet behavior.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Specifies the redirect link for invalid requests that have not yet triggered a penalty.
        /// </summary>
        public readonly string? Failure302Uri;
        /// <summary>
        /// Distinguishes this Input Validation policy from any others within the same property.
        /// </summary>
        public readonly string? Label;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Specifies the redirect link for end users who trigger the penalty.
        /// </summary>
        public readonly string? Penalty302Uri;
        /// <summary>
        /// Specifies the full path to the static 403 response content relative to the `downloadDomainName` in the `penaltyNetStorage` object.
        /// </summary>
        public readonly string? Penalty403NetStoragePath;
        /// <summary>
        /// Once the `penaltyThreshold` of invalid requests is met, this specifies the response.
        /// </summary>
        public readonly string? PenaltyAction;
        /// <summary>
        /// Specifies the penalty response's time to live in the cache, `5` minutes by default.
        /// </summary>
        public readonly int? PenaltyBrandedDenyCacheTtl;
        /// <summary>
        /// Specifies the NetStorage account that serves out the penalty's static 403 response content. Details appear in an object featuring a `downloadDomainName` string member that identifies the NetStorage hostname, and an integer `cpCode` to track the traffic.
        /// </summary>
        public readonly Outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult? PenaltyNetStorage;
        /// <summary>
        /// Specifies the number of invalid requests permitted before executing the `penaltyAction`.
        /// </summary>
        public readonly int? PenaltyThreshold;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? PenaltyTitle;
        /// <summary>
        /// Upon receiving a valid request, enabling this resets the `penaltyThreshold` counter to zero.  Otherwise, even those series of invalid requests that are interrupted by valid requests may trigger the `penaltyAction`.
        /// </summary>
        public readonly bool? ResetOnValid;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// When enabled, identifies users by the value of a cookie.
        /// </summary>
        public readonly bool? UserIdentificationByCookie;
        /// <summary>
        /// When enabled, identifies users by specific HTTP headers on GET or POST requests.
        /// </summary>
        public readonly bool? UserIdentificationByHeaders;
        /// <summary>
        /// When enabled, identifies users by specific IP address. Do not enable this if you are concerned about DDoS attacks from many different IP addresses.
        /// </summary>
        public readonly bool? UserIdentificationByIp;
        /// <summary>
        /// When enabled, identifies users by specific query parameters on GET or POST requests.
        /// </summary>
        public readonly bool? UserIdentificationByParams;
        /// <summary>
        /// This specifies the cookie name whose value needs to remain constant across requests to identify a user.
        /// </summary>
        public readonly string? UserIdentificationKeyCookie;
        /// <summary>
        /// This specifies the HTTP headers whose combined set of values identify each end user.
        /// </summary>
        public readonly ImmutableArray<string> UserIdentificationKeyHeaders;
        /// <summary>
        /// This specifies the query parameters whose combined set of values identify each end user.
        /// </summary>
        public readonly ImmutableArray<string> UserIdentificationKeyParams;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? UserIdentificationTitle;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// If `validateOnOriginWith` is set to `RESPONSE_CODE_AND_HEADER`, this specifies the header name for a request that the origin identifies as invalid.
        /// </summary>
        public readonly string? ValidateOnOriginHeaderName;
        /// <summary>
        /// If `validateOnOriginWith` is set to `RESPONSE_CODE_AND_HEADER`, this specifies an invalid request's header value that corresponds to the `validateOnOriginHeaderName`.
        /// </summary>
        public readonly string? ValidateOnOriginHeaderValue;
        /// <summary>
        /// Unless `validateOnOriginWith` is `DISABLED`, this identifies the integer response code for requests the origin identifies as invalid.
        /// </summary>
        public readonly int? ValidateOnOriginResponseCode;
        /// <summary>
        /// For any validation that edge servers can't perform alone, this specifies additional validation steps based on how the origin identifies an invalid request.  If a request is invalid, the origin can indicate this to the edge server.
        /// </summary>
        public readonly string? ValidateOnOriginWith;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? ValidationTitle;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationResult(
            bool? allowLargePostBody,

            Outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationCloudletPolicyResult? cloudletPolicy,

            bool? enabled,

            string? failure302Uri,

            string? label,

            bool? locked,

            string? penalty302Uri,

            string? penalty403NetStoragePath,

            string? penaltyAction,

            int? penaltyBrandedDenyCacheTtl,

            Outputs.GetPropertyRulesBuilderRulesV20230105BehaviorInputValidationPenaltyNetStorageResult? penaltyNetStorage,

            int? penaltyThreshold,

            string? penaltyTitle,

            bool? resetOnValid,

            string? templateUuid,

            bool? userIdentificationByCookie,

            bool? userIdentificationByHeaders,

            bool? userIdentificationByIp,

            bool? userIdentificationByParams,

            string? userIdentificationKeyCookie,

            ImmutableArray<string> userIdentificationKeyHeaders,

            ImmutableArray<string> userIdentificationKeyParams,

            string? userIdentificationTitle,

            string? uuid,

            string? validateOnOriginHeaderName,

            string? validateOnOriginHeaderValue,

            int? validateOnOriginResponseCode,

            string? validateOnOriginWith,

            string? validationTitle)
        {
            AllowLargePostBody = allowLargePostBody;
            CloudletPolicy = cloudletPolicy;
            Enabled = enabled;
            Failure302Uri = failure302Uri;
            Label = label;
            Locked = locked;
            Penalty302Uri = penalty302Uri;
            Penalty403NetStoragePath = penalty403NetStoragePath;
            PenaltyAction = penaltyAction;
            PenaltyBrandedDenyCacheTtl = penaltyBrandedDenyCacheTtl;
            PenaltyNetStorage = penaltyNetStorage;
            PenaltyThreshold = penaltyThreshold;
            PenaltyTitle = penaltyTitle;
            ResetOnValid = resetOnValid;
            TemplateUuid = templateUuid;
            UserIdentificationByCookie = userIdentificationByCookie;
            UserIdentificationByHeaders = userIdentificationByHeaders;
            UserIdentificationByIp = userIdentificationByIp;
            UserIdentificationByParams = userIdentificationByParams;
            UserIdentificationKeyCookie = userIdentificationKeyCookie;
            UserIdentificationKeyHeaders = userIdentificationKeyHeaders;
            UserIdentificationKeyParams = userIdentificationKeyParams;
            UserIdentificationTitle = userIdentificationTitle;
            Uuid = uuid;
            ValidateOnOriginHeaderName = validateOnOriginHeaderName;
            ValidateOnOriginHeaderValue = validateOnOriginHeaderValue;
            ValidateOnOriginResponseCode = validateOnOriginResponseCode;
            ValidateOnOriginWith = validateOnOriginWith;
            ValidationTitle = validationTitle;
        }
    }
}
