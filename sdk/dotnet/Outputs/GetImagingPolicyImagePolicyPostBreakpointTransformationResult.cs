// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationResult
    {
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult> BackgroundColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult> Blurs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult> ChromaKeys;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult> Composites;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult> Compounds;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult> Contrasts;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult> Goops;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult> Grayscales;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult> Hsls;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult> Hsvs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult> IfDimensions;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult> IfOrientations;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult> MaxColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult> Mirrors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult> MonoHues;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult> Opacities;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult> RemoveColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult> UnsharpMasks;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationResult(
            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColorResult> backgroundColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlurResult> blurs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKeyResult> chromaKeys,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeResult> composites,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompoundResult> compounds,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrastResult> contrasts,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult> goops,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscaleResult> grayscales,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHslResult> hsls,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsvResult> hsvs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionResult> ifDimensions,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationResult> ifOrientations,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColorResult> maxColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorResult> mirrors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHueResult> monoHues,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacityResult> opacities,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColorResult> removeColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMaskResult> unsharpMasks)
        {
            BackgroundColors = backgroundColors;
            Blurs = blurs;
            ChromaKeys = chromaKeys;
            Composites = composites;
            Compounds = compounds;
            Contrasts = contrasts;
            Goops = goops;
            Grayscales = grayscales;
            Hsls = hsls;
            Hsvs = hsvs;
            IfDimensions = ifDimensions;
            IfOrientations = ifOrientations;
            MaxColors = maxColors;
            Mirrors = mirrors;
            MonoHues = monoHues;
            Opacities = opacities;
            RemoveColors = removeColors;
            UnsharpMasks = unsharpMasks;
        }
    }
}
