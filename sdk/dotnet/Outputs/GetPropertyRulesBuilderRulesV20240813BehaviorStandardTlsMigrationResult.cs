// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20240813BehaviorStandardTlsMigrationResult
    {
        /// <summary>
        /// Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
        /// </summary>
        public readonly bool? AllowHttpsDowngrade;
        /// <summary>
        /// Allows temporary upgrade of HTTP traffic to HTTPS.
        /// </summary>
        public readonly bool? AllowHttpsUpgrade;
        /// <summary>
        /// Specifies the number cache sharing days.
        /// </summary>
        public readonly int? CacheSharingDuration;
        /// <summary>
        /// Specifies when to start cache sharing.
        /// </summary>
        public readonly string? CacheSharingStartTime;
        /// <summary>
        /// Allows migration to Standard TLS.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Sets whether your new certificate is SNI-only.
        /// </summary>
        public readonly bool? IsCertificateSniOnly;
        /// <summary>
        /// Allows you to align traffic to various `tieredDistribution` areas.
        /// </summary>
        public readonly bool? IsTieredDistributionUsed;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Specifies the number of days to migrate the cache.
        /// </summary>
        public readonly int? MigrationDuration;
        /// <summary>
        /// What kind of traffic you're migrating from.
        /// </summary>
        public readonly string? MigrationFrom;
        /// <summary>
        /// Specifies when to start migrating the cache.
        /// </summary>
        public readonly string? MigrationStartTime;
        /// <summary>
        /// Specifies the `tieredDistribution` location.
        /// </summary>
        public readonly string? TdLocation;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20240813BehaviorStandardTlsMigrationResult(
            bool? allowHttpsDowngrade,

            bool? allowHttpsUpgrade,

            int? cacheSharingDuration,

            string? cacheSharingStartTime,

            bool? enabled,

            bool? isCertificateSniOnly,

            bool? isTieredDistributionUsed,

            bool? locked,

            int? migrationDuration,

            string? migrationFrom,

            string? migrationStartTime,

            string? tdLocation,

            string? templateUuid,

            string? uuid)
        {
            AllowHttpsDowngrade = allowHttpsDowngrade;
            AllowHttpsUpgrade = allowHttpsUpgrade;
            CacheSharingDuration = cacheSharingDuration;
            CacheSharingStartTime = cacheSharingStartTime;
            Enabled = enabled;
            IsCertificateSniOnly = isCertificateSniOnly;
            IsTieredDistributionUsed = isTieredDistributionUsed;
            Locked = locked;
            MigrationDuration = migrationDuration;
            MigrationFrom = migrationFrom;
            MigrationStartTime = migrationStartTime;
            TdLocation = tdLocation;
            TemplateUuid = templateUuid;
            Uuid = uuid;
        }
    }
}
