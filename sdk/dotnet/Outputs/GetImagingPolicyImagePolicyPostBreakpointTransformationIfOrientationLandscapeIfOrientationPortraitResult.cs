// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitResult
    {
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColorResult> BackgroundColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBlurResult> Blurs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitChromaKeyResult> ChromaKeys;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompositeResult> Composites;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompoundResult> Compounds;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitContrastResult> Contrasts;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGoopResult> Goops;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGrayscaleResult> Grayscales;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHslResult> Hsls;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsvResult> Hsvs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionResult> IfDimensions;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationResult> IfOrientations;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMaxColorResult> MaxColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMirrorResult> Mirrors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMonoHueResult> MonoHues;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitOpacityResult> Opacities;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColorResult> RemoveColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMaskResult> UnsharpMasks;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitResult(
            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBackgroundColorResult> backgroundColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitBlurResult> blurs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitChromaKeyResult> chromaKeys,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompositeResult> composites,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitCompoundResult> compounds,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitContrastResult> contrasts,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGoopResult> goops,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitGrayscaleResult> grayscales,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHslResult> hsls,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitHsvResult> hsvs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfDimensionResult> ifDimensions,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitIfOrientationResult> ifOrientations,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMaxColorResult> maxColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMirrorResult> mirrors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitMonoHueResult> monoHues,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitOpacityResult> opacities,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitRemoveColorResult> removeColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationLandscapeIfOrientationPortraitUnsharpMaskResult> unsharpMasks)
        {
            BackgroundColors = backgroundColors;
            Blurs = blurs;
            ChromaKeys = chromaKeys;
            Composites = composites;
            Compounds = compounds;
            Contrasts = contrasts;
            Goops = goops;
            Grayscales = grayscales;
            Hsls = hsls;
            Hsvs = hsvs;
            IfDimensions = ifDimensions;
            IfOrientations = ifOrientations;
            MaxColors = maxColors;
            Mirrors = mirrors;
            MonoHues = monoHues;
            Opacities = opacities;
            RemoveColors = removeColors;
            UnsharpMasks = unsharpMasks;
        }
    }
}
