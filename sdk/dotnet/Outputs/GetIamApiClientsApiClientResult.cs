// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetIamApiClientsApiClientResult
    {
        /// <summary>
        /// The part of the client secret that identifies your API client and lets you access applications and resources.
        /// </summary>
        public readonly string AccessToken;
        /// <summary>
        /// Specifies activities available for the API client.
        /// </summary>
        public readonly Outputs.GetIamApiClientsApiClientActionsResult Actions;
        /// <summary>
        /// The number of credentials active for the API client.
        /// </summary>
        public readonly int ActiveCredentialCount;
        /// <summary>
        /// Whether the API client can manage more than one account.
        /// </summary>
        public readonly bool AllowAccountSwitch;
        /// <summary>
        /// The API client's valid users.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizedUsers;
        /// <summary>
        /// Whether the API client can create a credential for a new API client.
        /// </summary>
        public readonly bool CanAutoCreateCredential;
        /// <summary>
        /// A human-readable description of the API client.
        /// </summary>
        public readonly string ClientDescription;
        /// <summary>
        /// A unique identifier for the API client.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// A human-readable name for the API client.
        /// </summary>
        public readonly string ClientName;
        /// <summary>
        /// Specifies the API client's ownership and credential management.
        /// </summary>
        public readonly string ClientType;
        /// <summary>
        /// The user who created the API client.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The ISO 8601 timestamp indicating when the API client was created.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Whether the API client is locked.
        /// </summary>
        public readonly bool IsLocked;
        /// <summary>
        /// Email addresses to notify users when credentials expire.
        /// </summary>
        public readonly ImmutableArray<string> NotificationEmails;
        /// <summary>
        /// Unique identifier for the service hostname.
        /// </summary>
        public readonly string ServiceConsumerToken;

        [OutputConstructor]
        private GetIamApiClientsApiClientResult(
            string accessToken,

            Outputs.GetIamApiClientsApiClientActionsResult actions,

            int activeCredentialCount,

            bool allowAccountSwitch,

            ImmutableArray<string> authorizedUsers,

            bool canAutoCreateCredential,

            string clientDescription,

            string clientId,

            string clientName,

            string clientType,

            string createdBy,

            string createdDate,

            bool isLocked,

            ImmutableArray<string> notificationEmails,

            string serviceConsumerToken)
        {
            AccessToken = accessToken;
            Actions = actions;
            ActiveCredentialCount = activeCredentialCount;
            AllowAccountSwitch = allowAccountSwitch;
            AuthorizedUsers = authorizedUsers;
            CanAutoCreateCredential = canAutoCreateCredential;
            ClientDescription = clientDescription;
            ClientId = clientId;
            ClientName = clientName;
            ClientType = clientType;
            CreatedBy = createdBy;
            CreatedDate = createdDate;
            IsLocked = isLocked;
            NotificationEmails = notificationEmails;
            ServiceConsumerToken = serviceConsumerToken;
        }
    }
}
