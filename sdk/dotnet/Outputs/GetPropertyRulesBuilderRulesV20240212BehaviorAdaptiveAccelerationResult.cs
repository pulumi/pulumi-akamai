// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20240212BehaviorAdaptiveAccelerationResult
    {
        /// <summary>
        /// Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
        /// </summary>
        public readonly string? AbLogic;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? AbTesting;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? Compression;
        /// <summary>
        /// This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
        /// </summary>
        public readonly string? CookieName;
        /// <summary>
        /// Applies Brotli compression, converting your origin content to cache on edge servers.
        /// </summary>
        public readonly bool? EnableBrotliCompression;
        /// <summary>
        /// Applies Brotli compression to non-cacheable content.
        /// </summary>
        public readonly bool? EnableForNoncacheable;
        /// <summary>
        /// Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
        /// </summary>
        public readonly bool? EnablePreconnect;
        /// <summary>
        /// Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it's waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
        /// </summary>
        public readonly bool? EnablePush;
        /// <summary>
        /// Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
        /// </summary>
        public readonly bool? EnableRo;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
        /// </summary>
        public readonly bool? PreloadEnable;
        /// <summary>
        /// The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TitleBrotli;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TitleHttp2ServerPush;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TitlePreconnect;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TitlePreload;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TitleRo;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20240212BehaviorAdaptiveAccelerationResult(
            string? abLogic,

            string? abTesting,

            string? compression,

            string? cookieName,

            bool? enableBrotliCompression,

            bool? enableForNoncacheable,

            bool? enablePreconnect,

            bool? enablePush,

            bool? enableRo,

            bool? locked,

            bool? preloadEnable,

            string? source,

            string? templateUuid,

            string? titleBrotli,

            string? titleHttp2ServerPush,

            string? titlePreconnect,

            string? titlePreload,

            string? titleRo,

            string? uuid)
        {
            AbLogic = abLogic;
            AbTesting = abTesting;
            Compression = compression;
            CookieName = cookieName;
            EnableBrotliCompression = enableBrotliCompression;
            EnableForNoncacheable = enableForNoncacheable;
            EnablePreconnect = enablePreconnect;
            EnablePush = enablePush;
            EnableRo = enableRo;
            Locked = locked;
            PreloadEnable = preloadEnable;
            Source = source;
            TemplateUuid = templateUuid;
            TitleBrotli = titleBrotli;
            TitleHttp2ServerPush = titleHttp2ServerPush;
            TitlePreconnect = titlePreconnect;
            TitlePreload = titlePreload;
            TitleRo = titleRo;
            Uuid = uuid;
        }
    }
}
