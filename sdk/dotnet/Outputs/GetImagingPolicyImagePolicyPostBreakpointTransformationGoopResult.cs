// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult
    {
        /// <summary>
        /// Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        /// </summary>
        public readonly string? Chaos;
        /// <summary>
        /// Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
        /// </summary>
        public readonly string? ChaosVar;
        /// <summary>
        /// Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        /// </summary>
        public readonly string? Density;
        /// <summary>
        /// Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
        /// </summary>
        public readonly string? DensityVar;
        /// <summary>
        /// By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        /// </summary>
        public readonly string? Power;
        /// <summary>
        /// By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
        /// </summary>
        public readonly string? PowerVar;
        /// <summary>
        /// Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        /// </summary>
        public readonly string? Seed;
        /// <summary>
        /// Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
        /// </summary>
        public readonly string? SeedVar;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationGoopResult(
            string? chaos,

            string? chaosVar,

            string? density,

            string? densityVar,

            string? power,

            string? powerVar,

            string? seed,

            string? seedVar)
        {
            Chaos = chaos;
            ChaosVar = chaosVar;
            Density = density;
            DensityVar = densityVar;
            Power = power;
            PowerVar = powerVar;
            Seed = seed;
            SeedVar = seedVar;
        }
    }
}
