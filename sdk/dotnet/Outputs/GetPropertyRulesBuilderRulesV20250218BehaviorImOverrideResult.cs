// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20250218BehaviorImOverrideResult
    {
        /// <summary>
        /// Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
        /// </summary>
        public readonly double? Dpr;
        /// <summary>
        /// This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
        /// </summary>
        public readonly string? Dprvar;
        /// <summary>
        /// Whether to exclude all query parameters from the Image and Video Manager cache key.
        /// </summary>
        public readonly bool? ExcludeAllQueryParameters;
        /// <summary>
        /// Specifies individual query parameters to exclude from the Image and Video Manager cache key.
        /// </summary>
        public readonly ImmutableArray<string> ExcludedQueryParameters;
        /// <summary>
        /// Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
        /// </summary>
        public readonly string? Formatvar;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Selects the type of query parameter you want to set.
        /// </summary>
        public readonly string? Override;
        /// <summary>
        /// This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
        /// </summary>
        public readonly string? Policy;
        /// <summary>
        /// This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
        /// </summary>
        public readonly string? Policyvar;
        /// <summary>
        /// This selects one of the property's rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
        /// </summary>
        public readonly string? PolicyvarIMvar;
        /// <summary>
        /// This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property's rule tree variable.
        /// </summary>
        public readonly string? PolicyvarName;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// Specifies how to set a query parameter.
        /// </summary>
        public readonly string? Typesel;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// Sets the image's desired pixel width directly. If the Image Manager policy doesn't define that width, it serves the next largest width.
        /// </summary>
        public readonly double? Width;
        /// <summary>
        /// Selects the variable with the desired width.  If the Image and Video Manager policy doesn't define that width, it serves the next largest width.
        /// </summary>
        public readonly string? Widthvar;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20250218BehaviorImOverrideResult(
            double? dpr,

            string? dprvar,

            bool? excludeAllQueryParameters,

            ImmutableArray<string> excludedQueryParameters,

            string? format,

            string? formatvar,

            bool? locked,

            string? @override,

            string? policy,

            string? policyvar,

            string? policyvarIMvar,

            string? policyvarName,

            string? templateUuid,

            string? typesel,

            string? uuid,

            double? width,

            string? widthvar)
        {
            Dpr = dpr;
            Dprvar = dprvar;
            ExcludeAllQueryParameters = excludeAllQueryParameters;
            ExcludedQueryParameters = excludedQueryParameters;
            Format = format;
            Formatvar = formatvar;
            Locked = locked;
            Override = @override;
            Policy = policy;
            Policyvar = policyvar;
            PolicyvarIMvar = policyvarIMvar;
            PolicyvarName = policyvarName;
            TemplateUuid = templateUuid;
            Typesel = typesel;
            Uuid = uuid;
            Width = width;
            Widthvar = widthvar;
        }
    }
}
