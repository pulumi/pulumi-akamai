// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetGtmDomainPropertyLivenessTestResult
    {
        /// <summary>
        /// If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
        /// </summary>
        public readonly bool AnswersRequired;
        /// <summary>
        /// Disables warnings when non-standard ports are used.
        /// </summary>
        public readonly bool DisableNonstandardPortWarning;
        /// <summary>
        /// Disables the liveness test.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
        /// </summary>
        public readonly double ErrorPenalty;
        /// <summary>
        /// Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        public readonly bool HttpError3xx;
        /// <summary>
        /// Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        public readonly bool HttpError4xx;
        /// <summary>
        /// Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        public readonly bool HttpError5xx;
        /// <summary>
        /// List of HTTP headers for the liveness test.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGtmDomainPropertyLivenessTestHttpHeaderResult> HttpHeaders;
        /// <summary>
        /// A descriptive name for the liveness test.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
        /// </summary>
        public readonly bool PeerCertificateVerification;
        /// <summary>
        /// Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
        /// </summary>
        public readonly bool RecursionRequested;
        /// <summary>
        /// Specifies a request string.
        /// </summary>
        public readonly string RequestString;
        /// <summary>
        /// Specifies the query type, if testObjectProtocol is DNS.
        /// </summary>
        public readonly string ResourceType;
        /// <summary>
        /// Specifies a response string.
        /// </summary>
        public readonly string ResponseString;
        /// <summary>
        /// Indicates a base64-encoded certificate.
        /// </summary>
        public readonly string SslClientCertificate;
        /// <summary>
        /// Indicates a base64-encoded private key.
        /// </summary>
        public readonly string SslClientPrivateKey;
        /// <summary>
        /// Indicates the interval at which the liveness test is run, in seconds.
        /// </summary>
        public readonly int TestInterval;
        /// <summary>
        /// Specifies the static text that acts as a stand-in for the data that you're sending on the network.
        /// </summary>
        public readonly string TestObject;
        /// <summary>
        /// Specifies the test object's password.
        /// </summary>
        public readonly string TestObjectPassword;
        /// <summary>
        /// Specifies the port number for the testObject.
        /// </summary>
        public readonly int TestObjectPort;
        /// <summary>
        /// Specifies the test protocol.
        /// </summary>
        public readonly string TestObjectProtocol;
        /// <summary>
        /// A descriptive name for the testObject.
        /// </summary>
        public readonly string TestObjectUsername;
        /// <summary>
        /// Specifies the duration of the liveness test before it fails.
        /// </summary>
        public readonly double TestTimeout;
        /// <summary>
        /// Specifies the timeout penalty score.
        /// </summary>
        public readonly double TimeoutPenalty;

        [OutputConstructor]
        private GetGtmDomainPropertyLivenessTestResult(
            bool answersRequired,

            bool disableNonstandardPortWarning,

            bool disabled,

            double errorPenalty,

            bool httpError3xx,

            bool httpError4xx,

            bool httpError5xx,

            ImmutableArray<Outputs.GetGtmDomainPropertyLivenessTestHttpHeaderResult> httpHeaders,

            string name,

            bool peerCertificateVerification,

            bool recursionRequested,

            string requestString,

            string resourceType,

            string responseString,

            string sslClientCertificate,

            string sslClientPrivateKey,

            int testInterval,

            string testObject,

            string testObjectPassword,

            int testObjectPort,

            string testObjectProtocol,

            string testObjectUsername,

            double testTimeout,

            double timeoutPenalty)
        {
            AnswersRequired = answersRequired;
            DisableNonstandardPortWarning = disableNonstandardPortWarning;
            Disabled = disabled;
            ErrorPenalty = errorPenalty;
            HttpError3xx = httpError3xx;
            HttpError4xx = httpError4xx;
            HttpError5xx = httpError5xx;
            HttpHeaders = httpHeaders;
            Name = name;
            PeerCertificateVerification = peerCertificateVerification;
            RecursionRequested = recursionRequested;
            RequestString = requestString;
            ResourceType = resourceType;
            ResponseString = responseString;
            SslClientCertificate = sslClientCertificate;
            SslClientPrivateKey = sslClientPrivateKey;
            TestInterval = testInterval;
            TestObject = testObject;
            TestObjectPassword = testObjectPassword;
            TestObjectPort = testObjectPort;
            TestObjectProtocol = testObjectProtocol;
            TestObjectUsername = testObjectUsername;
            TestTimeout = testTimeout;
            TimeoutPenalty = timeoutPenalty;
        }
    }
}
