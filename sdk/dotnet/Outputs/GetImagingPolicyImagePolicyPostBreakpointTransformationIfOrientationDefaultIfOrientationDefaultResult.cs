// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultResult
    {
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColorResult> BackgroundColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBlurResult> Blurs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultChromaKeyResult> ChromaKeys;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompositeResult> Composites;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompoundResult> Compounds;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultContrastResult> Contrasts;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGoopResult> Goops;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGrayscaleResult> Grayscales;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHslResult> Hsls;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsvResult> Hsvs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionResult> IfDimensions;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationResult> IfOrientations;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMaxColorResult> MaxColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMirrorResult> Mirrors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMonoHueResult> MonoHues;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultOpacityResult> Opacities;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultRemoveColorResult> RemoveColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMaskResult> UnsharpMasks;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultResult(
            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBackgroundColorResult> backgroundColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultBlurResult> blurs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultChromaKeyResult> chromaKeys,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompositeResult> composites,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultCompoundResult> compounds,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultContrastResult> contrasts,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGoopResult> goops,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultGrayscaleResult> grayscales,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHslResult> hsls,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultHsvResult> hsvs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfDimensionResult> ifDimensions,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultIfOrientationResult> ifOrientations,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMaxColorResult> maxColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMirrorResult> mirrors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultMonoHueResult> monoHues,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultOpacityResult> opacities,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultRemoveColorResult> removeColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationDefaultUnsharpMaskResult> unsharpMasks)
        {
            BackgroundColors = backgroundColors;
            Blurs = blurs;
            ChromaKeys = chromaKeys;
            Composites = composites;
            Compounds = compounds;
            Contrasts = contrasts;
            Goops = goops;
            Grayscales = grayscales;
            Hsls = hsls;
            Hsvs = hsvs;
            IfDimensions = ifDimensions;
            IfOrientations = ifOrientations;
            MaxColors = maxColors;
            Mirrors = mirrors;
            MonoHues = monoHues;
            Opacities = opacities;
            RemoveColors = removeColors;
            UnsharpMasks = unsharpMasks;
        }
    }
}
