// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationResult
    {
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBackgroundColorResult> BackgroundColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBlurResult> Blurs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationChromaKeyResult> ChromaKeys;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompositeResult> Composites;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompoundResult> Compounds;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationContrastResult> Contrasts;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGoopResult> Goops;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGrayscaleResult> Grayscales;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHslResult> Hsls;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsvResult> Hsvs;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionResult> IfDimensions;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationResult> IfOrientations;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMaxColorResult> MaxColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMirrorResult> Mirrors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMonoHueResult> MonoHues;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationOpacityResult> Opacities;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationRemoveColorResult> RemoveColors;
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationUnsharpMaskResult> UnsharpMasks;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationResult(
            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBackgroundColorResult> backgroundColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationBlurResult> blurs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationChromaKeyResult> chromaKeys,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompositeResult> composites,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationCompoundResult> compounds,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationContrastResult> contrasts,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGoopResult> goops,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationGrayscaleResult> grayscales,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHslResult> hsls,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationHsvResult> hsvs,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfDimensionResult> ifDimensions,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationIfOrientationResult> ifOrientations,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMaxColorResult> maxColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMirrorResult> mirrors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationMonoHueResult> monoHues,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationOpacityResult> opacities,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationRemoveColorResult> removeColors,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionDefaultCompoundTransformationUnsharpMaskResult> unsharpMasks)
        {
            BackgroundColors = backgroundColors;
            Blurs = blurs;
            ChromaKeys = chromaKeys;
            Composites = composites;
            Compounds = compounds;
            Contrasts = contrasts;
            Goops = goops;
            Grayscales = grayscales;
            Hsls = hsls;
            Hsvs = hsvs;
            IfDimensions = ifDimensions;
            IfOrientations = ifOrientations;
            MaxColors = maxColors;
            Mirrors = mirrors;
            MonoHues = monoHues;
            Opacities = opacities;
            RemoveColors = removeColors;
            UnsharpMasks = unsharpMasks;
        }
    }
}
