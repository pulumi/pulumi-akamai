// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20230920BehaviorOriginResult
    {
        public readonly string? CacheKeyHostname;
        public readonly bool? Compress;
        public readonly ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateAuthorityResult> CustomCertificateAuthorities;
        public readonly ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateResult> CustomCertificates;
        public readonly string? CustomForwardHostHeader;
        public readonly ImmutableArray<string> CustomValidCnValues;
        public readonly bool? EnableTrueClientIp;
        public readonly string? ForwardHostHeader;
        public readonly string? Hostname;
        public readonly int? HttpPort;
        public readonly int? HttpsPort;
        public readonly string? IpVersion;
        public readonly bool? Locked;
        public readonly string? MaxTlsVersion;
        public readonly string? MinTlsVersion;
        public readonly string? Mslorigin;
        public readonly Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginNetStorageResult? NetStorage;
        public readonly string? OriginCertificate;
        public readonly string? OriginCertsToHonor;
        public readonly string? OriginId;
        public readonly bool? OriginSni;
        public readonly string? OriginType;
        public readonly string? Ports;
        public readonly bool? SaasCnameEnabled;
        public readonly int? SaasCnameLevel;
        public readonly string? SaasCookie;
        public readonly string? SaasQueryString;
        public readonly string? SaasRegex;
        public readonly string? SaasReplace;
        public readonly string? SaasSuffix;
        public readonly string? SaasType;
        public readonly string? SecondHostname;
        public readonly bool? SecondHostnameEnabled;
        public readonly ImmutableArray<string> StandardCertificateAuthorities;
        public readonly string? TemplateUuid;
        public readonly bool? Tls13Support;
        public readonly string? TlsVersionTitle;
        public readonly bool? TrueClientIpClientSetting;
        public readonly string? TrueClientIpHeader;
        public readonly bool? UseUniqueCacheKey;
        public readonly string? Uuid;
        public readonly string? VerificationMode;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20230920BehaviorOriginResult(
            string? cacheKeyHostname,

            bool? compress,

            ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateAuthorityResult> customCertificateAuthorities,

            ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateResult> customCertificates,

            string? customForwardHostHeader,

            ImmutableArray<string> customValidCnValues,

            bool? enableTrueClientIp,

            string? forwardHostHeader,

            string? hostname,

            int? httpPort,

            int? httpsPort,

            string? ipVersion,

            bool? locked,

            string? maxTlsVersion,

            string? minTlsVersion,

            string? mslorigin,

            Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginNetStorageResult? netStorage,

            string? originCertificate,

            string? originCertsToHonor,

            string? originId,

            bool? originSni,

            string? originType,

            string? ports,

            bool? saasCnameEnabled,

            int? saasCnameLevel,

            string? saasCookie,

            string? saasQueryString,

            string? saasRegex,

            string? saasReplace,

            string? saasSuffix,

            string? saasType,

            string? secondHostname,

            bool? secondHostnameEnabled,

            ImmutableArray<string> standardCertificateAuthorities,

            string? templateUuid,

            bool? tls13Support,

            string? tlsVersionTitle,

            bool? trueClientIpClientSetting,

            string? trueClientIpHeader,

            bool? useUniqueCacheKey,

            string? uuid,

            string? verificationMode)
        {
            CacheKeyHostname = cacheKeyHostname;
            Compress = compress;
            CustomCertificateAuthorities = customCertificateAuthorities;
            CustomCertificates = customCertificates;
            CustomForwardHostHeader = customForwardHostHeader;
            CustomValidCnValues = customValidCnValues;
            EnableTrueClientIp = enableTrueClientIp;
            ForwardHostHeader = forwardHostHeader;
            Hostname = hostname;
            HttpPort = httpPort;
            HttpsPort = httpsPort;
            IpVersion = ipVersion;
            Locked = locked;
            MaxTlsVersion = maxTlsVersion;
            MinTlsVersion = minTlsVersion;
            Mslorigin = mslorigin;
            NetStorage = netStorage;
            OriginCertificate = originCertificate;
            OriginCertsToHonor = originCertsToHonor;
            OriginId = originId;
            OriginSni = originSni;
            OriginType = originType;
            Ports = ports;
            SaasCnameEnabled = saasCnameEnabled;
            SaasCnameLevel = saasCnameLevel;
            SaasCookie = saasCookie;
            SaasQueryString = saasQueryString;
            SaasRegex = saasRegex;
            SaasReplace = saasReplace;
            SaasSuffix = saasSuffix;
            SaasType = saasType;
            SecondHostname = secondHostname;
            SecondHostnameEnabled = secondHostnameEnabled;
            StandardCertificateAuthorities = standardCertificateAuthorities;
            TemplateUuid = templateUuid;
            Tls13Support = tls13Support;
            TlsVersionTitle = tlsVersionTitle;
            TrueClientIpClientSetting = trueClientIpClientSetting;
            TrueClientIpHeader = trueClientIpHeader;
            UseUniqueCacheKey = useUniqueCacheKey;
            Uuid = uuid;
            VerificationMode = verificationMode;
        }
    }
}
