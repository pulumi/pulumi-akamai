// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20230920BehaviorOriginResult
    {
        /// <summary>
        /// Specifies the hostname to use when forming a cache key.
        /// </summary>
        public readonly string? CacheKeyHostname;
        /// <summary>
        /// Enables `gzip` compression for non-NetStorage origins.
        /// </summary>
        public readonly bool? Compress;
        /// <summary>
        /// Specifies an array of certification objects. See the `verification settings in the Origin Server behavior` or contact your Akamai representative for details on this object's requirements.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateAuthorityResult> CustomCertificateAuthorities;
        /// <summary>
        /// Specifies an array of certification objects. See the `verification settings in the Origin Server behavior` or contact your Akamai representative for details on this object's requirements.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateResult> CustomCertificates;
        /// <summary>
        /// This specifies the name of the custom host header the edge server should pass to the origin.
        /// </summary>
        public readonly string? CustomForwardHostHeader;
        /// <summary>
        /// Specifies values to look for in the origin certificate's `Subject Alternate Name` or `Common Name` fields. Specify `{{Origin Hostname}}` and `{{Forward Host Header}}` within the text in the order you want them to be evaluated. (Note that these two template items are not the same as in-line `variables`, which use the same curly-brace syntax.)
        /// </summary>
        public readonly ImmutableArray<string> CustomValidCnValues;
        /// <summary>
        /// When enabled on non-NetStorage origins, allows you to send a custom header (the `trueClientIpHeader`) identifying the IP address of the immediate client connecting to the edge server. This may provide more useful information than the standard `X-Forward-For` header, which proxies may modify.
        /// </summary>
        public readonly bool? EnableTrueClientIp;
        /// <summary>
        /// When the `originType` is set to either `CUSTOMER` or `SAAS_DYNAMIC_ORIGIN`, this specifies which `Host` header to pass to the origin.
        /// </summary>
        public readonly string? ForwardHostHeader;
        /// <summary>
        /// Specifies the hostname or IPv4 address of your origin server, from which edge servers can retrieve your content.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// Specifies the port on your origin server to which edge servers should connect for HTTP requests, customarily `80`.
        /// </summary>
        public readonly int? HttpPort;
        /// <summary>
        /// Specifies the port on your origin server to which edge servers should connect for secure HTTPS requests, customarily `443`. This option only applies if the property is marked as secure. See `Secure property requirements` for guidance.
        /// </summary>
        public readonly int? HttpsPort;
        /// <summary>
        /// Specifies which IP version to use when getting content from the origin.
        /// </summary>
        public readonly string? IpVersion;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Specifies the maximum TLS version to use for connections to your origin server. As best practice, use `DYNAMIC` to automatically apply the latest supported version.
        /// </summary>
        public readonly string? MaxTlsVersion;
        /// <summary>
        /// Specifies the minimum TLS version to use for connections to your origin server.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// This specifies the media's origin server.
        /// </summary>
        public readonly string? Mslorigin;
        /// <summary>
        /// Specifies the details of the NetStorage server.
        /// </summary>
        public readonly Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginNetStorageResult? NetStorage;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? OriginCertificate;
        /// <summary>
        /// Specifies which certificate to trust.
        /// </summary>
        public readonly string? OriginCertsToHonor;
        /// <summary>
        /// Identifies the Edge Load Balancing origin. This needs to correspond to an `edgeLoadBalancingOrigin` behavior's `id` attribute within the same property.
        /// </summary>
        public readonly string? OriginId;
        /// <summary>
        /// For non-NetStorage origins, enabling this adds a Server Name Indication (SNI) header in the SSL request sent to the origin, with the origin hostname as the value. See the `verification settings in the Origin Server behavior` or contact your Akamai representative for more information. If you want to use TLS version 1.3 in your existing properties, enable this option. New properties have this enabled by default.
        /// </summary>
        public readonly bool? OriginSni;
        /// <summary>
        /// Choose where your content is retrieved from.
        /// </summary>
        public readonly string? OriginType;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? Ports;
        /// <summary>
        /// Enabling this allows you to use a `CNAME chain` to determine the hostname for this SaaS dynamic origin.
        /// </summary>
        public readonly bool? SaasCnameEnabled;
        /// <summary>
        /// Specifies the desired number of hostnames to use in the `CNAME chain`, starting backwards from the edge server.
        /// </summary>
        public readonly int? SaasCnameLevel;
        /// <summary>
        /// Specifies the name of the cookie that identifies this SaaS dynamic origin.
        /// </summary>
        public readonly string? SaasCookie;
        /// <summary>
        /// Specifies the name of the query parameter that identifies this SaaS dynamic origin.
        /// </summary>
        public readonly string? SaasQueryString;
        /// <summary>
        /// Specifies the Perl-compatible regular expression match that identifies this SaaS dynamic origin.
        /// </summary>
        public readonly string? SaasRegex;
        /// <summary>
        /// Specifies replacement text for what `saasRegex` matches.
        /// </summary>
        public readonly string? SaasReplace;
        /// <summary>
        /// Specifies the static part of the SaaS dynamic origin.
        /// </summary>
        public readonly string? SaasSuffix;
        /// <summary>
        /// Specifies the part of the request that identifies this SaaS dynamic origin.
        /// </summary>
        public readonly string? SaasType;
        /// <summary>
        /// Specifies the origin server's hostname, IPv4 address, or IPv6 address. Edge servers retrieve your content from this origin server.
        /// </summary>
        public readonly string? SecondHostname;
        /// <summary>
        /// Available only for certain products. This specifies whether you want to use an additional origin server address.
        /// </summary>
        public readonly bool? SecondHostnameEnabled;
        public readonly ImmutableArray<string> StandardCertificateAuthorities;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        public readonly bool? Tls13Support;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TlsVersionTitle;
        /// <summary>
        /// If a client sets the `True-Client-IP` header, the edge server allows it and passes the value to the origin. Otherwise the edge server removes it and sets the value itself.
        /// </summary>
        public readonly bool? TrueClientIpClientSetting;
        /// <summary>
        /// This specifies the name of the field that identifies the end client's IP address, for example `True-Client-IP`.
        /// </summary>
        public readonly string? TrueClientIpHeader;
        /// <summary>
        /// With a shared `hostname` such as provided by Amazon AWS, sets a unique cache key for your content.
        /// </summary>
        public readonly bool? UseUniqueCacheKey;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// For non-NetStorage origins, maximize security by controlling which certificates edge servers should trust.
        /// </summary>
        public readonly string? VerificationMode;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20230920BehaviorOriginResult(
            string? cacheKeyHostname,

            bool? compress,

            ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateAuthorityResult> customCertificateAuthorities,

            ImmutableArray<Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginCustomCertificateResult> customCertificates,

            string? customForwardHostHeader,

            ImmutableArray<string> customValidCnValues,

            bool? enableTrueClientIp,

            string? forwardHostHeader,

            string? hostname,

            int? httpPort,

            int? httpsPort,

            string? ipVersion,

            bool? locked,

            string? maxTlsVersion,

            string? minTlsVersion,

            string? mslorigin,

            Outputs.GetPropertyRulesBuilderRulesV20230920BehaviorOriginNetStorageResult? netStorage,

            string? originCertificate,

            string? originCertsToHonor,

            string? originId,

            bool? originSni,

            string? originType,

            string? ports,

            bool? saasCnameEnabled,

            int? saasCnameLevel,

            string? saasCookie,

            string? saasQueryString,

            string? saasRegex,

            string? saasReplace,

            string? saasSuffix,

            string? saasType,

            string? secondHostname,

            bool? secondHostnameEnabled,

            ImmutableArray<string> standardCertificateAuthorities,

            string? templateUuid,

            bool? tls13Support,

            string? tlsVersionTitle,

            bool? trueClientIpClientSetting,

            string? trueClientIpHeader,

            bool? useUniqueCacheKey,

            string? uuid,

            string? verificationMode)
        {
            CacheKeyHostname = cacheKeyHostname;
            Compress = compress;
            CustomCertificateAuthorities = customCertificateAuthorities;
            CustomCertificates = customCertificates;
            CustomForwardHostHeader = customForwardHostHeader;
            CustomValidCnValues = customValidCnValues;
            EnableTrueClientIp = enableTrueClientIp;
            ForwardHostHeader = forwardHostHeader;
            Hostname = hostname;
            HttpPort = httpPort;
            HttpsPort = httpsPort;
            IpVersion = ipVersion;
            Locked = locked;
            MaxTlsVersion = maxTlsVersion;
            MinTlsVersion = minTlsVersion;
            Mslorigin = mslorigin;
            NetStorage = netStorage;
            OriginCertificate = originCertificate;
            OriginCertsToHonor = originCertsToHonor;
            OriginId = originId;
            OriginSni = originSni;
            OriginType = originType;
            Ports = ports;
            SaasCnameEnabled = saasCnameEnabled;
            SaasCnameLevel = saasCnameLevel;
            SaasCookie = saasCookie;
            SaasQueryString = saasQueryString;
            SaasRegex = saasRegex;
            SaasReplace = saasReplace;
            SaasSuffix = saasSuffix;
            SaasType = saasType;
            SecondHostname = secondHostname;
            SecondHostnameEnabled = secondHostnameEnabled;
            StandardCertificateAuthorities = standardCertificateAuthorities;
            TemplateUuid = templateUuid;
            Tls13Support = tls13Support;
            TlsVersionTitle = tlsVersionTitle;
            TrueClientIpClientSetting = trueClientIpClientSetting;
            TrueClientIpHeader = trueClientIpHeader;
            UseUniqueCacheKey = useUniqueCacheKey;
            Uuid = uuid;
            VerificationMode = verificationMode;
        }
    }
}
