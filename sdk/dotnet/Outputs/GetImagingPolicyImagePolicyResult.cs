// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetImagingPolicyImagePolicyResult
    {
        /// <summary>
        /// The breakpoint widths (in pixels) to use to create derivative images/videos.
        /// </summary>
        public readonly Outputs.GetImagingPolicyImagePolicyBreakpointsResult? Breakpoints;
        /// <summary>
        /// Hosts that are allowed for image/video URLs within transformations or variables.
        /// </summary>
        public readonly ImmutableArray<string> Hosts;
        /// <summary>
        /// Dictates the output quality (either `quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
        /// </summary>
        public readonly Outputs.GetImagingPolicyImagePolicyOutputResult? Output;
        /// <summary>
        /// Post-processing Transformations are applied to the image after image and quality settings have been applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult> PostBreakpointTransformations;
        /// <summary>
        /// The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        /// </summary>
        public readonly string? RolloutDuration;
        /// <summary>
        /// Set of image transformations to apply to the source image. If unspecified, no operations are performed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyTransformationResult> Transformations;
        /// <summary>
        /// Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagingPolicyImagePolicyVariableResult> Variables;

        [OutputConstructor]
        private GetImagingPolicyImagePolicyResult(
            Outputs.GetImagingPolicyImagePolicyBreakpointsResult? breakpoints,

            ImmutableArray<string> hosts,

            Outputs.GetImagingPolicyImagePolicyOutputResult? output,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyPostBreakpointTransformationResult> postBreakpointTransformations,

            string? rolloutDuration,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyTransformationResult> transformations,

            ImmutableArray<Outputs.GetImagingPolicyImagePolicyVariableResult> variables)
        {
            Breakpoints = breakpoints;
            Hosts = hosts;
            Output = output;
            PostBreakpointTransformations = postBreakpointTransformations;
            RolloutDuration = rolloutDuration;
            Transformations = transformations;
            Variables = variables;
        }
    }
}
