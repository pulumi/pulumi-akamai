// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20240212BehaviorWatermarkingResult
    {
        /// <summary>
        /// When you work with your watermarking vendor, you can apply several preprocessing methods to your content. See the `AMD help` for more information. Use this option to specify the location of the `A` and `B` variant segments.
        /// </summary>
        public readonly string? AbVariantLocation;
        /// <summary>
        /// Provides the primary password used to encrypt patterns in your watermarking tokens.
        /// </summary>
        public readonly string? DecryptionPassword1;
        /// <summary>
        /// Provides the secondary password you can use to rotate passwords.
        /// </summary>
        public readonly string? DecryptionPassword2;
        /// <summary>
        /// Specifies a label that corresponds to the primary password.
        /// </summary>
        public readonly string? DecryptionPasswordId1;
        /// <summary>
        /// Specifies a label for the secondary password, used in rotation scenarios to identify which password to use for decryption.
        /// </summary>
        public readonly string? DecryptionPasswordId2;
        /// <summary>
        /// Enables the watermarking behavior.
        /// </summary>
        public readonly bool? Enable;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? MiscellaneousSettingsTitle;
        /// <summary>
        /// If patterns in your watermarking tokens have been encrypted, enabling this allows you to provide values to decrypt them.
        /// </summary>
        public readonly bool? PatternDecryptionEnable;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? PatternEncryptionTitle;
        /// <summary>
        /// When enabled, you can verify the signature in your watermarking token.
        /// </summary>
        public readonly bool? SignatureVerificationEnable;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TokenSigningTitle;
        /// <summary>
        /// When you work with your watermarking vendor, you can apply several preprocessing methods to your content. See the `AMD help` for more information. With the standard `filename-prefix AB naming` preprocessing method, the watermarking vendor creates two variants of the original segment content and labels them as an `A` and `B` segment in the filename. If you selected the `unlabeled A variant` preprocessing method, enabling this option tells your configuration to use the original filename segment content as your `A` variant.
        /// </summary>
        public readonly bool? UseOriginalAsA;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// Specifies a unique identifier for the first public key.
        /// </summary>
        public readonly string? VerificationKeyId1;
        /// <summary>
        /// Specifies a unique identifier for the optional second public key.
        /// </summary>
        public readonly string? VerificationKeyId2;
        /// <summary>
        /// Specifies the first public key in its entirety.
        /// </summary>
        public readonly string? VerificationPublicKey1;
        /// <summary>
        /// Specifies the optional second public key in its entirety. Specify a second key to enable rotation.
        /// </summary>
        public readonly string? VerificationPublicKey2;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20240212BehaviorWatermarkingResult(
            string? abVariantLocation,

            string? decryptionPassword1,

            string? decryptionPassword2,

            string? decryptionPasswordId1,

            string? decryptionPasswordId2,

            bool? enable,

            bool? locked,

            string? miscellaneousSettingsTitle,

            bool? patternDecryptionEnable,

            string? patternEncryptionTitle,

            bool? signatureVerificationEnable,

            string? templateUuid,

            string? tokenSigningTitle,

            bool? useOriginalAsA,

            string? uuid,

            string? verificationKeyId1,

            string? verificationKeyId2,

            string? verificationPublicKey1,

            string? verificationPublicKey2)
        {
            AbVariantLocation = abVariantLocation;
            DecryptionPassword1 = decryptionPassword1;
            DecryptionPassword2 = decryptionPassword2;
            DecryptionPasswordId1 = decryptionPasswordId1;
            DecryptionPasswordId2 = decryptionPasswordId2;
            Enable = enable;
            Locked = locked;
            MiscellaneousSettingsTitle = miscellaneousSettingsTitle;
            PatternDecryptionEnable = patternDecryptionEnable;
            PatternEncryptionTitle = patternEncryptionTitle;
            SignatureVerificationEnable = signatureVerificationEnable;
            TemplateUuid = templateUuid;
            TokenSigningTitle = tokenSigningTitle;
            UseOriginalAsA = useOriginalAsA;
            Uuid = uuid;
            VerificationKeyId1 = verificationKeyId1;
            VerificationKeyId2 = verificationKeyId2;
            VerificationPublicKey1 = verificationPublicKey1;
            VerificationPublicKey2 = verificationPublicKey2;
        }
    }
}
