// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetMtlskeystoreClientCertificateVersionResult
    {
        /// <summary>
        /// Details of the certificate block for the client certificate version.
        /// </summary>
        public readonly Outputs.GetMtlskeystoreClientCertificateVersionCertificateBlockResult CertificateBlock;
        /// <summary>
        /// The user who uploaded the `THIRD_PARTY` client certificate version.
        /// </summary>
        public readonly string CertificateSubmittedBy;
        /// <summary>
        /// An ISO 8601 timestamp indicating when the `THIRD_PARTY` signer client certificate version was uploaded.
        /// </summary>
        public readonly string CertificateSubmittedDate;
        /// <summary>
        /// The user who created the client certificate version.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's creation.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Details of the Certificate Signing Request (CSR) for the client certificate version.
        /// </summary>
        public readonly Outputs.GetMtlskeystoreClientCertificateVersionCsrBlockResult CsrBlock;
        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's deletion request.
        /// </summary>
        public readonly string DeleteRequestedDate;
        /// <summary>
        /// Specifies the key elliptic curve when the key algorithm `ECDSA` is used.
        /// </summary>
        public readonly string EllipticCurve;
        /// <summary>
        /// An ISO 8601 timestamp indicating when the client certificate version expires.
        /// </summary>
        public readonly string ExpiryDate;
        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's availability.
        /// </summary>
        public readonly string IssuedDate;
        /// <summary>
        /// The signing entity of the client certificate version.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// Identifies the client certificate version's encryption algorithm. Supported values are `RSA` and `ECDSA`.
        /// </summary>
        public readonly string KeyAlgorithm;
        /// <summary>
        /// The private key length of the client certificate version when the key algorithm `RSA` is used.
        /// </summary>
        public readonly string KeySizeInBytes;
        /// <summary>
        /// A list of properties associated with the client certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMtlskeystoreClientCertificateVersionPropertyResult> Properties;
        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's scheduled deletion.
        /// </summary>
        public readonly string ScheduledDeleteDate;
        /// <summary>
        /// Specifies the algorithm that secures the data exchange between the edge server and origin.
        /// </summary>
        public readonly string SignatureAlgorithm;
        /// <summary>
        /// The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The public key's entity stored in the client certificate version's subject public key field.
        /// </summary>
        public readonly string Subject;
        /// <summary>
        /// Validation results for the client certificate version.
        /// </summary>
        public readonly Outputs.GetMtlskeystoreClientCertificateVersionValidationResult Validation;
        /// <summary>
        /// The unique identifier of the client certificate version.
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager's Mutual TLS Origin Keystore behavior.
        /// </summary>
        public readonly string VersionGuid;

        [OutputConstructor]
        private GetMtlskeystoreClientCertificateVersionResult(
            Outputs.GetMtlskeystoreClientCertificateVersionCertificateBlockResult certificateBlock,

            string certificateSubmittedBy,

            string certificateSubmittedDate,

            string createdBy,

            string createdDate,

            Outputs.GetMtlskeystoreClientCertificateVersionCsrBlockResult csrBlock,

            string deleteRequestedDate,

            string ellipticCurve,

            string expiryDate,

            string issuedDate,

            string issuer,

            string keyAlgorithm,

            string keySizeInBytes,

            ImmutableArray<Outputs.GetMtlskeystoreClientCertificateVersionPropertyResult> properties,

            string scheduledDeleteDate,

            string signatureAlgorithm,

            string status,

            string subject,

            Outputs.GetMtlskeystoreClientCertificateVersionValidationResult validation,

            int version,

            string versionGuid)
        {
            CertificateBlock = certificateBlock;
            CertificateSubmittedBy = certificateSubmittedBy;
            CertificateSubmittedDate = certificateSubmittedDate;
            CreatedBy = createdBy;
            CreatedDate = createdDate;
            CsrBlock = csrBlock;
            DeleteRequestedDate = deleteRequestedDate;
            EllipticCurve = ellipticCurve;
            ExpiryDate = expiryDate;
            IssuedDate = issuedDate;
            Issuer = issuer;
            KeyAlgorithm = keyAlgorithm;
            KeySizeInBytes = keySizeInBytes;
            Properties = properties;
            ScheduledDeleteDate = scheduledDeleteDate;
            SignatureAlgorithm = signatureAlgorithm;
            Status = status;
            Subject = subject;
            Validation = validation;
            Version = version;
            VersionGuid = versionGuid;
        }
    }
}
