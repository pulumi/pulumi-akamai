// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult
    {
        /// <summary>
        /// Specifies the algorithm to apply.
        /// </summary>
        public readonly string? Algorithm;
        /// <summary>
        /// Enabling this makes all matches case sensitive.
        /// </summary>
        public readonly bool? CaseSensitive;
        /// <summary>
        /// Specifies the certificate's content.
        /// </summary>
        public readonly string? CertificateFieldName;
        /// <summary>
        /// Specifies the name of the cookie to extract.
        /// </summary>
        public readonly string? CookieName;
        /// <summary>
        /// Specifies the client device attribute. Possible values specify information about the client device, including device type, size and browser. For details on fields, see `Device Characterization`.
        /// </summary>
        public readonly string? DeviceProfile;
        /// <summary>
        /// Specifies the encryption hex key. For `ALG_3DES` it needs to be 48 characters long, 32 characters for `ALG_AES128`, and 64 characters for `ALG_AES256`.
        /// </summary>
        public readonly string? EncryptionKey;
        /// <summary>
        /// Specifies the encryption mode.
        /// </summary>
        public readonly string? EncryptionMode;
        /// <summary>
        /// Specifies the zero-based character offset at the end of the substring, without including the character at that index position. Negative indexes specify the offset from the end of the string.
        /// </summary>
        public readonly string? EndIndex;
        /// <summary>
        /// Specifies characters `not` to encode, possibly overriding the default set.
        /// </summary>
        public readonly string? ExceptChars;
        /// <summary>
        /// This specifies from where to get the value.
        /// </summary>
        public readonly string? ExtractLocation;
        /// <summary>
        /// Specifies characters to encode, possibly overriding the default set.
        /// </summary>
        public readonly string? ForceChars;
        /// <summary>
        /// Specifies an optional format string for the conversion, using format codes such as `%!m(MISSING)/%!d(MISSING)/%!y(MISSING)` as specified by `strftime`. A blank value defaults to RFC-2616 format.
        /// </summary>
        public readonly string? FormatString;
        /// <summary>
        /// This specifies the type of value to generate.
        /// </summary>
        public readonly string? Generator;
        /// <summary>
        /// Replaces all matches in the string, not just the first.
        /// </summary>
        public readonly bool? GlobalSubstitution;
        /// <summary>
        /// Specifies the case-insensitive name of the HTTP header to extract.
        /// </summary>
        public readonly string? HeaderName;
        /// <summary>
        /// Specifies the algorithm to use to generate the base64-encoded digest.
        /// </summary>
        public readonly string? HmacAlgorithm;
        /// <summary>
        /// Specifies the secret to use in generating the base64-encoded digest.
        /// </summary>
        public readonly string? HmacKey;
        /// <summary>
        /// Specifies a one-time number as an initialization vector.  It needs to be 15 characters long for `ALG_3DES`, and 32 characters for both `ALG_AES128` and `ALG_AES256`.
        /// </summary>
        public readonly string? InitializationVector;
        /// <summary>
        /// Specifies the IP version under which a subnet mask generates.
        /// </summary>
        public readonly string? IpVersion;
        /// <summary>
        /// Specifies the prefix of the IPV4 address, a value between 0 and 32.
        /// </summary>
        public readonly int? Ipv4Prefix;
        /// <summary>
        /// Specifies the prefix of the IPV6 address, a value between 0 and 128.
        /// </summary>
        public readonly int? Ipv6Prefix;
        /// <summary>
        /// Specifies the `X-Akamai-Edgescape` header's field name. Possible values specify basic geolocation, various geographic standards, and information about the client's network. For details on EdgeScape header fields, see the `EdgeScape User Guide`.
        /// </summary>
        public readonly string? LocationId;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// Specifies a maximum value for the generated integer.
        /// </summary>
        public readonly int? Max;
        /// <summary>
        /// Specifies the upper bound of the random number.
        /// </summary>
        public readonly string? MaxRandomNumber;
        /// <summary>
        /// Specifies a minimum value for the generated integer.
        /// </summary>
        public readonly int? Min;
        /// <summary>
        /// Specifies the lower bound of the random number.
        /// </summary>
        public readonly string? MinRandomNumber;
        /// <summary>
        /// Specifies the one-time number used for encryption.
        /// </summary>
        public readonly string? Nonce;
        /// <summary>
        /// Specifies the number of random hex bytes to generate.
        /// </summary>
        public readonly int? NumberOfBytes;
        /// <summary>
        /// Specifies an additional operand when the `transform` function is set to various arithmetic functions (`ADD`, `SUBTRACT`, `MULTIPLY`, `DIVIDE`, or `MODULO`) or bitwise functions (`BITWISE_AND`, `BITWISE_OR`, or `BITWISE_XOR`).
        /// </summary>
        public readonly string? OperandOne;
        /// <summary>
        /// Extracts the value for the specified parameter name from a string that contains key/value pairs. (Use `separator` below to parse them.)
        /// </summary>
        public readonly string? ParamName;
        /// <summary>
        /// This specifies a portion of the path.  The indexing starts from `1`, so a value of `/path/to/nested/filename.html` and an offset of `1` yields `path`, and `3` yields `nested`. Negative indexes offset from the right, so `-2` also yields `nested`.
        /// </summary>
        public readonly string? PathComponentOffset;
        /// <summary>
        /// Specifies a number of random bytes to prepend to the key.
        /// </summary>
        public readonly bool? PrependBytes;
        /// <summary>
        /// Specifies the name of the query parameter from which to extract the value.
        /// </summary>
        public readonly string? QueryParameterName;
        /// <summary>
        /// Specifies the regular expression pattern (PCRE) to match the value.
        /// </summary>
        public readonly string? Regex;
        /// <summary>
        /// Specifies the replacement string. Reinsert grouped items from the match into the replacement using `$1`, `$2` ... `$n`.
        /// </summary>
        public readonly string? Replacement;
        /// <summary>
        /// Specifies the case-insensitive name of the HTTP header to extract.
        /// </summary>
        public readonly string? ResponseHeaderName;
        /// <summary>
        /// Specifies the character that separates pairs of values within the string.
        /// </summary>
        public readonly string? Separator;
        /// <summary>
        /// Specifies the name of the origin's `Set-Cookie` response header.
        /// </summary>
        public readonly string? SetCookieName;
        /// <summary>
        /// Specifies the zero-based character offset at the start of the substring. Negative indexes specify the offset from the end of the string.
        /// </summary>
        public readonly string? StartIndex;
        /// <summary>
        /// Specifies a substring for which the returned value represents a zero-based offset of where it appears in the original string, or `-1` if there's no match.
        /// </summary>
        public readonly string? SubString;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// Specifies a function to transform the value. For more details on each transform function, see `Set Variable: Operations`.
        /// </summary>
        public readonly string? Transform;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// Determines how you want to set the value.
        /// </summary>
        public readonly string? ValueSource;
        /// <summary>
        /// Specifies the predeclared root name of the variable to modify.  When you declare a variable name such as `VAR`, its name is preprended with `PMUSER_` and accessible in a `user` namespace, so that you invoke it in subsequent text fields within the rule tree as `{{user.PMUSER_VAR}}`. In deployed `XML metadata`, it appears as `%!((MISSING)PMUSER_VAR)`.
        /// </summary>
        public readonly string? VariableName;
        /// <summary>
        /// This directly specifies the value to assign to the variable. The expression may include a mix of static text and other variables, such as `new_filename.{{builtin.AK_EXTENSION}}` to embed a system variable.
        /// </summary>
        public readonly string? VariableValue;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20230530BehaviorSetVariableResult(
            string? algorithm,

            bool? caseSensitive,

            string? certificateFieldName,

            string? cookieName,

            string? deviceProfile,

            string? encryptionKey,

            string? encryptionMode,

            string? endIndex,

            string? exceptChars,

            string? extractLocation,

            string? forceChars,

            string? formatString,

            string? generator,

            bool? globalSubstitution,

            string? headerName,

            string? hmacAlgorithm,

            string? hmacKey,

            string? initializationVector,

            string? ipVersion,

            int? ipv4Prefix,

            int? ipv6Prefix,

            string? locationId,

            bool? locked,

            int? max,

            string? maxRandomNumber,

            int? min,

            string? minRandomNumber,

            string? nonce,

            int? numberOfBytes,

            string? operandOne,

            string? paramName,

            string? pathComponentOffset,

            bool? prependBytes,

            string? queryParameterName,

            string? regex,

            string? replacement,

            string? responseHeaderName,

            string? separator,

            string? setCookieName,

            string? startIndex,

            string? subString,

            string? templateUuid,

            string? transform,

            string? uuid,

            string? valueSource,

            string? variableName,

            string? variableValue)
        {
            Algorithm = algorithm;
            CaseSensitive = caseSensitive;
            CertificateFieldName = certificateFieldName;
            CookieName = cookieName;
            DeviceProfile = deviceProfile;
            EncryptionKey = encryptionKey;
            EncryptionMode = encryptionMode;
            EndIndex = endIndex;
            ExceptChars = exceptChars;
            ExtractLocation = extractLocation;
            ForceChars = forceChars;
            FormatString = formatString;
            Generator = generator;
            GlobalSubstitution = globalSubstitution;
            HeaderName = headerName;
            HmacAlgorithm = hmacAlgorithm;
            HmacKey = hmacKey;
            InitializationVector = initializationVector;
            IpVersion = ipVersion;
            Ipv4Prefix = ipv4Prefix;
            Ipv6Prefix = ipv6Prefix;
            LocationId = locationId;
            Locked = locked;
            Max = max;
            MaxRandomNumber = maxRandomNumber;
            Min = min;
            MinRandomNumber = minRandomNumber;
            Nonce = nonce;
            NumberOfBytes = numberOfBytes;
            OperandOne = operandOne;
            ParamName = paramName;
            PathComponentOffset = pathComponentOffset;
            PrependBytes = prependBytes;
            QueryParameterName = queryParameterName;
            Regex = regex;
            Replacement = replacement;
            ResponseHeaderName = responseHeaderName;
            Separator = separator;
            SetCookieName = setCookieName;
            StartIndex = startIndex;
            SubString = subString;
            TemplateUuid = templateUuid;
            Transform = transform;
            Uuid = uuid;
            ValueSource = valueSource;
            VariableName = variableName;
            VariableValue = variableValue;
        }
    }
}
