// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Outputs
{

    [OutputType]
    public sealed class GetPropertyRulesBuilderRulesV20240109BehaviorSegmentedContentProtectionResult
    {
        /// <summary>
        /// Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client's access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
        /// </summary>
        public readonly bool? Acl;
        /// <summary>
        /// Whether to enable DASH Media Encryption.
        /// </summary>
        public readonly bool? DashMediaEncryption;
        /// <summary>
        /// Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
        /// </summary>
        public readonly bool? DataPayload;
        /// <summary>
        /// When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
        /// </summary>
        public readonly bool? EnableTokenInUri;
        /// <summary>
        /// Enables the segmented content protection behavior.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? FieldCarryOver;
        /// <summary>
        /// This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player's request.
        /// </summary>
        public readonly ImmutableArray<string> HeaderForSalts;
        /// <summary>
        /// Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
        /// </summary>
        public readonly ImmutableArray<string> HlsMasterManifestFiles;
        /// <summary>
        /// Enables HLS Segment Encryption.
        /// </summary>
        public readonly bool? HlsMediaEncryption;
        /// <summary>
        /// Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
        /// </summary>
        public readonly bool? Ip;
        /// <summary>
        /// Specifies the encryption key to use as a shared secret to validate tokens.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        public readonly bool? Locked;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? MediaEncryptionTitle;
        /// <summary>
        /// Identifies the `TokenAuth` tokens to block from accessing your content.
        /// </summary>
        public readonly int? RevokedListId;
        /// <summary>
        /// Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
        /// </summary>
        public readonly string? Salt;
        /// <summary>
        /// Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
        /// </summary>
        public readonly bool? SessionId;
        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        public readonly string? TemplateUuid;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TokenAuthHlsTitle;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TokenAuthenticationTitle;
        /// <summary>
        /// Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
        /// </summary>
        public readonly bool? TokenRevocationEnabled;
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        public readonly string? TokenRevocationTitle;
        /// <summary>
        /// An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
        /// </summary>
        public readonly string? TransitionKey;
        /// <summary>
        /// Allows you to specify advanced `transitionKey` and `salt` options.
        /// </summary>
        public readonly bool? UseAdvanced;
        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private GetPropertyRulesBuilderRulesV20240109BehaviorSegmentedContentProtectionResult(
            bool? acl,

            bool? dashMediaEncryption,

            bool? dataPayload,

            bool? enableTokenInUri,

            bool? enabled,

            string? fieldCarryOver,

            ImmutableArray<string> headerForSalts,

            ImmutableArray<string> hlsMasterManifestFiles,

            bool? hlsMediaEncryption,

            bool? ip,

            string? key,

            bool? locked,

            string? mediaEncryptionTitle,

            int? revokedListId,

            string? salt,

            bool? sessionId,

            string? templateUuid,

            string? tokenAuthHlsTitle,

            string? tokenAuthenticationTitle,

            bool? tokenRevocationEnabled,

            string? tokenRevocationTitle,

            string? transitionKey,

            bool? useAdvanced,

            string? uuid)
        {
            Acl = acl;
            DashMediaEncryption = dashMediaEncryption;
            DataPayload = dataPayload;
            EnableTokenInUri = enableTokenInUri;
            Enabled = enabled;
            FieldCarryOver = fieldCarryOver;
            HeaderForSalts = headerForSalts;
            HlsMasterManifestFiles = hlsMasterManifestFiles;
            HlsMediaEncryption = hlsMediaEncryption;
            Ip = ip;
            Key = key;
            Locked = locked;
            MediaEncryptionTitle = mediaEncryptionTitle;
            RevokedListId = revokedListId;
            Salt = salt;
            SessionId = sessionId;
            TemplateUuid = templateUuid;
            TokenAuthHlsTitle = tokenAuthHlsTitle;
            TokenAuthenticationTitle = tokenAuthenticationTitle;
            TokenRevocationEnabled = tokenRevocationEnabled;
            TokenRevocationTitle = tokenRevocationTitle;
            TransitionKey = transitionKey;
            UseAdvanced = useAdvanced;
            Uuid = uuid;
        }
    }
}
