// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetCPSEnrollment
    {
        public static Task<GetCPSEnrollmentResult> InvokeAsync(GetCPSEnrollmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCPSEnrollmentResult>("akamai:index/getCPSEnrollment:getCPSEnrollment", args ?? new GetCPSEnrollmentArgs(), options.WithDefaults());

        public static Output<GetCPSEnrollmentResult> Invoke(GetCPSEnrollmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCPSEnrollmentResult>("akamai:index/getCPSEnrollment:getCPSEnrollment", args ?? new GetCPSEnrollmentInvokeArgs(), options.WithDefaults());

        public static Output<GetCPSEnrollmentResult> Invoke(GetCPSEnrollmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCPSEnrollmentResult>("akamai:index/getCPSEnrollment:getCPSEnrollment", args ?? new GetCPSEnrollmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCPSEnrollmentArgs : global::Pulumi.InvokeArgs
    {
        [Input("enrollmentId", required: true)]
        public int EnrollmentId { get; set; }

        public GetCPSEnrollmentArgs()
        {
        }
        public static new GetCPSEnrollmentArgs Empty => new GetCPSEnrollmentArgs();
    }

    public sealed class GetCPSEnrollmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("enrollmentId", required: true)]
        public Input<int> EnrollmentId { get; set; } = null!;

        public GetCPSEnrollmentInvokeArgs()
        {
        }
        public static new GetCPSEnrollmentInvokeArgs Empty => new GetCPSEnrollmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetCPSEnrollmentResult
    {
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentAdminContactResult> AdminContacts;
        public readonly ImmutableArray<int> AssignedSlots;
        public readonly string CertificateChainType;
        public readonly string CertificateType;
        public readonly string CommonName;
        public readonly string ContractId;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentCsrResult> Csrs;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentDnsChallengeResult> DnsChallenges;
        public readonly bool EnableMultiStackedCertificates;
        public readonly int EnrollmentId;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentHttpChallengeResult> HttpChallenges;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentNetworkConfigurationResult> NetworkConfigurations;
        public readonly int OrgId;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentOrganizationResult> Organizations;
        public readonly bool PendingChanges;
        public readonly ImmutableArray<int> ProductionSlots;
        public readonly string RegistrationAuthority;
        public readonly ImmutableArray<string> Sans;
        public readonly string SecureNetwork;
        public readonly string SignatureAlgorithm;
        public readonly bool SniOnly;
        public readonly ImmutableArray<int> StagingSlots;
        public readonly ImmutableArray<Outputs.GetCPSEnrollmentTechContactResult> TechContacts;
        public readonly string ValidationType;

        [OutputConstructor]
        private GetCPSEnrollmentResult(
            ImmutableArray<Outputs.GetCPSEnrollmentAdminContactResult> adminContacts,

            ImmutableArray<int> assignedSlots,

            string certificateChainType,

            string certificateType,

            string commonName,

            string contractId,

            ImmutableArray<Outputs.GetCPSEnrollmentCsrResult> csrs,

            ImmutableArray<Outputs.GetCPSEnrollmentDnsChallengeResult> dnsChallenges,

            bool enableMultiStackedCertificates,

            int enrollmentId,

            ImmutableArray<Outputs.GetCPSEnrollmentHttpChallengeResult> httpChallenges,

            string id,

            ImmutableArray<Outputs.GetCPSEnrollmentNetworkConfigurationResult> networkConfigurations,

            int orgId,

            ImmutableArray<Outputs.GetCPSEnrollmentOrganizationResult> organizations,

            bool pendingChanges,

            ImmutableArray<int> productionSlots,

            string registrationAuthority,

            ImmutableArray<string> sans,

            string secureNetwork,

            string signatureAlgorithm,

            bool sniOnly,

            ImmutableArray<int> stagingSlots,

            ImmutableArray<Outputs.GetCPSEnrollmentTechContactResult> techContacts,

            string validationType)
        {
            AdminContacts = adminContacts;
            AssignedSlots = assignedSlots;
            CertificateChainType = certificateChainType;
            CertificateType = certificateType;
            CommonName = commonName;
            ContractId = contractId;
            Csrs = csrs;
            DnsChallenges = dnsChallenges;
            EnableMultiStackedCertificates = enableMultiStackedCertificates;
            EnrollmentId = enrollmentId;
            HttpChallenges = httpChallenges;
            Id = id;
            NetworkConfigurations = networkConfigurations;
            OrgId = orgId;
            Organizations = organizations;
            PendingChanges = pendingChanges;
            ProductionSlots = productionSlots;
            RegistrationAuthority = registrationAuthority;
            Sans = sans;
            SecureNetwork = secureNetwork;
            SignatureAlgorithm = signatureAlgorithm;
            SniOnly = sniOnly;
            StagingSlots = stagingSlots;
            TechContacts = techContacts;
            ValidationType = validationType;
        }
    }
}
