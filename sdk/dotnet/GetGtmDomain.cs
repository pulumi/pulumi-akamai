// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetGtmDomain
    {
        public static Task<GetGtmDomainResult> InvokeAsync(GetGtmDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGtmDomainResult>("akamai:index/getGtmDomain:getGtmDomain", args ?? new GetGtmDomainArgs(), options.WithDefaults());

        public static Output<GetGtmDomainResult> Invoke(GetGtmDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGtmDomainResult>("akamai:index/getGtmDomain:getGtmDomain", args ?? new GetGtmDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGtmDomainArgs : global::Pulumi.InvokeArgs
    {
        [Input("asMaps")]
        private List<Inputs.GetGtmDomainAsMapArgs>? _asMaps;
        public List<Inputs.GetGtmDomainAsMapArgs> AsMaps
        {
            get => _asMaps ?? (_asMaps = new List<Inputs.GetGtmDomainAsMapArgs>());
            set => _asMaps = value;
        }

        [Input("cidrMaps")]
        private List<Inputs.GetGtmDomainCidrMapArgs>? _cidrMaps;
        public List<Inputs.GetGtmDomainCidrMapArgs> CidrMaps
        {
            get => _cidrMaps ?? (_cidrMaps = new List<Inputs.GetGtmDomainCidrMapArgs>());
            set => _cidrMaps = value;
        }

        [Input("datacenters")]
        private List<Inputs.GetGtmDomainDatacenterArgs>? _datacenters;
        public List<Inputs.GetGtmDomainDatacenterArgs> Datacenters
        {
            get => _datacenters ?? (_datacenters = new List<Inputs.GetGtmDomainDatacenterArgs>());
            set => _datacenters = value;
        }

        [Input("geographicMaps")]
        private List<Inputs.GetGtmDomainGeographicMapArgs>? _geographicMaps;
        public List<Inputs.GetGtmDomainGeographicMapArgs> GeographicMaps
        {
            get => _geographicMaps ?? (_geographicMaps = new List<Inputs.GetGtmDomainGeographicMapArgs>());
            set => _geographicMaps = value;
        }

        [Input("links")]
        private List<Inputs.GetGtmDomainLinkArgs>? _links;
        public List<Inputs.GetGtmDomainLinkArgs> Links
        {
            get => _links ?? (_links = new List<Inputs.GetGtmDomainLinkArgs>());
            set => _links = value;
        }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("properties")]
        private List<Inputs.GetGtmDomainPropertyArgs>? _properties;
        public List<Inputs.GetGtmDomainPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new List<Inputs.GetGtmDomainPropertyArgs>());
            set => _properties = value;
        }

        [Input("resources")]
        private List<Inputs.GetGtmDomainResourceArgs>? _resources;
        public List<Inputs.GetGtmDomainResourceArgs> Resources
        {
            get => _resources ?? (_resources = new List<Inputs.GetGtmDomainResourceArgs>());
            set => _resources = value;
        }

        [Input("status")]
        public Inputs.GetGtmDomainStatusArgs? Status { get; set; }

        public GetGtmDomainArgs()
        {
        }
        public static new GetGtmDomainArgs Empty => new GetGtmDomainArgs();
    }

    public sealed class GetGtmDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("asMaps")]
        private InputList<Inputs.GetGtmDomainAsMapInputArgs>? _asMaps;
        public InputList<Inputs.GetGtmDomainAsMapInputArgs> AsMaps
        {
            get => _asMaps ?? (_asMaps = new InputList<Inputs.GetGtmDomainAsMapInputArgs>());
            set => _asMaps = value;
        }

        [Input("cidrMaps")]
        private InputList<Inputs.GetGtmDomainCidrMapInputArgs>? _cidrMaps;
        public InputList<Inputs.GetGtmDomainCidrMapInputArgs> CidrMaps
        {
            get => _cidrMaps ?? (_cidrMaps = new InputList<Inputs.GetGtmDomainCidrMapInputArgs>());
            set => _cidrMaps = value;
        }

        [Input("datacenters")]
        private InputList<Inputs.GetGtmDomainDatacenterInputArgs>? _datacenters;
        public InputList<Inputs.GetGtmDomainDatacenterInputArgs> Datacenters
        {
            get => _datacenters ?? (_datacenters = new InputList<Inputs.GetGtmDomainDatacenterInputArgs>());
            set => _datacenters = value;
        }

        [Input("geographicMaps")]
        private InputList<Inputs.GetGtmDomainGeographicMapInputArgs>? _geographicMaps;
        public InputList<Inputs.GetGtmDomainGeographicMapInputArgs> GeographicMaps
        {
            get => _geographicMaps ?? (_geographicMaps = new InputList<Inputs.GetGtmDomainGeographicMapInputArgs>());
            set => _geographicMaps = value;
        }

        [Input("links")]
        private InputList<Inputs.GetGtmDomainLinkInputArgs>? _links;
        public InputList<Inputs.GetGtmDomainLinkInputArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.GetGtmDomainLinkInputArgs>());
            set => _links = value;
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("properties")]
        private InputList<Inputs.GetGtmDomainPropertyInputArgs>? _properties;
        public InputList<Inputs.GetGtmDomainPropertyInputArgs> Properties
        {
            get => _properties ?? (_properties = new InputList<Inputs.GetGtmDomainPropertyInputArgs>());
            set => _properties = value;
        }

        [Input("resources")]
        private InputList<Inputs.GetGtmDomainResourceInputArgs>? _resources;
        public InputList<Inputs.GetGtmDomainResourceInputArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.GetGtmDomainResourceInputArgs>());
            set => _resources = value;
        }

        [Input("status")]
        public Input<Inputs.GetGtmDomainStatusInputArgs>? Status { get; set; }

        public GetGtmDomainInvokeArgs()
        {
        }
        public static new GetGtmDomainInvokeArgs Empty => new GetGtmDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetGtmDomainResult
    {
        public readonly ImmutableArray<Outputs.GetGtmDomainAsMapResult> AsMaps;
        public readonly ImmutableArray<Outputs.GetGtmDomainCidrMapResult> CidrMaps;
        public readonly bool CnameCoalescingEnabled;
        public readonly ImmutableArray<Outputs.GetGtmDomainDatacenterResult> Datacenters;
        public readonly int DefaultErrorPenalty;
        public readonly double DefaultHealthMax;
        public readonly double DefaultHealthMultiplier;
        public readonly double DefaultHealthThreshold;
        public readonly int DefaultMaxUnreachablePenalty;
        public readonly string DefaultSslClientCertificate;
        public readonly string DefaultSslClientPrivateKey;
        public readonly int DefaultTimeoutPenalty;
        public readonly double DefaultUnreachableThreshold;
        public readonly ImmutableArray<string> EmailNotificationLists;
        public readonly bool EndUserMappingEnabled;
        public readonly ImmutableArray<Outputs.GetGtmDomainGeographicMapResult> GeographicMaps;
        public readonly string Id;
        public readonly string LastModified;
        public readonly string LastModifiedBy;
        public readonly ImmutableArray<Outputs.GetGtmDomainLinkResult> Links;
        public readonly bool LoadFeedback;
        public readonly double LoadImbalancePercentage;
        public readonly int MapUpdateInterval;
        public readonly int MaxProperties;
        public readonly int MaxResources;
        public readonly double MaxTestTimeout;
        public readonly int MaxTtl;
        public readonly double MinPingableRegionFraction;
        public readonly int MinTestInterval;
        public readonly int MinTtl;
        public readonly string ModificationComments;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetGtmDomainPropertyResult> Properties;
        public readonly ImmutableArray<Outputs.GetGtmDomainResourceResult> Resources;
        public readonly string RoundRobinPrefix;
        public readonly string ServerMonitorPool;
        public readonly Outputs.GetGtmDomainStatusResult? Status;
        public readonly string Type;

        [OutputConstructor]
        private GetGtmDomainResult(
            ImmutableArray<Outputs.GetGtmDomainAsMapResult> asMaps,

            ImmutableArray<Outputs.GetGtmDomainCidrMapResult> cidrMaps,

            bool cnameCoalescingEnabled,

            ImmutableArray<Outputs.GetGtmDomainDatacenterResult> datacenters,

            int defaultErrorPenalty,

            double defaultHealthMax,

            double defaultHealthMultiplier,

            double defaultHealthThreshold,

            int defaultMaxUnreachablePenalty,

            string defaultSslClientCertificate,

            string defaultSslClientPrivateKey,

            int defaultTimeoutPenalty,

            double defaultUnreachableThreshold,

            ImmutableArray<string> emailNotificationLists,

            bool endUserMappingEnabled,

            ImmutableArray<Outputs.GetGtmDomainGeographicMapResult> geographicMaps,

            string id,

            string lastModified,

            string lastModifiedBy,

            ImmutableArray<Outputs.GetGtmDomainLinkResult> links,

            bool loadFeedback,

            double loadImbalancePercentage,

            int mapUpdateInterval,

            int maxProperties,

            int maxResources,

            double maxTestTimeout,

            int maxTtl,

            double minPingableRegionFraction,

            int minTestInterval,

            int minTtl,

            string modificationComments,

            string name,

            ImmutableArray<Outputs.GetGtmDomainPropertyResult> properties,

            ImmutableArray<Outputs.GetGtmDomainResourceResult> resources,

            string roundRobinPrefix,

            string serverMonitorPool,

            Outputs.GetGtmDomainStatusResult? status,

            string type)
        {
            AsMaps = asMaps;
            CidrMaps = cidrMaps;
            CnameCoalescingEnabled = cnameCoalescingEnabled;
            Datacenters = datacenters;
            DefaultErrorPenalty = defaultErrorPenalty;
            DefaultHealthMax = defaultHealthMax;
            DefaultHealthMultiplier = defaultHealthMultiplier;
            DefaultHealthThreshold = defaultHealthThreshold;
            DefaultMaxUnreachablePenalty = defaultMaxUnreachablePenalty;
            DefaultSslClientCertificate = defaultSslClientCertificate;
            DefaultSslClientPrivateKey = defaultSslClientPrivateKey;
            DefaultTimeoutPenalty = defaultTimeoutPenalty;
            DefaultUnreachableThreshold = defaultUnreachableThreshold;
            EmailNotificationLists = emailNotificationLists;
            EndUserMappingEnabled = endUserMappingEnabled;
            GeographicMaps = geographicMaps;
            Id = id;
            LastModified = lastModified;
            LastModifiedBy = lastModifiedBy;
            Links = links;
            LoadFeedback = loadFeedback;
            LoadImbalancePercentage = loadImbalancePercentage;
            MapUpdateInterval = mapUpdateInterval;
            MaxProperties = maxProperties;
            MaxResources = maxResources;
            MaxTestTimeout = maxTestTimeout;
            MaxTtl = maxTtl;
            MinPingableRegionFraction = minPingableRegionFraction;
            MinTestInterval = minTestInterval;
            MinTtl = minTtl;
            ModificationComments = modificationComments;
            Name = name;
            Properties = properties;
            Resources = resources;
            RoundRobinPrefix = roundRobinPrefix;
            ServerMonitorPool = serverMonitorPool;
            Status = status;
            Type = type;
        }
    }
}
