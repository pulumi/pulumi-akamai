// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetAppSecReputationProfileActions
    {
        /// <summary>
        /// ## akamai.getAppSecReputationProfileActions
        /// 
        /// **Scopes**: Security policy; reputation profile
        /// 
        /// Returns action information for your reputation profiles. Actions specify what happens any time a profile is triggered: the issue could be ignored, the request could be denied, or an alert could be generated.
        /// 
        /// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/reputation-profiles](https://techdocs.akamai.com/application-security/reference/get-reputation-profiles-actions)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
        ///         {
        ///             Name = "Documentation",
        ///         }));
        ///         var reputationProfileActions = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecReputationProfileActions.InvokeAsync(new Akamai.GetAppSecReputationProfileActionsArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyId = "gms1_134637",
        ///         })));
        ///         this.ReputationProfileActionsText = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.OutputText);
        ///         this.ReputationProfileActionsJson = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.Json);
        ///         var reputationProfileActions2AppSecReputationProfileActions = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecReputationProfileActions.InvokeAsync(new Akamai.GetAppSecReputationProfileActionsArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyId = "gms1_134637",
        ///             ReputationProfileId = 12345,
        ///         })));
        ///         this.ReputationProfileActions2 = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.Action);
        ///     }
        /// 
        ///     [Output("reputationProfileActionsText")]
        ///     public Output&lt;string&gt; ReputationProfileActionsText { get; set; }
        ///     [Output("reputationProfileActionsJson")]
        ///     public Output&lt;string&gt; ReputationProfileActionsJson { get; set; }
        ///     [Output("reputationProfileActions2")]
        ///     public Output&lt;string&gt; ReputationProfileActions2 { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Output Options
        /// 
        /// The following options can be used to determine the information returned, and how that returned information is formatted:
        /// 
        /// - `action`. Action taken any time the reputation profile is triggered. Valid values are:
        ///   - **alert**. Record the event.
        ///   - **deny**. Block the request.
        ///   - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
        ///   - **none**. Take no action.
        /// - `json`. JSON-formatted report of the reputation profile action information.
        /// - `output_text`. Tabular report of the reputation profile action information.
        /// </summary>
        public static Task<GetAppSecReputationProfileActionsResult> InvokeAsync(GetAppSecReputationProfileActionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppSecReputationProfileActionsResult>("akamai:index/getAppSecReputationProfileActions:getAppSecReputationProfileActions", args ?? new GetAppSecReputationProfileActionsArgs(), options.WithDefaults());

        /// <summary>
        /// ## akamai.getAppSecReputationProfileActions
        /// 
        /// **Scopes**: Security policy; reputation profile
        /// 
        /// Returns action information for your reputation profiles. Actions specify what happens any time a profile is triggered: the issue could be ignored, the request could be denied, or an alert could be generated.
        /// 
        /// **Related API Endpoint**: [/appsec/v1/configs/{configId}/versions/{versionNumber}/security-policies/{policyId}/reputation-profiles](https://techdocs.akamai.com/application-security/reference/get-reputation-profiles-actions)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
        ///         {
        ///             Name = "Documentation",
        ///         }));
        ///         var reputationProfileActions = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecReputationProfileActions.InvokeAsync(new Akamai.GetAppSecReputationProfileActionsArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyId = "gms1_134637",
        ///         })));
        ///         this.ReputationProfileActionsText = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.OutputText);
        ///         this.ReputationProfileActionsJson = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.Json);
        ///         var reputationProfileActions2AppSecReputationProfileActions = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecReputationProfileActions.InvokeAsync(new Akamai.GetAppSecReputationProfileActionsArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyId = "gms1_134637",
        ///             ReputationProfileId = 12345,
        ///         })));
        ///         this.ReputationProfileActions2 = reputationProfileActions.Apply(reputationProfileActions =&gt; reputationProfileActions.Action);
        ///     }
        /// 
        ///     [Output("reputationProfileActionsText")]
        ///     public Output&lt;string&gt; ReputationProfileActionsText { get; set; }
        ///     [Output("reputationProfileActionsJson")]
        ///     public Output&lt;string&gt; ReputationProfileActionsJson { get; set; }
        ///     [Output("reputationProfileActions2")]
        ///     public Output&lt;string&gt; ReputationProfileActions2 { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Output Options
        /// 
        /// The following options can be used to determine the information returned, and how that returned information is formatted:
        /// 
        /// - `action`. Action taken any time the reputation profile is triggered. Valid values are:
        ///   - **alert**. Record the event.
        ///   - **deny**. Block the request.
        ///   - **deny_custom_{custom_deny_id}**. The action defined by the custom deny is taken.
        ///   - **none**. Take no action.
        /// - `json`. JSON-formatted report of the reputation profile action information.
        /// - `output_text`. Tabular report of the reputation profile action information.
        /// </summary>
        public static Output<GetAppSecReputationProfileActionsResult> Invoke(GetAppSecReputationProfileActionsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAppSecReputationProfileActionsResult>("akamai:index/getAppSecReputationProfileActions:getAppSecReputationProfileActions", args ?? new GetAppSecReputationProfileActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppSecReputationProfileActionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// . Unique identifier of the security configuration associated with the reputation profiles.
        /// </summary>
        [Input("configId", required: true)]
        public int ConfigId { get; set; }

        /// <summary>
        /// . Unique identifier of the reputation profile you want to return information for. If not included, information is returned for all your reputation profiles.
        /// </summary>
        [Input("reputationProfileId")]
        public int? ReputationProfileId { get; set; }

        /// <summary>
        /// . Unique identifier of the security policy associated with the reputation profiles.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public string SecurityPolicyId { get; set; } = null!;

        public GetAppSecReputationProfileActionsArgs()
        {
        }
    }

    public sealed class GetAppSecReputationProfileActionsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// . Unique identifier of the security configuration associated with the reputation profiles.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// . Unique identifier of the reputation profile you want to return information for. If not included, information is returned for all your reputation profiles.
        /// </summary>
        [Input("reputationProfileId")]
        public Input<int>? ReputationProfileId { get; set; }

        /// <summary>
        /// . Unique identifier of the security policy associated with the reputation profiles.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public Input<string> SecurityPolicyId { get; set; } = null!;

        public GetAppSecReputationProfileActionsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAppSecReputationProfileActionsResult
    {
        public readonly string Action;
        public readonly int ConfigId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Json;
        public readonly string OutputText;
        public readonly int? ReputationProfileId;
        public readonly string SecurityPolicyId;

        [OutputConstructor]
        private GetAppSecReputationProfileActionsResult(
            string action,

            int configId,

            string id,

            string json,

            string outputText,

            int? reputationProfileId,

            string securityPolicyId)
        {
            Action = action;
            ConfigId = configId;
            Id = id;
            Json = json;
            OutputText = outputText;
            ReputationProfileId = reputationProfileId;
            SecurityPolicyId = securityPolicyId;
        }
    }
}
