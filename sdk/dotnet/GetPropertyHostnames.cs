// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetPropertyHostnames
    {
        public static Task<GetPropertyHostnamesResult> InvokeAsync(GetPropertyHostnamesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPropertyHostnamesResult>("akamai:index/getPropertyHostnames:getPropertyHostnames", args ?? new GetPropertyHostnamesArgs(), options.WithDefaults());

        public static Output<GetPropertyHostnamesResult> Invoke(GetPropertyHostnamesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPropertyHostnamesResult>("akamai:index/getPropertyHostnames:getPropertyHostnames", args ?? new GetPropertyHostnamesInvokeArgs(), options.WithDefaults());

        public static Output<GetPropertyHostnamesResult> Invoke(GetPropertyHostnamesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPropertyHostnamesResult>("akamai:index/getPropertyHostnames:getPropertyHostnames", args ?? new GetPropertyHostnamesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPropertyHostnamesArgs : global::Pulumi.InvokeArgs
    {
        [Input("contractId", required: true)]
        public string ContractId { get; set; } = null!;

        [Input("filterPendingDefaultCerts")]
        public bool? FilterPendingDefaultCerts { get; set; }

        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        [Input("propertyId", required: true)]
        public string PropertyId { get; set; } = null!;

        [Input("version")]
        public int? Version { get; set; }

        public GetPropertyHostnamesArgs()
        {
        }
        public static new GetPropertyHostnamesArgs Empty => new GetPropertyHostnamesArgs();
    }

    public sealed class GetPropertyHostnamesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        [Input("filterPendingDefaultCerts")]
        public Input<bool>? FilterPendingDefaultCerts { get; set; }

        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        [Input("propertyId", required: true)]
        public Input<string> PropertyId { get; set; } = null!;

        [Input("version")]
        public Input<int>? Version { get; set; }

        public GetPropertyHostnamesInvokeArgs()
        {
        }
        public static new GetPropertyHostnamesInvokeArgs Empty => new GetPropertyHostnamesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPropertyHostnamesResult
    {
        public readonly string ContractId;
        public readonly bool? FilterPendingDefaultCerts;
        public readonly string GroupId;
        public readonly ImmutableArray<Outputs.GetPropertyHostnamesHostnameBucketResult> HostnameBuckets;
        public readonly ImmutableArray<Outputs.GetPropertyHostnamesHostnameResult> Hostnames;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string PropertyId;
        public readonly int Version;

        [OutputConstructor]
        private GetPropertyHostnamesResult(
            string contractId,

            bool? filterPendingDefaultCerts,

            string groupId,

            ImmutableArray<Outputs.GetPropertyHostnamesHostnameBucketResult> hostnameBuckets,

            ImmutableArray<Outputs.GetPropertyHostnamesHostnameResult> hostnames,

            string id,

            string propertyId,

            int version)
        {
            ContractId = contractId;
            FilterPendingDefaultCerts = filterPendingDefaultCerts;
            GroupId = groupId;
            HostnameBuckets = hostnameBuckets;
            Hostnames = hostnames;
            Id = id;
            PropertyId = propertyId;
            Version = version;
        }
    }
}
