// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetCpCodes
    {
        public static Task<GetCpCodesResult> InvokeAsync(GetCpCodesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCpCodesResult>("akamai:index/getCpCodes:getCpCodes", args ?? new GetCpCodesArgs(), options.WithDefaults());

        public static Output<GetCpCodesResult> Invoke(GetCpCodesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCpCodesResult>("akamai:index/getCpCodes:getCpCodes", args ?? new GetCpCodesInvokeArgs(), options.WithDefaults());

        public static Output<GetCpCodesResult> Invoke(GetCpCodesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCpCodesResult>("akamai:index/getCpCodes:getCpCodes", args ?? new GetCpCodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCpCodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("contractId", required: true)]
        public string ContractId { get; set; } = null!;

        [Input("filterByName")]
        public string? FilterByName { get; set; }

        [Input("filterByProductId")]
        public string? FilterByProductId { get; set; }

        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        public GetCpCodesArgs()
        {
        }
        public static new GetCpCodesArgs Empty => new GetCpCodesArgs();
    }

    public sealed class GetCpCodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        [Input("filterByName")]
        public Input<string>? FilterByName { get; set; }

        [Input("filterByProductId")]
        public Input<string>? FilterByProductId { get; set; }

        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        public GetCpCodesInvokeArgs()
        {
        }
        public static new GetCpCodesInvokeArgs Empty => new GetCpCodesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCpCodesResult
    {
        public readonly string AccountId;
        public readonly string ContractId;
        public readonly ImmutableArray<Outputs.GetCpCodesCpCodeResult> CpCodes;
        public readonly string? FilterByName;
        public readonly string? FilterByProductId;
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCpCodesResult(
            string accountId,

            string contractId,

            ImmutableArray<Outputs.GetCpCodesCpCodeResult> cpCodes,

            string? filterByName,

            string? filterByProductId,

            string groupId,

            string id)
        {
            AccountId = accountId;
            ContractId = contractId;
            CpCodes = cpCodes;
            FilterByName = filterByName;
            FilterByProductId = filterByProductId;
            GroupId = groupId;
            Id = id;
        }
    }
}
