// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload")]
    public partial class MtlskeystoreClientCertificateUpload : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If set to true, all warnings will be acknowledged automatically. Defaults to `False`.
        /// </summary>
        [Output("autoAcknowledgeWarnings")]
        public Output<bool> AutoAcknowledgeWarnings { get; private set; } = null!;

        /// <summary>
        /// The ID of the client certificate to which the signed certificate will be uploaded.
        /// </summary>
        [Output("clientCertificateId")]
        public Output<int> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// The signed certificate to upload.
        /// </summary>
        [Output("signedCertificate")]
        public Output<string> SignedCertificate { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.MtlskeystoreClientCertificateUploadTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The optional trust chain associated with the signed certificate.
        /// </summary>
        [Output("trustChain")]
        public Output<string?> TrustChain { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the client certificate version.
        /// </summary>
        [Output("versionGuid")]
        public Output<string> VersionGuid { get; private set; } = null!;

        /// <summary>
        /// The version number of the client certificate to upload the signed certificate to.
        /// </summary>
        [Output("versionNumber")]
        public Output<int> VersionNumber { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `True`.
        /// </summary>
        [Output("waitForDeployment")]
        public Output<bool> WaitForDeployment { get; private set; } = null!;


        /// <summary>
        /// Create a MtlskeystoreClientCertificateUpload resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MtlskeystoreClientCertificateUpload(string name, MtlskeystoreClientCertificateUploadArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload", name, args ?? new MtlskeystoreClientCertificateUploadArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MtlskeystoreClientCertificateUpload(string name, Input<string> id, MtlskeystoreClientCertificateUploadState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/mtlskeystoreClientCertificateUpload:MtlskeystoreClientCertificateUpload", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MtlskeystoreClientCertificateUpload resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MtlskeystoreClientCertificateUpload Get(string name, Input<string> id, MtlskeystoreClientCertificateUploadState? state = null, CustomResourceOptions? options = null)
        {
            return new MtlskeystoreClientCertificateUpload(name, id, state, options);
        }
    }

    public sealed class MtlskeystoreClientCertificateUploadArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, all warnings will be acknowledged automatically. Defaults to `False`.
        /// </summary>
        [Input("autoAcknowledgeWarnings")]
        public Input<bool>? AutoAcknowledgeWarnings { get; set; }

        /// <summary>
        /// The ID of the client certificate to which the signed certificate will be uploaded.
        /// </summary>
        [Input("clientCertificateId", required: true)]
        public Input<int> ClientCertificateId { get; set; } = null!;

        /// <summary>
        /// The signed certificate to upload.
        /// </summary>
        [Input("signedCertificate", required: true)]
        public Input<string> SignedCertificate { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.MtlskeystoreClientCertificateUploadTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The optional trust chain associated with the signed certificate.
        /// </summary>
        [Input("trustChain")]
        public Input<string>? TrustChain { get; set; }

        /// <summary>
        /// The version number of the client certificate to upload the signed certificate to.
        /// </summary>
        [Input("versionNumber", required: true)]
        public Input<int> VersionNumber { get; set; } = null!;

        /// <summary>
        /// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `True`.
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public MtlskeystoreClientCertificateUploadArgs()
        {
        }
        public static new MtlskeystoreClientCertificateUploadArgs Empty => new MtlskeystoreClientCertificateUploadArgs();
    }

    public sealed class MtlskeystoreClientCertificateUploadState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, all warnings will be acknowledged automatically. Defaults to `False`.
        /// </summary>
        [Input("autoAcknowledgeWarnings")]
        public Input<bool>? AutoAcknowledgeWarnings { get; set; }

        /// <summary>
        /// The ID of the client certificate to which the signed certificate will be uploaded.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<int>? ClientCertificateId { get; set; }

        /// <summary>
        /// The signed certificate to upload.
        /// </summary>
        [Input("signedCertificate")]
        public Input<string>? SignedCertificate { get; set; }

        [Input("timeouts")]
        public Input<Inputs.MtlskeystoreClientCertificateUploadTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The optional trust chain associated with the signed certificate.
        /// </summary>
        [Input("trustChain")]
        public Input<string>? TrustChain { get; set; }

        /// <summary>
        /// A unique identifier for the client certificate version.
        /// </summary>
        [Input("versionGuid")]
        public Input<string>? VersionGuid { get; set; }

        /// <summary>
        /// The version number of the client certificate to upload the signed certificate to.
        /// </summary>
        [Input("versionNumber")]
        public Input<int>? VersionNumber { get; set; }

        /// <summary>
        /// Indicates whether to wait for the deployment of the uploaded certificate. Defaults to `True`.
        /// </summary>
        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        public MtlskeystoreClientCertificateUploadState()
        {
        }
        public static new MtlskeystoreClientCertificateUploadState Empty => new MtlskeystoreClientCertificateUploadState();
    }
}
