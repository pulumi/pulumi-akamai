// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Edgedns
{
    [Obsolete(@"akamai.edgedns/dnsrecord.DnsRecord has been deprecated in favor of akamai.index/dnsrecord.DnsRecord")]
    [AkamaiResourceType("akamai:edgedns/dnsRecord:DnsRecord")]
    public partial class DnsRecord : global::Pulumi.CustomResource
    {
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        [Output("algorithm")]
        public Output<int?> Algorithm { get; private set; } = null!;

        [Output("answerType")]
        public Output<string> AnswerType { get; private set; } = null!;

        [Output("certificate")]
        public Output<string?> Certificate { get; private set; } = null!;

        [Output("digest")]
        public Output<string?> Digest { get; private set; } = null!;

        [Output("digestType")]
        public Output<int?> DigestType { get; private set; } = null!;

        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        [Output("emailAddress")]
        public Output<string?> EmailAddress { get; private set; } = null!;

        [Output("expiration")]
        public Output<string?> Expiration { get; private set; } = null!;

        [Output("expiry")]
        public Output<int?> Expiry { get; private set; } = null!;

        [Output("fingerprint")]
        public Output<string?> Fingerprint { get; private set; } = null!;

        [Output("fingerprintType")]
        public Output<int?> FingerprintType { get; private set; } = null!;

        [Output("flags")]
        public Output<int?> Flags { get; private set; } = null!;

        [Output("flagsnaptr")]
        public Output<string?> Flagsnaptr { get; private set; } = null!;

        [Output("hardware")]
        public Output<string?> Hardware { get; private set; } = null!;

        [Output("inception")]
        public Output<string?> Inception { get; private set; } = null!;

        [Output("iterations")]
        public Output<int?> Iterations { get; private set; } = null!;

        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        [Output("keytag")]
        public Output<int?> Keytag { get; private set; } = null!;

        [Output("labels")]
        public Output<int?> Labels { get; private set; } = null!;

        [Output("mailbox")]
        public Output<string?> Mailbox { get; private set; } = null!;

        [Output("matchType")]
        public Output<int?> MatchType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nameServer")]
        public Output<string?> NameServer { get; private set; } = null!;

        [Output("nextHashedOwnerName")]
        public Output<string?> NextHashedOwnerName { get; private set; } = null!;

        [Output("nxdomainTtl")]
        public Output<int?> NxdomainTtl { get; private set; } = null!;

        [Output("order")]
        public Output<int?> Order { get; private set; } = null!;

        [Output("originalTtl")]
        public Output<int?> OriginalTtl { get; private set; } = null!;

        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        [Output("preference")]
        public Output<int?> Preference { get; private set; } = null!;

        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        [Output("priorityIncrement")]
        public Output<int?> PriorityIncrement { get; private set; } = null!;

        [Output("protocol")]
        public Output<int?> Protocol { get; private set; } = null!;

        [Output("recordSha")]
        public Output<string> RecordSha { get; private set; } = null!;

        [Output("recordtype")]
        public Output<string> Recordtype { get; private set; } = null!;

        [Output("refresh")]
        public Output<int?> Refresh { get; private set; } = null!;

        [Output("regexp")]
        public Output<string?> Regexp { get; private set; } = null!;

        [Output("replacement")]
        public Output<string?> Replacement { get; private set; } = null!;

        [Output("retry")]
        public Output<int?> Retry { get; private set; } = null!;

        [Output("salt")]
        public Output<string?> Salt { get; private set; } = null!;

        [Output("selector")]
        public Output<int?> Selector { get; private set; } = null!;

        [Output("serial")]
        public Output<int> Serial { get; private set; } = null!;

        [Output("service")]
        public Output<string?> Service { get; private set; } = null!;

        [Output("signature")]
        public Output<string?> Signature { get; private set; } = null!;

        [Output("signer")]
        public Output<string?> Signer { get; private set; } = null!;

        [Output("software")]
        public Output<string?> Software { get; private set; } = null!;

        [Output("subtype")]
        public Output<int?> Subtype { get; private set; } = null!;

        [Output("svcParams")]
        public Output<string?> SvcParams { get; private set; } = null!;

        [Output("svcPriority")]
        public Output<int?> SvcPriority { get; private set; } = null!;

        [Output("targetName")]
        public Output<string?> TargetName { get; private set; } = null!;

        [Output("targets")]
        public Output<ImmutableArray<string>> Targets { get; private set; } = null!;

        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        [Output("txt")]
        public Output<string?> Txt { get; private set; } = null!;

        [Output("typeBitmaps")]
        public Output<string?> TypeBitmaps { get; private set; } = null!;

        [Output("typeCovered")]
        public Output<string?> TypeCovered { get; private set; } = null!;

        [Output("typeMnemonic")]
        public Output<string?> TypeMnemonic { get; private set; } = null!;

        [Output("typeValue")]
        public Output<int?> TypeValue { get; private set; } = null!;

        [Output("usage")]
        public Output<int?> Usage { get; private set; } = null!;

        [Output("weight")]
        public Output<int?> Weight { get; private set; } = null!;

        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a DnsRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsRecord(string name, DnsRecordArgs args, CustomResourceOptions? options = null)
            : base("akamai:edgedns/dnsRecord:DnsRecord", name, args ?? new DnsRecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsRecord(string name, Input<string> id, DnsRecordState? state = null, CustomResourceOptions? options = null)
            : base("akamai:edgedns/dnsRecord:DnsRecord", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsRecord Get(string name, Input<string> id, DnsRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsRecord(name, id, state, options);
        }
    }

    public sealed class DnsRecordArgs : global::Pulumi.ResourceArgs
    {
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("algorithm")]
        public Input<int>? Algorithm { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("digestType")]
        public Input<int>? DigestType { get; set; }

        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        [Input("expiration")]
        public Input<string>? Expiration { get; set; }

        [Input("expiry")]
        public Input<int>? Expiry { get; set; }

        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("fingerprintType")]
        public Input<int>? FingerprintType { get; set; }

        [Input("flags")]
        public Input<int>? Flags { get; set; }

        [Input("flagsnaptr")]
        public Input<string>? Flagsnaptr { get; set; }

        [Input("hardware")]
        public Input<string>? Hardware { get; set; }

        [Input("inception")]
        public Input<string>? Inception { get; set; }

        [Input("iterations")]
        public Input<int>? Iterations { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("keytag")]
        public Input<int>? Keytag { get; set; }

        [Input("labels")]
        public Input<int>? Labels { get; set; }

        [Input("mailbox")]
        public Input<string>? Mailbox { get; set; }

        [Input("matchType")]
        public Input<int>? MatchType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameServer")]
        public Input<string>? NameServer { get; set; }

        [Input("nextHashedOwnerName")]
        public Input<string>? NextHashedOwnerName { get; set; }

        [Input("nxdomainTtl")]
        public Input<int>? NxdomainTtl { get; set; }

        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("originalTtl")]
        public Input<int>? OriginalTtl { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preference")]
        public Input<int>? Preference { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("priorityIncrement")]
        public Input<int>? PriorityIncrement { get; set; }

        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        [Input("recordtype", required: true)]
        public Input<string> Recordtype { get; set; } = null!;

        [Input("refresh")]
        public Input<int>? Refresh { get; set; }

        [Input("regexp")]
        public Input<string>? Regexp { get; set; }

        [Input("replacement")]
        public Input<string>? Replacement { get; set; }

        [Input("retry")]
        public Input<int>? Retry { get; set; }

        [Input("salt")]
        public Input<string>? Salt { get; set; }

        [Input("selector")]
        public Input<int>? Selector { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("signature")]
        public Input<string>? Signature { get; set; }

        [Input("signer")]
        public Input<string>? Signer { get; set; }

        [Input("software")]
        public Input<string>? Software { get; set; }

        [Input("subtype")]
        public Input<int>? Subtype { get; set; }

        [Input("svcParams")]
        public Input<string>? SvcParams { get; set; }

        [Input("svcPriority")]
        public Input<int>? SvcPriority { get; set; }

        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("targets")]
        private InputList<string>? _targets;
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        [Input("txt")]
        public Input<string>? Txt { get; set; }

        [Input("typeBitmaps")]
        public Input<string>? TypeBitmaps { get; set; }

        [Input("typeCovered")]
        public Input<string>? TypeCovered { get; set; }

        [Input("typeMnemonic")]
        public Input<string>? TypeMnemonic { get; set; }

        [Input("typeValue")]
        public Input<int>? TypeValue { get; set; }

        [Input("usage")]
        public Input<int>? Usage { get; set; }

        [Input("weight")]
        public Input<int>? Weight { get; set; }

        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public DnsRecordArgs()
        {
        }
        public static new DnsRecordArgs Empty => new DnsRecordArgs();
    }

    public sealed class DnsRecordState : global::Pulumi.ResourceArgs
    {
        [Input("active")]
        public Input<bool>? Active { get; set; }

        [Input("algorithm")]
        public Input<int>? Algorithm { get; set; }

        [Input("answerType")]
        public Input<string>? AnswerType { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("digestType")]
        public Input<int>? DigestType { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        [Input("expiration")]
        public Input<string>? Expiration { get; set; }

        [Input("expiry")]
        public Input<int>? Expiry { get; set; }

        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("fingerprintType")]
        public Input<int>? FingerprintType { get; set; }

        [Input("flags")]
        public Input<int>? Flags { get; set; }

        [Input("flagsnaptr")]
        public Input<string>? Flagsnaptr { get; set; }

        [Input("hardware")]
        public Input<string>? Hardware { get; set; }

        [Input("inception")]
        public Input<string>? Inception { get; set; }

        [Input("iterations")]
        public Input<int>? Iterations { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("keytag")]
        public Input<int>? Keytag { get; set; }

        [Input("labels")]
        public Input<int>? Labels { get; set; }

        [Input("mailbox")]
        public Input<string>? Mailbox { get; set; }

        [Input("matchType")]
        public Input<int>? MatchType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameServer")]
        public Input<string>? NameServer { get; set; }

        [Input("nextHashedOwnerName")]
        public Input<string>? NextHashedOwnerName { get; set; }

        [Input("nxdomainTtl")]
        public Input<int>? NxdomainTtl { get; set; }

        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("originalTtl")]
        public Input<int>? OriginalTtl { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preference")]
        public Input<int>? Preference { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("priorityIncrement")]
        public Input<int>? PriorityIncrement { get; set; }

        [Input("protocol")]
        public Input<int>? Protocol { get; set; }

        [Input("recordSha")]
        public Input<string>? RecordSha { get; set; }

        [Input("recordtype")]
        public Input<string>? Recordtype { get; set; }

        [Input("refresh")]
        public Input<int>? Refresh { get; set; }

        [Input("regexp")]
        public Input<string>? Regexp { get; set; }

        [Input("replacement")]
        public Input<string>? Replacement { get; set; }

        [Input("retry")]
        public Input<int>? Retry { get; set; }

        [Input("salt")]
        public Input<string>? Salt { get; set; }

        [Input("selector")]
        public Input<int>? Selector { get; set; }

        [Input("serial")]
        public Input<int>? Serial { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("signature")]
        public Input<string>? Signature { get; set; }

        [Input("signer")]
        public Input<string>? Signer { get; set; }

        [Input("software")]
        public Input<string>? Software { get; set; }

        [Input("subtype")]
        public Input<int>? Subtype { get; set; }

        [Input("svcParams")]
        public Input<string>? SvcParams { get; set; }

        [Input("svcPriority")]
        public Input<int>? SvcPriority { get; set; }

        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        [Input("targets")]
        private InputList<string>? _targets;
        public InputList<string> Targets
        {
            get => _targets ?? (_targets = new InputList<string>());
            set => _targets = value;
        }

        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        [Input("txt")]
        public Input<string>? Txt { get; set; }

        [Input("typeBitmaps")]
        public Input<string>? TypeBitmaps { get; set; }

        [Input("typeCovered")]
        public Input<string>? TypeCovered { get; set; }

        [Input("typeMnemonic")]
        public Input<string>? TypeMnemonic { get; set; }

        [Input("typeValue")]
        public Input<int>? TypeValue { get; set; }

        [Input("usage")]
        public Input<int>? Usage { get; set; }

        [Input("weight")]
        public Input<int>? Weight { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DnsRecordState()
        {
        }
        public static new DnsRecordState Empty => new DnsRecordState();
    }
}
