// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/propertyBootstrap:PropertyBootstrap")]
    public partial class PropertyBootstrap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the property in the Identity and Access Management API.
        /// </summary>
        [Output("assetId")]
        public Output<string> AssetId { get; private set; } = null!;

        /// <summary>
        /// Contract ID to be assigned to the Property
        /// </summary>
        [Output("contractId")]
        public Output<string> ContractId { get; private set; } = null!;

        /// <summary>
        /// Group ID to be assigned to the Property
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// Name to give to the Property (must be unique)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Product ID to be assigned to the Property
        /// </summary>
        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
        /// incrementing property versions.
        /// </summary>
        [Output("useHostnameBucket")]
        public Output<bool> UseHostnameBucket { get; private set; } = null!;


        /// <summary>
        /// Create a PropertyBootstrap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PropertyBootstrap(string name, PropertyBootstrapArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/propertyBootstrap:PropertyBootstrap", name, args ?? new PropertyBootstrapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PropertyBootstrap(string name, Input<string> id, PropertyBootstrapState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/propertyBootstrap:PropertyBootstrap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PropertyBootstrap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PropertyBootstrap Get(string name, Input<string> id, PropertyBootstrapState? state = null, CustomResourceOptions? options = null)
        {
            return new PropertyBootstrap(name, id, state, options);
        }
    }

    public sealed class PropertyBootstrapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contract ID to be assigned to the Property
        /// </summary>
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        /// <summary>
        /// Group ID to be assigned to the Property
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Name to give to the Property (must be unique)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Product ID to be assigned to the Property
        /// </summary>
        [Input("productId", required: true)]
        public Input<string> ProductId { get; set; } = null!;

        /// <summary>
        /// Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
        /// incrementing property versions.
        /// </summary>
        [Input("useHostnameBucket")]
        public Input<bool>? UseHostnameBucket { get; set; }

        public PropertyBootstrapArgs()
        {
        }
        public static new PropertyBootstrapArgs Empty => new PropertyBootstrapArgs();
    }

    public sealed class PropertyBootstrapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the property in the Identity and Access Management API.
        /// </summary>
        [Input("assetId")]
        public Input<string>? AssetId { get; set; }

        /// <summary>
        /// Contract ID to be assigned to the Property
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// Group ID to be assigned to the Property
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Name to give to the Property (must be unique)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Product ID to be assigned to the Property
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// Specifies whether hostname bucket is used with this property. It allows you to add or remove property hostnames without
        /// incrementing property versions.
        /// </summary>
        [Input("useHostnameBucket")]
        public Input<bool>? UseHostnameBucket { get; set; }

        public PropertyBootstrapState()
        {
        }
        public static new PropertyBootstrapState Empty => new PropertyBootstrapState();
    }
}
