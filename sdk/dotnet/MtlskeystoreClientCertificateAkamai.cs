// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/mtlskeystoreClientCertificateAkamai:MtlskeystoreClientCertificateAkamai")]
    public partial class MtlskeystoreClientCertificateAkamai : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique identifier of the client certificate.
        /// </summary>
        [Output("certificateId")]
        public Output<int> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The name of the client certificate. Must be between 1 and 64 characters.
        /// </summary>
        [Output("certificateName")]
        public Output<string> CertificateName { get; private set; } = null!;

        /// <summary>
        /// The contract assigned to the client certificate. Must have a length of at least 1.
        /// </summary>
        [Output("contractId")]
        public Output<string> ContractId { get; private set; } = null!;

        /// <summary>
        /// The user who created the client certificate. Read-only.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the `Current` client certificate version.
        /// </summary>
        [Output("currentGuid")]
        public Output<string> CurrentGuid { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
        /// </summary>
        [Output("geography")]
        public Output<string> Geography { get; private set; } = null!;

        /// <summary>
        /// The group assigned to the client certificate. Must be greater than or equal to 0.
        /// </summary>
        [Output("groupId")]
        public Output<int> GroupId { get; private set; } = null!;

        /// <summary>
        /// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// The email addresses to notify for client certificate-related issues. Must have at least one email address.
        /// </summary>
        [Output("notificationEmails")]
        public Output<ImmutableArray<string>> NotificationEmails { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the `Previous` client certificate version.
        /// </summary>
        [Output("previousGuid")]
        public Output<string> PreviousGuid { get; private set; } = null!;

        /// <summary>
        /// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
        /// </summary>
        [Output("secureNetwork")]
        public Output<string> SecureNetwork { get; private set; } = null!;

        /// <summary>
        /// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
        /// </summary>
        [Output("versions")]
        public Output<ImmutableArray<Outputs.MtlskeystoreClientCertificateAkamaiVersion>> Versions { get; private set; } = null!;


        /// <summary>
        /// Create a MtlskeystoreClientCertificateAkamai resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MtlskeystoreClientCertificateAkamai(string name, MtlskeystoreClientCertificateAkamaiArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/mtlskeystoreClientCertificateAkamai:MtlskeystoreClientCertificateAkamai", name, args ?? new MtlskeystoreClientCertificateAkamaiArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MtlskeystoreClientCertificateAkamai(string name, Input<string> id, MtlskeystoreClientCertificateAkamaiState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/mtlskeystoreClientCertificateAkamai:MtlskeystoreClientCertificateAkamai", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MtlskeystoreClientCertificateAkamai resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MtlskeystoreClientCertificateAkamai Get(string name, Input<string> id, MtlskeystoreClientCertificateAkamaiState? state = null, CustomResourceOptions? options = null)
        {
            return new MtlskeystoreClientCertificateAkamai(name, id, state, options);
        }
    }

    public sealed class MtlskeystoreClientCertificateAkamaiArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the client certificate. Must be between 1 and 64 characters.
        /// </summary>
        [Input("certificateName", required: true)]
        public Input<string> CertificateName { get; set; } = null!;

        /// <summary>
        /// The contract assigned to the client certificate. Must have a length of at least 1.
        /// </summary>
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        /// <summary>
        /// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
        /// </summary>
        [Input("geography", required: true)]
        public Input<string> Geography { get; set; } = null!;

        /// <summary>
        /// The group assigned to the client certificate. Must be greater than or equal to 0.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<int> GroupId { get; set; } = null!;

        /// <summary>
        /// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        [Input("notificationEmails", required: true)]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// The email addresses to notify for client certificate-related issues. Must have at least one email address.
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        /// <summary>
        /// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
        /// </summary>
        [Input("secureNetwork", required: true)]
        public Input<string> SecureNetwork { get; set; } = null!;

        /// <summary>
        /// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        public MtlskeystoreClientCertificateAkamaiArgs()
        {
        }
        public static new MtlskeystoreClientCertificateAkamaiArgs Empty => new MtlskeystoreClientCertificateAkamaiArgs();
    }

    public sealed class MtlskeystoreClientCertificateAkamaiState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier of the client certificate.
        /// </summary>
        [Input("certificateId")]
        public Input<int>? CertificateId { get; set; }

        /// <summary>
        /// The name of the client certificate. Must be between 1 and 64 characters.
        /// </summary>
        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        /// <summary>
        /// The contract assigned to the client certificate. Must have a length of at least 1.
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// The user who created the client certificate. Read-only.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate's creation. Read-only.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// Unique identifier for the `Current` client certificate version.
        /// </summary>
        [Input("currentGuid")]
        public Input<string>? CurrentGuid { get; set; }

        /// <summary>
        /// Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
        /// </summary>
        [Input("geography")]
        public Input<string>? Geography { get; set; }

        /// <summary>
        /// The group assigned to the client certificate. Must be greater than or equal to 0.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        [Input("notificationEmails")]
        private InputList<string>? _notificationEmails;

        /// <summary>
        /// The email addresses to notify for client certificate-related issues. Must have at least one email address.
        /// </summary>
        public InputList<string> NotificationEmails
        {
            get => _notificationEmails ?? (_notificationEmails = new InputList<string>());
            set => _notificationEmails = value;
        }

        /// <summary>
        /// Unique identifier for the `Previous` client certificate version.
        /// </summary>
        [Input("previousGuid")]
        public Input<string>? PreviousGuid { get; set; }

        /// <summary>
        /// Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
        /// </summary>
        [Input("secureNetwork")]
        public Input<string>? SecureNetwork { get; set; }

        /// <summary>
        /// The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        [Input("versions")]
        private InputList<Inputs.MtlskeystoreClientCertificateAkamaiVersionGetArgs>? _versions;

        /// <summary>
        /// A list of client certificate versions. Each version represents a specific iteration of the client certificate.
        /// </summary>
        public InputList<Inputs.MtlskeystoreClientCertificateAkamaiVersionGetArgs> Versions
        {
            get => _versions ?? (_versions = new InputList<Inputs.MtlskeystoreClientCertificateAkamaiVersionGetArgs>());
            set => _versions = value;
        }

        public MtlskeystoreClientCertificateAkamaiState()
        {
        }
        public static new MtlskeystoreClientCertificateAkamaiState Empty => new MtlskeystoreClientCertificateAkamaiState();
    }
}
