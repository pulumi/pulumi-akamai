// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetEdgeWorker
    {
        public static Task<GetEdgeWorkerResult> InvokeAsync(GetEdgeWorkerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEdgeWorkerResult>("akamai:index/getEdgeWorker:getEdgeWorker", args ?? new GetEdgeWorkerArgs(), options.WithDefaults());

        public static Output<GetEdgeWorkerResult> Invoke(GetEdgeWorkerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEdgeWorkerResult>("akamai:index/getEdgeWorker:getEdgeWorker", args ?? new GetEdgeWorkerInvokeArgs(), options.WithDefaults());

        public static Output<GetEdgeWorkerResult> Invoke(GetEdgeWorkerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEdgeWorkerResult>("akamai:index/getEdgeWorker:getEdgeWorker", args ?? new GetEdgeWorkerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEdgeWorkerArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeworkerId", required: true)]
        public int EdgeworkerId { get; set; }

        [Input("localBundle")]
        public string? LocalBundle { get; set; }

        public GetEdgeWorkerArgs()
        {
        }
        public static new GetEdgeWorkerArgs Empty => new GetEdgeWorkerArgs();
    }

    public sealed class GetEdgeWorkerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("edgeworkerId", required: true)]
        public Input<int> EdgeworkerId { get; set; } = null!;

        [Input("localBundle")]
        public Input<string>? LocalBundle { get; set; }

        public GetEdgeWorkerInvokeArgs()
        {
        }
        public static new GetEdgeWorkerInvokeArgs Empty => new GetEdgeWorkerInvokeArgs();
    }


    [OutputType]
    public sealed class GetEdgeWorkerResult
    {
        public readonly int EdgeworkerId;
        public readonly string GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? LocalBundle;
        public readonly string LocalBundleHash;
        public readonly string Name;
        public readonly int ResourceTierId;
        public readonly string Version;
        public readonly ImmutableArray<string> Warnings;

        [OutputConstructor]
        private GetEdgeWorkerResult(
            int edgeworkerId,

            string groupId,

            string id,

            string? localBundle,

            string localBundleHash,

            string name,

            int resourceTierId,

            string version,

            ImmutableArray<string> warnings)
        {
            EdgeworkerId = edgeworkerId;
            GroupId = groupId;
            Id = id;
            LocalBundle = localBundle;
            LocalBundleHash = localBundleHash;
            Name = name;
            ResourceTierId = resourceTierId;
            Version = version;
            Warnings = warnings;
        }
    }
}
