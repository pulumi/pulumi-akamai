// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch")]
    public partial class AppSecAdvancedSettingsPrefetch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable prefetch requests for all file extensions
        /// </summary>
        [Output("allExtensions")]
        public Output<bool> AllExtensions { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// Whether to enable or disable prefetch requests
        /// </summary>
        [Output("enableAppLayer")]
        public Output<bool> EnableAppLayer { get; private set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests for rate controls
        /// </summary>
        [Output("enableRateControls")]
        public Output<bool> EnableRateControls { get; private set; } = null!;

        /// <summary>
        /// List of file extensions
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<string>> Extensions { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecAdvancedSettingsPrefetch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecAdvancedSettingsPrefetch(string name, AppSecAdvancedSettingsPrefetchArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch", name, args ?? new AppSecAdvancedSettingsPrefetchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecAdvancedSettingsPrefetch(string name, Input<string> id, AppSecAdvancedSettingsPrefetchState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecAdvancedSettingsPrefetch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecAdvancedSettingsPrefetch Get(string name, Input<string> id, AppSecAdvancedSettingsPrefetchState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecAdvancedSettingsPrefetch(name, id, state, options);
        }
    }

    public sealed class AppSecAdvancedSettingsPrefetchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable prefetch requests for all file extensions
        /// </summary>
        [Input("allExtensions", required: true)]
        public Input<bool> AllExtensions { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// Whether to enable or disable prefetch requests
        /// </summary>
        [Input("enableAppLayer", required: true)]
        public Input<bool> EnableAppLayer { get; set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests for rate controls
        /// </summary>
        [Input("enableRateControls", required: true)]
        public Input<bool> EnableRateControls { get; set; } = null!;

        [Input("extensions", required: true)]
        private InputList<string>? _extensions;

        /// <summary>
        /// List of file extensions
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        public AppSecAdvancedSettingsPrefetchArgs()
        {
        }
        public static new AppSecAdvancedSettingsPrefetchArgs Empty => new AppSecAdvancedSettingsPrefetchArgs();
    }

    public sealed class AppSecAdvancedSettingsPrefetchState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable prefetch requests for all file extensions
        /// </summary>
        [Input("allExtensions")]
        public Input<bool>? AllExtensions { get; set; }

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        /// <summary>
        /// Whether to enable or disable prefetch requests
        /// </summary>
        [Input("enableAppLayer")]
        public Input<bool>? EnableAppLayer { get; set; }

        /// <summary>
        /// Whether to enable prefetch requests for rate controls
        /// </summary>
        [Input("enableRateControls")]
        public Input<bool>? EnableRateControls { get; set; }

        [Input("extensions")]
        private InputList<string>? _extensions;

        /// <summary>
        /// List of file extensions
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        public AppSecAdvancedSettingsPrefetchState()
        {
        }
        public static new AppSecAdvancedSettingsPrefetchState Empty => new AppSecAdvancedSettingsPrefetchState();
    }
}
