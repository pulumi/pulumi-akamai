// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer")]
    public partial class CloudletsApplicationLoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
        /// </summary>
        [Output("balancingType")]
        public Output<string?> BalancingType { get; private set; } = null!;

        /// <summary>
        /// The object containing information on conditional origins being used as data centers for an Application Load Balancer
        /// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
        /// application load balancer configuration.
        /// </summary>
        [Output("dataCenters")]
        public Output<ImmutableArray<Outputs.CloudletsApplicationLoadBalancerDataCenter>> DataCenters { get; private set; } = null!;

        /// <summary>
        /// The load balancer configuration version description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("livenessSettings")]
        public Output<Outputs.CloudletsApplicationLoadBalancerLivenessSettings?> LivenessSettings { get; private set; } = null!;

        /// <summary>
        /// The load balancer configuration description
        /// </summary>
        [Output("originDescription")]
        public Output<string?> OriginDescription { get; private set; } = null!;

        /// <summary>
        /// The conditional origin's unique identifier
        /// </summary>
        [Output("originId")]
        public Output<string> OriginId { get; private set; } = null!;

        /// <summary>
        /// The load balancer configuration version
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Describes warnings during activation of load balancer configuration
        /// </summary>
        [Output("warnings")]
        public Output<string> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a CloudletsApplicationLoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudletsApplicationLoadBalancer(string name, CloudletsApplicationLoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, args ?? new CloudletsApplicationLoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudletsApplicationLoadBalancer(string name, Input<string> id, CloudletsApplicationLoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudletsApplicationLoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudletsApplicationLoadBalancer Get(string name, Input<string> id, CloudletsApplicationLoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudletsApplicationLoadBalancer(name, id, state, options);
        }
    }

    public sealed class CloudletsApplicationLoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
        /// </summary>
        [Input("balancingType")]
        public Input<string>? BalancingType { get; set; }

        [Input("dataCenters", required: true)]
        private InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs>? _dataCenters;

        /// <summary>
        /// The object containing information on conditional origins being used as data centers for an Application Load Balancer
        /// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
        /// application load balancer configuration.
        /// </summary>
        public InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs> DataCenters
        {
            get => _dataCenters ?? (_dataCenters = new InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs>());
            set => _dataCenters = value;
        }

        /// <summary>
        /// The load balancer configuration version description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("livenessSettings")]
        public Input<Inputs.CloudletsApplicationLoadBalancerLivenessSettingsArgs>? LivenessSettings { get; set; }

        /// <summary>
        /// The load balancer configuration description
        /// </summary>
        [Input("originDescription")]
        public Input<string>? OriginDescription { get; set; }

        /// <summary>
        /// The conditional origin's unique identifier
        /// </summary>
        [Input("originId", required: true)]
        public Input<string> OriginId { get; set; } = null!;

        public CloudletsApplicationLoadBalancerArgs()
        {
        }
        public static new CloudletsApplicationLoadBalancerArgs Empty => new CloudletsApplicationLoadBalancerArgs();
    }

    public sealed class CloudletsApplicationLoadBalancerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
        /// </summary>
        [Input("balancingType")]
        public Input<string>? BalancingType { get; set; }

        [Input("dataCenters")]
        private InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs>? _dataCenters;

        /// <summary>
        /// The object containing information on conditional origins being used as data centers for an Application Load Balancer
        /// implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
        /// application load balancer configuration.
        /// </summary>
        public InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs> DataCenters
        {
            get => _dataCenters ?? (_dataCenters = new InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs>());
            set => _dataCenters = value;
        }

        /// <summary>
        /// The load balancer configuration version description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("livenessSettings")]
        public Input<Inputs.CloudletsApplicationLoadBalancerLivenessSettingsGetArgs>? LivenessSettings { get; set; }

        /// <summary>
        /// The load balancer configuration description
        /// </summary>
        [Input("originDescription")]
        public Input<string>? OriginDescription { get; set; }

        /// <summary>
        /// The conditional origin's unique identifier
        /// </summary>
        [Input("originId")]
        public Input<string>? OriginId { get; set; }

        /// <summary>
        /// The load balancer configuration version
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Describes warnings during activation of load balancer configuration
        /// </summary>
        [Input("warnings")]
        public Input<string>? Warnings { get; set; }

        public CloudletsApplicationLoadBalancerState()
        {
        }
        public static new CloudletsApplicationLoadBalancerState Empty => new CloudletsApplicationLoadBalancerState();
    }
}
