// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// Use the `akamai.CloudletsApplicationLoadBalancer` resource to create the Application Load Balancer Cloudlet configuration. The Application Load Balancer Cloudlet provides intelligent, scalable traffic management across physical, virtual, and cloud-hosted data centers without requiring the origin to send load feedback. This Cloudlet can automatically detect load conditions and route traffic to the optimal data source while maintaining custom routing policies and consistent visitor session behavior for your visitors.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Akamai.CloudletsApplicationLoadBalancer("example", new Akamai.CloudletsApplicationLoadBalancerArgs
    ///         {
    ///             BalancingType = "WEIGHTED",
    ///             DataCenters = 
    ///             {
    ///                 new Akamai.Inputs.CloudletsApplicationLoadBalancerDataCenterArgs
    ///                 {
    ///                     City = "Boston",
    ///                     CloudServerHostHeaderOverride = false,
    ///                     CloudService = true,
    ///                     Continent = "NA",
    ///                     Country = "US",
    ///                     Hostname = "example-hostname",
    ///                     Latitude = 102.78108,
    ///                     LivenessHosts = 
    ///                     {
    ///                         "example",
    ///                     },
    ///                     Longitude = -116.07064,
    ///                     OriginId = "alb_test_1",
    ///                     Percent = 100,
    ///                     StateOrProvince = "MA",
    ///                 },
    ///             },
    ///             Description = "application_load_balancer description",
    ///             LivenessSettings = new Akamai.Inputs.CloudletsApplicationLoadBalancerLivenessSettingsArgs
    ///             {
    ///                 AdditionalHeaders = 
    ///                 {
    ///                     { "additionalHeaders", "123" },
    ///                 },
    ///                 HostHeader = "header",
    ///                 Interval = 10,
    ///                 Path = "/status",
    ///                 Port = 1234,
    ///                 Protocol = "HTTP",
    ///                 RequestString = "test_request_string",
    ///                 ResponseString = "test_response_string",
    ///                 Timeout = 60,
    ///             },
    ///             OriginId = "alb_test_1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Basic usagehcl resource "akamai_cloudlets_application_load_balancer" "example" {
    /// 
    /// # (resource arguments)
    /// 
    ///  } You can import your Akamai Application Load Balancer configuration using an origin ID. For example
    /// 
    /// ```sh
    ///  $ pulumi import akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer example alb_test_1
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer")]
    public partial class CloudletsApplicationLoadBalancer : Pulumi.CustomResource
    {
        /// <summary>
        /// The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
        /// </summary>
        [Output("balancingType")]
        public Output<string?> BalancingType { get; private set; } = null!;

        /// <summary>
        /// Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
        /// </summary>
        [Output("dataCenters")]
        public Output<ImmutableArray<Outputs.CloudletsApplicationLoadBalancerDataCenter>> DataCenters { get; private set; } = null!;

        /// <summary>
        /// The description of the load balancing configuration.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the health of each load balanced data center defined in the data center list.
        /// </summary>
        [Output("livenessSettings")]
        public Output<Outputs.CloudletsApplicationLoadBalancerLivenessSettings?> LivenessSettings { get; private set; } = null!;

        /// <summary>
        /// The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
        /// </summary>
        [Output("originId")]
        public Output<string> OriginId { get; private set; } = null!;

        /// <summary>
        /// The version number of the load balancing configuration.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// A list of warnings that occurred during the activation of the load balancing configuration.
        /// </summary>
        [Output("warnings")]
        public Output<string> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a CloudletsApplicationLoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudletsApplicationLoadBalancer(string name, CloudletsApplicationLoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, args ?? new CloudletsApplicationLoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudletsApplicationLoadBalancer(string name, Input<string> id, CloudletsApplicationLoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudletsApplicationLoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudletsApplicationLoadBalancer Get(string name, Input<string> id, CloudletsApplicationLoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudletsApplicationLoadBalancer(name, id, state, options);
        }
    }

    public sealed class CloudletsApplicationLoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
        /// </summary>
        [Input("balancingType")]
        public Input<string>? BalancingType { get; set; }

        [Input("dataCenters", required: true)]
        private InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs>? _dataCenters;

        /// <summary>
        /// Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
        /// </summary>
        public InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs> DataCenters
        {
            get => _dataCenters ?? (_dataCenters = new InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterArgs>());
            set => _dataCenters = value;
        }

        /// <summary>
        /// The description of the load balancing configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the health of each load balanced data center defined in the data center list.
        /// </summary>
        [Input("livenessSettings")]
        public Input<Inputs.CloudletsApplicationLoadBalancerLivenessSettingsArgs>? LivenessSettings { get; set; }

        /// <summary>
        /// The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
        /// </summary>
        [Input("originId", required: true)]
        public Input<string> OriginId { get; set; } = null!;

        public CloudletsApplicationLoadBalancerArgs()
        {
        }
    }

    public sealed class CloudletsApplicationLoadBalancerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of load balancing being performed, either `WEIGHTED` or `PERFORMANCE`.
        /// </summary>
        [Input("balancingType")]
        public Input<string>? BalancingType { get; set; }

        [Input("dataCenters")]
        private InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs>? _dataCenters;

        /// <summary>
        /// Specifies the Conditional Origins being used as data centers for an Application Load Balancer implementation. Only Conditional Origins with an origin type of `CUSTOMER` or `NETSTORAGE` can be used as data centers in an Application Load Balancer configuration.
        /// </summary>
        public InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs> DataCenters
        {
            get => _dataCenters ?? (_dataCenters = new InputList<Inputs.CloudletsApplicationLoadBalancerDataCenterGetArgs>());
            set => _dataCenters = value;
        }

        /// <summary>
        /// The description of the load balancing configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the health of each load balanced data center defined in the data center list.
        /// </summary>
        [Input("livenessSettings")]
        public Input<Inputs.CloudletsApplicationLoadBalancerLivenessSettingsGetArgs>? LivenessSettings { get; set; }

        /// <summary>
        /// The identifier of an origin that represents the data center. The Conditional Origin, which is defined in Property Manager, must have an origin type of either `CUSTOMER` or `NET_STORAGE` set in the `origin` behavior. See property rules for more information.
        /// </summary>
        [Input("originId")]
        public Input<string>? OriginId { get; set; }

        /// <summary>
        /// The version number of the load balancing configuration.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// A list of warnings that occurred during the activation of the load balancing configuration.
        /// </summary>
        [Input("warnings")]
        public Input<string>? Warnings { get; set; }

        public CloudletsApplicationLoadBalancerState()
        {
        }
    }
}
