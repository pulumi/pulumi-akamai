// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualArgs Empty => new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfDimensionEqualArgs();
    }
}
