// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanInputArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfDimensionGreaterThanInputArgs();
    }
}
