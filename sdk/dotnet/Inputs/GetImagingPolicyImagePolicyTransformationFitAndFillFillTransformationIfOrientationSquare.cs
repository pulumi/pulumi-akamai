// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareArgs Empty => new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationSquareArgs();
    }
}
