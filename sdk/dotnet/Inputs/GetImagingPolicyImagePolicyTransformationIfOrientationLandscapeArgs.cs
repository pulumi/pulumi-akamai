// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("appends")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendInputArgs>? _appends;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendInputArgs> Appends
        {
            get => _appends ?? (_appends = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAppendInputArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAspectCropInputArgs>? _aspectCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAspectCropInputArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeAspectCropInputArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCropInputArgs>? _crops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCropInputArgs> Crops
        {
            get => _crops ?? (_crops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeCropInputArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFaceCropInputArgs>? _faceCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFaceCropInputArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFaceCropInputArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFeatureCropInputArgs>? _featureCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFeatureCropInputArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFeatureCropInputArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillInputArgs>? _fitAndFills;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillInputArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillInputArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeImQueryInputArgs>? _imQueries;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeImQueryInputArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeImQueryInputArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropInputArgs>? _regionOfInterestCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropInputArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRegionOfInterestCropInputArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRelativeCropInputArgs>? _relativeCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRelativeCropInputArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRelativeCropInputArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeResizeInputArgs>? _resizes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeResizeInputArgs> Resizes
        {
            get => _resizes ?? (_resizes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeResizeInputArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRotateInputArgs>? _rotates;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRotateInputArgs> Rotates
        {
            get => _rotates ?? (_rotates = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeRotateInputArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeScaleInputArgs>? _scales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeScaleInputArgs> Scales
        {
            get => _scales ?? (_scales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeScaleInputArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeShearsInputArgs>? _shears;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeShearsInputArgs> Shears
        {
            get => _shears ?? (_shears = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeShearsInputArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeTrimInputArgs>? _trims;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeTrimInputArgs> Trims
        {
            get => _trims ?? (_trims = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeTrimInputArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeInputArgs Empty => new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeInputArgs();
    }
}
