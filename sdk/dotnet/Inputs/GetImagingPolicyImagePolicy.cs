// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The breakpoint widths (in pixels) to use to create derivative images/videos.
        /// </summary>
        [Input("breakpoints")]
        public Inputs.GetImagingPolicyImagePolicyBreakpointsArgs? Breakpoints { get; set; }

        [Input("hosts")]
        private List<string>? _hosts;

        /// <summary>
        /// Hosts that are allowed for image/video URLs within transformations or variables.
        /// </summary>
        public List<string> Hosts
        {
            get => _hosts ?? (_hosts = new List<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Dictates the output quality (either `Quality` or `perceptualQuality`) and formats that are created for each resized image. If unspecified, image formats are created to support all browsers at the default quality level (`85`), which includes formats such as WEBP, JPEG2000 and JPEG-XR for specific browsers.
        /// </summary>
        [Input("output")]
        public Inputs.GetImagingPolicyImagePolicyOutputArgs? Output { get; set; }

        [Input("postBreakpointTransformations")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>? _postBreakpointTransformations;

        /// <summary>
        /// Post-processing Transformations are applied to the image after image and quality settings have been applied.
        /// </summary>
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs> PostBreakpointTransformations
        {
            get => _postBreakpointTransformations ?? (_postBreakpointTransformations = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationArgs>());
            set => _postBreakpointTransformations = value;
        }

        /// <summary>
        /// The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        /// </summary>
        [Input("rolloutDuration")]
        public string? RolloutDuration { get; set; }

        /// <summary>
        /// The amount of time in seconds that the policy will serve stale images. During the serve stale period realtime images will attempt to use the offline image from the previous policy version first if possible.
        /// </summary>
        [Input("serveStaleDuration")]
        public string? ServeStaleDuration { get; set; }

        [Input("transformations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationArgs>? _transformations;

        /// <summary>
        /// Set of image transformations to apply to the source image. If unspecified, no operations are performed.
        /// </summary>
        public List<Inputs.GetImagingPolicyImagePolicyTransformationArgs> Transformations
        {
            get => _transformations ?? (_transformations = new List<Inputs.GetImagingPolicyImagePolicyTransformationArgs>());
            set => _transformations = value;
        }

        [Input("variables")]
        private List<Inputs.GetImagingPolicyImagePolicyVariableArgs>? _variables;

        /// <summary>
        /// Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        /// </summary>
        public List<Inputs.GetImagingPolicyImagePolicyVariableArgs> Variables
        {
            get => _variables ?? (_variables = new List<Inputs.GetImagingPolicyImagePolicyVariableArgs>());
            set => _variables = value;
        }

        public GetImagingPolicyImagePolicyArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyArgs Empty => new GetImagingPolicyImagePolicyArgs();
    }
}
