// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionDefaultArgs();
    }
}
