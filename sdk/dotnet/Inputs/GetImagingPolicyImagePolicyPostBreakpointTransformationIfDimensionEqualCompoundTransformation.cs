// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationArgs();
    }
}
