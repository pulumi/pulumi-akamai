// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualContrastArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualOpacityArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionEqualArgs();
    }
}
