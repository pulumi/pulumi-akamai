// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitArgs Empty => new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfOrientationPortraitArgs();
    }
}
