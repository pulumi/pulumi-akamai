// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeInputArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationLandscapeInputArgs();
    }
}
