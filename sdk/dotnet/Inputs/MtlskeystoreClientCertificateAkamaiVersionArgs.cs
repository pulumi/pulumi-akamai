// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class MtlskeystoreClientCertificateAkamaiVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details of the certificate block for the client certificate version.
        /// </summary>
        [Input("certificateBlock")]
        public Input<Inputs.MtlskeystoreClientCertificateAkamaiVersionCertificateBlockArgs>? CertificateBlock { get; set; }

        /// <summary>
        /// The user who created the client certificate version.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's creation.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's deletion request. Appears as null if there's no request.
        /// </summary>
        [Input("deleteRequestedDate")]
        public Input<string>? DeleteRequestedDate { get; set; }

        /// <summary>
        /// Specifies the key elliptic curve when key algorithm `ECDSA` is used.
        /// </summary>
        [Input("ellipticCurve")]
        public Input<string>? EllipticCurve { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating when the client certificate version expires.
        /// </summary>
        [Input("expiryDate")]
        public Input<string>? ExpiryDate { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's availability.
        /// </summary>
        [Input("issuedDate")]
        public Input<string>? IssuedDate { get; set; }

        /// <summary>
        /// The signing entity of the client certificate version.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// Identifies the client certificate version's encryption algorithm. Supported values are `RSA` and `ECDSA`.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// The private key length of the client certificate version when key algorithm `RSA` is used.
        /// </summary>
        [Input("keySizeInBytes")]
        public Input<string>? KeySizeInBytes { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp indicating the client certificate version's deletion. Appears as null if there's no request.
        /// </summary>
        [Input("scheduledDeleteDate")]
        public Input<string>? ScheduledDeleteDate { get; set; }

        /// <summary>
        /// Specifies the algorithm that secures the data exchange between the edge server and origin.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// The client certificate version status. Possible values: `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The public key's entity stored in the client certificate version's subject public key field.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The unique identifier of the client certificate version.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager's Mutual TLS Origin Keystore behavior.
        /// </summary>
        [Input("versionGuid")]
        public Input<string>? VersionGuid { get; set; }

        public MtlskeystoreClientCertificateAkamaiVersionArgs()
        {
        }
        public static new MtlskeystoreClientCertificateAkamaiVersionArgs Empty => new MtlskeystoreClientCertificateAkamaiVersionArgs();
    }
}
