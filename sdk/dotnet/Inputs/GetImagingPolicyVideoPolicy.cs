// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyVideoPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The breakpoint widths (in pixels) to use to create derivative images/videos.
        /// </summary>
        [Input("breakpoints")]
        public Inputs.GetImagingPolicyVideoPolicyBreakpointsArgs? Breakpoints { get; set; }

        [Input("hosts")]
        private List<string>? _hosts;

        /// <summary>
        /// Hosts that are allowed for image/video URLs within transformations or variables.
        /// </summary>
        public List<string> Hosts
        {
            get => _hosts ?? (_hosts = new List<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Dictates the output quality that are created for each resized video.
        /// </summary>
        [Input("output")]
        public Inputs.GetImagingPolicyVideoPolicyOutputArgs? Output { get; set; }

        /// <summary>
        /// The amount of time in seconds that the policy takes to rollout. During the rollout an increasing proportion of images/videos will begin to use the new policy instead of the cached images/videos from the previous version. This value has no effect on the staging network.
        /// </summary>
        [Input("rolloutDuration")]
        public string? RolloutDuration { get; set; }

        [Input("variables")]
        private List<Inputs.GetImagingPolicyVideoPolicyVariableArgs>? _variables;

        /// <summary>
        /// Declares variables for use within the policy. Any variable declared here can be invoked throughout transformations as a Variable object, so that you don't have to specify values separately. You can also pass in these variable names and values dynamically as query parameters in the image's request URL.
        /// </summary>
        public List<Inputs.GetImagingPolicyVideoPolicyVariableArgs> Variables
        {
            get => _variables ?? (_variables = new List<Inputs.GetImagingPolicyVideoPolicyVariableArgs>());
            set => _variables = value;
        }

        public GetImagingPolicyVideoPolicyArgs()
        {
        }
        public static new GetImagingPolicyVideoPolicyArgs Empty => new GetImagingPolicyVideoPolicyArgs();
    }
}
