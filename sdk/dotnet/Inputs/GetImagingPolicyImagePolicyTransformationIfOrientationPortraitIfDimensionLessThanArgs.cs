// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("appends")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppendInputArgs>? _appends;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppendInputArgs> Appends
        {
            get => _appends ?? (_appends = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAppendInputArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCropInputArgs>? _aspectCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCropInputArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanAspectCropInputArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCropInputArgs>? _crops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCropInputArgs> Crops
        {
            get => _crops ?? (_crops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanCropInputArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCropInputArgs>? _faceCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCropInputArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFaceCropInputArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCropInputArgs>? _featureCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCropInputArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFeatureCropInputArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFillInputArgs>? _fitAndFills;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFillInputArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanFitAndFillInputArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQueryInputArgs>? _imQueries;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQueryInputArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanImQueryInputArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCropInputArgs>? _regionOfInterestCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCropInputArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRegionOfInterestCropInputArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCropInputArgs>? _relativeCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCropInputArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRelativeCropInputArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResizeInputArgs>? _resizes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResizeInputArgs> Resizes
        {
            get => _resizes ?? (_resizes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanResizeInputArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotateInputArgs>? _rotates;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotateInputArgs> Rotates
        {
            get => _rotates ?? (_rotates = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanRotateInputArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScaleInputArgs>? _scales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScaleInputArgs> Scales
        {
            get => _scales ?? (_scales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanScaleInputArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShearsInputArgs>? _shears;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShearsInputArgs> Shears
        {
            get => _shears ?? (_shears = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanShearsInputArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrimInputArgs>? _trims;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrimInputArgs> Trims
        {
            get => _trims ?? (_trims = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanTrimInputArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanInputArgs Empty => new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionLessThanInputArgs();
    }
}
