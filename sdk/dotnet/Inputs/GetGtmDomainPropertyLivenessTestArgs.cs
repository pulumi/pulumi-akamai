// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetGtmDomainPropertyLivenessTestInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("alternateCaCertificates", required: true)]
        private InputList<string>? _alternateCaCertificates;

        /// <summary>
        /// List of alternate trust anchors (CA certificates)
        /// </summary>
        public InputList<string> AlternateCaCertificates
        {
            get => _alternateCaCertificates ?? (_alternateCaCertificates = new InputList<string>());
            set => _alternateCaCertificates = value;
        }

        /// <summary>
        /// If testObjectProtocol is DNS, DOH or DOT, requires an answer to the DNS query to be considered a success.
        /// </summary>
        [Input("answersRequired", required: true)]
        public Input<bool> AnswersRequired { get; set; } = null!;

        /// <summary>
        /// Disables warnings when non-standard ports are used.
        /// </summary>
        [Input("disableNonstandardPortWarning", required: true)]
        public Input<bool> DisableNonstandardPortWarning { get; set; } = null!;

        /// <summary>
        /// Disables the liveness test.
        /// </summary>
        [Input("disabled", required: true)]
        public Input<bool> Disabled { get; set; } = null!;

        /// <summary>
        /// Specifies the score that's reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
        /// </summary>
        [Input("errorPenalty", required: true)]
        public Input<double> ErrorPenalty { get; set; } = null!;

        /// <summary>
        /// Treats a 3xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        [Input("httpError3xx", required: true)]
        public Input<bool> HttpError3xx { get; set; } = null!;

        /// <summary>
        /// Treats a 4xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        [Input("httpError4xx", required: true)]
        public Input<bool> HttpError4xx { get; set; } = null!;

        /// <summary>
        /// Treats a 5xx HTTP response as a failure if the testObjectProtocol is http, https or ftp.
        /// </summary>
        [Input("httpError5xx", required: true)]
        public Input<bool> HttpError5xx { get; set; } = null!;

        [Input("httpHeaders")]
        private InputList<Inputs.GetGtmDomainPropertyLivenessTestHttpHeaderInputArgs>? _httpHeaders;

        /// <summary>
        /// List of HTTP headers for the liveness test.
        /// </summary>
        public InputList<Inputs.GetGtmDomainPropertyLivenessTestHttpHeaderInputArgs> HttpHeaders
        {
            get => _httpHeaders ?? (_httpHeaders = new InputList<Inputs.GetGtmDomainPropertyLivenessTestHttpHeaderInputArgs>());
            set => _httpHeaders = value;
        }

        /// <summary>
        /// Contains HTTP method to send if the `testObjectProtocol` is `http` or `https`. Supported values are `TRACE`, `HEAD`, `OPTIONS`, `GET`, `PUT`, `POST`, `PATCH`, `DELETE`. When omitted or `null`, this value defaults to `GET`.
        /// </summary>
        [Input("httpMethod", required: true)]
        public Input<string> HttpMethod { get; set; } = null!;

        /// <summary>
        /// Contains Base64-encoded HTTP request body to send if the `testObjectProtocol` is `http` or `https`. When omitted or `null`, omits the request body from the request.
        /// </summary>
        [Input("httpRequestBody", required: true)]
        public Input<string> HttpRequestBody { get; set; } = null!;

        /// <summary>
        /// A descriptive name for the liveness test.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Validates the origin certificate. Applies only to tests with testObjectProtocol of https.
        /// </summary>
        [Input("peerCertificateVerification", required: true)]
        public Input<bool> PeerCertificateVerification { get; set; } = null!;

        /// <summary>
        /// Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
        /// </summary>
        [Input("pre2023SecurityPosture", required: true)]
        public Input<bool> Pre2023SecurityPosture { get; set; } = null!;

        /// <summary>
        /// Indicates that if testObjectProtocol is DNS, DOH or DOT, the DNS query is recursive.
        /// </summary>
        [Input("recursionRequested", required: true)]
        public Input<bool> RecursionRequested { get; set; } = null!;

        /// <summary>
        /// Specifies a request string.
        /// </summary>
        [Input("requestString", required: true)]
        public Input<string> RequestString { get; set; } = null!;

        /// <summary>
        /// Specifies the query type, if testObjectProtocol is DNS.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// Specifies a response string.
        /// </summary>
        [Input("responseString", required: true)]
        public Input<string> ResponseString { get; set; } = null!;

        /// <summary>
        /// Indicates a base64-encoded certificate.
        /// </summary>
        [Input("sslClientCertificate", required: true)]
        public Input<string> SslClientCertificate { get; set; } = null!;

        /// <summary>
        /// Indicates a base64-encoded private key.
        /// </summary>
        [Input("sslClientPrivateKey", required: true)]
        public Input<string> SslClientPrivateKey { get; set; } = null!;

        /// <summary>
        /// Indicates the interval at which the liveness test is run, in seconds.
        /// </summary>
        [Input("testInterval", required: true)]
        public Input<int> TestInterval { get; set; } = null!;

        /// <summary>
        /// Specifies the static text that acts as a stand-in for the data that you're sending on the network.
        /// </summary>
        [Input("testObject", required: true)]
        public Input<string> TestObject { get; set; } = null!;

        /// <summary>
        /// Specifies the test object's password.
        /// </summary>
        [Input("testObjectPassword", required: true)]
        public Input<string> TestObjectPassword { get; set; } = null!;

        /// <summary>
        /// Specifies the port number for the testObject.
        /// </summary>
        [Input("testObjectPort", required: true)]
        public Input<int> TestObjectPort { get; set; } = null!;

        /// <summary>
        /// Specifies the test protocol.
        /// </summary>
        [Input("testObjectProtocol", required: true)]
        public Input<string> TestObjectProtocol { get; set; } = null!;

        /// <summary>
        /// A descriptive name for the testObject.
        /// </summary>
        [Input("testObjectUsername", required: true)]
        public Input<string> TestObjectUsername { get; set; } = null!;

        /// <summary>
        /// Specifies the duration of the liveness test before it fails.
        /// </summary>
        [Input("testTimeout", required: true)]
        public Input<double> TestTimeout { get; set; } = null!;

        /// <summary>
        /// Specifies the timeout penalty score.
        /// </summary>
        [Input("timeoutPenalty", required: true)]
        public Input<double> TimeoutPenalty { get; set; } = null!;

        public GetGtmDomainPropertyLivenessTestInputArgs()
        {
        }
        public static new GetGtmDomainPropertyLivenessTestInputArgs Empty => new GetGtmDomainPropertyLivenessTestInputArgs();
    }
}
