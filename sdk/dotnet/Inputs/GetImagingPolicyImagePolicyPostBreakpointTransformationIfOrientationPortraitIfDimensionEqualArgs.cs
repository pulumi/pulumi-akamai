// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualInputArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionEqualInputArgs();
    }
}
