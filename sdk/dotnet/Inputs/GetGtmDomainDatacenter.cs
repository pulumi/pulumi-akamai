// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetGtmDomainDatacenterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the city where the data center is located.
        /// </summary>
        [Input("city", required: true)]
        public string City { get; set; } = null!;

        /// <summary>
        /// Identifies the data center's ID of which this data center is a clone.
        /// </summary>
        [Input("cloneOf", required: true)]
        public int CloneOf { get; set; }

        /// <summary>
        /// Balances load between two or more servers in a cloud environment.
        /// </summary>
        [Input("cloudServerHostHeaderOverride", required: true)]
        public bool CloudServerHostHeaderOverride { get; set; }

        /// <summary>
        /// Balances load between two or more servers in a cloud environment.
        /// </summary>
        [Input("cloudServerTargeting", required: true)]
        public bool CloudServerTargeting { get; set; }

        /// <summary>
        /// A two-letter code that specifies the continent where the data center maps to.
        /// </summary>
        [Input("continent", required: true)]
        public string Continent { get; set; } = null!;

        /// <summary>
        /// A two-letter ISO 3166 country code that specifies the country where the data center is located.
        /// </summary>
        [Input("country", required: true)]
        public string Country { get; set; } = null!;

        /// <summary>
        /// A unique identifier for an existing data center in the domain.
        /// </summary>
        [Input("datacenterId", required: true)]
        public int DatacenterId { get; set; }

        [Input("defaultLoadObjects")]
        private List<Inputs.GetGtmDomainDatacenterDefaultLoadObjectArgs>? _defaultLoadObjects;

        /// <summary>
        /// Specifies the load reporting interface between you and the GTM system.
        /// </summary>
        public List<Inputs.GetGtmDomainDatacenterDefaultLoadObjectArgs> DefaultLoadObjects
        {
            get => _defaultLoadObjects ?? (_defaultLoadObjects = new List<Inputs.GetGtmDomainDatacenterDefaultLoadObjectArgs>());
            set => _defaultLoadObjects = value;
        }

        /// <summary>
        /// Specifies the geographic latitude of the data center's position.
        /// </summary>
        [Input("latitude", required: true)]
        public double Latitude { get; set; }

        [Input("links")]
        private List<Inputs.GetGtmDomainDatacenterLinkArgs>? _links;

        /// <summary>
        /// Provides a URL path that allows direct navigation to a data center.
        /// </summary>
        public List<Inputs.GetGtmDomainDatacenterLinkArgs> Links
        {
            get => _links ?? (_links = new List<Inputs.GetGtmDomainDatacenterLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Specifies the geographic longitude of the data center's position.
        /// </summary>
        [Input("longitude", required: true)]
        public double Longitude { get; set; }

        /// <summary>
        /// A descriptive label for the datacenter.
        /// </summary>
        [Input("nickname", required: true)]
        public string Nickname { get; set; } = null!;

        /// <summary>
        /// Influences the score for a datacenter.
        /// </summary>
        [Input("scorePenalty", required: true)]
        public int ScorePenalty { get; set; }

        /// <summary>
        /// The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
        /// </summary>
        [Input("serverMonitorPool", required: true)]
        public string ServerMonitorPool { get; set; } = null!;

        /// <summary>
        /// Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
        /// </summary>
        [Input("stateOrProvince", required: true)]
        public string StateOrProvince { get; set; } = null!;

        /// <summary>
        /// Indicates whether or not the data center is virtual or physical.
        /// </summary>
        [Input("virtual", required: true)]
        public bool Virtual { get; set; }

        public GetGtmDomainDatacenterArgs()
        {
        }
        public static new GetGtmDomainDatacenterArgs Empty => new GetGtmDomainDatacenterArgs();
    }
}
