// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationInputArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionEqualCompoundTransformationInputArgs();
    }
}
