// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetPropertyRulesBuilderRulesV20241021BehaviorAdaptiveAccelerationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
        /// </summary>
        [Input("abLogic")]
        public string? AbLogic { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("abTesting")]
        public string? AbTesting { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("compression")]
        public string? Compression { get; set; }

        /// <summary>
        /// This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
        /// </summary>
        [Input("cookieName")]
        public string? CookieName { get; set; }

        /// <summary>
        /// Applies Brotli compression, converting your origin content to cache on edge servers.
        /// </summary>
        [Input("enableBrotliCompression")]
        public bool? EnableBrotliCompression { get; set; }

        /// <summary>
        /// Applies Brotli compression to non-cacheable content.
        /// </summary>
        [Input("enableForNoncacheable")]
        public bool? EnableForNoncacheable { get; set; }

        /// <summary>
        /// Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
        /// </summary>
        [Input("enablePreconnect")]
        public bool? EnablePreconnect { get; set; }

        /// <summary>
        /// Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it's waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
        /// </summary>
        [Input("enablePush")]
        public bool? EnablePush { get; set; }

        /// <summary>
        /// Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
        /// </summary>
        [Input("enableRo")]
        public bool? EnableRo { get; set; }

        [Input("intelligentEarlyHints")]
        public bool? IntelligentEarlyHints { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("intelligentEarlyHintsTitle")]
        public string? IntelligentEarlyHintsTitle { get; set; }

        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        [Input("locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
        /// </summary>
        [Input("preloadEnable")]
        public bool? PreloadEnable { get; set; }

        /// <summary>
        /// The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
        /// </summary>
        [Input("source")]
        public string? Source { get; set; }

        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        [Input("templateUuid")]
        public string? TemplateUuid { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("titleBrotli")]
        public string? TitleBrotli { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("titleHttp2ServerPush")]
        public string? TitleHttp2ServerPush { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("titlePreconnect")]
        public string? TitlePreconnect { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("titlePreload")]
        public string? TitlePreload { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("titleRo")]
        public string? TitleRo { get; set; }

        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        [Input("uuid")]
        public string? Uuid { get; set; }

        public GetPropertyRulesBuilderRulesV20241021BehaviorAdaptiveAccelerationArgs()
        {
        }
        public static new GetPropertyRulesBuilderRulesV20241021BehaviorAdaptiveAccelerationArgs Empty => new GetPropertyRulesBuilderRulesV20241021BehaviorAdaptiveAccelerationArgs();
    }
}
