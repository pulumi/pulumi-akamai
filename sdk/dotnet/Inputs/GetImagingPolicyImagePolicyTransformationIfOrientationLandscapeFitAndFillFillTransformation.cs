// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationArgs Empty => new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeFitAndFillFillTransformationArgs();
    }
}
