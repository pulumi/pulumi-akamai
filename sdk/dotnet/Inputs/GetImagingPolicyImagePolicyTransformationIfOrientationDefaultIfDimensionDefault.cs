// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultArgs Empty => new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionDefaultArgs();
    }
}
