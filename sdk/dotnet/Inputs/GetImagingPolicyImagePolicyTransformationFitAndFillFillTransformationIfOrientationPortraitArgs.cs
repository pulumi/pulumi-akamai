// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("appends")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppendInputArgs>? _appends;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppendInputArgs> Appends
        {
            get => _appends ?? (_appends = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAppendInputArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAspectCropInputArgs>? _aspectCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAspectCropInputArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitAspectCropInputArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCropInputArgs>? _crops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCropInputArgs> Crops
        {
            get => _crops ?? (_crops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitCropInputArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFaceCropInputArgs>? _faceCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFaceCropInputArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFaceCropInputArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFeatureCropInputArgs>? _featureCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFeatureCropInputArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFeatureCropInputArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFillInputArgs>? _fitAndFills;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFillInputArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitFitAndFillInputArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitImQueryInputArgs>? _imQueries;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitImQueryInputArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitImQueryInputArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCropInputArgs>? _regionOfInterestCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCropInputArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRegionOfInterestCropInputArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRelativeCropInputArgs>? _relativeCrops;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRelativeCropInputArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRelativeCropInputArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitResizeInputArgs>? _resizes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitResizeInputArgs> Resizes
        {
            get => _resizes ?? (_resizes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitResizeInputArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRotateInputArgs>? _rotates;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRotateInputArgs> Rotates
        {
            get => _rotates ?? (_rotates = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitRotateInputArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitScaleInputArgs>? _scales;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitScaleInputArgs> Scales
        {
            get => _scales ?? (_scales = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitScaleInputArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitShearsInputArgs>? _shears;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitShearsInputArgs> Shears
        {
            get => _shears ?? (_shears = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitShearsInputArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitTrimInputArgs>? _trims;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitTrimInputArgs> Trims
        {
            get => _trims ?? (_trims = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitTrimInputArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitInputArgs Empty => new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitInputArgs();
    }
}
