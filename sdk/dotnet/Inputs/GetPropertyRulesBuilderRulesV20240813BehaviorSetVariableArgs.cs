// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetPropertyRulesBuilderRulesV20240813BehaviorSetVariableInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the algorithm to apply.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// Enabling this makes all matches case sensitive.
        /// </summary>
        [Input("caseSensitive")]
        public Input<bool>? CaseSensitive { get; set; }

        /// <summary>
        /// Specifies the certificate's content.
        /// </summary>
        [Input("certificateFieldName")]
        public Input<string>? CertificateFieldName { get; set; }

        /// <summary>
        /// Specifies the name of the cookie to extract.
        /// </summary>
        [Input("cookieName")]
        public Input<string>? CookieName { get; set; }

        /// <summary>
        /// Specifies the client device attribute. Possible values specify information about the client device, including device type, size and browser. For details on fields, see `Device Characterization`.
        /// </summary>
        [Input("deviceProfile")]
        public Input<string>? DeviceProfile { get; set; }

        /// <summary>
        /// Specifies the encryption hex key. For `ALG_3DES` it needs to be 48 characters long, 32 characters for `ALG_AES128`, and 64 characters for `ALG_AES256`.
        /// </summary>
        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        /// <summary>
        /// Specifies the encryption mode.
        /// </summary>
        [Input("encryptionMode")]
        public Input<string>? EncryptionMode { get; set; }

        /// <summary>
        /// Specifies the zero-based character offset at the end of the substring, without including the character at that index position. Negative indexes specify the offset from the end of the string.
        /// </summary>
        [Input("endIndex")]
        public Input<int>? EndIndex { get; set; }

        /// <summary>
        /// Specifies characters `not` to encode, possibly overriding the default set.
        /// </summary>
        [Input("exceptChars")]
        public Input<string>? ExceptChars { get; set; }

        /// <summary>
        /// This specifies from where to get the value.
        /// </summary>
        [Input("extractLocation")]
        public Input<string>? ExtractLocation { get; set; }

        /// <summary>
        /// Specifies characters to encode, possibly overriding the default set.
        /// </summary>
        [Input("forceChars")]
        public Input<string>? ForceChars { get; set; }

        /// <summary>
        /// Specifies an optional format string for the conversion, using format codes such as `%m/%d/%y` as specified by `strftime`. A blank value defaults to RFC-2616 format.
        /// </summary>
        [Input("formatString")]
        public Input<string>? FormatString { get; set; }

        /// <summary>
        /// This specifies the type of value to generate.
        /// </summary>
        [Input("generator")]
        public Input<string>? Generator { get; set; }

        /// <summary>
        /// Replaces all matches in the string, not just the first.
        /// </summary>
        [Input("globalSubstitution")]
        public Input<bool>? GlobalSubstitution { get; set; }

        /// <summary>
        /// Specifies the case-insensitive name of the HTTP header to extract.
        /// </summary>
        [Input("headerName")]
        public Input<string>? HeaderName { get; set; }

        /// <summary>
        /// Specifies the algorithm to use to generate the base64-encoded digest.
        /// </summary>
        [Input("hmacAlgorithm")]
        public Input<string>? HmacAlgorithm { get; set; }

        /// <summary>
        /// Specifies the secret to use in generating the base64-encoded digest.
        /// </summary>
        [Input("hmacKey")]
        public Input<string>? HmacKey { get; set; }

        /// <summary>
        /// Specifies a one-time number as an initialization vector.  It needs to be 15 characters long for `ALG_3DES`, and 32 characters for both `ALG_AES128` and `ALG_AES256`.
        /// </summary>
        [Input("initializationVector")]
        public Input<string>? InitializationVector { get; set; }

        /// <summary>
        /// Specifies the IP version under which a subnet mask generates.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// Specifies the prefix of the IPV4 address, a value between 0 and 32.
        /// </summary>
        [Input("ipv4Prefix")]
        public Input<int>? Ipv4Prefix { get; set; }

        /// <summary>
        /// Specifies the prefix of the IPV6 address, a value between 0 and 128.
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<int>? Ipv6Prefix { get; set; }

        /// <summary>
        /// Specifies the `X-Akamai-Edgescape` header's field name. Possible values specify basic geolocation, various geographic standards, and information about the client's network. For details on EdgeScape header fields, see the `EdgeScape User Guide`.
        /// </summary>
        [Input("locationId")]
        public Input<string>? LocationId { get; set; }

        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Specifies a maximum value for the generated integer.
        /// </summary>
        [Input("max")]
        public Input<int>? Max { get; set; }

        /// <summary>
        /// Specifies the upper bound of the random number.
        /// </summary>
        [Input("maxRandomNumber")]
        public Input<int>? MaxRandomNumber { get; set; }

        /// <summary>
        /// Specifies a minimum value for the generated integer.
        /// </summary>
        [Input("min")]
        public Input<int>? Min { get; set; }

        /// <summary>
        /// Specifies the lower bound of the random number.
        /// </summary>
        [Input("minRandomNumber")]
        public Input<int>? MinRandomNumber { get; set; }

        /// <summary>
        /// Specifies the one-time number used for encryption.
        /// </summary>
        [Input("nonce")]
        public Input<string>? Nonce { get; set; }

        /// <summary>
        /// Specifies the number of random hex bytes to generate.
        /// </summary>
        [Input("numberOfBytes")]
        public Input<int>? NumberOfBytes { get; set; }

        /// <summary>
        /// Specifies an additional operand when the `transform` function is set to various arithmetic functions (`ADD`, `SUBTRACT`, `MULTIPLY`, `DIVIDE`, or `MODULO`) or bitwise functions (`BITWISE_AND`, `BITWISE_OR`, or `BITWISE_XOR`).
        /// </summary>
        [Input("operandOne")]
        public Input<string>? OperandOne { get; set; }

        /// <summary>
        /// Extracts the value for the specified parameter name from a string that contains key/value pairs. (Use `separator` below to parse them.)
        /// </summary>
        [Input("paramName")]
        public Input<string>? ParamName { get; set; }

        /// <summary>
        /// This specifies a portion of the path.  The indexing starts from `1`, so a value of `/path/to/nested/filename.html` and an offset of `1` yields `path`, and `3` yields `nested`. Negative indexes offset from the right, so `-2` also yields `nested`.
        /// </summary>
        [Input("pathComponentOffset")]
        public Input<string>? PathComponentOffset { get; set; }

        /// <summary>
        /// Specifies a number of random bytes to prepend to the key.
        /// </summary>
        [Input("prependBytes")]
        public Input<bool>? PrependBytes { get; set; }

        /// <summary>
        /// Specifies the name of the query parameter from which to extract the value.
        /// </summary>
        [Input("queryParameterName")]
        public Input<string>? QueryParameterName { get; set; }

        /// <summary>
        /// Specifies the regular expression pattern (PCRE) to match the value.
        /// </summary>
        [Input("regex")]
        public Input<string>? Regex { get; set; }

        /// <summary>
        /// Specifies the replacement string. Reinsert grouped items from the match into the replacement using `$1`, `$2` ... `$n`.
        /// </summary>
        [Input("replacement")]
        public Input<string>? Replacement { get; set; }

        /// <summary>
        /// Specifies the case-insensitive name of the HTTP header to extract.
        /// </summary>
        [Input("responseHeaderName")]
        public Input<string>? ResponseHeaderName { get; set; }

        /// <summary>
        /// Specifies the character that separates pairs of values within the string.
        /// </summary>
        [Input("separator")]
        public Input<string>? Separator { get; set; }

        /// <summary>
        /// Specifies the name of the origin's `Set-Cookie` response header.
        /// </summary>
        [Input("setCookieName")]
        public Input<string>? SetCookieName { get; set; }

        /// <summary>
        /// Specifies the zero-based character offset at the start of the substring. Negative indexes specify the offset from the end of the string.
        /// </summary>
        [Input("startIndex")]
        public Input<int>? StartIndex { get; set; }

        /// <summary>
        /// Specifies a substring for which the returned value represents a zero-based offset of where it appears in the original string, or `-1` if there's no match.
        /// </summary>
        [Input("subString")]
        public Input<string>? SubString { get; set; }

        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        [Input("templateUuid")]
        public Input<string>? TemplateUuid { get; set; }

        /// <summary>
        /// Specifies a function to transform the value. For more details on each transform function, see `Set Variable: Operations`.
        /// </summary>
        [Input("transform")]
        public Input<string>? Transform { get; set; }

        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// Determines how you want to set the value.
        /// </summary>
        [Input("valueSource")]
        public Input<string>? ValueSource { get; set; }

        /// <summary>
        /// Specifies the predeclared root name of the variable to modify.  When you declare a variable name such as `VAR`, its name is preprended with `PMUSER_` and accessible in a `user` namespace, so that you invoke it in subsequent text fields within the rule tree as `{{user.PMUSER_VAR}}`. In deployed `XML metadata`, it appears as `%(PMUSER_VAR)`.
        /// </summary>
        [Input("variableName")]
        public Input<string>? VariableName { get; set; }

        /// <summary>
        /// This directly specifies the value to assign to the variable. The expression may include a mix of static text and other variables, such as `new_filename.{{builtin.AK_EXTENSION}}` to embed a system variable.
        /// </summary>
        [Input("variableValue")]
        public Input<string>? VariableValue { get; set; }

        public GetPropertyRulesBuilderRulesV20240813BehaviorSetVariableInputArgs()
        {
        }
        public static new GetPropertyRulesBuilderRulesV20240813BehaviorSetVariableInputArgs Empty => new GetPropertyRulesBuilderRulesV20240813BehaviorSetVariableInputArgs();
    }
}
