// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("circleShapes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeInputArgs>? _circleShapes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeInputArgs> CircleShapes
        {
            get => _circleShapes ?? (_circleShapes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeInputArgs>());
            set => _circleShapes = value;
        }

        [Input("pointShapes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeInputArgs>? _pointShapes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeInputArgs> PointShapes
        {
            get => _pointShapes ?? (_pointShapes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeInputArgs>());
            set => _pointShapes = value;
        }

        [Input("polygonShapes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeInputArgs>? _polygonShapes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeInputArgs> PolygonShapes
        {
            get => _polygonShapes ?? (_polygonShapes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeInputArgs>());
            set => _polygonShapes = value;
        }

        [Input("rectangleShapes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeInputArgs>? _rectangleShapes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeInputArgs> RectangleShapes
        {
            get => _rectangleShapes ?? (_rectangleShapes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeInputArgs>());
            set => _rectangleShapes = value;
        }

        [Input("unionShapes")]
        private InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeInputArgs>? _unionShapes;
        public InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeInputArgs> UnionShapes
        {
            get => _unionShapes ?? (_unionShapes = new InputList<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeInputArgs>());
            set => _unionShapes = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestInputArgs Empty => new GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestInputArgs();
    }
}
