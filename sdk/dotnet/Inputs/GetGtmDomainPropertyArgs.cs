// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetGtmDomainPropertyInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a backup CNAME.
        /// </summary>
        [Input("backupCname", required: true)]
        public Input<string> BackupCname { get; set; } = null!;

        /// <summary>
        /// Specifies a backup IP.
        /// </summary>
        [Input("backupIp", required: true)]
        public Input<string> BackupIp { get; set; } = null!;

        /// <summary>
        /// Indicates whether download score based load balancing is enabled.
        /// </summary>
        [Input("balanceByDownloadScore", required: true)]
        public Input<bool> BalanceByDownloadScore { get; set; } = null!;

        /// <summary>
        /// Indicates the fully qualified name aliased to a particular property.
        /// </summary>
        [Input("cname", required: true)]
        public Input<string> Cname { get; set; } = null!;

        /// <summary>
        /// Descriptive comments for the property.
        /// </summary>
        [Input("comments", required: true)]
        public Input<string> Comments { get; set; } = null!;

        /// <summary>
        /// Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing.
        /// </summary>
        [Input("dynamicTtl", required: true)]
        public Input<int> DynamicTtl { get; set; } = null!;

        /// <summary>
        /// Specifies the failback delay in seconds.
        /// </summary>
        [Input("failbackDelay", required: true)]
        public Input<int> FailbackDelay { get; set; } = null!;

        /// <summary>
        /// Specifies the failover delay in seconds.
        /// </summary>
        [Input("failoverDelay", required: true)]
        public Input<int> FailoverDelay { get; set; } = null!;

        /// <summary>
        /// Whether an alternate way to collect load feedback from a GTM Performance domain is enabled.
        /// </summary>
        [Input("ghostDemandReporting", required: true)]
        public Input<bool> GhostDemandReporting { get; set; } = null!;

        /// <summary>
        /// Indicates the limit for the number of live IPs handed out to a DNS request.
        /// </summary>
        [Input("handoutLimit", required: true)]
        public Input<int> HandoutLimit { get; set; } = null!;

        /// <summary>
        /// Specifies how IPs are returned when more than one IP is alive and available.
        /// </summary>
        [Input("handoutMode", required: true)]
        public Input<string> HandoutMode { get; set; } = null!;

        /// <summary>
        /// Defines the absolute limit beyond which IPs are declared unhealthy.
        /// </summary>
        [Input("healthMax", required: true)]
        public Input<double> HealthMax { get; set; } = null!;

        /// <summary>
        /// Configures a cutoff value that is computed from the median scores.
        /// </summary>
        [Input("healthMultiplier", required: true)]
        public Input<double> HealthMultiplier { get; set; } = null!;

        /// <summary>
        /// Configures a cutoff value that is computed from the median scores.
        /// </summary>
        [Input("healthThreshold", required: true)]
        public Input<double> HealthThreshold { get; set; } = null!;

        /// <summary>
        /// Indicates the type of IP address handed out by a property.
        /// </summary>
        [Input("ipv6", required: true)]
        public Input<bool> Ipv6 { get; set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp that indicates when the property was last changed.
        /// </summary>
        [Input("lastModified", required: true)]
        public Input<string> LastModified { get; set; } = null!;

        [Input("links")]
        private InputList<Inputs.GetGtmDomainPropertyLinkInputArgs>? _links;

        /// <summary>
        /// Provides a URL path that allows direct navigation to the property.
        /// </summary>
        public InputList<Inputs.GetGtmDomainPropertyLinkInputArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.GetGtmDomainPropertyLinkInputArgs>());
            set => _links = value;
        }

        [Input("livenessTests")]
        private InputList<Inputs.GetGtmDomainPropertyLivenessTestInputArgs>? _livenessTests;

        /// <summary>
        /// Contains information about liveness tests.
        /// </summary>
        public InputList<Inputs.GetGtmDomainPropertyLivenessTestInputArgs> LivenessTests
        {
            get => _livenessTests ?? (_livenessTests = new InputList<Inputs.GetGtmDomainPropertyLivenessTestInputArgs>());
            set => _livenessTests = value;
        }

        /// <summary>
        /// Indicates the percent of load imbalance factor for the domain.
        /// </summary>
        [Input("loadImbalancePercentage", required: true)]
        public Input<double> LoadImbalancePercentage { get; set; } = null!;

        /// <summary>
        /// A descriptive label for a geographic or a CIDR map that's required if the property is either geographic or cidrmapping.
        /// </summary>
        [Input("mapName", required: true)]
        public Input<string> MapName { get; set; } = null!;

        /// <summary>
        /// For performance domains, this specifies a penalty value that's added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
        /// </summary>
        [Input("maxUnreachablePenalty", required: true)]
        public Input<int> MaxUnreachablePenalty { get; set; } = null!;

        /// <summary>
        /// Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
        /// </summary>
        [Input("minLiveFraction", required: true)]
        public Input<double> MinLiveFraction { get; set; } = null!;

        /// <summary>
        /// A descriptive label for the property.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
        /// </summary>
        [Input("scoreAggregationType", required: true)]
        public Input<string> ScoreAggregationType { get; set; } = null!;

        [Input("staticRrSets")]
        private InputList<Inputs.GetGtmDomainPropertyStaticRrSetInputArgs>? _staticRrSets;

        /// <summary>
        /// Contains static recordsets.
        /// </summary>
        public InputList<Inputs.GetGtmDomainPropertyStaticRrSetInputArgs> StaticRrSets
        {
            get => _staticRrSets ?? (_staticRrSets = new InputList<Inputs.GetGtmDomainPropertyStaticRrSetInputArgs>());
            set => _staticRrSets = value;
        }

        /// <summary>
        /// Specifies the TTL in seconds for static resource records that don't change based on the requesting name server IP.
        /// </summary>
        [Input("staticTtl", required: true)]
        public Input<int> StaticTtl { get; set; } = null!;

        /// <summary>
        /// Specifies a percentage used to configure data center affinity.
        /// </summary>
        [Input("sticknessBonusConstant", required: true)]
        public Input<int> SticknessBonusConstant { get; set; } = null!;

        /// <summary>
        /// Specifies a percentage used to configure data center affinity.
        /// </summary>
        [Input("sticknessBonusPercentage", required: true)]
        public Input<int> SticknessBonusPercentage { get; set; } = null!;

        [Input("trafficTargets")]
        private InputList<Inputs.GetGtmDomainPropertyTrafficTargetInputArgs>? _trafficTargets;

        /// <summary>
        /// Traffic targets for the property.
        /// </summary>
        public InputList<Inputs.GetGtmDomainPropertyTrafficTargetInputArgs> TrafficTargets
        {
            get => _trafficTargets ?? (_trafficTargets = new InputList<Inputs.GetGtmDomainPropertyTrafficTargetInputArgs>());
            set => _trafficTargets = value;
        }

        /// <summary>
        /// Specifies the load balancing behvior for the property.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// For performance domains, this specifies a penalty value that's added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
        /// </summary>
        [Input("unreachableThreshold", required: true)]
        public Input<double> UnreachableThreshold { get; set; } = null!;

        /// <summary>
        /// For load-feedback domains only, this specifies that you want GTM to automatically compute target load.
        /// </summary>
        [Input("useComputedTargets", required: true)]
        public Input<bool> UseComputedTargets { get; set; } = null!;

        /// <summary>
        /// For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv4; the default value is 32 (the entire address).
        /// </summary>
        [Input("weightedHashBitsForIpv4", required: true)]
        public Input<int> WeightedHashBitsForIpv4 { get; set; } = null!;

        /// <summary>
        /// For weighted hashed properties, how many leading bits of the client nameserver IP address to include when computing a hash for picking a datacenter for a client nameserver using IPv6; the default value is 128 (the entire address).
        /// </summary>
        [Input("weightedHashBitsForIpv6", required: true)]
        public Input<int> WeightedHashBitsForIpv6 { get; set; } = null!;

        public GetGtmDomainPropertyInputArgs()
        {
        }
        public static new GetGtmDomainPropertyInputArgs Empty => new GetGtmDomainPropertyInputArgs();
    }
}
