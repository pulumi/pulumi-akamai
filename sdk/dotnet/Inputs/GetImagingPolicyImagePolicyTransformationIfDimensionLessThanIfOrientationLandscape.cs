// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeArgs Empty => new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfOrientationLandscapeArgs();
    }
}
