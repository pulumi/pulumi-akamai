// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeArgs : global::Pulumi.InvokeArgs
    {
        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeContrastArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeOpacityArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfOrientationLandscapeArgs();
    }
}
