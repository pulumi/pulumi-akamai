// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitArgs : global::Pulumi.InvokeArgs
    {
        [Input("appends")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppendArgs>? _appends;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppendArgs> Appends
        {
            get => _appends ?? (_appends = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAppendArgs>());
            set => _appends = value;
        }

        [Input("aspectCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCropArgs>? _aspectCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCropArgs> AspectCrops
        {
            get => _aspectCrops ?? (_aspectCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitAspectCropArgs>());
            set => _aspectCrops = value;
        }

        [Input("backgroundColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColorArgs>? _backgroundColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColorArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBackgroundColorArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlurArgs>? _blurs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlurArgs> Blurs
        {
            get => _blurs ?? (_blurs = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitBlurArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKeyArgs>? _chromaKeys;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKeyArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitChromaKeyArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompositeArgs>? _composites;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompositeArgs> Composites
        {
            get => _composites ?? (_composites = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompositeArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompoundArgs>? _compounds;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompoundArgs> Compounds
        {
            get => _compounds ?? (_compounds = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCompoundArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrastArgs>? _contrasts;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrastArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitContrastArgs>());
            set => _contrasts = value;
        }

        [Input("crops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCropArgs>? _crops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCropArgs> Crops
        {
            get => _crops ?? (_crops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitCropArgs>());
            set => _crops = value;
        }

        [Input("faceCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCropArgs>? _faceCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCropArgs> FaceCrops
        {
            get => _faceCrops ?? (_faceCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFaceCropArgs>());
            set => _faceCrops = value;
        }

        [Input("featureCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCropArgs>? _featureCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCropArgs> FeatureCrops
        {
            get => _featureCrops ?? (_featureCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFeatureCropArgs>());
            set => _featureCrops = value;
        }

        [Input("fitAndFills")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFillArgs>? _fitAndFills;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFillArgs> FitAndFills
        {
            get => _fitAndFills ?? (_fitAndFills = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitFitAndFillArgs>());
            set => _fitAndFills = value;
        }

        [Input("goops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoopArgs>? _goops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoopArgs> Goops
        {
            get => _goops ?? (_goops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGoopArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscaleArgs>? _grayscales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscaleArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitGrayscaleArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHslArgs>? _hsls;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHslArgs> Hsls
        {
            get => _hsls ?? (_hsls = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHslArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsvArgs>? _hsvs;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsvArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitHsvArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionArgs>? _ifDimensions;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfDimensionArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationArgs>? _ifOrientations;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitIfOrientationArgs>());
            set => _ifOrientations = value;
        }

        [Input("imQueries")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQueryArgs>? _imQueries;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQueryArgs> ImQueries
        {
            get => _imQueries ?? (_imQueries = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitImQueryArgs>());
            set => _imQueries = value;
        }

        [Input("maxColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColorArgs>? _maxColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColorArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMaxColorArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirrorArgs>? _mirrors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirrorArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMirrorArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHueArgs>? _monoHues;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHueArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitMonoHueArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacityArgs>? _opacities;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacityArgs> Opacities
        {
            get => _opacities ?? (_opacities = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitOpacityArgs>());
            set => _opacities = value;
        }

        [Input("regionOfInterestCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCropArgs>? _regionOfInterestCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCropArgs> RegionOfInterestCrops
        {
            get => _regionOfInterestCrops ?? (_regionOfInterestCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRegionOfInterestCropArgs>());
            set => _regionOfInterestCrops = value;
        }

        [Input("relativeCrops")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCropArgs>? _relativeCrops;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCropArgs> RelativeCrops
        {
            get => _relativeCrops ?? (_relativeCrops = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRelativeCropArgs>());
            set => _relativeCrops = value;
        }

        [Input("removeColors")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColorArgs>? _removeColors;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColorArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRemoveColorArgs>());
            set => _removeColors = value;
        }

        [Input("resizes")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResizeArgs>? _resizes;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResizeArgs> Resizes
        {
            get => _resizes ?? (_resizes = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitResizeArgs>());
            set => _resizes = value;
        }

        [Input("rotates")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotateArgs>? _rotates;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotateArgs> Rotates
        {
            get => _rotates ?? (_rotates = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitRotateArgs>());
            set => _rotates = value;
        }

        [Input("scales")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScaleArgs>? _scales;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScaleArgs> Scales
        {
            get => _scales ?? (_scales = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitScaleArgs>());
            set => _scales = value;
        }

        [Input("shears")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShearsArgs>? _shears;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShearsArgs> Shears
        {
            get => _shears ?? (_shears = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitShearsArgs>());
            set => _shears = value;
        }

        [Input("trims")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrimArgs>? _trims;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrimArgs> Trims
        {
            get => _trims ?? (_trims = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitTrimArgs>());
            set => _trims = value;
        }

        [Input("unsharpMasks")]
        private List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMaskArgs>? _unsharpMasks;
        public List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMaskArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new List<Inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitUnsharpMaskArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitArgs Empty => new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationPortraitArgs();
    }
}
