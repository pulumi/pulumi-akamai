// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyOutputArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Override the quality of image to serve when Image &amp; Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of images for users with faster connections.
        /// </summary>
        [Input("adaptiveQuality")]
        public string? AdaptiveQuality { get; set; }

        [Input("allowedFormats")]
        private List<string>? _allowedFormats;

        /// <summary>
        /// The graphics file formats allowed for browser specific results.
        /// </summary>
        public List<string> AllowedFormats
        {
            get => _allowedFormats ?? (_allowedFormats = new List<string>());
            set => _allowedFormats = value;
        }

        [Input("forcedFormats")]
        private List<string>? _forcedFormats;

        /// <summary>
        /// The forced extra formats for the `imFormat` query parameter, which requests a specific browser type. By default, Image and Video Manager detects the browser and returns the appropriate image.
        /// </summary>
        public List<string> ForcedFormats
        {
            get => _forcedFormats ?? (_forcedFormats = new List<string>());
            set => _forcedFormats = value;
        }

        /// <summary>
        /// Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        /// </summary>
        [Input("perceptualQuality")]
        public string? PerceptualQuality { get; set; }

        /// <summary>
        /// Only applies with perceptualQuality set. Sets a minimum image quality to respect when using perceptual quality. Perceptual quality will not reduce the quality below this value even if it determines the compressed image to be acceptably visually similar.
        /// </summary>
        [Input("perceptualQualityFloor")]
        public string? PerceptualQualityFloor { get; set; }

        /// <summary>
        /// Mutually exclusive with quality. The perceptual quality to use when comparing resulting images, which overrides the `quality` setting. Perceptual quality tunes each image format's quality parameter dynamically based on the human-perceived quality of the output image. This can result in better byte savings (as compared to using regular quality) as many images can be encoded at a much lower quality without compromising perception of the image. In addition, certain images may need to be encoded at a slightly higher quality in order to maintain human-perceived quality. Values are tiered `high`, `mediumHigh`, `medium`, `mediumLow`, or `low`.
        /// </summary>
        [Input("perceptualQualityVar")]
        public string? PerceptualQualityVar { get; set; }

        /// <summary>
        /// Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        /// </summary>
        [Input("quality")]
        public string? Quality { get; set; }

        /// <summary>
        /// Mutually exclusive with perceptualQuality, used by default if neither is specified. The chosen quality of the output images. Using a quality value from 1-100 resembles JPEG quality across output formats.
        /// </summary>
        [Input("qualityVar")]
        public string? QualityVar { get; set; }

        public GetImagingPolicyImagePolicyOutputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyOutputArgs Empty => new GetImagingPolicyImagePolicyOutputArgs();
    }
}
