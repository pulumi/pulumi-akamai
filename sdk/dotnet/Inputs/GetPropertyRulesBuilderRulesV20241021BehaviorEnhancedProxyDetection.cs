// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedProxyDetectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("anonymousVpn")]
        public string? AnonymousVpn { get; set; }

        /// <summary>
        /// Specifies how to field the proxy request.
        /// </summary>
        [Input("bestPracticeAction")]
        public string? BestPracticeAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect requests.
        /// </summary>
        [Input("bestPracticeRedirecturl")]
        public string? BestPracticeRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from anonymous VPNs.
        /// </summary>
        [Input("detectAnonymousVpn")]
        public bool? DetectAnonymousVpn { get; set; }

        /// <summary>
        /// Specifies how to field anonymous VPN requests.
        /// </summary>
        [Input("detectAnonymousVpnAction")]
        public string? DetectAnonymousVpnAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect anonymous VPN requests.
        /// </summary>
        [Input("detectAnonymousVpnRedirecturl")]
        public string? DetectAnonymousVpnRedirecturl { get; set; }

        /// <summary>
        /// This detects requests from a hosting provider.
        /// </summary>
        [Input("detectHostingProvider")]
        public bool? DetectHostingProvider { get; set; }

        /// <summary>
        /// This specifies whether to `DENY`, `ALLOW`, or `REDIRECT` requests from hosting providers.
        /// </summary>
        [Input("detectHostingProviderAction")]
        public string? DetectHostingProviderAction { get; set; }

        /// <summary>
        /// This specifies the absolute URL to which to redirect requests from hosting providers.
        /// </summary>
        [Input("detectHostingProviderRedirecturl")]
        public string? DetectHostingProviderRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from public proxies.
        /// </summary>
        [Input("detectPublicProxy")]
        public bool? DetectPublicProxy { get; set; }

        /// <summary>
        /// Specifies how to field public proxy requests.
        /// </summary>
        [Input("detectPublicProxyAction")]
        public string? DetectPublicProxyAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect public proxy requests.
        /// </summary>
        [Input("detectPublicProxyRedirecturl")]
        public string? DetectPublicProxyRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from a residential proxy. See `Enhanced Proxy Detection with GeoGuard` and learn more about this GeoGuard category before enabling it.
        /// </summary>
        [Input("detectResidentialProxy")]
        public bool? DetectResidentialProxy { get; set; }

        /// <summary>
        /// This specifies whether to `DENY`, `ALLOW`, or `REDIRECT` requests from residential proxies.
        /// </summary>
        [Input("detectResidentialProxyAction")]
        public string? DetectResidentialProxyAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect requests.
        /// </summary>
        [Input("detectResidentialProxyRedirecturl")]
        public string? DetectResidentialProxyRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from smart DNS proxies.
        /// </summary>
        [Input("detectSmartDnsProxy")]
        public bool? DetectSmartDnsProxy { get; set; }

        /// <summary>
        /// Specifies whether to `DENY`, `ALLOW`, or `REDIRECT` smart DNS proxy requests.
        /// </summary>
        [Input("detectSmartDnsProxyAction")]
        public string? DetectSmartDnsProxyAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect DNS proxy requests.
        /// </summary>
        [Input("detectSmartDnsProxyRedirecturl")]
        public string? DetectSmartDnsProxyRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from Tor exit nodes.
        /// </summary>
        [Input("detectTorExitNode")]
        public bool? DetectTorExitNode { get; set; }

        /// <summary>
        /// This specifies whether to `DENY`, `ALLOW`, or `REDIRECT` requests from Tor exit nodes.
        /// </summary>
        [Input("detectTorExitNodeAction")]
        public string? DetectTorExitNodeAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect requests from Tor exit nodes.
        /// </summary>
        [Input("detectTorExitNodeRedirecturl")]
        public string? DetectTorExitNodeRedirecturl { get; set; }

        /// <summary>
        /// This enables detection of requests from VPN data centers.
        /// </summary>
        [Input("detectVpnDataCenter")]
        public bool? DetectVpnDataCenter { get; set; }

        /// <summary>
        /// This specifies whether to `DENY`, `ALLOW`, or `REDIRECT` requests from VPN data centers.
        /// </summary>
        [Input("detectVpnDataCenterAction")]
        public string? DetectVpnDataCenterAction { get; set; }

        /// <summary>
        /// This specifies the URL to which to redirect requests from VPN data centers.
        /// </summary>
        [Input("detectVpnDataCenterRedirecturl")]
        public string? DetectVpnDataCenterRedirecturl { get; set; }

        /// <summary>
        /// Specifies how to field the proxy request.
        /// </summary>
        [Input("enableConfigurationMode")]
        public string? EnableConfigurationMode { get; set; }

        /// <summary>
        /// Applies GeoGuard proxy detection.
        /// </summary>
        [Input("enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Whether the Enhanced Proxy Detection (Akamai-EPD) header is included in the forward request to mark a connecting IP address as an anonymous proxy, with a two-letter designation. See the `epdForwardHeaderEnrichment` behavior for details.
        /// </summary>
        [Input("forwardHeaderEnrichment")]
        public bool? ForwardHeaderEnrichment { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("hostingProvider")]
        public string? HostingProvider { get; set; }

        /// <summary>
        /// Indicates that your Akamai representative has locked this behavior or criteria so that you can't modify it. This option is for internal usage only.
        /// </summary>
        [Input("locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("publicProxy")]
        public string? PublicProxy { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("residentialProxy")]
        public string? ResidentialProxy { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("smartDnsProxy")]
        public string? SmartDnsProxy { get; set; }

        /// <summary>
        /// This option is for internal usage only.
        /// </summary>
        [Input("templateUuid")]
        public string? TemplateUuid { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("torExitNode")]
        public string? TorExitNode { get; set; }

        /// <summary>
        /// A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
        /// </summary>
        [Input("uuid")]
        public string? Uuid { get; set; }

        /// <summary>
        /// This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
        /// </summary>
        [Input("vpnDataCenter")]
        public string? VpnDataCenter { get; set; }

        public GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedProxyDetectionArgs()
        {
        }
        public static new GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedProxyDetectionArgs Empty => new GetPropertyRulesBuilderRulesV20241021BehaviorEnhancedProxyDetectionArgs();
    }
}
