// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyTransformationCropInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If cropping an area outside of the existing canvas, expands the image canvas.
        /// </summary>
        [Input("allowExpansion")]
        public Input<string>? AllowExpansion { get; set; }

        /// <summary>
        /// If cropping an area outside of the existing canvas, expands the image canvas.
        /// </summary>
        [Input("allowExpansionVar")]
        public Input<string>? AllowExpansionVar { get; set; }

        /// <summary>
        /// Frame of reference for X and Y Positions.
        /// </summary>
        [Input("gravity")]
        public Input<string>? Gravity { get; set; }

        /// <summary>
        /// Frame of reference for X and Y Positions.
        /// </summary>
        [Input("gravityVar")]
        public Input<string>? GravityVar { get; set; }

        /// <summary>
        /// The number of pixels to crop along the y-axis.
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        /// <summary>
        /// The number of pixels to crop along the y-axis.
        /// </summary>
        [Input("heightVar")]
        public Input<string>? HeightVar { get; set; }

        /// <summary>
        /// The number of pixels to crop along the x-axis.
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        /// <summary>
        /// The number of pixels to crop along the x-axis.
        /// </summary>
        [Input("widthVar")]
        public Input<string>? WidthVar { get; set; }

        /// <summary>
        /// The x-axis position of the image to crop from.
        /// </summary>
        [Input("xPosition")]
        public Input<string>? XPosition { get; set; }

        /// <summary>
        /// The x-axis position of the image to crop from.
        /// </summary>
        [Input("xPositionVar")]
        public Input<string>? XPositionVar { get; set; }

        /// <summary>
        /// The y-axis position of the image to crop from.
        /// </summary>
        [Input("yPosition")]
        public Input<string>? YPosition { get; set; }

        /// <summary>
        /// The y-axis position of the image to crop from.
        /// </summary>
        [Input("yPositionVar")]
        public Input<string>? YPositionVar { get; set; }

        public GetImagingPolicyImagePolicyTransformationCropInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyTransformationCropInputArgs Empty => new GetImagingPolicyImagePolicyTransformationCropInputArgs();
    }
}
