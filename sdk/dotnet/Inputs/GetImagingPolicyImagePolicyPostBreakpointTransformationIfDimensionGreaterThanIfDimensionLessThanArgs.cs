// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Inputs
{

    public sealed class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColorInputArgs>? _backgroundColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColorInputArgs> BackgroundColors
        {
            get => _backgroundColors ?? (_backgroundColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBackgroundColorInputArgs>());
            set => _backgroundColors = value;
        }

        [Input("blurs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBlurInputArgs>? _blurs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBlurInputArgs> Blurs
        {
            get => _blurs ?? (_blurs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanBlurInputArgs>());
            set => _blurs = value;
        }

        [Input("chromaKeys")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKeyInputArgs>? _chromaKeys;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKeyInputArgs> ChromaKeys
        {
            get => _chromaKeys ?? (_chromaKeys = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanChromaKeyInputArgs>());
            set => _chromaKeys = value;
        }

        [Input("composites")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeInputArgs>? _composites;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeInputArgs> Composites
        {
            get => _composites ?? (_composites = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompositeInputArgs>());
            set => _composites = value;
        }

        [Input("compounds")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundInputArgs>? _compounds;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundInputArgs> Compounds
        {
            get => _compounds ?? (_compounds = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanCompoundInputArgs>());
            set => _compounds = value;
        }

        [Input("contrasts")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanContrastInputArgs>? _contrasts;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanContrastInputArgs> Contrasts
        {
            get => _contrasts ?? (_contrasts = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanContrastInputArgs>());
            set => _contrasts = value;
        }

        [Input("goops")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGoopInputArgs>? _goops;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGoopInputArgs> Goops
        {
            get => _goops ?? (_goops = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGoopInputArgs>());
            set => _goops = value;
        }

        [Input("grayscales")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscaleInputArgs>? _grayscales;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscaleInputArgs> Grayscales
        {
            get => _grayscales ?? (_grayscales = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanGrayscaleInputArgs>());
            set => _grayscales = value;
        }

        [Input("hsls")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHslInputArgs>? _hsls;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHslInputArgs> Hsls
        {
            get => _hsls ?? (_hsls = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHslInputArgs>());
            set => _hsls = value;
        }

        [Input("hsvs")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsvInputArgs>? _hsvs;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsvInputArgs> Hsvs
        {
            get => _hsvs ?? (_hsvs = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanHsvInputArgs>());
            set => _hsvs = value;
        }

        [Input("ifDimensions")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionInputArgs>? _ifDimensions;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionInputArgs> IfDimensions
        {
            get => _ifDimensions ?? (_ifDimensions = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfDimensionInputArgs>());
            set => _ifDimensions = value;
        }

        [Input("ifOrientations")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationInputArgs>? _ifOrientations;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationInputArgs> IfOrientations
        {
            get => _ifOrientations ?? (_ifOrientations = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanIfOrientationInputArgs>());
            set => _ifOrientations = value;
        }

        [Input("maxColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColorInputArgs>? _maxColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColorInputArgs> MaxColors
        {
            get => _maxColors ?? (_maxColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMaxColorInputArgs>());
            set => _maxColors = value;
        }

        [Input("mirrors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMirrorInputArgs>? _mirrors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMirrorInputArgs> Mirrors
        {
            get => _mirrors ?? (_mirrors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMirrorInputArgs>());
            set => _mirrors = value;
        }

        [Input("monoHues")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHueInputArgs>? _monoHues;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHueInputArgs> MonoHues
        {
            get => _monoHues ?? (_monoHues = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanMonoHueInputArgs>());
            set => _monoHues = value;
        }

        [Input("opacities")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanOpacityInputArgs>? _opacities;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanOpacityInputArgs> Opacities
        {
            get => _opacities ?? (_opacities = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanOpacityInputArgs>());
            set => _opacities = value;
        }

        [Input("removeColors")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColorInputArgs>? _removeColors;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColorInputArgs> RemoveColors
        {
            get => _removeColors ?? (_removeColors = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanRemoveColorInputArgs>());
            set => _removeColors = value;
        }

        [Input("unsharpMasks")]
        private InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMaskInputArgs>? _unsharpMasks;
        public InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMaskInputArgs> UnsharpMasks
        {
            get => _unsharpMasks ?? (_unsharpMasks = new InputList<Inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanUnsharpMaskInputArgs>());
            set => _unsharpMasks = value;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanInputArgs()
        {
        }
        public static new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanInputArgs Empty => new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanIfDimensionLessThanInputArgs();
    }
}
