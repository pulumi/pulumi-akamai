// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/appSecIPGeo:AppSecIPGeo")]
    public partial class AppSecIPGeo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of IDs of ASN network list to be blocked
        /// </summary>
        [Output("asnNetworkLists")]
        public Output<ImmutableArray<string>> AsnNetworkLists { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// List of IDs of network list that are always allowed
        /// </summary>
        [Output("exceptionIpNetworkLists")]
        public Output<ImmutableArray<string>> ExceptionIpNetworkLists { get; private set; } = null!;

        /// <summary>
        /// List of IDs of geographic network list to be blocked
        /// </summary>
        [Output("geoNetworkLists")]
        public Output<ImmutableArray<string>> GeoNetworkLists { get; private set; } = null!;

        /// <summary>
        /// List of IDs of IP network list to be blocked
        /// </summary>
        [Output("ipNetworkLists")]
        public Output<ImmutableArray<string>> IpNetworkLists { get; private set; } = null!;

        /// <summary>
        /// Protection mode (block or allow)
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the security policy
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;

        /// <summary>
        /// Action set for Ukraine geo control
        /// </summary>
        [Output("ukraineGeoControlAction")]
        public Output<string?> UkraineGeoControlAction { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecIPGeo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecIPGeo(string name, AppSecIPGeoArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecIPGeo:AppSecIPGeo", name, args ?? new AppSecIPGeoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecIPGeo(string name, Input<string> id, AppSecIPGeoState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecIPGeo:AppSecIPGeo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecIPGeo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecIPGeo Get(string name, Input<string> id, AppSecIPGeoState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecIPGeo(name, id, state, options);
        }
    }

    public sealed class AppSecIPGeoArgs : global::Pulumi.ResourceArgs
    {
        [Input("asnNetworkLists")]
        private InputList<string>? _asnNetworkLists;

        /// <summary>
        /// List of IDs of ASN network list to be blocked
        /// </summary>
        public InputList<string> AsnNetworkLists
        {
            get => _asnNetworkLists ?? (_asnNetworkLists = new InputList<string>());
            set => _asnNetworkLists = value;
        }

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        [Input("exceptionIpNetworkLists")]
        private InputList<string>? _exceptionIpNetworkLists;

        /// <summary>
        /// List of IDs of network list that are always allowed
        /// </summary>
        public InputList<string> ExceptionIpNetworkLists
        {
            get => _exceptionIpNetworkLists ?? (_exceptionIpNetworkLists = new InputList<string>());
            set => _exceptionIpNetworkLists = value;
        }

        [Input("geoNetworkLists")]
        private InputList<string>? _geoNetworkLists;

        /// <summary>
        /// List of IDs of geographic network list to be blocked
        /// </summary>
        public InputList<string> GeoNetworkLists
        {
            get => _geoNetworkLists ?? (_geoNetworkLists = new InputList<string>());
            set => _geoNetworkLists = value;
        }

        [Input("ipNetworkLists")]
        private InputList<string>? _ipNetworkLists;

        /// <summary>
        /// List of IDs of IP network list to be blocked
        /// </summary>
        public InputList<string> IpNetworkLists
        {
            get => _ipNetworkLists ?? (_ipNetworkLists = new InputList<string>());
            set => _ipNetworkLists = value;
        }

        /// <summary>
        /// Protection mode (block or allow)
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the security policy
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public Input<string> SecurityPolicyId { get; set; } = null!;

        /// <summary>
        /// Action set for Ukraine geo control
        /// </summary>
        [Input("ukraineGeoControlAction")]
        public Input<string>? UkraineGeoControlAction { get; set; }

        public AppSecIPGeoArgs()
        {
        }
        public static new AppSecIPGeoArgs Empty => new AppSecIPGeoArgs();
    }

    public sealed class AppSecIPGeoState : global::Pulumi.ResourceArgs
    {
        [Input("asnNetworkLists")]
        private InputList<string>? _asnNetworkLists;

        /// <summary>
        /// List of IDs of ASN network list to be blocked
        /// </summary>
        public InputList<string> AsnNetworkLists
        {
            get => _asnNetworkLists ?? (_asnNetworkLists = new InputList<string>());
            set => _asnNetworkLists = value;
        }

        /// <summary>
        /// Unique identifier of the security configuration
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        [Input("exceptionIpNetworkLists")]
        private InputList<string>? _exceptionIpNetworkLists;

        /// <summary>
        /// List of IDs of network list that are always allowed
        /// </summary>
        public InputList<string> ExceptionIpNetworkLists
        {
            get => _exceptionIpNetworkLists ?? (_exceptionIpNetworkLists = new InputList<string>());
            set => _exceptionIpNetworkLists = value;
        }

        [Input("geoNetworkLists")]
        private InputList<string>? _geoNetworkLists;

        /// <summary>
        /// List of IDs of geographic network list to be blocked
        /// </summary>
        public InputList<string> GeoNetworkLists
        {
            get => _geoNetworkLists ?? (_geoNetworkLists = new InputList<string>());
            set => _geoNetworkLists = value;
        }

        [Input("ipNetworkLists")]
        private InputList<string>? _ipNetworkLists;

        /// <summary>
        /// List of IDs of IP network list to be blocked
        /// </summary>
        public InputList<string> IpNetworkLists
        {
            get => _ipNetworkLists ?? (_ipNetworkLists = new InputList<string>());
            set => _ipNetworkLists = value;
        }

        /// <summary>
        /// Protection mode (block or allow)
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Unique identifier of the security policy
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// Action set for Ukraine geo control
        /// </summary>
        [Input("ukraineGeoControlAction")]
        public Input<string>? UkraineGeoControlAction { get; set; }

        public AppSecIPGeoState()
        {
        }
        public static new AppSecIPGeoState Empty => new AppSecIPGeoState();
    }
}
