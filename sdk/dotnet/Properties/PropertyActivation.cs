// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Properties
{
    /// <summary>
    /// The `akamai.PropertyActivation` resource lets you activate a property version. An activation deploys the version to either the Akamai staging or production network. You can activate a specific version multiple times if you need to.
    /// 
    /// Before activating on production, activate on staging first. This way you can detect any problems in staging before your changes progress to production.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var email = "user@example.org";
    /// 
    ///     var ruleFormat = "v2020-03-04";
    /// 
    ///     var example = new Akamai.Property("example", new()
    ///     {
    ///         ProductId = "prd_SPM",
    ///         ContractId = @var.Contractid,
    ///         GroupId = @var.Groupid,
    ///         Hostnames = 
    ///         {
    ///             { "example.org", "example.org.edgesuite.net" },
    ///             { "www.example.org", "example.org.edgesuite.net" },
    ///             { "sub.example.org", "sub.example.org.edgesuite.net" },
    ///         },
    ///         RuleFormat = ruleFormat,
    ///         Rules = File.ReadAllText($"{path.Module}/main.json"),
    ///     });
    /// 
    ///     var exampleStaging = new Akamai.PropertyActivation("exampleStaging", new()
    ///     {
    ///         PropertyId = example.Id,
    ///         Contacts = new[]
    ///         {
    ///             email,
    ///         },
    ///         Version = example.LatestVersion,
    ///         Note = "Sample activation",
    ///     });
    /// 
    ///     var exampleProd = new Akamai.PropertyActivation("exampleProd", new()
    ///     {
    ///         PropertyId = example.Id,
    ///         Network = "PRODUCTION",
    ///         Version = 3,
    ///         Contacts = new[]
    ///         {
    ///             email,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleStaging,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [Obsolete(@"akamai.properties.PropertyActivation has been deprecated in favor of akamai.PropertyActivation")]
    [AkamaiResourceType("akamai:properties/propertyActivation:PropertyActivation")]
    public partial class PropertyActivation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID given to the activation event while it's in progress.
        /// </summary>
        [Output("activationId")]
        public Output<string> ActivationId { get; private set; } = null!;

        /// <summary>
        /// Whether the activation should proceed despite any warnings. By default set to `true`.
        /// </summary>
        [Output("autoAcknowledgeRuleWarnings")]
        public Output<bool?> AutoAcknowledgeRuleWarnings { get; private set; } = null!;

        /// <summary>
        /// One or more email addresses to send activation status changes to.
        /// </summary>
        [Output("contacts")]
        public Output<ImmutableArray<string>> Contacts { get; private set; } = null!;

        /// <summary>
        /// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
        /// </summary>
        [Output("errors")]
        public Output<string> Errors { get; private set; } = null!;

        /// <summary>
        /// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
        /// </summary>
        [Output("network")]
        public Output<string?> Network { get; private set; } = null!;

        /// <summary>
        /// A log message you can assign to the activation request.
        /// </summary>
        [Output("note")]
        public Output<string?> Note { get; private set; } = null!;

        /// <summary>
        /// (Deprecated) Replaced by `property_id`. Maintained for legacy purposes.
        /// </summary>
        [Output("property")]
        public Output<string> Property { get; private set; } = null!;

        /// <summary>
        /// (Required) The property's unique identifier, including the `prp_` prefix.
        /// </summary>
        [Output("propertyId")]
        public Output<string> PropertyId { get; private set; } = null!;

        [Output("ruleErrors")]
        public Output<ImmutableArray<Outputs.PropertyActivationRuleError>> RuleErrors { get; private set; } = null!;

        /// <summary>
        /// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
        /// </summary>
        [Output("ruleWarnings")]
        public Output<ImmutableArray<Outputs.PropertyActivationRuleWarning>> RuleWarnings { get; private set; } = null!;

        /// <summary>
        /// The property version's activation status on the selected network.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The property version to activate. Previously this field was optional. It now depends on the `akamai.Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latest_version` attribute in the `akamai.Property` resource labeled `example`.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
        /// </summary>
        [Output("warnings")]
        public Output<string> Warnings { get; private set; } = null!;


        /// <summary>
        /// Create a PropertyActivation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PropertyActivation(string name, PropertyActivationArgs args, CustomResourceOptions? options = null)
            : base("akamai:properties/propertyActivation:PropertyActivation", name, args ?? new PropertyActivationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PropertyActivation(string name, Input<string> id, PropertyActivationState? state = null, CustomResourceOptions? options = null)
            : base("akamai:properties/propertyActivation:PropertyActivation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PropertyActivation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PropertyActivation Get(string name, Input<string> id, PropertyActivationState? state = null, CustomResourceOptions? options = null)
        {
            return new PropertyActivation(name, id, state, options);
        }
    }

    public sealed class PropertyActivationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID given to the activation event while it's in progress.
        /// </summary>
        [Input("activationId")]
        public Input<string>? ActivationId { get; set; }

        /// <summary>
        /// Whether the activation should proceed despite any warnings. By default set to `true`.
        /// </summary>
        [Input("autoAcknowledgeRuleWarnings")]
        public Input<bool>? AutoAcknowledgeRuleWarnings { get; set; }

        [Input("contacts", required: true)]
        private InputList<string>? _contacts;

        /// <summary>
        /// One or more email addresses to send activation status changes to.
        /// </summary>
        public InputList<string> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<string>());
            set => _contacts = value;
        }

        /// <summary>
        /// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// A log message you can assign to the activation request.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// (Deprecated) Replaced by `property_id`. Maintained for legacy purposes.
        /// </summary>
        [Input("property")]
        public Input<string>? Property { get; set; }

        /// <summary>
        /// (Required) The property's unique identifier, including the `prp_` prefix.
        /// </summary>
        [Input("propertyId")]
        public Input<string>? PropertyId { get; set; }

        [Input("ruleErrors")]
        private InputList<Inputs.PropertyActivationRuleErrorArgs>? _ruleErrors;
        public InputList<Inputs.PropertyActivationRuleErrorArgs> RuleErrors
        {
            get => _ruleErrors ?? (_ruleErrors = new InputList<Inputs.PropertyActivationRuleErrorArgs>());
            set => _ruleErrors = value;
        }

        [Input("ruleWarnings")]
        private InputList<Inputs.PropertyActivationRuleWarningArgs>? _ruleWarnings;

        /// <summary>
        /// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
        /// </summary>
        [Obsolete(@"Rule warnings will not be set in state anymore")]
        public InputList<Inputs.PropertyActivationRuleWarningArgs> RuleWarnings
        {
            get => _ruleWarnings ?? (_ruleWarnings = new InputList<Inputs.PropertyActivationRuleWarningArgs>());
            set => _ruleWarnings = value;
        }

        /// <summary>
        /// The property version to activate. Previously this field was optional. It now depends on the `akamai.Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latest_version` attribute in the `akamai.Property` resource labeled `example`.
        /// </summary>
        [Input("version", required: true)]
        public Input<int> Version { get; set; } = null!;

        public PropertyActivationArgs()
        {
        }
        public static new PropertyActivationArgs Empty => new PropertyActivationArgs();
    }

    public sealed class PropertyActivationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID given to the activation event while it's in progress.
        /// </summary>
        [Input("activationId")]
        public Input<string>? ActivationId { get; set; }

        /// <summary>
        /// Whether the activation should proceed despite any warnings. By default set to `true`.
        /// </summary>
        [Input("autoAcknowledgeRuleWarnings")]
        public Input<bool>? AutoAcknowledgeRuleWarnings { get; set; }

        [Input("contacts")]
        private InputList<string>? _contacts;

        /// <summary>
        /// One or more email addresses to send activation status changes to.
        /// </summary>
        public InputList<string> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<string>());
            set => _contacts = value;
        }

        /// <summary>
        /// The contents of `errors` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
        /// </summary>
        [Input("errors")]
        public Input<string>? Errors { get; set; }

        /// <summary>
        /// Akamai network to activate on, either `STAGING` or `PRODUCTION`. `STAGING` is the default.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// A log message you can assign to the activation request.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// (Deprecated) Replaced by `property_id`. Maintained for legacy purposes.
        /// </summary>
        [Input("property")]
        public Input<string>? Property { get; set; }

        /// <summary>
        /// (Required) The property's unique identifier, including the `prp_` prefix.
        /// </summary>
        [Input("propertyId")]
        public Input<string>? PropertyId { get; set; }

        [Input("ruleErrors")]
        private InputList<Inputs.PropertyActivationRuleErrorGetArgs>? _ruleErrors;
        public InputList<Inputs.PropertyActivationRuleErrorGetArgs> RuleErrors
        {
            get => _ruleErrors ?? (_ruleErrors = new InputList<Inputs.PropertyActivationRuleErrorGetArgs>());
            set => _ruleErrors = value;
        }

        [Input("ruleWarnings")]
        private InputList<Inputs.PropertyActivationRuleWarningGetArgs>? _ruleWarnings;

        /// <summary>
        /// (Deprecated) Rule warnings are no longer maintained in the state file. You can still see the warnings in logs.
        /// </summary>
        [Obsolete(@"Rule warnings will not be set in state anymore")]
        public InputList<Inputs.PropertyActivationRuleWarningGetArgs> RuleWarnings
        {
            get => _ruleWarnings ?? (_ruleWarnings = new InputList<Inputs.PropertyActivationRuleWarningGetArgs>());
            set => _ruleWarnings = value;
        }

        /// <summary>
        /// The property version's activation status on the selected network.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The property version to activate. Previously this field was optional. It now depends on the `akamai.Property` resource to identify latest instead of calculating it locally.  This association helps keep the dependency tree properly aligned. To always use the latest version, enter this value `{resource}.{resource identifier}.{field name}`. Using the example code above, the entry would be `akamai_property.example.latest_version` since we want the value of the `latest_version` attribute in the `akamai.Property` resource labeled `example`.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// The contents of `warnings` field returned by the API. For more information see [Errors](https://techdocs.akamai.com/property-mgr/reference/api-errors) in the PAPI documentation.
        /// </summary>
        [Input("warnings")]
        public Input<string>? Warnings { get; set; }

        public PropertyActivationState()
        {
        }
        public static new PropertyActivationState Empty => new PropertyActivationState();
    }
}
