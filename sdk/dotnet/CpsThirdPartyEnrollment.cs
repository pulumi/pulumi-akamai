// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    [AkamaiResourceType("akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment")]
    public partial class CpsThirdPartyEnrollment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether acknowledge warnings before certificate verification
        /// </summary>
        [Output("acknowledgePreVerificationWarnings")]
        public Output<bool?> AcknowledgePreVerificationWarnings { get; private set; } = null!;

        /// <summary>
        /// Contact information for the certificate administrator to use at organization
        /// </summary>
        [Output("adminContact")]
        public Output<Outputs.CpsThirdPartyEnrollmentAdminContact> AdminContact { get; private set; } = null!;

        /// <summary>
        /// Allow to duplicate common name
        /// </summary>
        [Output("allowDuplicateCommonName")]
        public Output<bool?> AllowDuplicateCommonName { get; private set; } = null!;

        /// <summary>
        /// List of warnings to be automatically approved
        /// </summary>
        [Output("autoApproveWarnings")]
        public Output<ImmutableArray<string>> AutoApproveWarnings { get; private set; } = null!;

        /// <summary>
        /// Certificate trust chain type
        /// </summary>
        [Output("certificateChainType")]
        public Output<string?> CertificateChainType { get; private set; } = null!;

        /// <summary>
        /// When set to false, the certificate will be deployed to both staging and production networks
        /// </summary>
        [Output("changeManagement")]
        public Output<bool?> ChangeManagement { get; private set; } = null!;

        /// <summary>
        /// Common name used for enrollment
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// Contract ID for which enrollment is retrieved
        /// </summary>
        [Output("contractId")]
        public Output<string> ContractId { get; private set; } = null!;

        /// <summary>
        /// Data used for generation of Certificate Signing Request
        /// </summary>
        [Output("csr")]
        public Output<Outputs.CpsThirdPartyEnrollmentCsr> Csr { get; private set; } = null!;

        /// <summary>
        /// When true, SANs are excluded from the CSR
        /// </summary>
        [Output("excludeSans")]
        public Output<bool?> ExcludeSans { get; private set; } = null!;

        /// <summary>
        /// Settings containing network information and TLS metadata used by CPS
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.CpsThirdPartyEnrollmentNetworkConfiguration> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// Organization information
        /// </summary>
        [Output("organization")]
        public Output<Outputs.CpsThirdPartyEnrollmentOrganization> Organization { get; private set; } = null!;

        /// <summary>
        /// List of SANs
        /// </summary>
        [Output("sans")]
        public Output<ImmutableArray<string>> Sans { get; private set; } = null!;

        /// <summary>
        /// Type of TLS deployment network
        /// </summary>
        [Output("secureNetwork")]
        public Output<string> SecureNetwork { get; private set; } = null!;

        /// <summary>
        /// The SHA function. Changing this value may require running terraform destroy, terraform apply
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string?> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Whether Server Name Indication is used for enrollment
        /// </summary>
        [Output("sniOnly")]
        public Output<bool> SniOnly { get; private set; } = null!;

        /// <summary>
        /// Contact information for an administrator at Akamai
        /// </summary>
        [Output("techContact")]
        public Output<Outputs.CpsThirdPartyEnrollmentTechContact> TechContact { get; private set; } = null!;

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Output("timeouts")]
        public Output<Outputs.CpsThirdPartyEnrollmentTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a CpsThirdPartyEnrollment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CpsThirdPartyEnrollment(string name, CpsThirdPartyEnrollmentArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment", name, args ?? new CpsThirdPartyEnrollmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CpsThirdPartyEnrollment(string name, Input<string> id, CpsThirdPartyEnrollmentState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CpsThirdPartyEnrollment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CpsThirdPartyEnrollment Get(string name, Input<string> id, CpsThirdPartyEnrollmentState? state = null, CustomResourceOptions? options = null)
        {
            return new CpsThirdPartyEnrollment(name, id, state, options);
        }
    }

    public sealed class CpsThirdPartyEnrollmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether acknowledge warnings before certificate verification
        /// </summary>
        [Input("acknowledgePreVerificationWarnings")]
        public Input<bool>? AcknowledgePreVerificationWarnings { get; set; }

        /// <summary>
        /// Contact information for the certificate administrator to use at organization
        /// </summary>
        [Input("adminContact", required: true)]
        public Input<Inputs.CpsThirdPartyEnrollmentAdminContactArgs> AdminContact { get; set; } = null!;

        /// <summary>
        /// Allow to duplicate common name
        /// </summary>
        [Input("allowDuplicateCommonName")]
        public Input<bool>? AllowDuplicateCommonName { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// List of warnings to be automatically approved
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// Certificate trust chain type
        /// </summary>
        [Input("certificateChainType")]
        public Input<string>? CertificateChainType { get; set; }

        /// <summary>
        /// When set to false, the certificate will be deployed to both staging and production networks
        /// </summary>
        [Input("changeManagement")]
        public Input<bool>? ChangeManagement { get; set; }

        /// <summary>
        /// Common name used for enrollment
        /// </summary>
        [Input("commonName", required: true)]
        public Input<string> CommonName { get; set; } = null!;

        /// <summary>
        /// Contract ID for which enrollment is retrieved
        /// </summary>
        [Input("contractId", required: true)]
        public Input<string> ContractId { get; set; } = null!;

        /// <summary>
        /// Data used for generation of Certificate Signing Request
        /// </summary>
        [Input("csr", required: true)]
        public Input<Inputs.CpsThirdPartyEnrollmentCsrArgs> Csr { get; set; } = null!;

        /// <summary>
        /// When true, SANs are excluded from the CSR
        /// </summary>
        [Input("excludeSans")]
        public Input<bool>? ExcludeSans { get; set; }

        /// <summary>
        /// Settings containing network information and TLS metadata used by CPS
        /// </summary>
        [Input("networkConfiguration", required: true)]
        public Input<Inputs.CpsThirdPartyEnrollmentNetworkConfigurationArgs> NetworkConfiguration { get; set; } = null!;

        /// <summary>
        /// Organization information
        /// </summary>
        [Input("organization", required: true)]
        public Input<Inputs.CpsThirdPartyEnrollmentOrganizationArgs> Organization { get; set; } = null!;

        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// List of SANs
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// Type of TLS deployment network
        /// </summary>
        [Input("secureNetwork", required: true)]
        public Input<string> SecureNetwork { get; set; } = null!;

        /// <summary>
        /// The SHA function. Changing this value may require running terraform destroy, terraform apply
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Whether Server Name Indication is used for enrollment
        /// </summary>
        [Input("sniOnly", required: true)]
        public Input<bool> SniOnly { get; set; } = null!;

        /// <summary>
        /// Contact information for an administrator at Akamai
        /// </summary>
        [Input("techContact", required: true)]
        public Input<Inputs.CpsThirdPartyEnrollmentTechContactArgs> TechContact { get; set; } = null!;

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.CpsThirdPartyEnrollmentTimeoutsArgs>? Timeouts { get; set; }

        public CpsThirdPartyEnrollmentArgs()
        {
        }
        public static new CpsThirdPartyEnrollmentArgs Empty => new CpsThirdPartyEnrollmentArgs();
    }

    public sealed class CpsThirdPartyEnrollmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether acknowledge warnings before certificate verification
        /// </summary>
        [Input("acknowledgePreVerificationWarnings")]
        public Input<bool>? AcknowledgePreVerificationWarnings { get; set; }

        /// <summary>
        /// Contact information for the certificate administrator to use at organization
        /// </summary>
        [Input("adminContact")]
        public Input<Inputs.CpsThirdPartyEnrollmentAdminContactGetArgs>? AdminContact { get; set; }

        /// <summary>
        /// Allow to duplicate common name
        /// </summary>
        [Input("allowDuplicateCommonName")]
        public Input<bool>? AllowDuplicateCommonName { get; set; }

        [Input("autoApproveWarnings")]
        private InputList<string>? _autoApproveWarnings;

        /// <summary>
        /// List of warnings to be automatically approved
        /// </summary>
        public InputList<string> AutoApproveWarnings
        {
            get => _autoApproveWarnings ?? (_autoApproveWarnings = new InputList<string>());
            set => _autoApproveWarnings = value;
        }

        /// <summary>
        /// Certificate trust chain type
        /// </summary>
        [Input("certificateChainType")]
        public Input<string>? CertificateChainType { get; set; }

        /// <summary>
        /// When set to false, the certificate will be deployed to both staging and production networks
        /// </summary>
        [Input("changeManagement")]
        public Input<bool>? ChangeManagement { get; set; }

        /// <summary>
        /// Common name used for enrollment
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// Contract ID for which enrollment is retrieved
        /// </summary>
        [Input("contractId")]
        public Input<string>? ContractId { get; set; }

        /// <summary>
        /// Data used for generation of Certificate Signing Request
        /// </summary>
        [Input("csr")]
        public Input<Inputs.CpsThirdPartyEnrollmentCsrGetArgs>? Csr { get; set; }

        /// <summary>
        /// When true, SANs are excluded from the CSR
        /// </summary>
        [Input("excludeSans")]
        public Input<bool>? ExcludeSans { get; set; }

        /// <summary>
        /// Settings containing network information and TLS metadata used by CPS
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.CpsThirdPartyEnrollmentNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// Organization information
        /// </summary>
        [Input("organization")]
        public Input<Inputs.CpsThirdPartyEnrollmentOrganizationGetArgs>? Organization { get; set; }

        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// List of SANs
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// Type of TLS deployment network
        /// </summary>
        [Input("secureNetwork")]
        public Input<string>? SecureNetwork { get; set; }

        /// <summary>
        /// The SHA function. Changing this value may require running terraform destroy, terraform apply
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Whether Server Name Indication is used for enrollment
        /// </summary>
        [Input("sniOnly")]
        public Input<bool>? SniOnly { get; set; }

        /// <summary>
        /// Contact information for an administrator at Akamai
        /// </summary>
        [Input("techContact")]
        public Input<Inputs.CpsThirdPartyEnrollmentTechContactGetArgs>? TechContact { get; set; }

        /// <summary>
        /// Enables to set timeout for processing
        /// </summary>
        [Input("timeouts")]
        public Input<Inputs.CpsThirdPartyEnrollmentTimeoutsGetArgs>? Timeouts { get; set; }

        public CpsThirdPartyEnrollmentState()
        {
        }
        public static new CpsThirdPartyEnrollmentState Empty => new CpsThirdPartyEnrollmentState();
    }
}
