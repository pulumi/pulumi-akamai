// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationsConfigurationMultiCdnSettings extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationsConfigurationMultiCdnSettings Empty = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettings();

    @Import(name="bocc")
    private @Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc bocc;

    public Optional<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc> bocc() {
        return Optional.ofNullable(this.bocc);
    }

    @Import(name="cdns")
    private @Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn> cdns;

    public Optional<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn>> cdns() {
        return Optional.ofNullable(this.cdns);
    }

    @Import(name="dataStreams")
    private @Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams dataStreams;

    public Optional<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams> dataStreams() {
        return Optional.ofNullable(this.dataStreams);
    }

    @Import(name="enableSoftAlerts", required=true)
    private Boolean enableSoftAlerts;

    public Boolean enableSoftAlerts() {
        return this.enableSoftAlerts;
    }

    @Import(name="origins")
    private @Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin> origins;

    public Optional<List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin>> origins() {
        return Optional.ofNullable(this.origins);
    }

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettings() {}

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettings(GetCloudwrapperConfigurationsConfigurationMultiCdnSettings $) {
        this.bocc = $.bocc;
        this.cdns = $.cdns;
        this.dataStreams = $.dataStreams;
        this.enableSoftAlerts = $.enableSoftAlerts;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationMultiCdnSettings $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettings();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettings defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettings(Objects.requireNonNull(defaults));
        }

        public Builder bocc(@Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc bocc) {
            $.bocc = bocc;
            return this;
        }

        public Builder cdns(@Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn> cdns) {
            $.cdns = cdns;
            return this;
        }

        public Builder cdns(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsCdn... cdns) {
            return cdns(List.of(cdns));
        }

        public Builder dataStreams(@Nullable GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsDataStreams dataStreams) {
            $.dataStreams = dataStreams;
            return this;
        }

        public Builder enableSoftAlerts(Boolean enableSoftAlerts) {
            $.enableSoftAlerts = enableSoftAlerts;
            return this;
        }

        public Builder origins(@Nullable List<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin> origins) {
            $.origins = origins;
            return this;
        }

        public Builder origins(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsOrigin... origins) {
            return origins(List.of(origins));
        }

        public GetCloudwrapperConfigurationsConfigurationMultiCdnSettings build() {
            $.enableSoftAlerts = Objects.requireNonNull($.enableSoftAlerts, "expected parameter 'enableSoftAlerts' to be non-null");
            return $;
        }
    }

}
