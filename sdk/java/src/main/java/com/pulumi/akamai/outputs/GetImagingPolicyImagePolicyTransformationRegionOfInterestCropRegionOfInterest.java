// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest {
    /**
     * @return Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes;
    /**
     * @return Defines a polygon from a series of connected points.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes;
    /**
     * @return Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes;
    /**
     * @return Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes;

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest() {}
    /**
     * @return Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    public List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes() {
        return this.circleShapes == null ? List.of() : this.circleShapes;
    }
    public List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes() {
        return this.pointShapes == null ? List.of() : this.pointShapes;
    }
    /**
     * @return Defines a polygon from a series of connected points.
     * 
     */
    public List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes() {
        return this.polygonShapes == null ? List.of() : this.polygonShapes;
    }
    /**
     * @return Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    public List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes() {
        return this.rectangleShapes == null ? List.of() : this.rectangleShapes;
    }
    /**
     * @return Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    public List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes() {
        return this.unionShapes == null ? List.of() : this.unionShapes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.circleShapes = defaults.circleShapes;
    	      this.pointShapes = defaults.pointShapes;
    	      this.polygonShapes = defaults.polygonShapes;
    	      this.rectangleShapes = defaults.rectangleShapes;
    	      this.unionShapes = defaults.unionShapes;
        }

        @CustomType.Setter
        public Builder circleShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape> circleShapes) {

            this.circleShapes = circleShapes;
            return this;
        }
        public Builder circleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShape... circleShapes) {
            return circleShapes(List.of(circleShapes));
        }
        @CustomType.Setter
        public Builder pointShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape> pointShapes) {

            this.pointShapes = pointShapes;
            return this;
        }
        public Builder pointShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShape... pointShapes) {
            return pointShapes(List.of(pointShapes));
        }
        @CustomType.Setter
        public Builder polygonShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape> polygonShapes) {

            this.polygonShapes = polygonShapes;
            return this;
        }
        public Builder polygonShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShape... polygonShapes) {
            return polygonShapes(List.of(polygonShapes));
        }
        @CustomType.Setter
        public Builder rectangleShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape> rectangleShapes) {

            this.rectangleShapes = rectangleShapes;
            return this;
        }
        public Builder rectangleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShape... rectangleShapes) {
            return rectangleShapes(List.of(rectangleShapes));
        }
        @CustomType.Setter
        public Builder unionShapes(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape> unionShapes) {

            this.unionShapes = unionShapes;
            return this;
        }
        public Builder unionShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShape... unionShapes) {
            return unionShapes(List.of(unionShapes));
        }
        public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterest();
            _resultValue.circleShapes = circleShapes;
            _resultValue.pointShapes = pointShapes;
            _resultValue.polygonShapes = polygonShapes;
            _resultValue.rectangleShapes = rectangleShapes;
            _resultValue.unionShapes = unionShapes;
            return _resultValue;
        }
    }
}
