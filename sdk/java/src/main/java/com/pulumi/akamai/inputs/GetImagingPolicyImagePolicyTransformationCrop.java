// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCrop extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationCrop Empty = new GetImagingPolicyImagePolicyTransformationCrop();

    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    @Import(name="allowExpansion")
    private @Nullable String allowExpansion;

    /**
     * @return If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    public Optional<String> allowExpansion() {
        return Optional.ofNullable(this.allowExpansion);
    }

    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    @Import(name="allowExpansionVar")
    private @Nullable String allowExpansionVar;

    /**
     * @return If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    public Optional<String> allowExpansionVar() {
        return Optional.ofNullable(this.allowExpansionVar);
    }

    /**
     * Frame of reference for X and Y Positions.
     * 
     */
    @Import(name="gravity")
    private @Nullable String gravity;

    /**
     * @return Frame of reference for X and Y Positions.
     * 
     */
    public Optional<String> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Frame of reference for X and Y Positions.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable String gravityVar;

    /**
     * @return Frame of reference for X and Y Positions.
     * 
     */
    public Optional<String> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The number of pixels to crop along the y-axis.
     * 
     */
    @Import(name="height")
    private @Nullable String height;

    /**
     * @return The number of pixels to crop along the y-axis.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The number of pixels to crop along the y-axis.
     * 
     */
    @Import(name="heightVar")
    private @Nullable String heightVar;

    /**
     * @return The number of pixels to crop along the y-axis.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The number of pixels to crop along the x-axis.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The number of pixels to crop along the x-axis.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The number of pixels to crop along the x-axis.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The number of pixels to crop along the x-axis.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    /**
     * The x-axis position of the image to crop from.
     * 
     */
    @Import(name="xPosition")
    private @Nullable String xPosition;

    /**
     * @return The x-axis position of the image to crop from.
     * 
     */
    public Optional<String> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }

    /**
     * The x-axis position of the image to crop from.
     * 
     */
    @Import(name="xPositionVar")
    private @Nullable String xPositionVar;

    /**
     * @return The x-axis position of the image to crop from.
     * 
     */
    public Optional<String> xPositionVar() {
        return Optional.ofNullable(this.xPositionVar);
    }

    /**
     * The y-axis position of the image to crop from.
     * 
     */
    @Import(name="yPosition")
    private @Nullable String yPosition;

    /**
     * @return The y-axis position of the image to crop from.
     * 
     */
    public Optional<String> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }

    /**
     * The y-axis position of the image to crop from.
     * 
     */
    @Import(name="yPositionVar")
    private @Nullable String yPositionVar;

    /**
     * @return The y-axis position of the image to crop from.
     * 
     */
    public Optional<String> yPositionVar() {
        return Optional.ofNullable(this.yPositionVar);
    }

    private GetImagingPolicyImagePolicyTransformationCrop() {}

    private GetImagingPolicyImagePolicyTransformationCrop(GetImagingPolicyImagePolicyTransformationCrop $) {
        this.allowExpansion = $.allowExpansion;
        this.allowExpansionVar = $.allowExpansionVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
        this.xPosition = $.xPosition;
        this.xPositionVar = $.xPositionVar;
        this.yPosition = $.yPosition;
        this.yPositionVar = $.yPositionVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCrop defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCrop $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCrop();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCrop defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCrop(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowExpansion If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansion(@Nullable String allowExpansion) {
            $.allowExpansion = allowExpansion;
            return this;
        }

        /**
         * @param allowExpansionVar If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansionVar(@Nullable String allowExpansionVar) {
            $.allowExpansionVar = allowExpansionVar;
            return this;
        }

        /**
         * @param gravity Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable String gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravityVar Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable String gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param height The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable String height) {
            $.height = height;
            return this;
        }

        /**
         * @param heightVar The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable String heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param width The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param xPosition The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPosition(@Nullable String xPosition) {
            $.xPosition = xPosition;
            return this;
        }

        /**
         * @param xPositionVar The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPositionVar(@Nullable String xPositionVar) {
            $.xPositionVar = xPositionVar;
            return this;
        }

        /**
         * @param yPosition The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPosition(@Nullable String yPosition) {
            $.yPosition = yPosition;
            return this;
        }

        /**
         * @param yPositionVar The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPositionVar(@Nullable String yPositionVar) {
            $.yPositionVar = yPositionVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationCrop build() {
            return $;
        }
    }

}
