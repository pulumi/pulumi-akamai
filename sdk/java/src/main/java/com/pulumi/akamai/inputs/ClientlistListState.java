// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.ClientlistListItemArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientlistListState extends com.pulumi.resources.ResourceArgs {

    public static final ClientlistListState Empty = new ClientlistListState();

    /**
     * Contract ID for which client list is assigned.
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return Contract ID for which client list is assigned.
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * Group ID for which client list is assigned.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return Group ID for which client list is assigned.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * Set of items containing item information.
     * 
     */
    @Import(name="items")
    private @Nullable Output<List<ClientlistListItemArgs>> items;

    /**
     * @return Set of items containing item information.
     * 
     */
    public Optional<Output<List<ClientlistListItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * The number of items that a client list contains.
     * 
     */
    @Import(name="itemsCount")
    private @Nullable Output<Integer> itemsCount;

    /**
     * @return The number of items that a client list contains.
     * 
     */
    public Optional<Output<Integer>> itemsCount() {
        return Optional.ofNullable(this.itemsCount);
    }

    /**
     * The ID of the client list.
     * 
     */
    @Import(name="listId")
    private @Nullable Output<String> listId;

    /**
     * @return The ID of the client list.
     * 
     */
    public Optional<Output<String>> listId() {
        return Optional.ofNullable(this.listId);
    }

    /**
     * The name of the client list.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the client list.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The client list notes.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return The client list notes.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The client list tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The client list tags.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The current version of the client list.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The current version of the client list.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ClientlistListState() {}

    private ClientlistListState(ClientlistListState $) {
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.items = $.items;
        this.itemsCount = $.itemsCount;
        this.listId = $.listId;
        this.name = $.name;
        this.notes = $.notes;
        this.tags = $.tags;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientlistListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientlistListState $;

        public Builder() {
            $ = new ClientlistListState();
        }

        public Builder(ClientlistListState defaults) {
            $ = new ClientlistListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId Contract ID for which client list is assigned.
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID for which client list is assigned.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId Group ID for which client list is assigned.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId Group ID for which client list is assigned.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param items Set of items containing item information.
         * 
         * @return builder
         * 
         */
        public Builder items(@Nullable Output<List<ClientlistListItemArgs>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items Set of items containing item information.
         * 
         * @return builder
         * 
         */
        public Builder items(List<ClientlistListItemArgs> items) {
            return items(Output.of(items));
        }

        /**
         * @param items Set of items containing item information.
         * 
         * @return builder
         * 
         */
        public Builder items(ClientlistListItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param itemsCount The number of items that a client list contains.
         * 
         * @return builder
         * 
         */
        public Builder itemsCount(@Nullable Output<Integer> itemsCount) {
            $.itemsCount = itemsCount;
            return this;
        }

        /**
         * @param itemsCount The number of items that a client list contains.
         * 
         * @return builder
         * 
         */
        public Builder itemsCount(Integer itemsCount) {
            return itemsCount(Output.of(itemsCount));
        }

        /**
         * @param listId The ID of the client list.
         * 
         * @return builder
         * 
         */
        public Builder listId(@Nullable Output<String> listId) {
            $.listId = listId;
            return this;
        }

        /**
         * @param listId The ID of the client list.
         * 
         * @return builder
         * 
         */
        public Builder listId(String listId) {
            return listId(Output.of(listId));
        }

        /**
         * @param name The name of the client list.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the client list.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notes The client list notes.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes The client list notes.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param tags The client list tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The client list tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The client list tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the client list. Valid types: [IP GEO ASN TLS_FINGERPRINT FILE_HASH]
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version The current version of the client list.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The current version of the client list.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ClientlistListState build() {
            return $;
        }
    }

}
