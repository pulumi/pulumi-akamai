// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CloudAccessKeyCredentialsAArgs;
import com.pulumi.akamai.inputs.CloudAccessKeyCredentialsBArgs;
import com.pulumi.akamai.inputs.CloudAccessKeyNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CloudAccessKeyTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudAccessKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudAccessKeyArgs Empty = new CloudAccessKeyArgs();

    /**
     * Name of the access key.
     * 
     */
    @Import(name="accessKeyName", required=true)
    private Output<String> accessKeyName;

    /**
     * @return Name of the access key.
     * 
     */
    public Output<String> accessKeyName() {
        return this.accessKeyName;
    }

    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available:
     * &#34;AWS4_HMAC_SHA256&#34; or &#34;GOOG4_HMAC_SHA256&#34;.
     * 
     */
    @Import(name="authenticationMethod", required=true)
    private Output<String> authenticationMethod;

    /**
     * @return The type of cloud provider signing process used to authenticate API requests. Two options are available:
     * &#34;AWS4_HMAC_SHA256&#34; or &#34;GOOG4_HMAC_SHA256&#34;.
     * 
     */
    public Output<String> authenticationMethod() {
        return this.authenticationMethod;
    }

    /**
     * The unique identifier for the contract assigned to the access key
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return The unique identifier for the contract assigned to the access key
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     * 
     */
    @Import(name="credentialsA")
    private @Nullable Output<CloudAccessKeyCredentialsAArgs> credentialsA;

    /**
     * @return The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     * 
     */
    public Optional<Output<CloudAccessKeyCredentialsAArgs>> credentialsA() {
        return Optional.ofNullable(this.credentialsA);
    }

    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     * 
     */
    @Import(name="credentialsB")
    private @Nullable Output<CloudAccessKeyCredentialsBArgs> credentialsB;

    /**
     * @return The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     * 
     */
    public Optional<Output<CloudAccessKeyCredentialsBArgs>> credentialsB() {
        return Optional.ofNullable(this.credentialsB);
    }

    /**
     * The unique identifier assigned to the access control group assigned to the access key
     * 
     */
    @Import(name="groupId", required=true)
    private Output<Integer> groupId;

    /**
     * @return The unique identifier assigned to the access control group assigned to the access key
     * 
     */
    public Output<Integer> groupId() {
        return this.groupId;
    }

    /**
     * The secure networks that you assigned the access key to during creation
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<CloudAccessKeyNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return The secure networks that you assigned the access key to during creation
     * 
     */
    public Output<CloudAccessKeyNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    @Import(name="timeouts")
    private @Nullable Output<CloudAccessKeyTimeoutsArgs> timeouts;

    public Optional<Output<CloudAccessKeyTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private CloudAccessKeyArgs() {}

    private CloudAccessKeyArgs(CloudAccessKeyArgs $) {
        this.accessKeyName = $.accessKeyName;
        this.authenticationMethod = $.authenticationMethod;
        this.contractId = $.contractId;
        this.credentialsA = $.credentialsA;
        this.credentialsB = $.credentialsB;
        this.groupId = $.groupId;
        this.networkConfiguration = $.networkConfiguration;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudAccessKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudAccessKeyArgs $;

        public Builder() {
            $ = new CloudAccessKeyArgs();
        }

        public Builder(CloudAccessKeyArgs defaults) {
            $ = new CloudAccessKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyName Name of the access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyName(Output<String> accessKeyName) {
            $.accessKeyName = accessKeyName;
            return this;
        }

        /**
         * @param accessKeyName Name of the access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyName(String accessKeyName) {
            return accessKeyName(Output.of(accessKeyName));
        }

        /**
         * @param authenticationMethod The type of cloud provider signing process used to authenticate API requests. Two options are available:
         * &#34;AWS4_HMAC_SHA256&#34; or &#34;GOOG4_HMAC_SHA256&#34;.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(Output<String> authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        /**
         * @param authenticationMethod The type of cloud provider signing process used to authenticate API requests. Two options are available:
         * &#34;AWS4_HMAC_SHA256&#34; or &#34;GOOG4_HMAC_SHA256&#34;.
         * 
         * @return builder
         * 
         */
        public Builder authenticationMethod(String authenticationMethod) {
            return authenticationMethod(Output.of(authenticationMethod));
        }

        /**
         * @param contractId The unique identifier for the contract assigned to the access key
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The unique identifier for the contract assigned to the access key
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param credentialsA The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
         * identified as access key version. Access key can contain only two access key versions at specific time (defined as
         * credentialsA and credentialsB).
         * 
         * @return builder
         * 
         */
        public Builder credentialsA(@Nullable Output<CloudAccessKeyCredentialsAArgs> credentialsA) {
            $.credentialsA = credentialsA;
            return this;
        }

        /**
         * @param credentialsA The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
         * identified as access key version. Access key can contain only two access key versions at specific time (defined as
         * credentialsA and credentialsB).
         * 
         * @return builder
         * 
         */
        public Builder credentialsA(CloudAccessKeyCredentialsAArgs credentialsA) {
            return credentialsA(Output.of(credentialsA));
        }

        /**
         * @param credentialsB The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
         * identified as access key version. Access key can contain only two access key versions at specific time (defined as
         * credentialsA and credentialsB).
         * 
         * @return builder
         * 
         */
        public Builder credentialsB(@Nullable Output<CloudAccessKeyCredentialsBArgs> credentialsB) {
            $.credentialsB = credentialsB;
            return this;
        }

        /**
         * @param credentialsB The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
         * identified as access key version. Access key can contain only two access key versions at specific time (defined as
         * credentialsA and credentialsB).
         * 
         * @return builder
         * 
         */
        public Builder credentialsB(CloudAccessKeyCredentialsBArgs credentialsB) {
            return credentialsB(Output.of(credentialsB));
        }

        /**
         * @param groupId The unique identifier assigned to the access control group assigned to the access key
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The unique identifier assigned to the access control group assigned to the access key
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param networkConfiguration The secure networks that you assigned the access key to during creation
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<CloudAccessKeyNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration The secure networks that you assigned the access key to during creation
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CloudAccessKeyNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public Builder timeouts(@Nullable Output<CloudAccessKeyTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(CloudAccessKeyTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public CloudAccessKeyArgs build() {
            if ($.accessKeyName == null) {
                throw new MissingRequiredPropertyException("CloudAccessKeyArgs", "accessKeyName");
            }
            if ($.authenticationMethod == null) {
                throw new MissingRequiredPropertyException("CloudAccessKeyArgs", "authenticationMethod");
            }
            if ($.contractId == null) {
                throw new MissingRequiredPropertyException("CloudAccessKeyArgs", "contractId");
            }
            if ($.groupId == null) {
                throw new MissingRequiredPropertyException("CloudAccessKeyArgs", "groupId");
            }
            if ($.networkConfiguration == null) {
                throw new MissingRequiredPropertyException("CloudAccessKeyArgs", "networkConfiguration");
            }
            return $;
        }
    }

}
