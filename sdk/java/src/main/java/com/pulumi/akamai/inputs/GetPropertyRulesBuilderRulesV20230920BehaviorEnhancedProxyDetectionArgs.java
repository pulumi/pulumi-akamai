// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs();

    @Import(name="anonymousVpn")
    private @Nullable Output<String> anonymousVpn;

    public Optional<Output<String>> anonymousVpn() {
        return Optional.ofNullable(this.anonymousVpn);
    }

    @Import(name="bestPracticeAction")
    private @Nullable Output<String> bestPracticeAction;

    public Optional<Output<String>> bestPracticeAction() {
        return Optional.ofNullable(this.bestPracticeAction);
    }

    @Import(name="bestPracticeRedirecturl")
    private @Nullable Output<String> bestPracticeRedirecturl;

    public Optional<Output<String>> bestPracticeRedirecturl() {
        return Optional.ofNullable(this.bestPracticeRedirecturl);
    }

    @Import(name="detectAnonymousVpn")
    private @Nullable Output<Boolean> detectAnonymousVpn;

    public Optional<Output<Boolean>> detectAnonymousVpn() {
        return Optional.ofNullable(this.detectAnonymousVpn);
    }

    @Import(name="detectAnonymousVpnAction")
    private @Nullable Output<String> detectAnonymousVpnAction;

    public Optional<Output<String>> detectAnonymousVpnAction() {
        return Optional.ofNullable(this.detectAnonymousVpnAction);
    }

    @Import(name="detectAnonymousVpnRedirecturl")
    private @Nullable Output<String> detectAnonymousVpnRedirecturl;

    public Optional<Output<String>> detectAnonymousVpnRedirecturl() {
        return Optional.ofNullable(this.detectAnonymousVpnRedirecturl);
    }

    @Import(name="detectHostingProvider")
    private @Nullable Output<Boolean> detectHostingProvider;

    public Optional<Output<Boolean>> detectHostingProvider() {
        return Optional.ofNullable(this.detectHostingProvider);
    }

    @Import(name="detectHostingProviderAction")
    private @Nullable Output<String> detectHostingProviderAction;

    public Optional<Output<String>> detectHostingProviderAction() {
        return Optional.ofNullable(this.detectHostingProviderAction);
    }

    @Import(name="detectHostingProviderRedirecturl")
    private @Nullable Output<String> detectHostingProviderRedirecturl;

    public Optional<Output<String>> detectHostingProviderRedirecturl() {
        return Optional.ofNullable(this.detectHostingProviderRedirecturl);
    }

    @Import(name="detectPublicProxy")
    private @Nullable Output<Boolean> detectPublicProxy;

    public Optional<Output<Boolean>> detectPublicProxy() {
        return Optional.ofNullable(this.detectPublicProxy);
    }

    @Import(name="detectPublicProxyAction")
    private @Nullable Output<String> detectPublicProxyAction;

    public Optional<Output<String>> detectPublicProxyAction() {
        return Optional.ofNullable(this.detectPublicProxyAction);
    }

    @Import(name="detectPublicProxyRedirecturl")
    private @Nullable Output<String> detectPublicProxyRedirecturl;

    public Optional<Output<String>> detectPublicProxyRedirecturl() {
        return Optional.ofNullable(this.detectPublicProxyRedirecturl);
    }

    @Import(name="detectResidentialProxy")
    private @Nullable Output<Boolean> detectResidentialProxy;

    public Optional<Output<Boolean>> detectResidentialProxy() {
        return Optional.ofNullable(this.detectResidentialProxy);
    }

    @Import(name="detectResidentialProxyAction")
    private @Nullable Output<String> detectResidentialProxyAction;

    public Optional<Output<String>> detectResidentialProxyAction() {
        return Optional.ofNullable(this.detectResidentialProxyAction);
    }

    @Import(name="detectResidentialProxyRedirecturl")
    private @Nullable Output<String> detectResidentialProxyRedirecturl;

    public Optional<Output<String>> detectResidentialProxyRedirecturl() {
        return Optional.ofNullable(this.detectResidentialProxyRedirecturl);
    }

    @Import(name="detectSmartDnsProxy")
    private @Nullable Output<Boolean> detectSmartDnsProxy;

    public Optional<Output<Boolean>> detectSmartDnsProxy() {
        return Optional.ofNullable(this.detectSmartDnsProxy);
    }

    @Import(name="detectSmartDnsProxyAction")
    private @Nullable Output<String> detectSmartDnsProxyAction;

    public Optional<Output<String>> detectSmartDnsProxyAction() {
        return Optional.ofNullable(this.detectSmartDnsProxyAction);
    }

    @Import(name="detectSmartDnsProxyRedirecturl")
    private @Nullable Output<String> detectSmartDnsProxyRedirecturl;

    public Optional<Output<String>> detectSmartDnsProxyRedirecturl() {
        return Optional.ofNullable(this.detectSmartDnsProxyRedirecturl);
    }

    @Import(name="detectTorExitNode")
    private @Nullable Output<Boolean> detectTorExitNode;

    public Optional<Output<Boolean>> detectTorExitNode() {
        return Optional.ofNullable(this.detectTorExitNode);
    }

    @Import(name="detectTorExitNodeAction")
    private @Nullable Output<String> detectTorExitNodeAction;

    public Optional<Output<String>> detectTorExitNodeAction() {
        return Optional.ofNullable(this.detectTorExitNodeAction);
    }

    @Import(name="detectTorExitNodeRedirecturl")
    private @Nullable Output<String> detectTorExitNodeRedirecturl;

    public Optional<Output<String>> detectTorExitNodeRedirecturl() {
        return Optional.ofNullable(this.detectTorExitNodeRedirecturl);
    }

    @Import(name="detectVpnDataCenter")
    private @Nullable Output<Boolean> detectVpnDataCenter;

    public Optional<Output<Boolean>> detectVpnDataCenter() {
        return Optional.ofNullable(this.detectVpnDataCenter);
    }

    @Import(name="detectVpnDataCenterAction")
    private @Nullable Output<String> detectVpnDataCenterAction;

    public Optional<Output<String>> detectVpnDataCenterAction() {
        return Optional.ofNullable(this.detectVpnDataCenterAction);
    }

    @Import(name="detectVpnDataCenterRedirecturl")
    private @Nullable Output<String> detectVpnDataCenterRedirecturl;

    public Optional<Output<String>> detectVpnDataCenterRedirecturl() {
        return Optional.ofNullable(this.detectVpnDataCenterRedirecturl);
    }

    @Import(name="enableConfigurationMode")
    private @Nullable Output<String> enableConfigurationMode;

    public Optional<Output<String>> enableConfigurationMode() {
        return Optional.ofNullable(this.enableConfigurationMode);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="forwardHeaderEnrichment")
    private @Nullable Output<Boolean> forwardHeaderEnrichment;

    public Optional<Output<Boolean>> forwardHeaderEnrichment() {
        return Optional.ofNullable(this.forwardHeaderEnrichment);
    }

    @Import(name="hostingProvider")
    private @Nullable Output<String> hostingProvider;

    public Optional<Output<String>> hostingProvider() {
        return Optional.ofNullable(this.hostingProvider);
    }

    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    @Import(name="publicProxy")
    private @Nullable Output<String> publicProxy;

    public Optional<Output<String>> publicProxy() {
        return Optional.ofNullable(this.publicProxy);
    }

    @Import(name="residentialProxy")
    private @Nullable Output<String> residentialProxy;

    public Optional<Output<String>> residentialProxy() {
        return Optional.ofNullable(this.residentialProxy);
    }

    @Import(name="smartDnsProxy")
    private @Nullable Output<String> smartDnsProxy;

    public Optional<Output<String>> smartDnsProxy() {
        return Optional.ofNullable(this.smartDnsProxy);
    }

    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    @Import(name="torExitNode")
    private @Nullable Output<String> torExitNode;

    public Optional<Output<String>> torExitNode() {
        return Optional.ofNullable(this.torExitNode);
    }

    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="vpnDataCenter")
    private @Nullable Output<String> vpnDataCenter;

    public Optional<Output<String>> vpnDataCenter() {
        return Optional.ofNullable(this.vpnDataCenter);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs $) {
        this.anonymousVpn = $.anonymousVpn;
        this.bestPracticeAction = $.bestPracticeAction;
        this.bestPracticeRedirecturl = $.bestPracticeRedirecturl;
        this.detectAnonymousVpn = $.detectAnonymousVpn;
        this.detectAnonymousVpnAction = $.detectAnonymousVpnAction;
        this.detectAnonymousVpnRedirecturl = $.detectAnonymousVpnRedirecturl;
        this.detectHostingProvider = $.detectHostingProvider;
        this.detectHostingProviderAction = $.detectHostingProviderAction;
        this.detectHostingProviderRedirecturl = $.detectHostingProviderRedirecturl;
        this.detectPublicProxy = $.detectPublicProxy;
        this.detectPublicProxyAction = $.detectPublicProxyAction;
        this.detectPublicProxyRedirecturl = $.detectPublicProxyRedirecturl;
        this.detectResidentialProxy = $.detectResidentialProxy;
        this.detectResidentialProxyAction = $.detectResidentialProxyAction;
        this.detectResidentialProxyRedirecturl = $.detectResidentialProxyRedirecturl;
        this.detectSmartDnsProxy = $.detectSmartDnsProxy;
        this.detectSmartDnsProxyAction = $.detectSmartDnsProxyAction;
        this.detectSmartDnsProxyRedirecturl = $.detectSmartDnsProxyRedirecturl;
        this.detectTorExitNode = $.detectTorExitNode;
        this.detectTorExitNodeAction = $.detectTorExitNodeAction;
        this.detectTorExitNodeRedirecturl = $.detectTorExitNodeRedirecturl;
        this.detectVpnDataCenter = $.detectVpnDataCenter;
        this.detectVpnDataCenterAction = $.detectVpnDataCenterAction;
        this.detectVpnDataCenterRedirecturl = $.detectVpnDataCenterRedirecturl;
        this.enableConfigurationMode = $.enableConfigurationMode;
        this.enabled = $.enabled;
        this.forwardHeaderEnrichment = $.forwardHeaderEnrichment;
        this.hostingProvider = $.hostingProvider;
        this.locked = $.locked;
        this.publicProxy = $.publicProxy;
        this.residentialProxy = $.residentialProxy;
        this.smartDnsProxy = $.smartDnsProxy;
        this.templateUuid = $.templateUuid;
        this.torExitNode = $.torExitNode;
        this.uuid = $.uuid;
        this.vpnDataCenter = $.vpnDataCenter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder anonymousVpn(@Nullable Output<String> anonymousVpn) {
            $.anonymousVpn = anonymousVpn;
            return this;
        }

        public Builder anonymousVpn(String anonymousVpn) {
            return anonymousVpn(Output.of(anonymousVpn));
        }

        public Builder bestPracticeAction(@Nullable Output<String> bestPracticeAction) {
            $.bestPracticeAction = bestPracticeAction;
            return this;
        }

        public Builder bestPracticeAction(String bestPracticeAction) {
            return bestPracticeAction(Output.of(bestPracticeAction));
        }

        public Builder bestPracticeRedirecturl(@Nullable Output<String> bestPracticeRedirecturl) {
            $.bestPracticeRedirecturl = bestPracticeRedirecturl;
            return this;
        }

        public Builder bestPracticeRedirecturl(String bestPracticeRedirecturl) {
            return bestPracticeRedirecturl(Output.of(bestPracticeRedirecturl));
        }

        public Builder detectAnonymousVpn(@Nullable Output<Boolean> detectAnonymousVpn) {
            $.detectAnonymousVpn = detectAnonymousVpn;
            return this;
        }

        public Builder detectAnonymousVpn(Boolean detectAnonymousVpn) {
            return detectAnonymousVpn(Output.of(detectAnonymousVpn));
        }

        public Builder detectAnonymousVpnAction(@Nullable Output<String> detectAnonymousVpnAction) {
            $.detectAnonymousVpnAction = detectAnonymousVpnAction;
            return this;
        }

        public Builder detectAnonymousVpnAction(String detectAnonymousVpnAction) {
            return detectAnonymousVpnAction(Output.of(detectAnonymousVpnAction));
        }

        public Builder detectAnonymousVpnRedirecturl(@Nullable Output<String> detectAnonymousVpnRedirecturl) {
            $.detectAnonymousVpnRedirecturl = detectAnonymousVpnRedirecturl;
            return this;
        }

        public Builder detectAnonymousVpnRedirecturl(String detectAnonymousVpnRedirecturl) {
            return detectAnonymousVpnRedirecturl(Output.of(detectAnonymousVpnRedirecturl));
        }

        public Builder detectHostingProvider(@Nullable Output<Boolean> detectHostingProvider) {
            $.detectHostingProvider = detectHostingProvider;
            return this;
        }

        public Builder detectHostingProvider(Boolean detectHostingProvider) {
            return detectHostingProvider(Output.of(detectHostingProvider));
        }

        public Builder detectHostingProviderAction(@Nullable Output<String> detectHostingProviderAction) {
            $.detectHostingProviderAction = detectHostingProviderAction;
            return this;
        }

        public Builder detectHostingProviderAction(String detectHostingProviderAction) {
            return detectHostingProviderAction(Output.of(detectHostingProviderAction));
        }

        public Builder detectHostingProviderRedirecturl(@Nullable Output<String> detectHostingProviderRedirecturl) {
            $.detectHostingProviderRedirecturl = detectHostingProviderRedirecturl;
            return this;
        }

        public Builder detectHostingProviderRedirecturl(String detectHostingProviderRedirecturl) {
            return detectHostingProviderRedirecturl(Output.of(detectHostingProviderRedirecturl));
        }

        public Builder detectPublicProxy(@Nullable Output<Boolean> detectPublicProxy) {
            $.detectPublicProxy = detectPublicProxy;
            return this;
        }

        public Builder detectPublicProxy(Boolean detectPublicProxy) {
            return detectPublicProxy(Output.of(detectPublicProxy));
        }

        public Builder detectPublicProxyAction(@Nullable Output<String> detectPublicProxyAction) {
            $.detectPublicProxyAction = detectPublicProxyAction;
            return this;
        }

        public Builder detectPublicProxyAction(String detectPublicProxyAction) {
            return detectPublicProxyAction(Output.of(detectPublicProxyAction));
        }

        public Builder detectPublicProxyRedirecturl(@Nullable Output<String> detectPublicProxyRedirecturl) {
            $.detectPublicProxyRedirecturl = detectPublicProxyRedirecturl;
            return this;
        }

        public Builder detectPublicProxyRedirecturl(String detectPublicProxyRedirecturl) {
            return detectPublicProxyRedirecturl(Output.of(detectPublicProxyRedirecturl));
        }

        public Builder detectResidentialProxy(@Nullable Output<Boolean> detectResidentialProxy) {
            $.detectResidentialProxy = detectResidentialProxy;
            return this;
        }

        public Builder detectResidentialProxy(Boolean detectResidentialProxy) {
            return detectResidentialProxy(Output.of(detectResidentialProxy));
        }

        public Builder detectResidentialProxyAction(@Nullable Output<String> detectResidentialProxyAction) {
            $.detectResidentialProxyAction = detectResidentialProxyAction;
            return this;
        }

        public Builder detectResidentialProxyAction(String detectResidentialProxyAction) {
            return detectResidentialProxyAction(Output.of(detectResidentialProxyAction));
        }

        public Builder detectResidentialProxyRedirecturl(@Nullable Output<String> detectResidentialProxyRedirecturl) {
            $.detectResidentialProxyRedirecturl = detectResidentialProxyRedirecturl;
            return this;
        }

        public Builder detectResidentialProxyRedirecturl(String detectResidentialProxyRedirecturl) {
            return detectResidentialProxyRedirecturl(Output.of(detectResidentialProxyRedirecturl));
        }

        public Builder detectSmartDnsProxy(@Nullable Output<Boolean> detectSmartDnsProxy) {
            $.detectSmartDnsProxy = detectSmartDnsProxy;
            return this;
        }

        public Builder detectSmartDnsProxy(Boolean detectSmartDnsProxy) {
            return detectSmartDnsProxy(Output.of(detectSmartDnsProxy));
        }

        public Builder detectSmartDnsProxyAction(@Nullable Output<String> detectSmartDnsProxyAction) {
            $.detectSmartDnsProxyAction = detectSmartDnsProxyAction;
            return this;
        }

        public Builder detectSmartDnsProxyAction(String detectSmartDnsProxyAction) {
            return detectSmartDnsProxyAction(Output.of(detectSmartDnsProxyAction));
        }

        public Builder detectSmartDnsProxyRedirecturl(@Nullable Output<String> detectSmartDnsProxyRedirecturl) {
            $.detectSmartDnsProxyRedirecturl = detectSmartDnsProxyRedirecturl;
            return this;
        }

        public Builder detectSmartDnsProxyRedirecturl(String detectSmartDnsProxyRedirecturl) {
            return detectSmartDnsProxyRedirecturl(Output.of(detectSmartDnsProxyRedirecturl));
        }

        public Builder detectTorExitNode(@Nullable Output<Boolean> detectTorExitNode) {
            $.detectTorExitNode = detectTorExitNode;
            return this;
        }

        public Builder detectTorExitNode(Boolean detectTorExitNode) {
            return detectTorExitNode(Output.of(detectTorExitNode));
        }

        public Builder detectTorExitNodeAction(@Nullable Output<String> detectTorExitNodeAction) {
            $.detectTorExitNodeAction = detectTorExitNodeAction;
            return this;
        }

        public Builder detectTorExitNodeAction(String detectTorExitNodeAction) {
            return detectTorExitNodeAction(Output.of(detectTorExitNodeAction));
        }

        public Builder detectTorExitNodeRedirecturl(@Nullable Output<String> detectTorExitNodeRedirecturl) {
            $.detectTorExitNodeRedirecturl = detectTorExitNodeRedirecturl;
            return this;
        }

        public Builder detectTorExitNodeRedirecturl(String detectTorExitNodeRedirecturl) {
            return detectTorExitNodeRedirecturl(Output.of(detectTorExitNodeRedirecturl));
        }

        public Builder detectVpnDataCenter(@Nullable Output<Boolean> detectVpnDataCenter) {
            $.detectVpnDataCenter = detectVpnDataCenter;
            return this;
        }

        public Builder detectVpnDataCenter(Boolean detectVpnDataCenter) {
            return detectVpnDataCenter(Output.of(detectVpnDataCenter));
        }

        public Builder detectVpnDataCenterAction(@Nullable Output<String> detectVpnDataCenterAction) {
            $.detectVpnDataCenterAction = detectVpnDataCenterAction;
            return this;
        }

        public Builder detectVpnDataCenterAction(String detectVpnDataCenterAction) {
            return detectVpnDataCenterAction(Output.of(detectVpnDataCenterAction));
        }

        public Builder detectVpnDataCenterRedirecturl(@Nullable Output<String> detectVpnDataCenterRedirecturl) {
            $.detectVpnDataCenterRedirecturl = detectVpnDataCenterRedirecturl;
            return this;
        }

        public Builder detectVpnDataCenterRedirecturl(String detectVpnDataCenterRedirecturl) {
            return detectVpnDataCenterRedirecturl(Output.of(detectVpnDataCenterRedirecturl));
        }

        public Builder enableConfigurationMode(@Nullable Output<String> enableConfigurationMode) {
            $.enableConfigurationMode = enableConfigurationMode;
            return this;
        }

        public Builder enableConfigurationMode(String enableConfigurationMode) {
            return enableConfigurationMode(Output.of(enableConfigurationMode));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder forwardHeaderEnrichment(@Nullable Output<Boolean> forwardHeaderEnrichment) {
            $.forwardHeaderEnrichment = forwardHeaderEnrichment;
            return this;
        }

        public Builder forwardHeaderEnrichment(Boolean forwardHeaderEnrichment) {
            return forwardHeaderEnrichment(Output.of(forwardHeaderEnrichment));
        }

        public Builder hostingProvider(@Nullable Output<String> hostingProvider) {
            $.hostingProvider = hostingProvider;
            return this;
        }

        public Builder hostingProvider(String hostingProvider) {
            return hostingProvider(Output.of(hostingProvider));
        }

        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public Builder publicProxy(@Nullable Output<String> publicProxy) {
            $.publicProxy = publicProxy;
            return this;
        }

        public Builder publicProxy(String publicProxy) {
            return publicProxy(Output.of(publicProxy));
        }

        public Builder residentialProxy(@Nullable Output<String> residentialProxy) {
            $.residentialProxy = residentialProxy;
            return this;
        }

        public Builder residentialProxy(String residentialProxy) {
            return residentialProxy(Output.of(residentialProxy));
        }

        public Builder smartDnsProxy(@Nullable Output<String> smartDnsProxy) {
            $.smartDnsProxy = smartDnsProxy;
            return this;
        }

        public Builder smartDnsProxy(String smartDnsProxy) {
            return smartDnsProxy(Output.of(smartDnsProxy));
        }

        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        public Builder torExitNode(@Nullable Output<String> torExitNode) {
            $.torExitNode = torExitNode;
            return this;
        }

        public Builder torExitNode(String torExitNode) {
            return torExitNode(Output.of(torExitNode));
        }

        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public Builder vpnDataCenter(@Nullable Output<String> vpnDataCenter) {
            $.vpnDataCenter = vpnDataCenter;
            return this;
        }

        public Builder vpnDataCenter(String vpnDataCenter) {
            return vpnDataCenter(Output.of(vpnDataCenter));
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetectionArgs build() {
            return $;
        }
    }

}
