// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyVideoPolicyOutput {
    /**
     * @return The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     * 
     */
    private @Nullable String perceptualQuality;
    /**
     * @return The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     * 
     */
    private @Nullable String perceptualQualityVar;
    /**
     * @return Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image &amp; Video Manager processes the video. If not specified the original video plays during the processing time.
     * 
     */
    private @Nullable String placeholderVideoUrl;
    /**
     * @return Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image &amp; Video Manager processes the video. If not specified the original video plays during the processing time.
     * 
     */
    private @Nullable String placeholderVideoUrlVar;
    /**
     * @return Override the quality of video to serve when Image &amp; Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     * 
     */
    private @Nullable String videoAdaptiveQuality;
    /**
     * @return Override the quality of video to serve when Image &amp; Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     * 
     */
    private @Nullable String videoAdaptiveQualityVar;

    private GetImagingPolicyVideoPolicyOutput() {}
    /**
     * @return The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     * 
     */
    public Optional<String> perceptualQuality() {
        return Optional.ofNullable(this.perceptualQuality);
    }
    /**
     * @return The quality of derivative videos. High preserves video quality with reduced byte savings while low reduces video quality to increase byte savings.
     * 
     */
    public Optional<String> perceptualQualityVar() {
        return Optional.ofNullable(this.perceptualQualityVar);
    }
    /**
     * @return Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image &amp; Video Manager processes the video. If not specified the original video plays during the processing time.
     * 
     */
    public Optional<String> placeholderVideoUrl() {
        return Optional.ofNullable(this.placeholderVideoUrl);
    }
    /**
     * @return Allows you to add a specific placeholder video that appears when a user first requests a video, but before Image &amp; Video Manager processes the video. If not specified the original video plays during the processing time.
     * 
     */
    public Optional<String> placeholderVideoUrlVar() {
        return Optional.ofNullable(this.placeholderVideoUrlVar);
    }
    /**
     * @return Override the quality of video to serve when Image &amp; Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     * 
     */
    public Optional<String> videoAdaptiveQuality() {
        return Optional.ofNullable(this.videoAdaptiveQuality);
    }
    /**
     * @return Override the quality of video to serve when Image &amp; Video Manager detects a slow connection. Specifying lower values lets users with slow connections browse your site with reduced load times without impacting the quality of videos for users with faster connections.
     * 
     */
    public Optional<String> videoAdaptiveQualityVar() {
        return Optional.ofNullable(this.videoAdaptiveQualityVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyVideoPolicyOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String perceptualQuality;
        private @Nullable String perceptualQualityVar;
        private @Nullable String placeholderVideoUrl;
        private @Nullable String placeholderVideoUrlVar;
        private @Nullable String videoAdaptiveQuality;
        private @Nullable String videoAdaptiveQualityVar;
        public Builder() {}
        public Builder(GetImagingPolicyVideoPolicyOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.perceptualQuality = defaults.perceptualQuality;
    	      this.perceptualQualityVar = defaults.perceptualQualityVar;
    	      this.placeholderVideoUrl = defaults.placeholderVideoUrl;
    	      this.placeholderVideoUrlVar = defaults.placeholderVideoUrlVar;
    	      this.videoAdaptiveQuality = defaults.videoAdaptiveQuality;
    	      this.videoAdaptiveQualityVar = defaults.videoAdaptiveQualityVar;
        }

        @CustomType.Setter
        public Builder perceptualQuality(@Nullable String perceptualQuality) {

            this.perceptualQuality = perceptualQuality;
            return this;
        }
        @CustomType.Setter
        public Builder perceptualQualityVar(@Nullable String perceptualQualityVar) {

            this.perceptualQualityVar = perceptualQualityVar;
            return this;
        }
        @CustomType.Setter
        public Builder placeholderVideoUrl(@Nullable String placeholderVideoUrl) {

            this.placeholderVideoUrl = placeholderVideoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder placeholderVideoUrlVar(@Nullable String placeholderVideoUrlVar) {

            this.placeholderVideoUrlVar = placeholderVideoUrlVar;
            return this;
        }
        @CustomType.Setter
        public Builder videoAdaptiveQuality(@Nullable String videoAdaptiveQuality) {

            this.videoAdaptiveQuality = videoAdaptiveQuality;
            return this;
        }
        @CustomType.Setter
        public Builder videoAdaptiveQualityVar(@Nullable String videoAdaptiveQualityVar) {

            this.videoAdaptiveQualityVar = videoAdaptiveQualityVar;
            return this;
        }
        public GetImagingPolicyVideoPolicyOutput build() {
            final var _resultValue = new GetImagingPolicyVideoPolicyOutput();
            _resultValue.perceptualQuality = perceptualQuality;
            _resultValue.perceptualQualityVar = perceptualQualityVar;
            _resultValue.placeholderVideoUrl = placeholderVideoUrl;
            _resultValue.placeholderVideoUrlVar = placeholderVideoUrlVar;
            _resultValue.videoAdaptiveQuality = videoAdaptiveQuality;
            _resultValue.videoAdaptiveQualityVar = videoAdaptiveQualityVar;
            return _resultValue;
        }
    }
}
