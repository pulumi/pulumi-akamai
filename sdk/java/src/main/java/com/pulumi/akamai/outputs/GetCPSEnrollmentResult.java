// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetCPSEnrollmentAdminContact;
import com.pulumi.akamai.outputs.GetCPSEnrollmentCsr;
import com.pulumi.akamai.outputs.GetCPSEnrollmentDnsChallenge;
import com.pulumi.akamai.outputs.GetCPSEnrollmentHttpChallenge;
import com.pulumi.akamai.outputs.GetCPSEnrollmentNetworkConfiguration;
import com.pulumi.akamai.outputs.GetCPSEnrollmentOrganization;
import com.pulumi.akamai.outputs.GetCPSEnrollmentTechContact;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCPSEnrollmentResult {
    private List<GetCPSEnrollmentAdminContact> adminContacts;
    private List<Integer> assignedSlots;
    private String certificateChainType;
    private String certificateType;
    private String commonName;
    private String contractId;
    private List<GetCPSEnrollmentCsr> csrs;
    private List<GetCPSEnrollmentDnsChallenge> dnsChallenges;
    private Boolean enableMultiStackedCertificates;
    private Integer enrollmentId;
    private List<GetCPSEnrollmentHttpChallenge> httpChallenges;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetCPSEnrollmentNetworkConfiguration> networkConfigurations;
    private Integer orgId;
    private List<GetCPSEnrollmentOrganization> organizations;
    private Boolean pendingChanges;
    private List<Integer> productionSlots;
    private String registrationAuthority;
    private List<String> sans;
    private String secureNetwork;
    private String signatureAlgorithm;
    private Boolean sniOnly;
    private List<Integer> stagingSlots;
    private List<GetCPSEnrollmentTechContact> techContacts;
    private String validationType;

    private GetCPSEnrollmentResult() {}
    public List<GetCPSEnrollmentAdminContact> adminContacts() {
        return this.adminContacts;
    }
    public List<Integer> assignedSlots() {
        return this.assignedSlots;
    }
    public String certificateChainType() {
        return this.certificateChainType;
    }
    public String certificateType() {
        return this.certificateType;
    }
    public String commonName() {
        return this.commonName;
    }
    public String contractId() {
        return this.contractId;
    }
    public List<GetCPSEnrollmentCsr> csrs() {
        return this.csrs;
    }
    public List<GetCPSEnrollmentDnsChallenge> dnsChallenges() {
        return this.dnsChallenges;
    }
    public Boolean enableMultiStackedCertificates() {
        return this.enableMultiStackedCertificates;
    }
    public Integer enrollmentId() {
        return this.enrollmentId;
    }
    public List<GetCPSEnrollmentHttpChallenge> httpChallenges() {
        return this.httpChallenges;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetCPSEnrollmentNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    public Integer orgId() {
        return this.orgId;
    }
    public List<GetCPSEnrollmentOrganization> organizations() {
        return this.organizations;
    }
    public Boolean pendingChanges() {
        return this.pendingChanges;
    }
    public List<Integer> productionSlots() {
        return this.productionSlots;
    }
    public String registrationAuthority() {
        return this.registrationAuthority;
    }
    public List<String> sans() {
        return this.sans;
    }
    public String secureNetwork() {
        return this.secureNetwork;
    }
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    public Boolean sniOnly() {
        return this.sniOnly;
    }
    public List<Integer> stagingSlots() {
        return this.stagingSlots;
    }
    public List<GetCPSEnrollmentTechContact> techContacts() {
        return this.techContacts;
    }
    public String validationType() {
        return this.validationType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCPSEnrollmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCPSEnrollmentAdminContact> adminContacts;
        private List<Integer> assignedSlots;
        private String certificateChainType;
        private String certificateType;
        private String commonName;
        private String contractId;
        private List<GetCPSEnrollmentCsr> csrs;
        private List<GetCPSEnrollmentDnsChallenge> dnsChallenges;
        private Boolean enableMultiStackedCertificates;
        private Integer enrollmentId;
        private List<GetCPSEnrollmentHttpChallenge> httpChallenges;
        private String id;
        private List<GetCPSEnrollmentNetworkConfiguration> networkConfigurations;
        private Integer orgId;
        private List<GetCPSEnrollmentOrganization> organizations;
        private Boolean pendingChanges;
        private List<Integer> productionSlots;
        private String registrationAuthority;
        private List<String> sans;
        private String secureNetwork;
        private String signatureAlgorithm;
        private Boolean sniOnly;
        private List<Integer> stagingSlots;
        private List<GetCPSEnrollmentTechContact> techContacts;
        private String validationType;
        public Builder() {}
        public Builder(GetCPSEnrollmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminContacts = defaults.adminContacts;
    	      this.assignedSlots = defaults.assignedSlots;
    	      this.certificateChainType = defaults.certificateChainType;
    	      this.certificateType = defaults.certificateType;
    	      this.commonName = defaults.commonName;
    	      this.contractId = defaults.contractId;
    	      this.csrs = defaults.csrs;
    	      this.dnsChallenges = defaults.dnsChallenges;
    	      this.enableMultiStackedCertificates = defaults.enableMultiStackedCertificates;
    	      this.enrollmentId = defaults.enrollmentId;
    	      this.httpChallenges = defaults.httpChallenges;
    	      this.id = defaults.id;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.orgId = defaults.orgId;
    	      this.organizations = defaults.organizations;
    	      this.pendingChanges = defaults.pendingChanges;
    	      this.productionSlots = defaults.productionSlots;
    	      this.registrationAuthority = defaults.registrationAuthority;
    	      this.sans = defaults.sans;
    	      this.secureNetwork = defaults.secureNetwork;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.sniOnly = defaults.sniOnly;
    	      this.stagingSlots = defaults.stagingSlots;
    	      this.techContacts = defaults.techContacts;
    	      this.validationType = defaults.validationType;
        }

        @CustomType.Setter
        public Builder adminContacts(List<GetCPSEnrollmentAdminContact> adminContacts) {
            if (adminContacts == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "adminContacts");
            }
            this.adminContacts = adminContacts;
            return this;
        }
        public Builder adminContacts(GetCPSEnrollmentAdminContact... adminContacts) {
            return adminContacts(List.of(adminContacts));
        }
        @CustomType.Setter
        public Builder assignedSlots(List<Integer> assignedSlots) {
            if (assignedSlots == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "assignedSlots");
            }
            this.assignedSlots = assignedSlots;
            return this;
        }
        public Builder assignedSlots(Integer... assignedSlots) {
            return assignedSlots(List.of(assignedSlots));
        }
        @CustomType.Setter
        public Builder certificateChainType(String certificateChainType) {
            if (certificateChainType == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "certificateChainType");
            }
            this.certificateChainType = certificateChainType;
            return this;
        }
        @CustomType.Setter
        public Builder certificateType(String certificateType) {
            if (certificateType == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "certificateType");
            }
            this.certificateType = certificateType;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(String commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder contractId(String contractId) {
            if (contractId == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "contractId");
            }
            this.contractId = contractId;
            return this;
        }
        @CustomType.Setter
        public Builder csrs(List<GetCPSEnrollmentCsr> csrs) {
            if (csrs == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "csrs");
            }
            this.csrs = csrs;
            return this;
        }
        public Builder csrs(GetCPSEnrollmentCsr... csrs) {
            return csrs(List.of(csrs));
        }
        @CustomType.Setter
        public Builder dnsChallenges(List<GetCPSEnrollmentDnsChallenge> dnsChallenges) {
            if (dnsChallenges == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "dnsChallenges");
            }
            this.dnsChallenges = dnsChallenges;
            return this;
        }
        public Builder dnsChallenges(GetCPSEnrollmentDnsChallenge... dnsChallenges) {
            return dnsChallenges(List.of(dnsChallenges));
        }
        @CustomType.Setter
        public Builder enableMultiStackedCertificates(Boolean enableMultiStackedCertificates) {
            if (enableMultiStackedCertificates == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "enableMultiStackedCertificates");
            }
            this.enableMultiStackedCertificates = enableMultiStackedCertificates;
            return this;
        }
        @CustomType.Setter
        public Builder enrollmentId(Integer enrollmentId) {
            if (enrollmentId == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "enrollmentId");
            }
            this.enrollmentId = enrollmentId;
            return this;
        }
        @CustomType.Setter
        public Builder httpChallenges(List<GetCPSEnrollmentHttpChallenge> httpChallenges) {
            if (httpChallenges == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "httpChallenges");
            }
            this.httpChallenges = httpChallenges;
            return this;
        }
        public Builder httpChallenges(GetCPSEnrollmentHttpChallenge... httpChallenges) {
            return httpChallenges(List.of(httpChallenges));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetCPSEnrollmentNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetCPSEnrollmentNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder orgId(Integer orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder organizations(List<GetCPSEnrollmentOrganization> organizations) {
            if (organizations == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "organizations");
            }
            this.organizations = organizations;
            return this;
        }
        public Builder organizations(GetCPSEnrollmentOrganization... organizations) {
            return organizations(List.of(organizations));
        }
        @CustomType.Setter
        public Builder pendingChanges(Boolean pendingChanges) {
            if (pendingChanges == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "pendingChanges");
            }
            this.pendingChanges = pendingChanges;
            return this;
        }
        @CustomType.Setter
        public Builder productionSlots(List<Integer> productionSlots) {
            if (productionSlots == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "productionSlots");
            }
            this.productionSlots = productionSlots;
            return this;
        }
        public Builder productionSlots(Integer... productionSlots) {
            return productionSlots(List.of(productionSlots));
        }
        @CustomType.Setter
        public Builder registrationAuthority(String registrationAuthority) {
            if (registrationAuthority == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "registrationAuthority");
            }
            this.registrationAuthority = registrationAuthority;
            return this;
        }
        @CustomType.Setter
        public Builder sans(List<String> sans) {
            if (sans == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "sans");
            }
            this.sans = sans;
            return this;
        }
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }
        @CustomType.Setter
        public Builder secureNetwork(String secureNetwork) {
            if (secureNetwork == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "secureNetwork");
            }
            this.secureNetwork = secureNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder sniOnly(Boolean sniOnly) {
            if (sniOnly == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "sniOnly");
            }
            this.sniOnly = sniOnly;
            return this;
        }
        @CustomType.Setter
        public Builder stagingSlots(List<Integer> stagingSlots) {
            if (stagingSlots == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "stagingSlots");
            }
            this.stagingSlots = stagingSlots;
            return this;
        }
        public Builder stagingSlots(Integer... stagingSlots) {
            return stagingSlots(List.of(stagingSlots));
        }
        @CustomType.Setter
        public Builder techContacts(List<GetCPSEnrollmentTechContact> techContacts) {
            if (techContacts == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "techContacts");
            }
            this.techContacts = techContacts;
            return this;
        }
        public Builder techContacts(GetCPSEnrollmentTechContact... techContacts) {
            return techContacts(List.of(techContacts));
        }
        @CustomType.Setter
        public Builder validationType(String validationType) {
            if (validationType == null) {
              throw new MissingRequiredPropertyException("GetCPSEnrollmentResult", "validationType");
            }
            this.validationType = validationType;
            return this;
        }
        public GetCPSEnrollmentResult build() {
            final var _resultValue = new GetCPSEnrollmentResult();
            _resultValue.adminContacts = adminContacts;
            _resultValue.assignedSlots = assignedSlots;
            _resultValue.certificateChainType = certificateChainType;
            _resultValue.certificateType = certificateType;
            _resultValue.commonName = commonName;
            _resultValue.contractId = contractId;
            _resultValue.csrs = csrs;
            _resultValue.dnsChallenges = dnsChallenges;
            _resultValue.enableMultiStackedCertificates = enableMultiStackedCertificates;
            _resultValue.enrollmentId = enrollmentId;
            _resultValue.httpChallenges = httpChallenges;
            _resultValue.id = id;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.orgId = orgId;
            _resultValue.organizations = organizations;
            _resultValue.pendingChanges = pendingChanges;
            _resultValue.productionSlots = productionSlots;
            _resultValue.registrationAuthority = registrationAuthority;
            _resultValue.sans = sans;
            _resultValue.secureNetwork = secureNetwork;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.sniOnly = sniOnly;
            _resultValue.stagingSlots = stagingSlots;
            _resultValue.techContacts = techContacts;
            _resultValue.validationType = validationType;
            return _resultValue;
        }
    }
}
