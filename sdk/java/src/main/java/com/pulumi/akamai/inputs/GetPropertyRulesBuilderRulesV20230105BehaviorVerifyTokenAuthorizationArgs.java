// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs Empty = new GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs();

    /**
     * Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * URL-escapes HMAC inputs passed in as query parameters.
     * 
     */
    @Import(name="escapeHmacInputs")
    private @Nullable Output<Boolean> escapeHmacInputs;

    /**
     * @return URL-escapes HMAC inputs passed in as query parameters.
     * 
     */
    public Optional<Output<Boolean>> escapeHmacInputs() {
        return Optional.ofNullable(this.escapeHmacInputs);
    }

    /**
     * When enabled, sends an HTTP error when an authentication test fails.
     * 
     */
    @Import(name="failureResponse")
    private @Nullable Output<Boolean> failureResponse;

    /**
     * @return When enabled, sends an HTTP error when an authentication test fails.
     * 
     */
    public Optional<Output<Boolean>> failureResponse() {
        return Optional.ofNullable(this.failureResponse);
    }

    /**
     * Enabling this removes the query string from the URL used to form an encryption key.
     * 
     */
    @Import(name="ignoreQueryString")
    private @Nullable Output<Boolean> ignoreQueryString;

    /**
     * @return Enabling this removes the query string from the URL used to form an encryption key.
     * 
     */
    public Optional<Output<Boolean>> ignoreQueryString() {
        return Optional.ofNullable(this.ignoreQueryString);
    }

    /**
     * The shared secret used to validate tokens, which needs to match the key used in the token generation code.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return The shared secret used to validate tokens, which needs to match the key used in the token generation code.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Specifies where to find the token in the incoming request.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies where to find the token in the incoming request.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
     * 
     */
    @Import(name="locationId")
    private @Nullable Output<String> locationId;

    /**
     * @return When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
     * 
     */
    public Optional<Output<String>> locationId() {
        return Optional.ofNullable(this.locationId);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
     * 
     */
    @Import(name="salt")
    private @Nullable Output<String> salt;

    /**
     * @return Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
     * 
     */
    public Optional<Output<String>> salt() {
        return Optional.ofNullable(this.salt);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * Specifies a transition key as a hex value.
     * 
     */
    @Import(name="transitionKey")
    private @Nullable Output<String> transitionKey;

    /**
     * @return Specifies a transition key as a hex value.
     * 
     */
    public Optional<Output<String>> transitionKey() {
        return Optional.ofNullable(this.transitionKey);
    }

    /**
     * If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
     * 
     */
    @Import(name="useAdvanced")
    private @Nullable Output<Boolean> useAdvanced;

    /**
     * @return If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
     * 
     */
    public Optional<Output<Boolean>> useAdvanced() {
        return Optional.ofNullable(this.useAdvanced);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs() {}

    private GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs(GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs $) {
        this.algorithm = $.algorithm;
        this.escapeHmacInputs = $.escapeHmacInputs;
        this.failureResponse = $.failureResponse;
        this.ignoreQueryString = $.ignoreQueryString;
        this.key = $.key;
        this.location = $.location;
        this.locationId = $.locationId;
        this.locked = $.locked;
        this.salt = $.salt;
        this.templateUuid = $.templateUuid;
        this.transitionKey = $.transitionKey;
        this.useAdvanced = $.useAdvanced;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param escapeHmacInputs URL-escapes HMAC inputs passed in as query parameters.
         * 
         * @return builder
         * 
         */
        public Builder escapeHmacInputs(@Nullable Output<Boolean> escapeHmacInputs) {
            $.escapeHmacInputs = escapeHmacInputs;
            return this;
        }

        /**
         * @param escapeHmacInputs URL-escapes HMAC inputs passed in as query parameters.
         * 
         * @return builder
         * 
         */
        public Builder escapeHmacInputs(Boolean escapeHmacInputs) {
            return escapeHmacInputs(Output.of(escapeHmacInputs));
        }

        /**
         * @param failureResponse When enabled, sends an HTTP error when an authentication test fails.
         * 
         * @return builder
         * 
         */
        public Builder failureResponse(@Nullable Output<Boolean> failureResponse) {
            $.failureResponse = failureResponse;
            return this;
        }

        /**
         * @param failureResponse When enabled, sends an HTTP error when an authentication test fails.
         * 
         * @return builder
         * 
         */
        public Builder failureResponse(Boolean failureResponse) {
            return failureResponse(Output.of(failureResponse));
        }

        /**
         * @param ignoreQueryString Enabling this removes the query string from the URL used to form an encryption key.
         * 
         * @return builder
         * 
         */
        public Builder ignoreQueryString(@Nullable Output<Boolean> ignoreQueryString) {
            $.ignoreQueryString = ignoreQueryString;
            return this;
        }

        /**
         * @param ignoreQueryString Enabling this removes the query string from the URL used to form an encryption key.
         * 
         * @return builder
         * 
         */
        public Builder ignoreQueryString(Boolean ignoreQueryString) {
            return ignoreQueryString(Output.of(ignoreQueryString));
        }

        /**
         * @param key The shared secret used to validate tokens, which needs to match the key used in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The shared secret used to validate tokens, which needs to match the key used in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param location Specifies where to find the token in the incoming request.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies where to find the token in the incoming request.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param locationId When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
         * 
         * @return builder
         * 
         */
        public Builder locationId(@Nullable Output<String> locationId) {
            $.locationId = locationId;
            return this;
        }

        /**
         * @param locationId When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
         * 
         * @return builder
         * 
         */
        public Builder locationId(String locationId) {
            return locationId(Output.of(locationId));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param salt Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder salt(@Nullable Output<String> salt) {
            $.salt = salt;
            return this;
        }

        /**
         * @param salt Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
         * 
         * @return builder
         * 
         */
        public Builder salt(String salt) {
            return salt(Output.of(salt));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param transitionKey Specifies a transition key as a hex value.
         * 
         * @return builder
         * 
         */
        public Builder transitionKey(@Nullable Output<String> transitionKey) {
            $.transitionKey = transitionKey;
            return this;
        }

        /**
         * @param transitionKey Specifies a transition key as a hex value.
         * 
         * @return builder
         * 
         */
        public Builder transitionKey(String transitionKey) {
            return transitionKey(Output.of(transitionKey));
        }

        /**
         * @param useAdvanced If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
         * 
         * @return builder
         * 
         */
        public Builder useAdvanced(@Nullable Output<Boolean> useAdvanced) {
            $.useAdvanced = useAdvanced;
            return this;
        }

        /**
         * @param useAdvanced If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
         * 
         * @return builder
         * 
         */
        public Builder useAdvanced(Boolean useAdvanced) {
            return useAdvanced(Output.of(useAdvanced));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorizationArgs build() {
            return $;
        }
    }

}
