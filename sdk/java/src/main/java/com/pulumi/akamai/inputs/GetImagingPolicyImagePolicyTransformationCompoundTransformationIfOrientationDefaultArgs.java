// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs Empty = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs() {}

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationCompoundTransformationIfOrientationDefaultArgs build() {
            return $;
        }
    }

}
