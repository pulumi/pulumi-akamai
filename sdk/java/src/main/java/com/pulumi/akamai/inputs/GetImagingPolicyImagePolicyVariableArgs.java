// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyVariableEnumOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyVariableArgs Empty = new GetImagingPolicyImagePolicyVariableArgs();

    @Import(name="defaultValue", required=true)
    private Output<String> defaultValue;

    public Output<String> defaultValue() {
        return this.defaultValue;
    }

    @Import(name="enumOptions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyVariableEnumOptionArgs>> enumOptions;

    public Optional<Output<List<GetImagingPolicyImagePolicyVariableEnumOptionArgs>>> enumOptions() {
        return Optional.ofNullable(this.enumOptions);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="postfix")
    private @Nullable Output<String> postfix;

    public Optional<Output<String>> postfix() {
        return Optional.ofNullable(this.postfix);
    }

    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private GetImagingPolicyImagePolicyVariableArgs() {}

    private GetImagingPolicyImagePolicyVariableArgs(GetImagingPolicyImagePolicyVariableArgs $) {
        this.defaultValue = $.defaultValue;
        this.enumOptions = $.enumOptions;
        this.name = $.name;
        this.postfix = $.postfix;
        this.prefix = $.prefix;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyVariableArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyVariableArgs();
        }

        public Builder(GetImagingPolicyImagePolicyVariableArgs defaults) {
            $ = new GetImagingPolicyImagePolicyVariableArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultValue(Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        public Builder enumOptions(@Nullable Output<List<GetImagingPolicyImagePolicyVariableEnumOptionArgs>> enumOptions) {
            $.enumOptions = enumOptions;
            return this;
        }

        public Builder enumOptions(List<GetImagingPolicyImagePolicyVariableEnumOptionArgs> enumOptions) {
            return enumOptions(Output.of(enumOptions));
        }

        public Builder enumOptions(GetImagingPolicyImagePolicyVariableEnumOptionArgs... enumOptions) {
            return enumOptions(List.of(enumOptions));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder postfix(@Nullable Output<String> postfix) {
            $.postfix = postfix;
            return this;
        }

        public Builder postfix(String postfix) {
            return postfix(Output.of(postfix));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetImagingPolicyImagePolicyVariableArgs build() {
            $.defaultValue = Objects.requireNonNull($.defaultValue, "expected parameter 'defaultValue' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
