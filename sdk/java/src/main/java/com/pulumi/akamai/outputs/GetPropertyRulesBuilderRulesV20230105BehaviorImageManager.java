// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal;
import com.pulumi.akamai.outputs.GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20230105BehaviorImageManager {
    /**
     * @return Generates a custom `Image and Video Manager API` token to apply a corresponding policy to this set of images. The token consists of a descriptive label (the `policyToken`) concatenated with a property-specific identifier that&#39;s generated when you save the property. The API registers the token when you activate the property.
     * 
     */
    private @Nullable Boolean advanced;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String apiReferenceTitle;
    /**
     * @return Specify whether to convert images to the best file type for the requesting device, based on its user agent and the initial image file. This produces the smallest file size possible that retains image quality.
     * 
     */
    private @Nullable Boolean applyBestFileType;
    /**
     * @return Assigns a CP code to track traffic and billing for original images that the Image and Video Manager has not modified.
     * 
     */
    private @Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal cpCodeOriginal;
    /**
     * @return Assigns a separate CP code to track traffic and billing for derived images.
     * 
     */
    private @Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed cpCodeTransformed;
    /**
     * @return Enable image management capabilities and generate a corresponding API token.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Identifies the existing policy set configured with `Image and Video Manager API`.
     * 
     */
    private @Nullable String policySet;
    /**
     * @return Assign a prefix label to help match the policy token to this set of images, limited to 32 alphanumeric or underscore characters. If you don&#39;t specify a label, `default` becomes the prefix.
     * 
     */
    private @Nullable String policyToken;
    /**
     * @return Specify the default policy identifier, which is registered with the `Image and Video Manager API` once you activate this property.  The `advanced` option needs to be inactive.
     * 
     */
    private @Nullable String policyTokenDefault;
    /**
     * @return Specify whether to scale down images to the maximum screen resolution, as determined by the rendering device&#39;s user agent.  Note that enabling this may affect screen layout in unexpected ways.
     * 
     */
    private @Nullable Boolean resize;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String settingsTitle;
    /**
     * @return Specifies a location for your site&#39;s heaviest traffic, for use in caching derivatives on edge servers.
     * 
     */
    private @Nullable String superCacheRegion;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String trafficTitle;
    /**
     * @return Whether to use a previously created policy set that may be referenced in other properties, or create a new policy set to use with this property. A policy set can be shared across multiple properties belonging to the same contract. The behavior populates any changes to the policy set across all properties that reference that set.
     * 
     */
    private @Nullable Boolean useExistingPolicySet;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20230105BehaviorImageManager() {}
    /**
     * @return Generates a custom `Image and Video Manager API` token to apply a corresponding policy to this set of images. The token consists of a descriptive label (the `policyToken`) concatenated with a property-specific identifier that&#39;s generated when you save the property. The API registers the token when you activate the property.
     * 
     */
    public Optional<Boolean> advanced() {
        return Optional.ofNullable(this.advanced);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> apiReferenceTitle() {
        return Optional.ofNullable(this.apiReferenceTitle);
    }
    /**
     * @return Specify whether to convert images to the best file type for the requesting device, based on its user agent and the initial image file. This produces the smallest file size possible that retains image quality.
     * 
     */
    public Optional<Boolean> applyBestFileType() {
        return Optional.ofNullable(this.applyBestFileType);
    }
    /**
     * @return Assigns a CP code to track traffic and billing for original images that the Image and Video Manager has not modified.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal> cpCodeOriginal() {
        return Optional.ofNullable(this.cpCodeOriginal);
    }
    /**
     * @return Assigns a separate CP code to track traffic and billing for derived images.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed> cpCodeTransformed() {
        return Optional.ofNullable(this.cpCodeTransformed);
    }
    /**
     * @return Enable image management capabilities and generate a corresponding API token.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Identifies the existing policy set configured with `Image and Video Manager API`.
     * 
     */
    public Optional<String> policySet() {
        return Optional.ofNullable(this.policySet);
    }
    /**
     * @return Assign a prefix label to help match the policy token to this set of images, limited to 32 alphanumeric or underscore characters. If you don&#39;t specify a label, `default` becomes the prefix.
     * 
     */
    public Optional<String> policyToken() {
        return Optional.ofNullable(this.policyToken);
    }
    /**
     * @return Specify the default policy identifier, which is registered with the `Image and Video Manager API` once you activate this property.  The `advanced` option needs to be inactive.
     * 
     */
    public Optional<String> policyTokenDefault() {
        return Optional.ofNullable(this.policyTokenDefault);
    }
    /**
     * @return Specify whether to scale down images to the maximum screen resolution, as determined by the rendering device&#39;s user agent.  Note that enabling this may affect screen layout in unexpected ways.
     * 
     */
    public Optional<Boolean> resize() {
        return Optional.ofNullable(this.resize);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> settingsTitle() {
        return Optional.ofNullable(this.settingsTitle);
    }
    /**
     * @return Specifies a location for your site&#39;s heaviest traffic, for use in caching derivatives on edge servers.
     * 
     */
    public Optional<String> superCacheRegion() {
        return Optional.ofNullable(this.superCacheRegion);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> trafficTitle() {
        return Optional.ofNullable(this.trafficTitle);
    }
    /**
     * @return Whether to use a previously created policy set that may be referenced in other properties, or create a new policy set to use with this property. A policy set can be shared across multiple properties belonging to the same contract. The behavior populates any changes to the policy set across all properties that reference that set.
     * 
     */
    public Optional<Boolean> useExistingPolicySet() {
        return Optional.ofNullable(this.useExistingPolicySet);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorImageManager defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean advanced;
        private @Nullable String apiReferenceTitle;
        private @Nullable Boolean applyBestFileType;
        private @Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal cpCodeOriginal;
        private @Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed cpCodeTransformed;
        private @Nullable Boolean enabled;
        private @Nullable Boolean locked;
        private @Nullable String policySet;
        private @Nullable String policyToken;
        private @Nullable String policyTokenDefault;
        private @Nullable Boolean resize;
        private @Nullable String settingsTitle;
        private @Nullable String superCacheRegion;
        private @Nullable String templateUuid;
        private @Nullable String trafficTitle;
        private @Nullable Boolean useExistingPolicySet;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorImageManager defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advanced = defaults.advanced;
    	      this.apiReferenceTitle = defaults.apiReferenceTitle;
    	      this.applyBestFileType = defaults.applyBestFileType;
    	      this.cpCodeOriginal = defaults.cpCodeOriginal;
    	      this.cpCodeTransformed = defaults.cpCodeTransformed;
    	      this.enabled = defaults.enabled;
    	      this.locked = defaults.locked;
    	      this.policySet = defaults.policySet;
    	      this.policyToken = defaults.policyToken;
    	      this.policyTokenDefault = defaults.policyTokenDefault;
    	      this.resize = defaults.resize;
    	      this.settingsTitle = defaults.settingsTitle;
    	      this.superCacheRegion = defaults.superCacheRegion;
    	      this.templateUuid = defaults.templateUuid;
    	      this.trafficTitle = defaults.trafficTitle;
    	      this.useExistingPolicySet = defaults.useExistingPolicySet;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder advanced(@Nullable Boolean advanced) {

            this.advanced = advanced;
            return this;
        }
        @CustomType.Setter
        public Builder apiReferenceTitle(@Nullable String apiReferenceTitle) {

            this.apiReferenceTitle = apiReferenceTitle;
            return this;
        }
        @CustomType.Setter
        public Builder applyBestFileType(@Nullable Boolean applyBestFileType) {

            this.applyBestFileType = applyBestFileType;
            return this;
        }
        @CustomType.Setter
        public Builder cpCodeOriginal(@Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeOriginal cpCodeOriginal) {

            this.cpCodeOriginal = cpCodeOriginal;
            return this;
        }
        @CustomType.Setter
        public Builder cpCodeTransformed(@Nullable GetPropertyRulesBuilderRulesV20230105BehaviorImageManagerCpCodeTransformed cpCodeTransformed) {

            this.cpCodeTransformed = cpCodeTransformed;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder policySet(@Nullable String policySet) {

            this.policySet = policySet;
            return this;
        }
        @CustomType.Setter
        public Builder policyToken(@Nullable String policyToken) {

            this.policyToken = policyToken;
            return this;
        }
        @CustomType.Setter
        public Builder policyTokenDefault(@Nullable String policyTokenDefault) {

            this.policyTokenDefault = policyTokenDefault;
            return this;
        }
        @CustomType.Setter
        public Builder resize(@Nullable Boolean resize) {

            this.resize = resize;
            return this;
        }
        @CustomType.Setter
        public Builder settingsTitle(@Nullable String settingsTitle) {

            this.settingsTitle = settingsTitle;
            return this;
        }
        @CustomType.Setter
        public Builder superCacheRegion(@Nullable String superCacheRegion) {

            this.superCacheRegion = superCacheRegion;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder trafficTitle(@Nullable String trafficTitle) {

            this.trafficTitle = trafficTitle;
            return this;
        }
        @CustomType.Setter
        public Builder useExistingPolicySet(@Nullable Boolean useExistingPolicySet) {

            this.useExistingPolicySet = useExistingPolicySet;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20230105BehaviorImageManager build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20230105BehaviorImageManager();
            _resultValue.advanced = advanced;
            _resultValue.apiReferenceTitle = apiReferenceTitle;
            _resultValue.applyBestFileType = applyBestFileType;
            _resultValue.cpCodeOriginal = cpCodeOriginal;
            _resultValue.cpCodeTransformed = cpCodeTransformed;
            _resultValue.enabled = enabled;
            _resultValue.locked = locked;
            _resultValue.policySet = policySet;
            _resultValue.policyToken = policyToken;
            _resultValue.policyTokenDefault = policyTokenDefault;
            _resultValue.resize = resize;
            _resultValue.settingsTitle = settingsTitle;
            _resultValue.superCacheRegion = superCacheRegion;
            _resultValue.templateUuid = templateUuid;
            _resultValue.trafficTitle = trafficTitle;
            _resultValue.useExistingPolicySet = useExistingPolicySet;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
