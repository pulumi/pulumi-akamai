// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.IamApiClientCredentialActionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IamApiClientCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientCredentialArgs Empty = new IamApiClientCredentialArgs();

    /**
     * Actions available on the API client&#39;s credentials.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<IamApiClientCredentialActionsArgs> actions;

    /**
     * @return Actions available on the API client&#39;s credentials.
     * 
     */
    public Optional<Output<IamApiClientCredentialActionsArgs>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * The client secret.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The client secret.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The part of the credential that identifies the API client.
     * 
     */
    @Import(name="clientToken")
    private @Nullable Output<String> clientToken;

    /**
     * @return The part of the credential that identifies the API client.
     * 
     */
    public Optional<Output<String>> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }

    /**
     * The ISO 8601 timestamp indicating when the credential was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return The ISO 8601 timestamp indicating when the credential was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A unique identifier of the credential.
     * 
     */
    @Import(name="credentialId")
    private @Nullable Output<Integer> credentialId;

    /**
     * @return A unique identifier of the credential.
     * 
     */
    public Optional<Output<Integer>> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }

    /**
     * A human-readable description for the credential.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description for the credential.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    /**
     * @return The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
     * 
     */
    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private IamApiClientCredentialArgs() {}

    private IamApiClientCredentialArgs(IamApiClientCredentialArgs $) {
        this.actions = $.actions;
        this.clientSecret = $.clientSecret;
        this.clientToken = $.clientToken;
        this.createdOn = $.createdOn;
        this.credentialId = $.credentialId;
        this.description = $.description;
        this.expiresOn = $.expiresOn;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientCredentialArgs $;

        public Builder() {
            $ = new IamApiClientCredentialArgs();
        }

        public Builder(IamApiClientCredentialArgs defaults) {
            $ = new IamApiClientCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Actions available on the API client&#39;s credentials.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<IamApiClientCredentialActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions available on the API client&#39;s credentials.
         * 
         * @return builder
         * 
         */
        public Builder actions(IamApiClientCredentialActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param clientSecret The client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param clientToken The part of the credential that identifies the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(@Nullable Output<String> clientToken) {
            $.clientToken = clientToken;
            return this;
        }

        /**
         * @param clientToken The part of the credential that identifies the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(String clientToken) {
            return clientToken(Output.of(clientToken));
        }

        /**
         * @param createdOn The ISO 8601 timestamp indicating when the credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The ISO 8601 timestamp indicating when the credential was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param credentialId A unique identifier of the credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(@Nullable Output<Integer> credentialId) {
            $.credentialId = credentialId;
            return this;
        }

        /**
         * @param credentialId A unique identifier of the credential.
         * 
         * @return builder
         * 
         */
        public Builder credentialId(Integer credentialId) {
            return credentialId(Output.of(credentialId));
        }

        /**
         * @param description A human-readable description for the credential.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description for the credential.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expiresOn The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        /**
         * @param expiresOn The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param status Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public IamApiClientCredentialArgs build() {
            return $;
        }
    }

}
