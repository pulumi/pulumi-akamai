// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs Empty = new GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs();

    /**
     * Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
     * 
     */
    @Import(name="abLogic")
    private @Nullable Output<String> abLogic;

    /**
     * @return Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
     * 
     */
    public Optional<Output<String>> abLogic() {
        return Optional.ofNullable(this.abLogic);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="abTesting")
    private @Nullable Output<String> abTesting;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> abTesting() {
        return Optional.ofNullable(this.abTesting);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<String> compression;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
     * 
     */
    @Import(name="cookieName")
    private @Nullable Output<String> cookieName;

    /**
     * @return This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
     * 
     */
    public Optional<Output<String>> cookieName() {
        return Optional.ofNullable(this.cookieName);
    }

    /**
     * Applies Brotli compression, converting your origin content to cache on edge servers.
     * 
     */
    @Import(name="enableBrotliCompression")
    private @Nullable Output<Boolean> enableBrotliCompression;

    /**
     * @return Applies Brotli compression, converting your origin content to cache on edge servers.
     * 
     */
    public Optional<Output<Boolean>> enableBrotliCompression() {
        return Optional.ofNullable(this.enableBrotliCompression);
    }

    /**
     * Applies Brotli compression to non-cacheable content.
     * 
     */
    @Import(name="enableForNoncacheable")
    private @Nullable Output<Boolean> enableForNoncacheable;

    /**
     * @return Applies Brotli compression to non-cacheable content.
     * 
     */
    public Optional<Output<Boolean>> enableForNoncacheable() {
        return Optional.ofNullable(this.enableForNoncacheable);
    }

    /**
     * Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
     * 
     */
    @Import(name="enablePreconnect")
    private @Nullable Output<Boolean> enablePreconnect;

    /**
     * @return Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
     * 
     */
    public Optional<Output<Boolean>> enablePreconnect() {
        return Optional.ofNullable(this.enablePreconnect);
    }

    /**
     * Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it&#39;s waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
     * 
     */
    @Import(name="enablePush")
    private @Nullable Output<Boolean> enablePush;

    /**
     * @return Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it&#39;s waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
     * 
     */
    public Optional<Output<Boolean>> enablePush() {
        return Optional.ofNullable(this.enablePush);
    }

    /**
     * Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
     * 
     */
    @Import(name="enableRo")
    private @Nullable Output<Boolean> enableRo;

    /**
     * @return Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
     * 
     */
    public Optional<Output<Boolean>> enableRo() {
        return Optional.ofNullable(this.enableRo);
    }

    @Import(name="intelligentEarlyHints")
    private @Nullable Output<Boolean> intelligentEarlyHints;

    public Optional<Output<Boolean>> intelligentEarlyHints() {
        return Optional.ofNullable(this.intelligentEarlyHints);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="intelligentEarlyHintsTitle")
    private @Nullable Output<String> intelligentEarlyHintsTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> intelligentEarlyHintsTitle() {
        return Optional.ofNullable(this.intelligentEarlyHintsTitle);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
     * 
     */
    @Import(name="preloadEnable")
    private @Nullable Output<Boolean> preloadEnable;

    /**
     * @return Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
     * 
     */
    public Optional<Output<Boolean>> preloadEnable() {
        return Optional.ofNullable(this.preloadEnable);
    }

    /**
     * The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="titleBrotli")
    private @Nullable Output<String> titleBrotli;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> titleBrotli() {
        return Optional.ofNullable(this.titleBrotli);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="titleHttp2ServerPush")
    private @Nullable Output<String> titleHttp2ServerPush;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> titleHttp2ServerPush() {
        return Optional.ofNullable(this.titleHttp2ServerPush);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="titlePreconnect")
    private @Nullable Output<String> titlePreconnect;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> titlePreconnect() {
        return Optional.ofNullable(this.titlePreconnect);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="titlePreload")
    private @Nullable Output<String> titlePreload;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> titlePreload() {
        return Optional.ofNullable(this.titlePreload);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="titleRo")
    private @Nullable Output<String> titleRo;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> titleRo() {
        return Optional.ofNullable(this.titleRo);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs() {}

    private GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs(GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs $) {
        this.abLogic = $.abLogic;
        this.abTesting = $.abTesting;
        this.compression = $.compression;
        this.cookieName = $.cookieName;
        this.enableBrotliCompression = $.enableBrotliCompression;
        this.enableForNoncacheable = $.enableForNoncacheable;
        this.enablePreconnect = $.enablePreconnect;
        this.enablePush = $.enablePush;
        this.enableRo = $.enableRo;
        this.intelligentEarlyHints = $.intelligentEarlyHints;
        this.intelligentEarlyHintsTitle = $.intelligentEarlyHintsTitle;
        this.locked = $.locked;
        this.preloadEnable = $.preloadEnable;
        this.source = $.source;
        this.templateUuid = $.templateUuid;
        this.titleBrotli = $.titleBrotli;
        this.titleHttp2ServerPush = $.titleHttp2ServerPush;
        this.titlePreconnect = $.titlePreconnect;
        this.titlePreload = $.titlePreload;
        this.titleRo = $.titleRo;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abLogic Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
         * 
         * @return builder
         * 
         */
        public Builder abLogic(@Nullable Output<String> abLogic) {
            $.abLogic = abLogic;
            return this;
        }

        /**
         * @param abLogic Specifies whether to use Adaptive Acceleration in an A/B testing environment. To include Adaptive Acceleration data in your A/B testing, specify the mode you want to apply. Otherwise, `DISABLED` by default. See `Add A/B testing to A2` for details.
         * 
         * @return builder
         * 
         */
        public Builder abLogic(String abLogic) {
            return abLogic(Output.of(abLogic));
        }

        /**
         * @param abTesting This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder abTesting(@Nullable Output<String> abTesting) {
            $.abTesting = abTesting;
            return this;
        }

        /**
         * @param abTesting This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder abTesting(String abTesting) {
            return abTesting(Output.of(abTesting));
        }

        /**
         * @param compression This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable Output<String> compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param compression This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        /**
         * @param cookieName This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(@Nullable Output<String> cookieName) {
            $.cookieName = cookieName;
            return this;
        }

        /**
         * @param cookieName This specifies the name of the cookie file used for redirecting the requests in the A/B testing environment.
         * 
         * @return builder
         * 
         */
        public Builder cookieName(String cookieName) {
            return cookieName(Output.of(cookieName));
        }

        /**
         * @param enableBrotliCompression Applies Brotli compression, converting your origin content to cache on edge servers.
         * 
         * @return builder
         * 
         */
        public Builder enableBrotliCompression(@Nullable Output<Boolean> enableBrotliCompression) {
            $.enableBrotliCompression = enableBrotliCompression;
            return this;
        }

        /**
         * @param enableBrotliCompression Applies Brotli compression, converting your origin content to cache on edge servers.
         * 
         * @return builder
         * 
         */
        public Builder enableBrotliCompression(Boolean enableBrotliCompression) {
            return enableBrotliCompression(Output.of(enableBrotliCompression));
        }

        /**
         * @param enableForNoncacheable Applies Brotli compression to non-cacheable content.
         * 
         * @return builder
         * 
         */
        public Builder enableForNoncacheable(@Nullable Output<Boolean> enableForNoncacheable) {
            $.enableForNoncacheable = enableForNoncacheable;
            return this;
        }

        /**
         * @param enableForNoncacheable Applies Brotli compression to non-cacheable content.
         * 
         * @return builder
         * 
         */
        public Builder enableForNoncacheable(Boolean enableForNoncacheable) {
            return enableForNoncacheable(Output.of(enableForNoncacheable));
        }

        /**
         * @param enablePreconnect Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
         * 
         * @return builder
         * 
         */
        public Builder enablePreconnect(@Nullable Output<Boolean> enablePreconnect) {
            $.enablePreconnect = enablePreconnect;
            return this;
        }

        /**
         * @param enablePreconnect Allows browsers to anticipate what connections your site needs, and establishes those connections ahead of time. See `Automatic Preconnect` for more information.
         * 
         * @return builder
         * 
         */
        public Builder enablePreconnect(Boolean enablePreconnect) {
            return enablePreconnect(Output.of(enablePreconnect));
        }

        /**
         * @param enablePush Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it&#39;s waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
         * 
         * @return builder
         * 
         */
        public Builder enablePush(@Nullable Output<Boolean> enablePush) {
            $.enablePush = enablePush;
            return this;
        }

        /**
         * @param enablePush Recognizes resources like JavaScript, CSS, and images  based on gathered timing data and sends these resources to a browser as it&#39;s waiting for a response to the initial request for your website or app. See `Automatic Server Push` for more information.
         * 
         * @return builder
         * 
         */
        public Builder enablePush(Boolean enablePush) {
            return enablePush(Output.of(enablePush));
        }

        /**
         * @param enableRo Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
         * 
         * @return builder
         * 
         */
        public Builder enableRo(@Nullable Output<Boolean> enableRo) {
            $.enableRo = enableRo;
            return this;
        }

        /**
         * @param enableRo Enables the Resource Optimizer, which automates the compression and delivery of your `.css`, `.js`, and `.svg` content using a combination of Brotli and Zopfli compressions. The compression is performed offline, during a time to live that the feature automatically sets. See the `resourceOptimizer` and `resourceOptimizerExtendedCompatibility` behaviors for more details.
         * 
         * @return builder
         * 
         */
        public Builder enableRo(Boolean enableRo) {
            return enableRo(Output.of(enableRo));
        }

        public Builder intelligentEarlyHints(@Nullable Output<Boolean> intelligentEarlyHints) {
            $.intelligentEarlyHints = intelligentEarlyHints;
            return this;
        }

        public Builder intelligentEarlyHints(Boolean intelligentEarlyHints) {
            return intelligentEarlyHints(Output.of(intelligentEarlyHints));
        }

        /**
         * @param intelligentEarlyHintsTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder intelligentEarlyHintsTitle(@Nullable Output<String> intelligentEarlyHintsTitle) {
            $.intelligentEarlyHintsTitle = intelligentEarlyHintsTitle;
            return this;
        }

        /**
         * @param intelligentEarlyHintsTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder intelligentEarlyHintsTitle(String intelligentEarlyHintsTitle) {
            return intelligentEarlyHintsTitle(Output.of(intelligentEarlyHintsTitle));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param preloadEnable Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
         * 
         * @return builder
         * 
         */
        public Builder preloadEnable(@Nullable Output<Boolean> preloadEnable) {
            $.preloadEnable = preloadEnable;
            return this;
        }

        /**
         * @param preloadEnable Allows browsers to preload necessary fonts before they fetch and process other resources. See `Automatic Font Preload` for more information.
         * 
         * @return builder
         * 
         */
        public Builder preloadEnable(Boolean preloadEnable) {
            return preloadEnable(Output.of(preloadEnable));
        }

        /**
         * @param source The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source Adaptive Acceleration uses to gather the real user monitoring timing data, either `mPulse` or `realUserMonitoring`. The recommended `mPulse` option supports all optimizations and requires the `mPulse` behavior added by default to new Ion properties. The classic `realUserMonitoring` method has been deprecated. If you set it as the data source, make sure you use it with the `realUserMonitoring` behavior.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param titleBrotli This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleBrotli(@Nullable Output<String> titleBrotli) {
            $.titleBrotli = titleBrotli;
            return this;
        }

        /**
         * @param titleBrotli This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleBrotli(String titleBrotli) {
            return titleBrotli(Output.of(titleBrotli));
        }

        /**
         * @param titleHttp2ServerPush This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleHttp2ServerPush(@Nullable Output<String> titleHttp2ServerPush) {
            $.titleHttp2ServerPush = titleHttp2ServerPush;
            return this;
        }

        /**
         * @param titleHttp2ServerPush This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleHttp2ServerPush(String titleHttp2ServerPush) {
            return titleHttp2ServerPush(Output.of(titleHttp2ServerPush));
        }

        /**
         * @param titlePreconnect This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titlePreconnect(@Nullable Output<String> titlePreconnect) {
            $.titlePreconnect = titlePreconnect;
            return this;
        }

        /**
         * @param titlePreconnect This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titlePreconnect(String titlePreconnect) {
            return titlePreconnect(Output.of(titlePreconnect));
        }

        /**
         * @param titlePreload This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titlePreload(@Nullable Output<String> titlePreload) {
            $.titlePreload = titlePreload;
            return this;
        }

        /**
         * @param titlePreload This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titlePreload(String titlePreload) {
            return titlePreload(Output.of(titlePreload));
        }

        /**
         * @param titleRo This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleRo(@Nullable Output<String> titleRo) {
            $.titleRo = titleRo;
            return this;
        }

        /**
         * @param titleRo This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder titleRo(String titleRo) {
            return titleRo(Output.of(titleRo));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20250113BehaviorAdaptiveAccelerationArgs build() {
            return $;
        }
    }

}
