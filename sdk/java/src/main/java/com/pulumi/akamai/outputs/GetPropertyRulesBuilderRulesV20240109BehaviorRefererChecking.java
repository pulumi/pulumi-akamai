// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking {
    /**
     * @return Allows all subdomains for the `domains` set, just like adding a `*.` prefix to each.
     * 
     */
    private @Nullable Boolean allowChildren;
    /**
     * @return Specifies the set of allowed domains. With `allowChildren` disabled, prefixing values with `*.` specifies domains for which subdomains are allowed.
     * 
     */
    private @Nullable List<String> domains;
    /**
     * @return Enables the referer-checking behavior.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return When enabled, excludes requests whose `Referer` header include a relative path, or that are missing a `Referer`. When disabled, only excludes requests whose `Referer` hostname is not part of the `domains` set.
     * 
     */
    private @Nullable Boolean strict;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking() {}
    /**
     * @return Allows all subdomains for the `domains` set, just like adding a `*.` prefix to each.
     * 
     */
    public Optional<Boolean> allowChildren() {
        return Optional.ofNullable(this.allowChildren);
    }
    /**
     * @return Specifies the set of allowed domains. With `allowChildren` disabled, prefixing values with `*.` specifies domains for which subdomains are allowed.
     * 
     */
    public List<String> domains() {
        return this.domains == null ? List.of() : this.domains;
    }
    /**
     * @return Enables the referer-checking behavior.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return When enabled, excludes requests whose `Referer` header include a relative path, or that are missing a `Referer`. When disabled, only excludes requests whose `Referer` hostname is not part of the `domains` set.
     * 
     */
    public Optional<Boolean> strict() {
        return Optional.ofNullable(this.strict);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowChildren;
        private @Nullable List<String> domains;
        private @Nullable Boolean enabled;
        private @Nullable Boolean locked;
        private @Nullable Boolean strict;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowChildren = defaults.allowChildren;
    	      this.domains = defaults.domains;
    	      this.enabled = defaults.enabled;
    	      this.locked = defaults.locked;
    	      this.strict = defaults.strict;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder allowChildren(@Nullable Boolean allowChildren) {

            this.allowChildren = allowChildren;
            return this;
        }
        @CustomType.Setter
        public Builder domains(@Nullable List<String> domains) {

            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder strict(@Nullable Boolean strict) {

            this.strict = strict;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240109BehaviorRefererChecking();
            _resultValue.allowChildren = allowChildren;
            _resultValue.domains = domains;
            _resultValue.enabled = enabled;
            _resultValue.locked = locked;
            _resultValue.strict = strict;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
