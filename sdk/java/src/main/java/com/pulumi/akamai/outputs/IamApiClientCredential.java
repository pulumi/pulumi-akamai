// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.IamApiClientCredentialActions;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IamApiClientCredential {
    /**
     * @return Actions available on the API client&#39;s credentials.
     * 
     */
    private @Nullable IamApiClientCredentialActions actions;
    /**
     * @return The client secret.
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return The part of the credential that identifies the API client.
     * 
     */
    private @Nullable String clientToken;
    /**
     * @return The ISO 8601 timestamp indicating when the credential was created.
     * 
     */
    private @Nullable String createdOn;
    /**
     * @return A unique identifier of the credential.
     * 
     */
    private @Nullable Integer credentialId;
    /**
     * @return A human-readable description for the credential.
     * 
     */
    private @Nullable String description;
    /**
     * @return The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
     * 
     */
    private @Nullable String expiresOn;
    /**
     * @return Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
     * 
     */
    private @Nullable String status;

    private IamApiClientCredential() {}
    /**
     * @return Actions available on the API client&#39;s credentials.
     * 
     */
    public Optional<IamApiClientCredentialActions> actions() {
        return Optional.ofNullable(this.actions);
    }
    /**
     * @return The client secret.
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return The part of the credential that identifies the API client.
     * 
     */
    public Optional<String> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }
    /**
     * @return The ISO 8601 timestamp indicating when the credential was created.
     * 
     */
    public Optional<String> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }
    /**
     * @return A unique identifier of the credential.
     * 
     */
    public Optional<Integer> credentialId() {
        return Optional.ofNullable(this.credentialId);
    }
    /**
     * @return A human-readable description for the credential.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The ISO 8601 timestamp indicating when the credential expires. The default expiration date is two years from the creation date.
     * 
     */
    public Optional<String> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }
    /**
     * @return Whether a credential is &#39;ACTIVE&#39;, &#39;INACTIVE&#39;, or &#39;DELETED&#39;. Can be updated to &#39;ACTIVE&#39; or &#39;INACTIVE&#39; only.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IamApiClientCredential defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable IamApiClientCredentialActions actions;
        private @Nullable String clientSecret;
        private @Nullable String clientToken;
        private @Nullable String createdOn;
        private @Nullable Integer credentialId;
        private @Nullable String description;
        private @Nullable String expiresOn;
        private @Nullable String status;
        public Builder() {}
        public Builder(IamApiClientCredential defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientToken = defaults.clientToken;
    	      this.createdOn = defaults.createdOn;
    	      this.credentialId = defaults.credentialId;
    	      this.description = defaults.description;
    	      this.expiresOn = defaults.expiresOn;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder actions(@Nullable IamApiClientCredentialActions actions) {

            this.actions = actions;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder clientToken(@Nullable String clientToken) {

            this.clientToken = clientToken;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(@Nullable String createdOn) {

            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder credentialId(@Nullable Integer credentialId) {

            this.credentialId = credentialId;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(@Nullable String expiresOn) {

            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        public IamApiClientCredential build() {
            final var _resultValue = new IamApiClientCredential();
            _resultValue.actions = actions;
            _resultValue.clientSecret = clientSecret;
            _resultValue.clientToken = clientToken;
            _resultValue.createdOn = createdOn;
            _resultValue.credentialId = credentialId;
            _resultValue.description = description;
            _resultValue.expiresOn = expiresOn;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
