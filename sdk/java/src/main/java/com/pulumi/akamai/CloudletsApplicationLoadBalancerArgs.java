// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CloudletsApplicationLoadBalancerDataCenterArgs;
import com.pulumi.akamai.inputs.CloudletsApplicationLoadBalancerLivenessSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudletsApplicationLoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudletsApplicationLoadBalancerArgs Empty = new CloudletsApplicationLoadBalancerArgs();

    /**
     * The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
     * 
     */
    @Import(name="balancingType")
    private @Nullable Output<String> balancingType;

    /**
     * @return The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
     * 
     */
    public Optional<Output<String>> balancingType() {
        return Optional.ofNullable(this.balancingType);
    }

    /**
     * The object containing information on conditional origins being used as data centers for an Application Load Balancer
     * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
     * application load balancer configuration.
     * 
     */
    @Import(name="dataCenters", required=true)
    private Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters;

    /**
     * @return The object containing information on conditional origins being used as data centers for an Application Load Balancer
     * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
     * application load balancer configuration.
     * 
     */
    public Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters() {
        return this.dataCenters;
    }

    /**
     * The load balancer configuration version description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The load balancer configuration version description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="livenessSettings")
    private @Nullable Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs> livenessSettings;

    public Optional<Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs>> livenessSettings() {
        return Optional.ofNullable(this.livenessSettings);
    }

    /**
     * The load balancer configuration description
     * 
     */
    @Import(name="originDescription")
    private @Nullable Output<String> originDescription;

    /**
     * @return The load balancer configuration description
     * 
     */
    public Optional<Output<String>> originDescription() {
        return Optional.ofNullable(this.originDescription);
    }

    /**
     * The conditional origin&#39;s unique identifier
     * 
     */
    @Import(name="originId", required=true)
    private Output<String> originId;

    /**
     * @return The conditional origin&#39;s unique identifier
     * 
     */
    public Output<String> originId() {
        return this.originId;
    }

    private CloudletsApplicationLoadBalancerArgs() {}

    private CloudletsApplicationLoadBalancerArgs(CloudletsApplicationLoadBalancerArgs $) {
        this.balancingType = $.balancingType;
        this.dataCenters = $.dataCenters;
        this.description = $.description;
        this.livenessSettings = $.livenessSettings;
        this.originDescription = $.originDescription;
        this.originId = $.originId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudletsApplicationLoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudletsApplicationLoadBalancerArgs $;

        public Builder() {
            $ = new CloudletsApplicationLoadBalancerArgs();
        }

        public Builder(CloudletsApplicationLoadBalancerArgs defaults) {
            $ = new CloudletsApplicationLoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param balancingType The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
         * 
         * @return builder
         * 
         */
        public Builder balancingType(@Nullable Output<String> balancingType) {
            $.balancingType = balancingType;
            return this;
        }

        /**
         * @param balancingType The type of load balancing being performed. Options include WEIGHTED and PERFORMANCE
         * 
         * @return builder
         * 
         */
        public Builder balancingType(String balancingType) {
            return balancingType(Output.of(balancingType));
        }

        /**
         * @param dataCenters The object containing information on conditional origins being used as data centers for an Application Load Balancer
         * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
         * application load balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(Output<List<CloudletsApplicationLoadBalancerDataCenterArgs>> dataCenters) {
            $.dataCenters = dataCenters;
            return this;
        }

        /**
         * @param dataCenters The object containing information on conditional origins being used as data centers for an Application Load Balancer
         * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
         * application load balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(List<CloudletsApplicationLoadBalancerDataCenterArgs> dataCenters) {
            return dataCenters(Output.of(dataCenters));
        }

        /**
         * @param dataCenters The object containing information on conditional origins being used as data centers for an Application Load Balancer
         * implementation. Only Conditional Origins with an originType of CUSTOMER or NETSTORAGE can be used as data centers in an
         * application load balancer configuration.
         * 
         * @return builder
         * 
         */
        public Builder dataCenters(CloudletsApplicationLoadBalancerDataCenterArgs... dataCenters) {
            return dataCenters(List.of(dataCenters));
        }

        /**
         * @param description The load balancer configuration version description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The load balancer configuration version description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder livenessSettings(@Nullable Output<CloudletsApplicationLoadBalancerLivenessSettingsArgs> livenessSettings) {
            $.livenessSettings = livenessSettings;
            return this;
        }

        public Builder livenessSettings(CloudletsApplicationLoadBalancerLivenessSettingsArgs livenessSettings) {
            return livenessSettings(Output.of(livenessSettings));
        }

        /**
         * @param originDescription The load balancer configuration description
         * 
         * @return builder
         * 
         */
        public Builder originDescription(@Nullable Output<String> originDescription) {
            $.originDescription = originDescription;
            return this;
        }

        /**
         * @param originDescription The load balancer configuration description
         * 
         * @return builder
         * 
         */
        public Builder originDescription(String originDescription) {
            return originDescription(Output.of(originDescription));
        }

        /**
         * @param originId The conditional origin&#39;s unique identifier
         * 
         * @return builder
         * 
         */
        public Builder originId(Output<String> originId) {
            $.originId = originId;
            return this;
        }

        /**
         * @param originId The conditional origin&#39;s unique identifier
         * 
         * @return builder
         * 
         */
        public Builder originId(String originId) {
            return originId(Output.of(originId));
        }

        public CloudletsApplicationLoadBalancerArgs build() {
            $.dataCenters = Objects.requireNonNull($.dataCenters, "expected parameter 'dataCenters' to be non-null");
            $.originId = Objects.requireNonNull($.originId, "expected parameter 'originId' to be non-null");
            return $;
        }
    }

}
