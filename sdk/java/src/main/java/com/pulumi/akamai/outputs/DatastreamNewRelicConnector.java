// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamNewRelicConnector {
    /**
     * @return Your Log API token for your account in New Relic.
     * 
     */
    private String authToken;
    /**
     * @return The type of the resource passed in the request&#39;s custom header. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return A human-readable name for the request&#39;s custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String customHeaderName;
    /**
     * @return The custom header&#39;s contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String customHeaderValue;
    /**
     * @return The name of the connector.
     * 
     */
    private String displayName;
    /**
     * @return A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://&lt;newrelic.com&gt;/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
     * 
     */
    private String endpoint;

    private DatastreamNewRelicConnector() {}
    /**
     * @return Your Log API token for your account in New Relic.
     * 
     */
    public String authToken() {
        return this.authToken;
    }
    /**
     * @return The type of the resource passed in the request&#39;s custom header. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return A human-readable name for the request&#39;s custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> customHeaderName() {
        return Optional.ofNullable(this.customHeaderName);
    }
    /**
     * @return The custom header&#39;s contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> customHeaderValue() {
        return Optional.ofNullable(this.customHeaderValue);
    }
    /**
     * @return The name of the connector.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return A New Relic endpoint URL you want to send your logs to. The endpoint URL should follow the https://&lt;newrelic.com&gt;/log/v1/ format format. See Introduction to the Log API https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/ if you want to retrieve your New Relic endpoint URL.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamNewRelicConnector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authToken;
        private @Nullable String contentType;
        private @Nullable String customHeaderName;
        private @Nullable String customHeaderValue;
        private String displayName;
        private String endpoint;
        public Builder() {}
        public Builder(DatastreamNewRelicConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authToken = defaults.authToken;
    	      this.contentType = defaults.contentType;
    	      this.customHeaderName = defaults.customHeaderName;
    	      this.customHeaderValue = defaults.customHeaderValue;
    	      this.displayName = defaults.displayName;
    	      this.endpoint = defaults.endpoint;
        }

        @CustomType.Setter
        public Builder authToken(String authToken) {
            if (authToken == null) {
              throw new MissingRequiredPropertyException("DatastreamNewRelicConnector", "authToken");
            }
            this.authToken = authToken;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaderName(@Nullable String customHeaderName) {

            this.customHeaderName = customHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaderValue(@Nullable String customHeaderValue) {

            this.customHeaderValue = customHeaderValue;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("DatastreamNewRelicConnector", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("DatastreamNewRelicConnector", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        public DatastreamNewRelicConnector build() {
            final var _resultValue = new DatastreamNewRelicConnector();
            _resultValue.authToken = authToken;
            _resultValue.contentType = contentType;
            _resultValue.customHeaderName = customHeaderName;
            _resultValue.customHeaderValue = customHeaderValue;
            _resultValue.displayName = displayName;
            _resultValue.endpoint = endpoint;
            return _resultValue;
        }
    }
}
