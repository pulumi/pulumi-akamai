// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetGtmDomainStatusLink;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGtmDomainStatus extends com.pulumi.resources.InvokeArgs {

    public static final GetGtmDomainStatus Empty = new GetGtmDomainStatus();

    /**
     * A unique identifier generated when a change occurs to the domain.
     * 
     */
    @Import(name="changeId", required=true)
    private String changeId;

    /**
     * @return A unique identifier generated when a change occurs to the domain.
     * 
     */
    public String changeId() {
        return this.changeId;
    }

    /**
     * Specifies the URL path that allows direct navigation to the domain.
     * 
     */
    @Import(name="links")
    private @Nullable List<GetGtmDomainStatusLink> links;

    /**
     * @return Specifies the URL path that allows direct navigation to the domain.
     * 
     */
    public Optional<List<GetGtmDomainStatusLink>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * A notification generated when a change occurs to the domain.
     * 
     */
    @Import(name="message", required=true)
    private String message;

    /**
     * @return A notification generated when a change occurs to the domain.
     * 
     */
    public String message() {
        return this.message;
    }

    /**
     * Indicates if the domain validates.
     * 
     */
    @Import(name="passingValidation", required=true)
    private Boolean passingValidation;

    /**
     * @return Indicates if the domain validates.
     * 
     */
    public Boolean passingValidation() {
        return this.passingValidation;
    }

    /**
     * Tracks the status of the domain&#39;s propagation state.
     * 
     */
    @Import(name="propagationStatus", required=true)
    private String propagationStatus;

    /**
     * @return Tracks the status of the domain&#39;s propagation state.
     * 
     */
    public String propagationStatus() {
        return this.propagationStatus;
    }

    /**
     * An ISO 8601 timestamp indicating when a change occurs to the domain.
     * 
     */
    @Import(name="propagationStatusDate", required=true)
    private String propagationStatusDate;

    /**
     * @return An ISO 8601 timestamp indicating when a change occurs to the domain.
     * 
     */
    public String propagationStatusDate() {
        return this.propagationStatusDate;
    }

    private GetGtmDomainStatus() {}

    private GetGtmDomainStatus(GetGtmDomainStatus $) {
        this.changeId = $.changeId;
        this.links = $.links;
        this.message = $.message;
        this.passingValidation = $.passingValidation;
        this.propagationStatus = $.propagationStatus;
        this.propagationStatusDate = $.propagationStatusDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainStatus defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainStatus $;

        public Builder() {
            $ = new GetGtmDomainStatus();
        }

        public Builder(GetGtmDomainStatus defaults) {
            $ = new GetGtmDomainStatus(Objects.requireNonNull(defaults));
        }

        /**
         * @param changeId A unique identifier generated when a change occurs to the domain.
         * 
         * @return builder
         * 
         */
        public Builder changeId(String changeId) {
            $.changeId = changeId;
            return this;
        }

        /**
         * @param links Specifies the URL path that allows direct navigation to the domain.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable List<GetGtmDomainStatusLink> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links Specifies the URL path that allows direct navigation to the domain.
         * 
         * @return builder
         * 
         */
        public Builder links(GetGtmDomainStatusLink... links) {
            return links(List.of(links));
        }

        /**
         * @param message A notification generated when a change occurs to the domain.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            $.message = message;
            return this;
        }

        /**
         * @param passingValidation Indicates if the domain validates.
         * 
         * @return builder
         * 
         */
        public Builder passingValidation(Boolean passingValidation) {
            $.passingValidation = passingValidation;
            return this;
        }

        /**
         * @param propagationStatus Tracks the status of the domain&#39;s propagation state.
         * 
         * @return builder
         * 
         */
        public Builder propagationStatus(String propagationStatus) {
            $.propagationStatus = propagationStatus;
            return this;
        }

        /**
         * @param propagationStatusDate An ISO 8601 timestamp indicating when a change occurs to the domain.
         * 
         * @return builder
         * 
         */
        public Builder propagationStatusDate(String propagationStatusDate) {
            $.propagationStatusDate = propagationStatusDate;
            return this;
        }

        public GetGtmDomainStatus build() {
            if ($.changeId == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainStatus", "changeId");
            }
            if ($.message == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainStatus", "message");
            }
            if ($.passingValidation == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainStatus", "passingValidation");
            }
            if ($.propagationStatus == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainStatus", "propagationStatus");
            }
            if ($.propagationStatusDate == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainStatus", "propagationStatusDate");
            }
            return $;
        }
    }

}
