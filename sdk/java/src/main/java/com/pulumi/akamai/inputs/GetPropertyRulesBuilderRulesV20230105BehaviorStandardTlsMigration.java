// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration Empty = new GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration();

    /**
     * Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
     * 
     */
    @Import(name="allowHttpsDowngrade")
    private @Nullable Boolean allowHttpsDowngrade;

    /**
     * @return Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
     * 
     */
    public Optional<Boolean> allowHttpsDowngrade() {
        return Optional.ofNullable(this.allowHttpsDowngrade);
    }

    /**
     * Allows temporary upgrade of HTTP traffic to HTTPS.
     * 
     */
    @Import(name="allowHttpsUpgrade")
    private @Nullable Boolean allowHttpsUpgrade;

    /**
     * @return Allows temporary upgrade of HTTP traffic to HTTPS.
     * 
     */
    public Optional<Boolean> allowHttpsUpgrade() {
        return Optional.ofNullable(this.allowHttpsUpgrade);
    }

    /**
     * Specifies the number cache sharing days.
     * 
     */
    @Import(name="cacheSharingDuration")
    private @Nullable Integer cacheSharingDuration;

    /**
     * @return Specifies the number cache sharing days.
     * 
     */
    public Optional<Integer> cacheSharingDuration() {
        return Optional.ofNullable(this.cacheSharingDuration);
    }

    /**
     * Specifies when to start cache sharing.
     * 
     */
    @Import(name="cacheSharingStartTime")
    private @Nullable String cacheSharingStartTime;

    /**
     * @return Specifies when to start cache sharing.
     * 
     */
    public Optional<String> cacheSharingStartTime() {
        return Optional.ofNullable(this.cacheSharingStartTime);
    }

    /**
     * Allows migration to Standard TLS.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Allows migration to Standard TLS.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Sets whether your new certificate is SNI-only.
     * 
     */
    @Import(name="isCertificateSniOnly")
    private @Nullable Boolean isCertificateSniOnly;

    /**
     * @return Sets whether your new certificate is SNI-only.
     * 
     */
    public Optional<Boolean> isCertificateSniOnly() {
        return Optional.ofNullable(this.isCertificateSniOnly);
    }

    /**
     * Allows you to align traffic to various `tieredDistribution` areas.
     * 
     */
    @Import(name="isTieredDistributionUsed")
    private @Nullable Boolean isTieredDistributionUsed;

    /**
     * @return Allows you to align traffic to various `tieredDistribution` areas.
     * 
     */
    public Optional<Boolean> isTieredDistributionUsed() {
        return Optional.ofNullable(this.isTieredDistributionUsed);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the number of days to migrate the cache.
     * 
     */
    @Import(name="migrationDuration")
    private @Nullable Integer migrationDuration;

    /**
     * @return Specifies the number of days to migrate the cache.
     * 
     */
    public Optional<Integer> migrationDuration() {
        return Optional.ofNullable(this.migrationDuration);
    }

    /**
     * What kind of traffic you&#39;re migrating from.
     * 
     */
    @Import(name="migrationFrom")
    private @Nullable String migrationFrom;

    /**
     * @return What kind of traffic you&#39;re migrating from.
     * 
     */
    public Optional<String> migrationFrom() {
        return Optional.ofNullable(this.migrationFrom);
    }

    /**
     * Specifies when to start migrating the cache.
     * 
     */
    @Import(name="migrationStartTime")
    private @Nullable String migrationStartTime;

    /**
     * @return Specifies when to start migrating the cache.
     * 
     */
    public Optional<String> migrationStartTime() {
        return Optional.ofNullable(this.migrationStartTime);
    }

    /**
     * Specifies the `tieredDistribution` location.
     * 
     */
    @Import(name="tdLocation")
    private @Nullable String tdLocation;

    /**
     * @return Specifies the `tieredDistribution` location.
     * 
     */
    public Optional<String> tdLocation() {
        return Optional.ofNullable(this.tdLocation);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration() {}

    private GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration(GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration $) {
        this.allowHttpsDowngrade = $.allowHttpsDowngrade;
        this.allowHttpsUpgrade = $.allowHttpsUpgrade;
        this.cacheSharingDuration = $.cacheSharingDuration;
        this.cacheSharingStartTime = $.cacheSharingStartTime;
        this.enabled = $.enabled;
        this.isCertificateSniOnly = $.isCertificateSniOnly;
        this.isTieredDistributionUsed = $.isTieredDistributionUsed;
        this.locked = $.locked;
        this.migrationDuration = $.migrationDuration;
        this.migrationFrom = $.migrationFrom;
        this.migrationStartTime = $.migrationStartTime;
        this.tdLocation = $.tdLocation;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowHttpsDowngrade Allow temporary downgrade of HTTPS traffic to HTTP. This removes various `Origin`, `Referer`, `Cookie`, `Cookie2`, `sec-*` and `proxy-*` headers from the request to origin.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsDowngrade(@Nullable Boolean allowHttpsDowngrade) {
            $.allowHttpsDowngrade = allowHttpsDowngrade;
            return this;
        }

        /**
         * @param allowHttpsUpgrade Allows temporary upgrade of HTTP traffic to HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder allowHttpsUpgrade(@Nullable Boolean allowHttpsUpgrade) {
            $.allowHttpsUpgrade = allowHttpsUpgrade;
            return this;
        }

        /**
         * @param cacheSharingDuration Specifies the number cache sharing days.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingDuration(@Nullable Integer cacheSharingDuration) {
            $.cacheSharingDuration = cacheSharingDuration;
            return this;
        }

        /**
         * @param cacheSharingStartTime Specifies when to start cache sharing.
         * 
         * @return builder
         * 
         */
        public Builder cacheSharingStartTime(@Nullable String cacheSharingStartTime) {
            $.cacheSharingStartTime = cacheSharingStartTime;
            return this;
        }

        /**
         * @param enabled Allows migration to Standard TLS.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param isCertificateSniOnly Sets whether your new certificate is SNI-only.
         * 
         * @return builder
         * 
         */
        public Builder isCertificateSniOnly(@Nullable Boolean isCertificateSniOnly) {
            $.isCertificateSniOnly = isCertificateSniOnly;
            return this;
        }

        /**
         * @param isTieredDistributionUsed Allows you to align traffic to various `tieredDistribution` areas.
         * 
         * @return builder
         * 
         */
        public Builder isTieredDistributionUsed(@Nullable Boolean isTieredDistributionUsed) {
            $.isTieredDistributionUsed = isTieredDistributionUsed;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param migrationDuration Specifies the number of days to migrate the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationDuration(@Nullable Integer migrationDuration) {
            $.migrationDuration = migrationDuration;
            return this;
        }

        /**
         * @param migrationFrom What kind of traffic you&#39;re migrating from.
         * 
         * @return builder
         * 
         */
        public Builder migrationFrom(@Nullable String migrationFrom) {
            $.migrationFrom = migrationFrom;
            return this;
        }

        /**
         * @param migrationStartTime Specifies when to start migrating the cache.
         * 
         * @return builder
         * 
         */
        public Builder migrationStartTime(@Nullable String migrationStartTime) {
            $.migrationStartTime = migrationStartTime;
            return this;
        }

        /**
         * @param tdLocation Specifies the `tieredDistribution` location.
         * 
         * @return builder
         * 
         */
        public Builder tdLocation(@Nullable String tdLocation) {
            $.tdLocation = tdLocation;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20230105BehaviorStandardTlsMigration build() {
            return $;
        }
    }

}
