// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs Empty = new GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs();

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="beaconStreamTitle")
    private @Nullable Output<String> beaconStreamTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> beaconStreamTitle() {
        return Optional.ofNullable(this.beaconStreamTitle);
    }

    /**
     * If enabled, gathers midgress traffic data within the Akamai platform, such as between two edge servers, for all streams configured.
     * 
     */
    @Import(name="collectMidgressTraffic")
    private @Nullable Output<Boolean> collectMidgressTraffic;

    /**
     * @return If enabled, gathers midgress traffic data within the Akamai platform, such as between two edge servers, for all streams configured.
     * 
     */
    public Optional<Output<Boolean>> collectMidgressTraffic() {
        return Optional.ofNullable(this.collectMidgressTraffic);
    }

    /**
     * A set of dash-separated DataStream ID values to limit the scope of reported data. By default, all active streams report. Use the DataStream application to gather stream ID values that apply to this property configuration. Specifying IDs for any streams that don&#39;t apply to this property has no effect, and results in no data reported.
     * 
     */
    @Import(name="datastreamIds")
    private @Nullable Output<String> datastreamIds;

    /**
     * @return A set of dash-separated DataStream ID values to limit the scope of reported data. By default, all active streams report. Use the DataStream application to gather stream ID values that apply to this property configuration. Specifying IDs for any streams that don&#39;t apply to this property has no effect, and results in no data reported.
     * 
     */
    public Optional<Output<String>> datastreamIds() {
        return Optional.ofNullable(this.datastreamIds);
    }

    /**
     * Enables DataStream reporting.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enables DataStream reporting.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Enables log collection for the property by associating it with DataStream configurations.
     * 
     */
    @Import(name="logEnabled")
    private @Nullable Output<Boolean> logEnabled;

    /**
     * @return Enables log collection for the property by associating it with DataStream configurations.
     * 
     */
    public Optional<Output<Boolean>> logEnabled() {
        return Optional.ofNullable(this.logEnabled);
    }

    /**
     * Specifies the unique IDs of streams configured for the property. For properties created with the previous version of the rule format, this option contains a string instead of an array of strings. You can use the `List streams` operation to get stream IDs.
     * 
     */
    @Import(name="logStreamNames")
    private @Nullable Output<List<String>> logStreamNames;

    /**
     * @return Specifies the unique IDs of streams configured for the property. For properties created with the previous version of the rule format, this option contains a string instead of an array of strings. You can use the `List streams` operation to get stream IDs.
     * 
     */
    public Optional<Output<List<String>>> logStreamNames() {
        return Optional.ofNullable(this.logStreamNames);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="logStreamTitle")
    private @Nullable Output<String> logStreamTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<Output<String>> logStreamTitle() {
        return Optional.ofNullable(this.logStreamTitle);
    }

    /**
     * Specifies the percentage of log data you want to collect for this property.
     * 
     */
    @Import(name="samplingPercentage")
    private @Nullable Output<Integer> samplingPercentage;

    /**
     * @return Specifies the percentage of log data you want to collect for this property.
     * 
     */
    public Optional<Output<Integer>> samplingPercentage() {
        return Optional.ofNullable(this.samplingPercentage);
    }

    /**
     * Specify the DataStream type.
     * 
     */
    @Import(name="streamType")
    private @Nullable Output<String> streamType;

    /**
     * @return Specify the DataStream type.
     * 
     */
    public Optional<Output<String>> streamType() {
        return Optional.ofNullable(this.streamType);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs() {}

    private GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs(GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs $) {
        this.beaconStreamTitle = $.beaconStreamTitle;
        this.collectMidgressTraffic = $.collectMidgressTraffic;
        this.datastreamIds = $.datastreamIds;
        this.enabled = $.enabled;
        this.locked = $.locked;
        this.logEnabled = $.logEnabled;
        this.logStreamNames = $.logStreamNames;
        this.logStreamTitle = $.logStreamTitle;
        this.samplingPercentage = $.samplingPercentage;
        this.streamType = $.streamType;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param beaconStreamTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder beaconStreamTitle(@Nullable Output<String> beaconStreamTitle) {
            $.beaconStreamTitle = beaconStreamTitle;
            return this;
        }

        /**
         * @param beaconStreamTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder beaconStreamTitle(String beaconStreamTitle) {
            return beaconStreamTitle(Output.of(beaconStreamTitle));
        }

        /**
         * @param collectMidgressTraffic If enabled, gathers midgress traffic data within the Akamai platform, such as between two edge servers, for all streams configured.
         * 
         * @return builder
         * 
         */
        public Builder collectMidgressTraffic(@Nullable Output<Boolean> collectMidgressTraffic) {
            $.collectMidgressTraffic = collectMidgressTraffic;
            return this;
        }

        /**
         * @param collectMidgressTraffic If enabled, gathers midgress traffic data within the Akamai platform, such as between two edge servers, for all streams configured.
         * 
         * @return builder
         * 
         */
        public Builder collectMidgressTraffic(Boolean collectMidgressTraffic) {
            return collectMidgressTraffic(Output.of(collectMidgressTraffic));
        }

        /**
         * @param datastreamIds A set of dash-separated DataStream ID values to limit the scope of reported data. By default, all active streams report. Use the DataStream application to gather stream ID values that apply to this property configuration. Specifying IDs for any streams that don&#39;t apply to this property has no effect, and results in no data reported.
         * 
         * @return builder
         * 
         */
        public Builder datastreamIds(@Nullable Output<String> datastreamIds) {
            $.datastreamIds = datastreamIds;
            return this;
        }

        /**
         * @param datastreamIds A set of dash-separated DataStream ID values to limit the scope of reported data. By default, all active streams report. Use the DataStream application to gather stream ID values that apply to this property configuration. Specifying IDs for any streams that don&#39;t apply to this property has no effect, and results in no data reported.
         * 
         * @return builder
         * 
         */
        public Builder datastreamIds(String datastreamIds) {
            return datastreamIds(Output.of(datastreamIds));
        }

        /**
         * @param enabled Enables DataStream reporting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enables DataStream reporting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param logEnabled Enables log collection for the property by associating it with DataStream configurations.
         * 
         * @return builder
         * 
         */
        public Builder logEnabled(@Nullable Output<Boolean> logEnabled) {
            $.logEnabled = logEnabled;
            return this;
        }

        /**
         * @param logEnabled Enables log collection for the property by associating it with DataStream configurations.
         * 
         * @return builder
         * 
         */
        public Builder logEnabled(Boolean logEnabled) {
            return logEnabled(Output.of(logEnabled));
        }

        /**
         * @param logStreamNames Specifies the unique IDs of streams configured for the property. For properties created with the previous version of the rule format, this option contains a string instead of an array of strings. You can use the `List streams` operation to get stream IDs.
         * 
         * @return builder
         * 
         */
        public Builder logStreamNames(@Nullable Output<List<String>> logStreamNames) {
            $.logStreamNames = logStreamNames;
            return this;
        }

        /**
         * @param logStreamNames Specifies the unique IDs of streams configured for the property. For properties created with the previous version of the rule format, this option contains a string instead of an array of strings. You can use the `List streams` operation to get stream IDs.
         * 
         * @return builder
         * 
         */
        public Builder logStreamNames(List<String> logStreamNames) {
            return logStreamNames(Output.of(logStreamNames));
        }

        /**
         * @param logStreamNames Specifies the unique IDs of streams configured for the property. For properties created with the previous version of the rule format, this option contains a string instead of an array of strings. You can use the `List streams` operation to get stream IDs.
         * 
         * @return builder
         * 
         */
        public Builder logStreamNames(String... logStreamNames) {
            return logStreamNames(List.of(logStreamNames));
        }

        /**
         * @param logStreamTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder logStreamTitle(@Nullable Output<String> logStreamTitle) {
            $.logStreamTitle = logStreamTitle;
            return this;
        }

        /**
         * @param logStreamTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder logStreamTitle(String logStreamTitle) {
            return logStreamTitle(Output.of(logStreamTitle));
        }

        /**
         * @param samplingPercentage Specifies the percentage of log data you want to collect for this property.
         * 
         * @return builder
         * 
         */
        public Builder samplingPercentage(@Nullable Output<Integer> samplingPercentage) {
            $.samplingPercentage = samplingPercentage;
            return this;
        }

        /**
         * @param samplingPercentage Specifies the percentage of log data you want to collect for this property.
         * 
         * @return builder
         * 
         */
        public Builder samplingPercentage(Integer samplingPercentage) {
            return samplingPercentage(Output.of(samplingPercentage));
        }

        /**
         * @param streamType Specify the DataStream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(@Nullable Output<String> streamType) {
            $.streamType = streamType;
            return this;
        }

        /**
         * @param streamType Specify the DataStream type.
         * 
         * @return builder
         * 
         */
        public Builder streamType(String streamType) {
            return streamType(Output.of(streamType));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20231030BehaviorDatastreamArgs build() {
            return $;
        }
    }

}
