// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqualUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationLandscapeIfDimensionEqual build() {
            return $;
        }
    }

}
