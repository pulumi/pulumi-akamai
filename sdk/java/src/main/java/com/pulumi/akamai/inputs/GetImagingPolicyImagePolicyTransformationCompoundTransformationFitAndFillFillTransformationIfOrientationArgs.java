// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefaultArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortraitArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs Empty = new GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs();

    @Import(name="default")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefaultArgs> default_;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscapeArgs> landscape;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscapeArgs>> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortraitArgs> portrait;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortraitArgs>> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquareArgs> square;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquareArgs>> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs() {}

    private GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        public Builder landscape(@Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscapeArgs> landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder landscape(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationLandscapeArgs landscape) {
            return landscape(Output.of(landscape));
        }

        public Builder portrait(@Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortraitArgs> portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder portrait(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationPortraitArgs portrait) {
            return portrait(Output.of(portrait));
        }

        public Builder square(@Nullable Output<GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquareArgs> square) {
            $.square = square;
            return this;
        }

        public Builder square(GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationSquareArgs square) {
            return square(Output.of(square));
        }

        public GetImagingPolicyImagePolicyTransformationCompoundTransformationFitAndFillFillTransformationIfOrientationArgs build() {
            return $;
        }
    }

}
