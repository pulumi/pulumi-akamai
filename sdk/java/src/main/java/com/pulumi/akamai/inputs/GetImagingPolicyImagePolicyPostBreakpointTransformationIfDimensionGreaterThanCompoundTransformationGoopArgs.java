// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs();

    @Import(name="chaos")
    private @Nullable Output<String> chaos;

    public Optional<Output<String>> chaos() {
        return Optional.ofNullable(this.chaos);
    }

    @Import(name="chaosVar")
    private @Nullable Output<String> chaosVar;

    public Optional<Output<String>> chaosVar() {
        return Optional.ofNullable(this.chaosVar);
    }

    @Import(name="density")
    private @Nullable Output<String> density;

    public Optional<Output<String>> density() {
        return Optional.ofNullable(this.density);
    }

    @Import(name="densityVar")
    private @Nullable Output<String> densityVar;

    public Optional<Output<String>> densityVar() {
        return Optional.ofNullable(this.densityVar);
    }

    @Import(name="power")
    private @Nullable Output<String> power;

    public Optional<Output<String>> power() {
        return Optional.ofNullable(this.power);
    }

    @Import(name="powerVar")
    private @Nullable Output<String> powerVar;

    public Optional<Output<String>> powerVar() {
        return Optional.ofNullable(this.powerVar);
    }

    @Import(name="seed")
    private @Nullable Output<String> seed;

    public Optional<Output<String>> seed() {
        return Optional.ofNullable(this.seed);
    }

    @Import(name="seedVar")
    private @Nullable Output<String> seedVar;

    public Optional<Output<String>> seedVar() {
        return Optional.ofNullable(this.seedVar);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs $) {
        this.chaos = $.chaos;
        this.chaosVar = $.chaosVar;
        this.density = $.density;
        this.densityVar = $.densityVar;
        this.power = $.power;
        this.powerVar = $.powerVar;
        this.seed = $.seed;
        this.seedVar = $.seedVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs(Objects.requireNonNull(defaults));
        }

        public Builder chaos(@Nullable Output<String> chaos) {
            $.chaos = chaos;
            return this;
        }

        public Builder chaos(String chaos) {
            return chaos(Output.of(chaos));
        }

        public Builder chaosVar(@Nullable Output<String> chaosVar) {
            $.chaosVar = chaosVar;
            return this;
        }

        public Builder chaosVar(String chaosVar) {
            return chaosVar(Output.of(chaosVar));
        }

        public Builder density(@Nullable Output<String> density) {
            $.density = density;
            return this;
        }

        public Builder density(String density) {
            return density(Output.of(density));
        }

        public Builder densityVar(@Nullable Output<String> densityVar) {
            $.densityVar = densityVar;
            return this;
        }

        public Builder densityVar(String densityVar) {
            return densityVar(Output.of(densityVar));
        }

        public Builder power(@Nullable Output<String> power) {
            $.power = power;
            return this;
        }

        public Builder power(String power) {
            return power(Output.of(power));
        }

        public Builder powerVar(@Nullable Output<String> powerVar) {
            $.powerVar = powerVar;
            return this;
        }

        public Builder powerVar(String powerVar) {
            return powerVar(Output.of(powerVar));
        }

        public Builder seed(@Nullable Output<String> seed) {
            $.seed = seed;
            return this;
        }

        public Builder seed(String seed) {
            return seed(Output.of(seed));
        }

        public Builder seedVar(@Nullable Output<String> seedVar) {
            $.seedVar = seedVar;
            return this;
        }

        public Builder seedVar(String seedVar) {
            return seedVar(Output.of(seedVar));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionGreaterThanCompoundTransformationGoopArgs build() {
            return $;
        }
    }

}
