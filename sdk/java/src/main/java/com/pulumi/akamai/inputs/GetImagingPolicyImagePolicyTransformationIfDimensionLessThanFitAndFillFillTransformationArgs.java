// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionLessThanFitAndFillFillTransformationArgs build() {
            return $;
        }
    }

}
