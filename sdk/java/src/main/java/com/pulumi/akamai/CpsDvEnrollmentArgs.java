// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.CpsDvEnrollmentAdminContactArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentCsrArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentOrganizationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentTechContactArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsDvEnrollmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpsDvEnrollmentArgs Empty = new CpsDvEnrollmentArgs();

    /**
     * Whether acknowledge warnings before certificate verification
     * 
     */
    @Import(name="acknowledgePreVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePreVerificationWarnings;

    /**
     * @return Whether acknowledge warnings before certificate verification
     * 
     */
    public Optional<Output<Boolean>> acknowledgePreVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePreVerificationWarnings);
    }

    /**
     * Contact information for the certificate administrator to use at organization
     * 
     */
    @Import(name="adminContact", required=true)
    private Output<CpsDvEnrollmentAdminContactArgs> adminContact;

    /**
     * @return Contact information for the certificate administrator to use at organization
     * 
     */
    public Output<CpsDvEnrollmentAdminContactArgs> adminContact() {
        return this.adminContact;
    }

    /**
     * Allow to duplicate common name
     * 
     */
    @Import(name="allowDuplicateCommonName")
    private @Nullable Output<Boolean> allowDuplicateCommonName;

    /**
     * @return Allow to duplicate common name
     * 
     */
    public Optional<Output<Boolean>> allowDuplicateCommonName() {
        return Optional.ofNullable(this.allowDuplicateCommonName);
    }

    /**
     * Certificate trust chain type
     * 
     */
    @Import(name="certificateChainType")
    private @Nullable Output<String> certificateChainType;

    /**
     * @return Certificate trust chain type
     * 
     */
    public Optional<Output<String>> certificateChainType() {
        return Optional.ofNullable(this.certificateChainType);
    }

    /**
     * Common name used for enrollment
     * 
     */
    @Import(name="commonName", required=true)
    private Output<String> commonName;

    /**
     * @return Common name used for enrollment
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }

    /**
     * Contract ID for which enrollment is retrieved
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return Contract ID for which enrollment is retrieved
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Certificate signing request generated during enrollment creation
     * 
     */
    @Import(name="csr", required=true)
    private Output<CpsDvEnrollmentCsrArgs> csr;

    /**
     * @return Certificate signing request generated during enrollment creation
     * 
     */
    public Output<CpsDvEnrollmentCsrArgs> csr() {
        return this.csr;
    }

    /**
     * Settings containing network information and TLS Metadata used by CPS
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Settings containing network information and TLS Metadata used by CPS
     * 
     */
    public Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * Organization information
     * 
     */
    @Import(name="organization", required=true)
    private Output<CpsDvEnrollmentOrganizationArgs> organization;

    /**
     * @return Organization information
     * 
     */
    public Output<CpsDvEnrollmentOrganizationArgs> organization() {
        return this.organization;
    }

    /**
     * List of SANs
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return List of SANs
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * Type of TLS deployment network
     * 
     */
    @Import(name="secureNetwork", required=true)
    private Output<String> secureNetwork;

    /**
     * @return Type of TLS deployment network
     * 
     */
    public Output<String> secureNetwork() {
        return this.secureNetwork;
    }

    /**
     * SHA algorithm type
     * 
     */
    @Import(name="signatureAlgorithm", required=true)
    private Output<String> signatureAlgorithm;

    /**
     * @return SHA algorithm type
     * 
     */
    public Output<String> signatureAlgorithm() {
        return this.signatureAlgorithm;
    }

    /**
     * Whether Server Name Indication is used for enrollment
     * 
     */
    @Import(name="sniOnly", required=true)
    private Output<Boolean> sniOnly;

    /**
     * @return Whether Server Name Indication is used for enrollment
     * 
     */
    public Output<Boolean> sniOnly() {
        return this.sniOnly;
    }

    /**
     * Contact information for an administrator at Akamai
     * 
     */
    @Import(name="techContact", required=true)
    private Output<CpsDvEnrollmentTechContactArgs> techContact;

    /**
     * @return Contact information for an administrator at Akamai
     * 
     */
    public Output<CpsDvEnrollmentTechContactArgs> techContact() {
        return this.techContact;
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<CpsDvEnrollmentTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<CpsDvEnrollmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private CpsDvEnrollmentArgs() {}

    private CpsDvEnrollmentArgs(CpsDvEnrollmentArgs $) {
        this.acknowledgePreVerificationWarnings = $.acknowledgePreVerificationWarnings;
        this.adminContact = $.adminContact;
        this.allowDuplicateCommonName = $.allowDuplicateCommonName;
        this.certificateChainType = $.certificateChainType;
        this.commonName = $.commonName;
        this.contractId = $.contractId;
        this.csr = $.csr;
        this.networkConfiguration = $.networkConfiguration;
        this.organization = $.organization;
        this.sans = $.sans;
        this.secureNetwork = $.secureNetwork;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.sniOnly = $.sniOnly;
        this.techContact = $.techContact;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsDvEnrollmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsDvEnrollmentArgs $;

        public Builder() {
            $ = new CpsDvEnrollmentArgs();
        }

        public Builder(CpsDvEnrollmentArgs defaults) {
            $ = new CpsDvEnrollmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(@Nullable Output<Boolean> acknowledgePreVerificationWarnings) {
            $.acknowledgePreVerificationWarnings = acknowledgePreVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(Boolean acknowledgePreVerificationWarnings) {
            return acknowledgePreVerificationWarnings(Output.of(acknowledgePreVerificationWarnings));
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(Output<CpsDvEnrollmentAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(CpsDvEnrollmentAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(@Nullable Output<Boolean> allowDuplicateCommonName) {
            $.allowDuplicateCommonName = allowDuplicateCommonName;
            return this;
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(Boolean allowDuplicateCommonName) {
            return allowDuplicateCommonName(Output.of(allowDuplicateCommonName));
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(@Nullable Output<String> certificateChainType) {
            $.certificateChainType = certificateChainType;
            return this;
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(String certificateChainType) {
            return certificateChainType(Output.of(certificateChainType));
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param csr Certificate signing request generated during enrollment creation
         * 
         * @return builder
         * 
         */
        public Builder csr(Output<CpsDvEnrollmentCsrArgs> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr Certificate signing request generated during enrollment creation
         * 
         * @return builder
         * 
         */
        public Builder csr(CpsDvEnrollmentCsrArgs csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS Metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS Metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CpsDvEnrollmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<CpsDvEnrollmentOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(CpsDvEnrollmentOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param signatureAlgorithm SHA algorithm type
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm SHA algorithm type
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Output<Boolean> sniOnly) {
            $.sniOnly = sniOnly;
            return this;
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Boolean sniOnly) {
            return sniOnly(Output.of(sniOnly));
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(Output<CpsDvEnrollmentTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(CpsDvEnrollmentTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<CpsDvEnrollmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(CpsDvEnrollmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public CpsDvEnrollmentArgs build() {
            $.adminContact = Objects.requireNonNull($.adminContact, "expected parameter 'adminContact' to be non-null");
            $.commonName = Objects.requireNonNull($.commonName, "expected parameter 'commonName' to be non-null");
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.csr = Objects.requireNonNull($.csr, "expected parameter 'csr' to be non-null");
            $.networkConfiguration = Objects.requireNonNull($.networkConfiguration, "expected parameter 'networkConfiguration' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.secureNetwork = Objects.requireNonNull($.secureNetwork, "expected parameter 'secureNetwork' to be non-null");
            $.signatureAlgorithm = Objects.requireNonNull($.signatureAlgorithm, "expected parameter 'signatureAlgorithm' to be non-null");
            $.sniOnly = Objects.requireNonNull($.sniOnly, "expected parameter 'sniOnly' to be non-null");
            $.techContact = Objects.requireNonNull($.techContact, "expected parameter 'techContact' to be non-null");
            return $;
        }
    }

}
