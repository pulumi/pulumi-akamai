// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation();

    @Import(name="default")
    private @Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault default_;

    public Optional<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape landscape;

    public Optional<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait portrait;

    public Optional<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare square;

    public Optional<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationDefault default_) {
            $.default_ = default_;
            return this;
        }

        public Builder landscape(@Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationLandscape landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder portrait(@Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationPortrait portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder square(@Nullable GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientationSquare square) {
            $.square = square;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionLessThanIfDimensionEqualIfOrientation build() {
            return $;
        }
    }

}
