// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare();

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquareUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfOrientationSquare build() {
            return $;
        }
    }

}
