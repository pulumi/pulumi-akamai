// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs();

    @Import(name="conditionalErrorPattern")
    private @Nullable Output<String> conditionalErrorPattern;

    public Optional<Output<String>> conditionalErrorPattern() {
        return Optional.ofNullable(this.conditionalErrorPattern);
    }

    @Import(name="conditionalHttpStatuses")
    private @Nullable Output<List<String>> conditionalHttpStatuses;

    public Optional<Output<List<String>>> conditionalHttpStatuses() {
        return Optional.ofNullable(this.conditionalHttpStatuses);
    }

    @Import(name="conditionalSamplingFrequency")
    private @Nullable Output<String> conditionalSamplingFrequency;

    public Optional<Output<String>> conditionalSamplingFrequency() {
        return Optional.ofNullable(this.conditionalSamplingFrequency);
    }

    @Import(name="cpcodes")
    private @Nullable Output<String> cpcodes;

    public Optional<Output<String>> cpcodes() {
        return Optional.ofNullable(this.cpcodes);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="forwardType")
    private @Nullable Output<String> forwardType;

    public Optional<Output<String>> forwardType() {
        return Optional.ofNullable(this.forwardType);
    }

    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    @Import(name="requestType")
    private @Nullable Output<String> requestType;

    public Optional<Output<String>> requestType() {
        return Optional.ofNullable(this.requestType);
    }

    @Import(name="samplingFrequency")
    private @Nullable Output<String> samplingFrequency;

    public Optional<Output<String>> samplingFrequency() {
        return Optional.ofNullable(this.samplingFrequency);
    }

    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs(GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs $) {
        this.conditionalErrorPattern = $.conditionalErrorPattern;
        this.conditionalHttpStatuses = $.conditionalHttpStatuses;
        this.conditionalSamplingFrequency = $.conditionalSamplingFrequency;
        this.cpcodes = $.cpcodes;
        this.enabled = $.enabled;
        this.forwardType = $.forwardType;
        this.locked = $.locked;
        this.requestType = $.requestType;
        this.samplingFrequency = $.samplingFrequency;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditionalErrorPattern(@Nullable Output<String> conditionalErrorPattern) {
            $.conditionalErrorPattern = conditionalErrorPattern;
            return this;
        }

        public Builder conditionalErrorPattern(String conditionalErrorPattern) {
            return conditionalErrorPattern(Output.of(conditionalErrorPattern));
        }

        public Builder conditionalHttpStatuses(@Nullable Output<List<String>> conditionalHttpStatuses) {
            $.conditionalHttpStatuses = conditionalHttpStatuses;
            return this;
        }

        public Builder conditionalHttpStatuses(List<String> conditionalHttpStatuses) {
            return conditionalHttpStatuses(Output.of(conditionalHttpStatuses));
        }

        public Builder conditionalHttpStatuses(String... conditionalHttpStatuses) {
            return conditionalHttpStatuses(List.of(conditionalHttpStatuses));
        }

        public Builder conditionalSamplingFrequency(@Nullable Output<String> conditionalSamplingFrequency) {
            $.conditionalSamplingFrequency = conditionalSamplingFrequency;
            return this;
        }

        public Builder conditionalSamplingFrequency(String conditionalSamplingFrequency) {
            return conditionalSamplingFrequency(Output.of(conditionalSamplingFrequency));
        }

        public Builder cpcodes(@Nullable Output<String> cpcodes) {
            $.cpcodes = cpcodes;
            return this;
        }

        public Builder cpcodes(String cpcodes) {
            return cpcodes(Output.of(cpcodes));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder forwardType(@Nullable Output<String> forwardType) {
            $.forwardType = forwardType;
            return this;
        }

        public Builder forwardType(String forwardType) {
            return forwardType(Output.of(forwardType));
        }

        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public Builder requestType(@Nullable Output<String> requestType) {
            $.requestType = requestType;
            return this;
        }

        public Builder requestType(String requestType) {
            return requestType(Output.of(requestType));
        }

        public Builder samplingFrequency(@Nullable Output<String> samplingFrequency) {
            $.samplingFrequency = samplingFrequency;
            return this;
        }

        public Builder samplingFrequency(String samplingFrequency) {
            return samplingFrequency(Output.of(samplingFrequency));
        }

        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorBossBeaconingArgs build() {
            return $;
        }
    }

}
