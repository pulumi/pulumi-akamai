// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240531BehaviorImOverride {
    /**
     * @return Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    private @Nullable Double dpr;
    /**
     * @return This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    private @Nullable String dprvar;
    /**
     * @return Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    private @Nullable Boolean excludeAllQueryParameters;
    /**
     * @return Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    private @Nullable List<String> excludedQueryParameters;
    /**
     * @return Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    private @Nullable String format;
    /**
     * @return This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    private @Nullable String formatvar;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Selects the type of query parameter you want to set.
     * 
     */
    private @Nullable String override;
    /**
     * @return This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    private @Nullable String policy;
    /**
     * @return This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    private @Nullable String policyvar;
    /**
     * @return This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    private @Nullable String policyvarIMvar;
    /**
     * @return This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    private @Nullable String policyvarName;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return Specifies how to set a query parameter.
     * 
     */
    private @Nullable String typesel;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    private @Nullable Double width;
    /**
     * @return Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    private @Nullable String widthvar;

    private GetPropertyRulesBuilderRulesV20240531BehaviorImOverride() {}
    /**
     * @return Directly specifies the pixel density. The numeric value is a scaling factor of 1, representing normal density.
     * 
     */
    public Optional<Double> dpr() {
        return Optional.ofNullable(this.dpr);
    }
    /**
     * @return This selects the variable with the desired pixel density. The variable specifies the same type of data as the `dpr` option below.
     * 
     */
    public Optional<String> dprvar() {
        return Optional.ofNullable(this.dprvar);
    }
    /**
     * @return Whether to exclude all query parameters from the Image and Video Manager cache key.
     * 
     */
    public Optional<Boolean> excludeAllQueryParameters() {
        return Optional.ofNullable(this.excludeAllQueryParameters);
    }
    /**
     * @return Specifies individual query parameters to exclude from the Image and Video Manager cache key.
     * 
     */
    public List<String> excludedQueryParameters() {
        return this.excludedQueryParameters == null ? List.of() : this.excludedQueryParameters;
    }
    /**
     * @return Specifies the type of the browser, or the encodings passed in the `Accept` header, that you want to optimize images for.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return This selects the variable with the name of the browser you want to optimize images for. The variable specifies the same type of data as the `format` option below.
     * 
     */
    public Optional<String> formatvar() {
        return Optional.ofNullable(this.formatvar);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Selects the type of query parameter you want to set.
     * 
     */
    public Optional<String> override() {
        return Optional.ofNullable(this.override);
    }
    /**
     * @return This selects the desired Image and Video Manager policy name directly. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<String> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return This selects the variable with the desired Image and Video Manager policy name to apply to image requests. If there is no policy by that name, Image and Video Manager serves the image unmodified.
     * 
     */
    public Optional<String> policyvar() {
        return Optional.ofNullable(this.policyvar);
    }
    /**
     * @return This selects one of the property&#39;s rule tree variables to assign to the `policyvarName` variable within Image and Video Manager.
     * 
     */
    public Optional<String> policyvarIMvar() {
        return Optional.ofNullable(this.policyvarIMvar);
    }
    /**
     * @return This selects the name of one of the variables defined in an Image and Video Manager policy that you want to replace with the property&#39;s rule tree variable.
     * 
     */
    public Optional<String> policyvarName() {
        return Optional.ofNullable(this.policyvarName);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return Specifies how to set a query parameter.
     * 
     */
    public Optional<String> typesel() {
        return Optional.ofNullable(this.typesel);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return Sets the image&#39;s desired pixel width directly. If the Image Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<Double> width() {
        return Optional.ofNullable(this.width);
    }
    /**
     * @return Selects the variable with the desired width.  If the Image and Video Manager policy doesn&#39;t define that width, it serves the next largest width.
     * 
     */
    public Optional<String> widthvar() {
        return Optional.ofNullable(this.widthvar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorImOverride defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double dpr;
        private @Nullable String dprvar;
        private @Nullable Boolean excludeAllQueryParameters;
        private @Nullable List<String> excludedQueryParameters;
        private @Nullable String format;
        private @Nullable String formatvar;
        private @Nullable Boolean locked;
        private @Nullable String override;
        private @Nullable String policy;
        private @Nullable String policyvar;
        private @Nullable String policyvarIMvar;
        private @Nullable String policyvarName;
        private @Nullable String templateUuid;
        private @Nullable String typesel;
        private @Nullable String uuid;
        private @Nullable Double width;
        private @Nullable String widthvar;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorImOverride defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dpr = defaults.dpr;
    	      this.dprvar = defaults.dprvar;
    	      this.excludeAllQueryParameters = defaults.excludeAllQueryParameters;
    	      this.excludedQueryParameters = defaults.excludedQueryParameters;
    	      this.format = defaults.format;
    	      this.formatvar = defaults.formatvar;
    	      this.locked = defaults.locked;
    	      this.override = defaults.override;
    	      this.policy = defaults.policy;
    	      this.policyvar = defaults.policyvar;
    	      this.policyvarIMvar = defaults.policyvarIMvar;
    	      this.policyvarName = defaults.policyvarName;
    	      this.templateUuid = defaults.templateUuid;
    	      this.typesel = defaults.typesel;
    	      this.uuid = defaults.uuid;
    	      this.width = defaults.width;
    	      this.widthvar = defaults.widthvar;
        }

        @CustomType.Setter
        public Builder dpr(@Nullable Double dpr) {

            this.dpr = dpr;
            return this;
        }
        @CustomType.Setter
        public Builder dprvar(@Nullable String dprvar) {

            this.dprvar = dprvar;
            return this;
        }
        @CustomType.Setter
        public Builder excludeAllQueryParameters(@Nullable Boolean excludeAllQueryParameters) {

            this.excludeAllQueryParameters = excludeAllQueryParameters;
            return this;
        }
        @CustomType.Setter
        public Builder excludedQueryParameters(@Nullable List<String> excludedQueryParameters) {

            this.excludedQueryParameters = excludedQueryParameters;
            return this;
        }
        public Builder excludedQueryParameters(String... excludedQueryParameters) {
            return excludedQueryParameters(List.of(excludedQueryParameters));
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder formatvar(@Nullable String formatvar) {

            this.formatvar = formatvar;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder override(@Nullable String override) {

            this.override = override;
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable String policy) {

            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder policyvar(@Nullable String policyvar) {

            this.policyvar = policyvar;
            return this;
        }
        @CustomType.Setter
        public Builder policyvarIMvar(@Nullable String policyvarIMvar) {

            this.policyvarIMvar = policyvarIMvar;
            return this;
        }
        @CustomType.Setter
        public Builder policyvarName(@Nullable String policyvarName) {

            this.policyvarName = policyvarName;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder typesel(@Nullable String typesel) {

            this.typesel = typesel;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder width(@Nullable Double width) {

            this.width = width;
            return this;
        }
        @CustomType.Setter
        public Builder widthvar(@Nullable String widthvar) {

            this.widthvar = widthvar;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240531BehaviorImOverride build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240531BehaviorImOverride();
            _resultValue.dpr = dpr;
            _resultValue.dprvar = dprvar;
            _resultValue.excludeAllQueryParameters = excludeAllQueryParameters;
            _resultValue.excludedQueryParameters = excludedQueryParameters;
            _resultValue.format = format;
            _resultValue.formatvar = formatvar;
            _resultValue.locked = locked;
            _resultValue.override = override;
            _resultValue.policy = policy;
            _resultValue.policyvar = policyvar;
            _resultValue.policyvarIMvar = policyvarIMvar;
            _resultValue.policyvarName = policyvarName;
            _resultValue.templateUuid = templateUuid;
            _resultValue.typesel = typesel;
            _resultValue.uuid = uuid;
            _resultValue.width = width;
            _resultValue.widthvar = widthvar;
            return _resultValue;
        }
    }
}
