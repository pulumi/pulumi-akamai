// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationRotateArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationRotateArgs Empty = new GetImagingPolicyImagePolicyTransformationRotateArgs();

    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     * 
     */
    @Import(name="degrees")
    private @Nullable Output<String> degrees;

    /**
     * @return The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     * 
     */
    public Optional<Output<String>> degrees() {
        return Optional.ofNullable(this.degrees);
    }

    /**
     * The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     * 
     */
    @Import(name="degreesVar")
    private @Nullable Output<String> degreesVar;

    /**
     * @return The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
     * 
     */
    public Optional<Output<String>> degreesVar() {
        return Optional.ofNullable(this.degreesVar);
    }

    private GetImagingPolicyImagePolicyTransformationRotateArgs() {}

    private GetImagingPolicyImagePolicyTransformationRotateArgs(GetImagingPolicyImagePolicyTransformationRotateArgs $) {
        this.degrees = $.degrees;
        this.degreesVar = $.degreesVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationRotateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationRotateArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationRotateArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationRotateArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationRotateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param degrees The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
         * 
         * @return builder
         * 
         */
        public Builder degrees(@Nullable Output<String> degrees) {
            $.degrees = degrees;
            return this;
        }

        /**
         * @param degrees The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
         * 
         * @return builder
         * 
         */
        public Builder degrees(String degrees) {
            return degrees(Output.of(degrees));
        }

        /**
         * @param degreesVar The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
         * 
         * @return builder
         * 
         */
        public Builder degreesVar(@Nullable Output<String> degreesVar) {
            $.degreesVar = degreesVar;
            return this;
        }

        /**
         * @param degreesVar The value to rotate the image by. Positive values rotate clockwise, while negative values rotate counter-clockwise.
         * 
         * @return builder
         * 
         */
        public Builder degreesVar(String degreesVar) {
            return degreesVar(Output.of(degreesVar));
        }

        public GetImagingPolicyImagePolicyTransformationRotateArgs build() {
            return $;
        }
    }

}
