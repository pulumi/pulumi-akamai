// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection();

    @Import(name="anonymousVpn")
    private @Nullable String anonymousVpn;

    public Optional<String> anonymousVpn() {
        return Optional.ofNullable(this.anonymousVpn);
    }

    @Import(name="bestPracticeAction")
    private @Nullable String bestPracticeAction;

    public Optional<String> bestPracticeAction() {
        return Optional.ofNullable(this.bestPracticeAction);
    }

    @Import(name="bestPracticeRedirecturl")
    private @Nullable String bestPracticeRedirecturl;

    public Optional<String> bestPracticeRedirecturl() {
        return Optional.ofNullable(this.bestPracticeRedirecturl);
    }

    @Import(name="detectAnonymousVpn")
    private @Nullable Boolean detectAnonymousVpn;

    public Optional<Boolean> detectAnonymousVpn() {
        return Optional.ofNullable(this.detectAnonymousVpn);
    }

    @Import(name="detectAnonymousVpnAction")
    private @Nullable String detectAnonymousVpnAction;

    public Optional<String> detectAnonymousVpnAction() {
        return Optional.ofNullable(this.detectAnonymousVpnAction);
    }

    @Import(name="detectAnonymousVpnRedirecturl")
    private @Nullable String detectAnonymousVpnRedirecturl;

    public Optional<String> detectAnonymousVpnRedirecturl() {
        return Optional.ofNullable(this.detectAnonymousVpnRedirecturl);
    }

    @Import(name="detectHostingProvider")
    private @Nullable Boolean detectHostingProvider;

    public Optional<Boolean> detectHostingProvider() {
        return Optional.ofNullable(this.detectHostingProvider);
    }

    @Import(name="detectHostingProviderAction")
    private @Nullable String detectHostingProviderAction;

    public Optional<String> detectHostingProviderAction() {
        return Optional.ofNullable(this.detectHostingProviderAction);
    }

    @Import(name="detectHostingProviderRedirecturl")
    private @Nullable String detectHostingProviderRedirecturl;

    public Optional<String> detectHostingProviderRedirecturl() {
        return Optional.ofNullable(this.detectHostingProviderRedirecturl);
    }

    @Import(name="detectPublicProxy")
    private @Nullable Boolean detectPublicProxy;

    public Optional<Boolean> detectPublicProxy() {
        return Optional.ofNullable(this.detectPublicProxy);
    }

    @Import(name="detectPublicProxyAction")
    private @Nullable String detectPublicProxyAction;

    public Optional<String> detectPublicProxyAction() {
        return Optional.ofNullable(this.detectPublicProxyAction);
    }

    @Import(name="detectPublicProxyRedirecturl")
    private @Nullable String detectPublicProxyRedirecturl;

    public Optional<String> detectPublicProxyRedirecturl() {
        return Optional.ofNullable(this.detectPublicProxyRedirecturl);
    }

    @Import(name="detectResidentialProxy")
    private @Nullable Boolean detectResidentialProxy;

    public Optional<Boolean> detectResidentialProxy() {
        return Optional.ofNullable(this.detectResidentialProxy);
    }

    @Import(name="detectResidentialProxyAction")
    private @Nullable String detectResidentialProxyAction;

    public Optional<String> detectResidentialProxyAction() {
        return Optional.ofNullable(this.detectResidentialProxyAction);
    }

    @Import(name="detectResidentialProxyRedirecturl")
    private @Nullable String detectResidentialProxyRedirecturl;

    public Optional<String> detectResidentialProxyRedirecturl() {
        return Optional.ofNullable(this.detectResidentialProxyRedirecturl);
    }

    @Import(name="detectSmartDnsProxy")
    private @Nullable Boolean detectSmartDnsProxy;

    public Optional<Boolean> detectSmartDnsProxy() {
        return Optional.ofNullable(this.detectSmartDnsProxy);
    }

    @Import(name="detectSmartDnsProxyAction")
    private @Nullable String detectSmartDnsProxyAction;

    public Optional<String> detectSmartDnsProxyAction() {
        return Optional.ofNullable(this.detectSmartDnsProxyAction);
    }

    @Import(name="detectSmartDnsProxyRedirecturl")
    private @Nullable String detectSmartDnsProxyRedirecturl;

    public Optional<String> detectSmartDnsProxyRedirecturl() {
        return Optional.ofNullable(this.detectSmartDnsProxyRedirecturl);
    }

    @Import(name="detectTorExitNode")
    private @Nullable Boolean detectTorExitNode;

    public Optional<Boolean> detectTorExitNode() {
        return Optional.ofNullable(this.detectTorExitNode);
    }

    @Import(name="detectTorExitNodeAction")
    private @Nullable String detectTorExitNodeAction;

    public Optional<String> detectTorExitNodeAction() {
        return Optional.ofNullable(this.detectTorExitNodeAction);
    }

    @Import(name="detectTorExitNodeRedirecturl")
    private @Nullable String detectTorExitNodeRedirecturl;

    public Optional<String> detectTorExitNodeRedirecturl() {
        return Optional.ofNullable(this.detectTorExitNodeRedirecturl);
    }

    @Import(name="detectVpnDataCenter")
    private @Nullable Boolean detectVpnDataCenter;

    public Optional<Boolean> detectVpnDataCenter() {
        return Optional.ofNullable(this.detectVpnDataCenter);
    }

    @Import(name="detectVpnDataCenterAction")
    private @Nullable String detectVpnDataCenterAction;

    public Optional<String> detectVpnDataCenterAction() {
        return Optional.ofNullable(this.detectVpnDataCenterAction);
    }

    @Import(name="detectVpnDataCenterRedirecturl")
    private @Nullable String detectVpnDataCenterRedirecturl;

    public Optional<String> detectVpnDataCenterRedirecturl() {
        return Optional.ofNullable(this.detectVpnDataCenterRedirecturl);
    }

    @Import(name="enableConfigurationMode")
    private @Nullable String enableConfigurationMode;

    public Optional<String> enableConfigurationMode() {
        return Optional.ofNullable(this.enableConfigurationMode);
    }

    @Import(name="enabled")
    private @Nullable Boolean enabled;

    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="forwardHeaderEnrichment")
    private @Nullable Boolean forwardHeaderEnrichment;

    public Optional<Boolean> forwardHeaderEnrichment() {
        return Optional.ofNullable(this.forwardHeaderEnrichment);
    }

    @Import(name="hostingProvider")
    private @Nullable String hostingProvider;

    public Optional<String> hostingProvider() {
        return Optional.ofNullable(this.hostingProvider);
    }

    @Import(name="locked")
    private @Nullable Boolean locked;

    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    @Import(name="publicProxy")
    private @Nullable String publicProxy;

    public Optional<String> publicProxy() {
        return Optional.ofNullable(this.publicProxy);
    }

    @Import(name="residentialProxy")
    private @Nullable String residentialProxy;

    public Optional<String> residentialProxy() {
        return Optional.ofNullable(this.residentialProxy);
    }

    @Import(name="smartDnsProxy")
    private @Nullable String smartDnsProxy;

    public Optional<String> smartDnsProxy() {
        return Optional.ofNullable(this.smartDnsProxy);
    }

    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    @Import(name="torExitNode")
    private @Nullable String torExitNode;

    public Optional<String> torExitNode() {
        return Optional.ofNullable(this.torExitNode);
    }

    @Import(name="uuid")
    private @Nullable String uuid;

    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="vpnDataCenter")
    private @Nullable String vpnDataCenter;

    public Optional<String> vpnDataCenter() {
        return Optional.ofNullable(this.vpnDataCenter);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection $) {
        this.anonymousVpn = $.anonymousVpn;
        this.bestPracticeAction = $.bestPracticeAction;
        this.bestPracticeRedirecturl = $.bestPracticeRedirecturl;
        this.detectAnonymousVpn = $.detectAnonymousVpn;
        this.detectAnonymousVpnAction = $.detectAnonymousVpnAction;
        this.detectAnonymousVpnRedirecturl = $.detectAnonymousVpnRedirecturl;
        this.detectHostingProvider = $.detectHostingProvider;
        this.detectHostingProviderAction = $.detectHostingProviderAction;
        this.detectHostingProviderRedirecturl = $.detectHostingProviderRedirecturl;
        this.detectPublicProxy = $.detectPublicProxy;
        this.detectPublicProxyAction = $.detectPublicProxyAction;
        this.detectPublicProxyRedirecturl = $.detectPublicProxyRedirecturl;
        this.detectResidentialProxy = $.detectResidentialProxy;
        this.detectResidentialProxyAction = $.detectResidentialProxyAction;
        this.detectResidentialProxyRedirecturl = $.detectResidentialProxyRedirecturl;
        this.detectSmartDnsProxy = $.detectSmartDnsProxy;
        this.detectSmartDnsProxyAction = $.detectSmartDnsProxyAction;
        this.detectSmartDnsProxyRedirecturl = $.detectSmartDnsProxyRedirecturl;
        this.detectTorExitNode = $.detectTorExitNode;
        this.detectTorExitNodeAction = $.detectTorExitNodeAction;
        this.detectTorExitNodeRedirecturl = $.detectTorExitNodeRedirecturl;
        this.detectVpnDataCenter = $.detectVpnDataCenter;
        this.detectVpnDataCenterAction = $.detectVpnDataCenterAction;
        this.detectVpnDataCenterRedirecturl = $.detectVpnDataCenterRedirecturl;
        this.enableConfigurationMode = $.enableConfigurationMode;
        this.enabled = $.enabled;
        this.forwardHeaderEnrichment = $.forwardHeaderEnrichment;
        this.hostingProvider = $.hostingProvider;
        this.locked = $.locked;
        this.publicProxy = $.publicProxy;
        this.residentialProxy = $.residentialProxy;
        this.smartDnsProxy = $.smartDnsProxy;
        this.templateUuid = $.templateUuid;
        this.torExitNode = $.torExitNode;
        this.uuid = $.uuid;
        this.vpnDataCenter = $.vpnDataCenter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection(Objects.requireNonNull(defaults));
        }

        public Builder anonymousVpn(@Nullable String anonymousVpn) {
            $.anonymousVpn = anonymousVpn;
            return this;
        }

        public Builder bestPracticeAction(@Nullable String bestPracticeAction) {
            $.bestPracticeAction = bestPracticeAction;
            return this;
        }

        public Builder bestPracticeRedirecturl(@Nullable String bestPracticeRedirecturl) {
            $.bestPracticeRedirecturl = bestPracticeRedirecturl;
            return this;
        }

        public Builder detectAnonymousVpn(@Nullable Boolean detectAnonymousVpn) {
            $.detectAnonymousVpn = detectAnonymousVpn;
            return this;
        }

        public Builder detectAnonymousVpnAction(@Nullable String detectAnonymousVpnAction) {
            $.detectAnonymousVpnAction = detectAnonymousVpnAction;
            return this;
        }

        public Builder detectAnonymousVpnRedirecturl(@Nullable String detectAnonymousVpnRedirecturl) {
            $.detectAnonymousVpnRedirecturl = detectAnonymousVpnRedirecturl;
            return this;
        }

        public Builder detectHostingProvider(@Nullable Boolean detectHostingProvider) {
            $.detectHostingProvider = detectHostingProvider;
            return this;
        }

        public Builder detectHostingProviderAction(@Nullable String detectHostingProviderAction) {
            $.detectHostingProviderAction = detectHostingProviderAction;
            return this;
        }

        public Builder detectHostingProviderRedirecturl(@Nullable String detectHostingProviderRedirecturl) {
            $.detectHostingProviderRedirecturl = detectHostingProviderRedirecturl;
            return this;
        }

        public Builder detectPublicProxy(@Nullable Boolean detectPublicProxy) {
            $.detectPublicProxy = detectPublicProxy;
            return this;
        }

        public Builder detectPublicProxyAction(@Nullable String detectPublicProxyAction) {
            $.detectPublicProxyAction = detectPublicProxyAction;
            return this;
        }

        public Builder detectPublicProxyRedirecturl(@Nullable String detectPublicProxyRedirecturl) {
            $.detectPublicProxyRedirecturl = detectPublicProxyRedirecturl;
            return this;
        }

        public Builder detectResidentialProxy(@Nullable Boolean detectResidentialProxy) {
            $.detectResidentialProxy = detectResidentialProxy;
            return this;
        }

        public Builder detectResidentialProxyAction(@Nullable String detectResidentialProxyAction) {
            $.detectResidentialProxyAction = detectResidentialProxyAction;
            return this;
        }

        public Builder detectResidentialProxyRedirecturl(@Nullable String detectResidentialProxyRedirecturl) {
            $.detectResidentialProxyRedirecturl = detectResidentialProxyRedirecturl;
            return this;
        }

        public Builder detectSmartDnsProxy(@Nullable Boolean detectSmartDnsProxy) {
            $.detectSmartDnsProxy = detectSmartDnsProxy;
            return this;
        }

        public Builder detectSmartDnsProxyAction(@Nullable String detectSmartDnsProxyAction) {
            $.detectSmartDnsProxyAction = detectSmartDnsProxyAction;
            return this;
        }

        public Builder detectSmartDnsProxyRedirecturl(@Nullable String detectSmartDnsProxyRedirecturl) {
            $.detectSmartDnsProxyRedirecturl = detectSmartDnsProxyRedirecturl;
            return this;
        }

        public Builder detectTorExitNode(@Nullable Boolean detectTorExitNode) {
            $.detectTorExitNode = detectTorExitNode;
            return this;
        }

        public Builder detectTorExitNodeAction(@Nullable String detectTorExitNodeAction) {
            $.detectTorExitNodeAction = detectTorExitNodeAction;
            return this;
        }

        public Builder detectTorExitNodeRedirecturl(@Nullable String detectTorExitNodeRedirecturl) {
            $.detectTorExitNodeRedirecturl = detectTorExitNodeRedirecturl;
            return this;
        }

        public Builder detectVpnDataCenter(@Nullable Boolean detectVpnDataCenter) {
            $.detectVpnDataCenter = detectVpnDataCenter;
            return this;
        }

        public Builder detectVpnDataCenterAction(@Nullable String detectVpnDataCenterAction) {
            $.detectVpnDataCenterAction = detectVpnDataCenterAction;
            return this;
        }

        public Builder detectVpnDataCenterRedirecturl(@Nullable String detectVpnDataCenterRedirecturl) {
            $.detectVpnDataCenterRedirecturl = detectVpnDataCenterRedirecturl;
            return this;
        }

        public Builder enableConfigurationMode(@Nullable String enableConfigurationMode) {
            $.enableConfigurationMode = enableConfigurationMode;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder forwardHeaderEnrichment(@Nullable Boolean forwardHeaderEnrichment) {
            $.forwardHeaderEnrichment = forwardHeaderEnrichment;
            return this;
        }

        public Builder hostingProvider(@Nullable String hostingProvider) {
            $.hostingProvider = hostingProvider;
            return this;
        }

        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        public Builder publicProxy(@Nullable String publicProxy) {
            $.publicProxy = publicProxy;
            return this;
        }

        public Builder residentialProxy(@Nullable String residentialProxy) {
            $.residentialProxy = residentialProxy;
            return this;
        }

        public Builder smartDnsProxy(@Nullable String smartDnsProxy) {
            $.smartDnsProxy = smartDnsProxy;
            return this;
        }

        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        public Builder torExitNode(@Nullable String torExitNode) {
            $.torExitNode = torExitNode;
            return this;
        }

        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder vpnDataCenter(@Nullable String vpnDataCenter) {
            $.vpnDataCenter = vpnDataCenter;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorEnhancedProxyDetection build() {
            return $;
        }
    }

}
