// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs Empty = new GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs();

    /**
     * When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
     * 
     */
    @Import(name="absolutePath")
    private @Nullable Output<Boolean> absolutePath;

    /**
     * @return When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
     * 
     */
    public Optional<Output<Boolean>> absolutePath() {
        return Optional.ofNullable(this.absolutePath);
    }

    /**
     * Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
     * 
     */
    @Import(name="contextRoot")
    private @Nullable Output<String> contextRoot;

    /**
     * @return Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
     * 
     */
    public Optional<Output<String>> contextRoot() {
        return Optional.ofNullable(this.contextRoot);
    }

    /**
     * The hostname of the data center to fail over to.
     * 
     */
    @Import(name="failoverHostname")
    private @Nullable Output<String> failoverHostname;

    /**
     * @return The hostname of the data center to fail over to.
     * 
     */
    public Optional<Output<String>> failoverHostname() {
        return Optional.ofNullable(this.failoverHostname);
    }

    /**
     * Allows you to modify the request&#39;s hostname or path.
     * 
     */
    @Import(name="modifyRequest")
    private @Nullable Output<Boolean> modifyRequest;

    /**
     * @return Allows you to modify the request&#39;s hostname or path.
     * 
     */
    public Optional<Output<Boolean>> modifyRequest() {
        return Optional.ofNullable(this.modifyRequest);
    }

    /**
     * Overrides the request&#39;s hostname with the `failover_hostname`.
     * 
     */
    @Import(name="overrideHostname")
    private @Nullable Output<Boolean> overrideHostname;

    /**
     * @return Overrides the request&#39;s hostname with the `failover_hostname`.
     * 
     */
    public Optional<Output<Boolean>> overrideHostname() {
        return Optional.ofNullable(this.overrideHostname);
    }

    private GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs() {}

    private GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs(GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs $) {
        this.absolutePath = $.absolutePath;
        this.contextRoot = $.contextRoot;
        this.failoverHostname = $.failoverHostname;
        this.modifyRequest = $.modifyRequest;
        this.overrideHostname = $.overrideHostname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param absolutePath When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
         * 
         * @return builder
         * 
         */
        public Builder absolutePath(@Nullable Output<Boolean> absolutePath) {
            $.absolutePath = absolutePath;
            return this;
        }

        /**
         * @param absolutePath When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
         * 
         * @return builder
         * 
         */
        public Builder absolutePath(Boolean absolutePath) {
            return absolutePath(Output.of(absolutePath));
        }

        /**
         * @param contextRoot Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(@Nullable Output<String> contextRoot) {
            $.contextRoot = contextRoot;
            return this;
        }

        /**
         * @param contextRoot Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
         * 
         * @return builder
         * 
         */
        public Builder contextRoot(String contextRoot) {
            return contextRoot(Output.of(contextRoot));
        }

        /**
         * @param failoverHostname The hostname of the data center to fail over to.
         * 
         * @return builder
         * 
         */
        public Builder failoverHostname(@Nullable Output<String> failoverHostname) {
            $.failoverHostname = failoverHostname;
            return this;
        }

        /**
         * @param failoverHostname The hostname of the data center to fail over to.
         * 
         * @return builder
         * 
         */
        public Builder failoverHostname(String failoverHostname) {
            return failoverHostname(Output.of(failoverHostname));
        }

        /**
         * @param modifyRequest Allows you to modify the request&#39;s hostname or path.
         * 
         * @return builder
         * 
         */
        public Builder modifyRequest(@Nullable Output<Boolean> modifyRequest) {
            $.modifyRequest = modifyRequest;
            return this;
        }

        /**
         * @param modifyRequest Allows you to modify the request&#39;s hostname or path.
         * 
         * @return builder
         * 
         */
        public Builder modifyRequest(Boolean modifyRequest) {
            return modifyRequest(Output.of(modifyRequest));
        }

        /**
         * @param overrideHostname Overrides the request&#39;s hostname with the `failover_hostname`.
         * 
         * @return builder
         * 
         */
        public Builder overrideHostname(@Nullable Output<Boolean> overrideHostname) {
            $.overrideHostname = overrideHostname;
            return this;
        }

        /**
         * @param overrideHostname Overrides the request&#39;s hostname with the `failover_hostname`.
         * 
         * @return builder
         * 
         */
        public Builder overrideHostname(Boolean overrideHostname) {
            return overrideHostname(Output.of(overrideHostname));
        }

        public GetPropertyRulesBuilderRulesV20230105BehaviorEdgeLoadBalancingDataCenterFailoverRuleArgs build() {
            return $;
        }
    }

}
