// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20231030BehaviorFailActionCpCode;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20231030BehaviorFailActionNetStorageHostname;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20231030BehaviorFailAction extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20231030BehaviorFailAction Empty = new GetPropertyRulesBuilderRulesV20231030BehaviorFailAction();

    /**
     * Specifies the basic action to take when there is a failure to contact the origin.
     * 
     */
    @Import(name="actionType")
    private @Nullable String actionType;

    /**
     * @return Specifies the basic action to take when there is a failure to contact the origin.
     * 
     */
    public Optional<String> actionType() {
        return Optional.ofNullable(this.actionType);
    }

    @Import(name="allowFcmParentOverride")
    private @Nullable Boolean allowFcmParentOverride;

    public Optional<Boolean> allowFcmParentOverride() {
        return Optional.ofNullable(this.allowFcmParentOverride);
    }

    /**
     * Specifies a custom path.
     * 
     */
    @Import(name="cexCustomPath")
    private @Nullable Boolean cexCustomPath;

    /**
     * @return Specifies a custom path.
     * 
     */
    public Optional<Boolean> cexCustomPath() {
        return Optional.ofNullable(this.cexCustomPath);
    }

    /**
     * Specifies a hostname.
     * 
     */
    @Import(name="cexHostname")
    private @Nullable String cexHostname;

    /**
     * @return Specifies a hostname.
     * 
     */
    public Optional<String> cexHostname() {
        return Optional.ofNullable(this.cexHostname);
    }

    /**
     * Specifies a custom path.
     * 
     */
    @Import(name="cexPath")
    private @Nullable String cexPath;

    /**
     * @return Specifies a custom path.
     * 
     */
    public Optional<String> cexPath() {
        return Optional.ofNullable(this.cexPath);
    }

    /**
     * Specifies a custom redirect path.
     * 
     */
    @Import(name="contentCustomPath")
    private @Nullable Boolean contentCustomPath;

    /**
     * @return Specifies a custom redirect path.
     * 
     */
    public Optional<Boolean> contentCustomPath() {
        return Optional.ofNullable(this.contentCustomPath);
    }

    /**
     * Specifies the static hostname for the alternate redirect.
     * 
     */
    @Import(name="contentHostname")
    private @Nullable String contentHostname;

    /**
     * @return Specifies the static hostname for the alternate redirect.
     * 
     */
    public Optional<String> contentHostname() {
        return Optional.ofNullable(this.contentHostname);
    }

    /**
     * Specifies a custom redirect path.
     * 
     */
    @Import(name="contentPath")
    private @Nullable String contentPath;

    /**
     * @return Specifies a custom redirect path.
     * 
     */
    public Optional<String> contentPath() {
        return Optional.ofNullable(this.contentPath);
    }

    /**
     * Specifies a CP code for which to log errors for the NetStorage location. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    @Import(name="cpCode")
    private @Nullable GetPropertyRulesBuilderRulesV20231030BehaviorFailActionCpCode cpCode;

    /**
     * @return Specifies a CP code for which to log errors for the NetStorage location. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20231030BehaviorFailActionCpCode> cpCode() {
        return Optional.ofNullable(this.cpCode);
    }

    /**
     * Allows you to modify the original requested path.
     * 
     */
    @Import(name="dynamicCustomPath")
    private @Nullable Boolean dynamicCustomPath;

    /**
     * @return Allows you to modify the original requested path.
     * 
     */
    public Optional<Boolean> dynamicCustomPath() {
        return Optional.ofNullable(this.dynamicCustomPath);
    }

    /**
     * Specifies the redirect method.
     * 
     */
    @Import(name="dynamicMethod")
    private @Nullable String dynamicMethod;

    /**
     * @return Specifies the redirect method.
     * 
     */
    public Optional<String> dynamicMethod() {
        return Optional.ofNullable(this.dynamicMethod);
    }

    /**
     * Specifies the new path.
     * 
     */
    @Import(name="dynamicPath")
    private @Nullable String dynamicPath;

    /**
     * @return Specifies the new path.
     * 
     */
    public Optional<String> dynamicPath() {
        return Optional.ofNullable(this.dynamicPath);
    }

    /**
     * When enabled in case of a failure to contact the origin, the current behavior applies.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return When enabled in case of a failure to contact the origin, the current behavior applies.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Modifies the redirect&#39;s protocol using the value of the `protocol` field.
     * 
     */
    @Import(name="modifyProtocol")
    private @Nullable Boolean modifyProtocol;

    /**
     * @return Modifies the redirect&#39;s protocol using the value of the `protocol` field.
     * 
     */
    public Optional<Boolean> modifyProtocol() {
        return Optional.ofNullable(this.modifyProtocol);
    }

    /**
     * When the `actionType` is `RECREATED_NS`, specifies the `NetStorage` origin to serve the alternate content. Contact Akamai Professional Services for your NetStorage origin&#39;s `id`.
     * 
     */
    @Import(name="netStorageHostname")
    private @Nullable GetPropertyRulesBuilderRulesV20231030BehaviorFailActionNetStorageHostname netStorageHostname;

    /**
     * @return When the `actionType` is `RECREATED_NS`, specifies the `NetStorage` origin to serve the alternate content. Contact Akamai Professional Services for your NetStorage origin&#39;s `id`.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20231030BehaviorFailActionNetStorageHostname> netStorageHostname() {
        return Optional.ofNullable(this.netStorageHostname);
    }

    /**
     * When the `actionType` is `RECREATED_NS`, specifies the path for the `NetStorage` request.
     * 
     */
    @Import(name="netStoragePath")
    private @Nullable String netStoragePath;

    /**
     * @return When the `actionType` is `RECREATED_NS`, specifies the path for the `NetStorage` request.
     * 
     */
    public Optional<String> netStoragePath() {
        return Optional.ofNullable(this.netStoragePath);
    }

    /**
     * When using either `contentCustomPath`, `cexCustomPath`, `dynamicCustomPath`, or `redirectCustomPath` to specify a custom path, enabling this passes in the original request&#39;s query string as part of the path.
     * 
     */
    @Import(name="preserveQueryString")
    private @Nullable Boolean preserveQueryString;

    /**
     * @return When using either `contentCustomPath`, `cexCustomPath`, `dynamicCustomPath`, or `redirectCustomPath` to specify a custom path, enabling this passes in the original request&#39;s query string as part of the path.
     * 
     */
    public Optional<Boolean> preserveQueryString() {
        return Optional.ofNullable(this.preserveQueryString);
    }

    /**
     * When the `actionType` is `REDIRECT` and `modifyProtocol` is enabled, this specifies the redirect&#39;s protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return When the `actionType` is `REDIRECT` and `modifyProtocol` is enabled, this specifies the redirect&#39;s protocol.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Uses the `redirectPath` to customize a new path.
     * 
     */
    @Import(name="redirectCustomPath")
    private @Nullable Boolean redirectCustomPath;

    /**
     * @return Uses the `redirectPath` to customize a new path.
     * 
     */
    public Optional<Boolean> redirectCustomPath() {
        return Optional.ofNullable(this.redirectCustomPath);
    }

    /**
     * When the `actionType` is `REDIRECT` and the `redirectHostnameType` is `ALTERNATE`, this specifies the hostname for the redirect.
     * 
     */
    @Import(name="redirectHostname")
    private @Nullable String redirectHostname;

    /**
     * @return When the `actionType` is `REDIRECT` and the `redirectHostnameType` is `ALTERNATE`, this specifies the hostname for the redirect.
     * 
     */
    public Optional<String> redirectHostname() {
        return Optional.ofNullable(this.redirectHostname);
    }

    /**
     * Whether to preserve or customize the hostname.
     * 
     */
    @Import(name="redirectHostnameType")
    private @Nullable String redirectHostnameType;

    /**
     * @return Whether to preserve or customize the hostname.
     * 
     */
    public Optional<String> redirectHostnameType() {
        return Optional.ofNullable(this.redirectHostnameType);
    }

    /**
     * Specifies the HTTP response code.
     * 
     */
    @Import(name="redirectMethod")
    private @Nullable Integer redirectMethod;

    /**
     * @return Specifies the HTTP response code.
     * 
     */
    public Optional<Integer> redirectMethod() {
        return Optional.ofNullable(this.redirectMethod);
    }

    /**
     * Specifies a new path.
     * 
     */
    @Import(name="redirectPath")
    private @Nullable String redirectPath;

    /**
     * @return Specifies a new path.
     * 
     */
    public Optional<String> redirectPath() {
        return Optional.ofNullable(this.redirectPath);
    }

    /**
     * Specifies whether to use a CNAME chain to determine the hostname for the SaaS dynamic failaction.
     * 
     */
    @Import(name="saasCnameEnabled")
    private @Nullable Boolean saasCnameEnabled;

    /**
     * @return Specifies whether to use a CNAME chain to determine the hostname for the SaaS dynamic failaction.
     * 
     */
    public Optional<Boolean> saasCnameEnabled() {
        return Optional.ofNullable(this.saasCnameEnabled);
    }

    /**
     * Specifies the number of elements in the CNAME chain backwards from the edge hostname that determines the hostname for the SaaS dynamic failaction.
     * 
     */
    @Import(name="saasCnameLevel")
    private @Nullable Integer saasCnameLevel;

    /**
     * @return Specifies the number of elements in the CNAME chain backwards from the edge hostname that determines the hostname for the SaaS dynamic failaction.
     * 
     */
    public Optional<Integer> saasCnameLevel() {
        return Optional.ofNullable(this.saasCnameLevel);
    }

    /**
     * Specifies the name of the cookie that identifies this SaaS dynamic failaction.
     * 
     */
    @Import(name="saasCookie")
    private @Nullable String saasCookie;

    /**
     * @return Specifies the name of the cookie that identifies this SaaS dynamic failaction.
     * 
     */
    public Optional<String> saasCookie() {
        return Optional.ofNullable(this.saasCookie);
    }

    /**
     * Specifies the name of the query parameter that identifies this SaaS dynamic failaction.
     * 
     */
    @Import(name="saasQueryString")
    private @Nullable String saasQueryString;

    /**
     * @return Specifies the name of the query parameter that identifies this SaaS dynamic failaction.
     * 
     */
    public Optional<String> saasQueryString() {
        return Optional.ofNullable(this.saasQueryString);
    }

    /**
     * Specifies the substitution pattern (a Perl-compatible regular expression) that defines the SaaS dynamic failaction.
     * 
     */
    @Import(name="saasRegex")
    private @Nullable String saasRegex;

    /**
     * @return Specifies the substitution pattern (a Perl-compatible regular expression) that defines the SaaS dynamic failaction.
     * 
     */
    public Optional<String> saasRegex() {
        return Optional.ofNullable(this.saasRegex);
    }

    /**
     * Specifies the replacement pattern that defines the SaaS dynamic failaction.
     * 
     */
    @Import(name="saasReplace")
    private @Nullable String saasReplace;

    /**
     * @return Specifies the replacement pattern that defines the SaaS dynamic failaction.
     * 
     */
    public Optional<String> saasReplace() {
        return Optional.ofNullable(this.saasReplace);
    }

    /**
     * Specifies the static portion of the SaaS dynamic failaction.
     * 
     */
    @Import(name="saasSuffix")
    private @Nullable String saasSuffix;

    /**
     * @return Specifies the static portion of the SaaS dynamic failaction.
     * 
     */
    public Optional<String> saasSuffix() {
        return Optional.ofNullable(this.saasSuffix);
    }

    /**
     * Identifies the component of the request that identifies the SaaS dynamic fail action.
     * 
     */
    @Import(name="saasType")
    private @Nullable String saasType;

    /**
     * @return Identifies the component of the request that identifies the SaaS dynamic fail action.
     * 
     */
    public Optional<String> saasType() {
        return Optional.ofNullable(this.saasType);
    }

    /**
     * Assigns a new HTTP status code to the failure response.
     * 
     */
    @Import(name="statusCode")
    private @Nullable Integer statusCode;

    /**
     * @return Assigns a new HTTP status code to the failure response.
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20231030BehaviorFailAction() {}

    private GetPropertyRulesBuilderRulesV20231030BehaviorFailAction(GetPropertyRulesBuilderRulesV20231030BehaviorFailAction $) {
        this.actionType = $.actionType;
        this.allowFcmParentOverride = $.allowFcmParentOverride;
        this.cexCustomPath = $.cexCustomPath;
        this.cexHostname = $.cexHostname;
        this.cexPath = $.cexPath;
        this.contentCustomPath = $.contentCustomPath;
        this.contentHostname = $.contentHostname;
        this.contentPath = $.contentPath;
        this.cpCode = $.cpCode;
        this.dynamicCustomPath = $.dynamicCustomPath;
        this.dynamicMethod = $.dynamicMethod;
        this.dynamicPath = $.dynamicPath;
        this.enabled = $.enabled;
        this.locked = $.locked;
        this.modifyProtocol = $.modifyProtocol;
        this.netStorageHostname = $.netStorageHostname;
        this.netStoragePath = $.netStoragePath;
        this.preserveQueryString = $.preserveQueryString;
        this.protocol = $.protocol;
        this.redirectCustomPath = $.redirectCustomPath;
        this.redirectHostname = $.redirectHostname;
        this.redirectHostnameType = $.redirectHostnameType;
        this.redirectMethod = $.redirectMethod;
        this.redirectPath = $.redirectPath;
        this.saasCnameEnabled = $.saasCnameEnabled;
        this.saasCnameLevel = $.saasCnameLevel;
        this.saasCookie = $.saasCookie;
        this.saasQueryString = $.saasQueryString;
        this.saasRegex = $.saasRegex;
        this.saasReplace = $.saasReplace;
        this.saasSuffix = $.saasSuffix;
        this.saasType = $.saasType;
        this.statusCode = $.statusCode;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20231030BehaviorFailAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20231030BehaviorFailAction $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorFailAction();
        }

        public Builder(GetPropertyRulesBuilderRulesV20231030BehaviorFailAction defaults) {
            $ = new GetPropertyRulesBuilderRulesV20231030BehaviorFailAction(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionType Specifies the basic action to take when there is a failure to contact the origin.
         * 
         * @return builder
         * 
         */
        public Builder actionType(@Nullable String actionType) {
            $.actionType = actionType;
            return this;
        }

        public Builder allowFcmParentOverride(@Nullable Boolean allowFcmParentOverride) {
            $.allowFcmParentOverride = allowFcmParentOverride;
            return this;
        }

        /**
         * @param cexCustomPath Specifies a custom path.
         * 
         * @return builder
         * 
         */
        public Builder cexCustomPath(@Nullable Boolean cexCustomPath) {
            $.cexCustomPath = cexCustomPath;
            return this;
        }

        /**
         * @param cexHostname Specifies a hostname.
         * 
         * @return builder
         * 
         */
        public Builder cexHostname(@Nullable String cexHostname) {
            $.cexHostname = cexHostname;
            return this;
        }

        /**
         * @param cexPath Specifies a custom path.
         * 
         * @return builder
         * 
         */
        public Builder cexPath(@Nullable String cexPath) {
            $.cexPath = cexPath;
            return this;
        }

        /**
         * @param contentCustomPath Specifies a custom redirect path.
         * 
         * @return builder
         * 
         */
        public Builder contentCustomPath(@Nullable Boolean contentCustomPath) {
            $.contentCustomPath = contentCustomPath;
            return this;
        }

        /**
         * @param contentHostname Specifies the static hostname for the alternate redirect.
         * 
         * @return builder
         * 
         */
        public Builder contentHostname(@Nullable String contentHostname) {
            $.contentHostname = contentHostname;
            return this;
        }

        /**
         * @param contentPath Specifies a custom redirect path.
         * 
         * @return builder
         * 
         */
        public Builder contentPath(@Nullable String contentPath) {
            $.contentPath = contentPath;
            return this;
        }

        /**
         * @param cpCode Specifies a CP code for which to log errors for the NetStorage location. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
         * 
         * @return builder
         * 
         */
        public Builder cpCode(@Nullable GetPropertyRulesBuilderRulesV20231030BehaviorFailActionCpCode cpCode) {
            $.cpCode = cpCode;
            return this;
        }

        /**
         * @param dynamicCustomPath Allows you to modify the original requested path.
         * 
         * @return builder
         * 
         */
        public Builder dynamicCustomPath(@Nullable Boolean dynamicCustomPath) {
            $.dynamicCustomPath = dynamicCustomPath;
            return this;
        }

        /**
         * @param dynamicMethod Specifies the redirect method.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMethod(@Nullable String dynamicMethod) {
            $.dynamicMethod = dynamicMethod;
            return this;
        }

        /**
         * @param dynamicPath Specifies the new path.
         * 
         * @return builder
         * 
         */
        public Builder dynamicPath(@Nullable String dynamicPath) {
            $.dynamicPath = dynamicPath;
            return this;
        }

        /**
         * @param enabled When enabled in case of a failure to contact the origin, the current behavior applies.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param modifyProtocol Modifies the redirect&#39;s protocol using the value of the `protocol` field.
         * 
         * @return builder
         * 
         */
        public Builder modifyProtocol(@Nullable Boolean modifyProtocol) {
            $.modifyProtocol = modifyProtocol;
            return this;
        }

        /**
         * @param netStorageHostname When the `actionType` is `RECREATED_NS`, specifies the `NetStorage` origin to serve the alternate content. Contact Akamai Professional Services for your NetStorage origin&#39;s `id`.
         * 
         * @return builder
         * 
         */
        public Builder netStorageHostname(@Nullable GetPropertyRulesBuilderRulesV20231030BehaviorFailActionNetStorageHostname netStorageHostname) {
            $.netStorageHostname = netStorageHostname;
            return this;
        }

        /**
         * @param netStoragePath When the `actionType` is `RECREATED_NS`, specifies the path for the `NetStorage` request.
         * 
         * @return builder
         * 
         */
        public Builder netStoragePath(@Nullable String netStoragePath) {
            $.netStoragePath = netStoragePath;
            return this;
        }

        /**
         * @param preserveQueryString When using either `contentCustomPath`, `cexCustomPath`, `dynamicCustomPath`, or `redirectCustomPath` to specify a custom path, enabling this passes in the original request&#39;s query string as part of the path.
         * 
         * @return builder
         * 
         */
        public Builder preserveQueryString(@Nullable Boolean preserveQueryString) {
            $.preserveQueryString = preserveQueryString;
            return this;
        }

        /**
         * @param protocol When the `actionType` is `REDIRECT` and `modifyProtocol` is enabled, this specifies the redirect&#39;s protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param redirectCustomPath Uses the `redirectPath` to customize a new path.
         * 
         * @return builder
         * 
         */
        public Builder redirectCustomPath(@Nullable Boolean redirectCustomPath) {
            $.redirectCustomPath = redirectCustomPath;
            return this;
        }

        /**
         * @param redirectHostname When the `actionType` is `REDIRECT` and the `redirectHostnameType` is `ALTERNATE`, this specifies the hostname for the redirect.
         * 
         * @return builder
         * 
         */
        public Builder redirectHostname(@Nullable String redirectHostname) {
            $.redirectHostname = redirectHostname;
            return this;
        }

        /**
         * @param redirectHostnameType Whether to preserve or customize the hostname.
         * 
         * @return builder
         * 
         */
        public Builder redirectHostnameType(@Nullable String redirectHostnameType) {
            $.redirectHostnameType = redirectHostnameType;
            return this;
        }

        /**
         * @param redirectMethod Specifies the HTTP response code.
         * 
         * @return builder
         * 
         */
        public Builder redirectMethod(@Nullable Integer redirectMethod) {
            $.redirectMethod = redirectMethod;
            return this;
        }

        /**
         * @param redirectPath Specifies a new path.
         * 
         * @return builder
         * 
         */
        public Builder redirectPath(@Nullable String redirectPath) {
            $.redirectPath = redirectPath;
            return this;
        }

        /**
         * @param saasCnameEnabled Specifies whether to use a CNAME chain to determine the hostname for the SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasCnameEnabled(@Nullable Boolean saasCnameEnabled) {
            $.saasCnameEnabled = saasCnameEnabled;
            return this;
        }

        /**
         * @param saasCnameLevel Specifies the number of elements in the CNAME chain backwards from the edge hostname that determines the hostname for the SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasCnameLevel(@Nullable Integer saasCnameLevel) {
            $.saasCnameLevel = saasCnameLevel;
            return this;
        }

        /**
         * @param saasCookie Specifies the name of the cookie that identifies this SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasCookie(@Nullable String saasCookie) {
            $.saasCookie = saasCookie;
            return this;
        }

        /**
         * @param saasQueryString Specifies the name of the query parameter that identifies this SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasQueryString(@Nullable String saasQueryString) {
            $.saasQueryString = saasQueryString;
            return this;
        }

        /**
         * @param saasRegex Specifies the substitution pattern (a Perl-compatible regular expression) that defines the SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasRegex(@Nullable String saasRegex) {
            $.saasRegex = saasRegex;
            return this;
        }

        /**
         * @param saasReplace Specifies the replacement pattern that defines the SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasReplace(@Nullable String saasReplace) {
            $.saasReplace = saasReplace;
            return this;
        }

        /**
         * @param saasSuffix Specifies the static portion of the SaaS dynamic failaction.
         * 
         * @return builder
         * 
         */
        public Builder saasSuffix(@Nullable String saasSuffix) {
            $.saasSuffix = saasSuffix;
            return this;
        }

        /**
         * @param saasType Identifies the component of the request that identifies the SaaS dynamic fail action.
         * 
         * @return builder
         * 
         */
        public Builder saasType(@Nullable String saasType) {
            $.saasType = saasType;
            return this;
        }

        /**
         * @param statusCode Assigns a new HTTP status code to the failure response.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(@Nullable Integer statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20231030BehaviorFailAction build() {
            return $;
        }
    }

}
