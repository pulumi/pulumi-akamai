// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetCloudwrapperConfigurationsConfigurationLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCloudwrapperConfigurationsConfigurationLocationArgs Empty = new GetCloudwrapperConfigurationsConfigurationLocationArgs();

    /**
     * The capacity assigned to this configuration&#39;s location.
     * 
     */
    @Import(name="capacity", required=true)
    private Output<GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs> capacity;

    /**
     * @return The capacity assigned to this configuration&#39;s location.
     * 
     */
    public Output<GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs> capacity() {
        return this.capacity;
    }

    /**
     * Additional comments provided by user.
     * 
     */
    @Import(name="comments", required=true)
    private Output<String> comments;

    /**
     * @return Additional comments provided by user.
     * 
     */
    public Output<String> comments() {
        return this.comments;
    }

    /**
     * The name of the map.
     * 
     */
    @Import(name="mapName", required=true)
    private Output<String> mapName;

    /**
     * @return The name of the map.
     * 
     */
    public Output<String> mapName() {
        return this.mapName;
    }

    /**
     * Unique identifier for the location and traffic type combination.
     * 
     */
    @Import(name="trafficTypeId", required=true)
    private Output<Integer> trafficTypeId;

    /**
     * @return Unique identifier for the location and traffic type combination.
     * 
     */
    public Output<Integer> trafficTypeId() {
        return this.trafficTypeId;
    }

    private GetCloudwrapperConfigurationsConfigurationLocationArgs() {}

    private GetCloudwrapperConfigurationsConfigurationLocationArgs(GetCloudwrapperConfigurationsConfigurationLocationArgs $) {
        this.capacity = $.capacity;
        this.comments = $.comments;
        this.mapName = $.mapName;
        this.trafficTypeId = $.trafficTypeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationLocationArgs $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationLocationArgs();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationLocationArgs defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The capacity assigned to this configuration&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Output<GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The capacity assigned to this configuration&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder capacity(GetCloudwrapperConfigurationsConfigurationLocationCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param comments Additional comments provided by user.
         * 
         * @return builder
         * 
         */
        public Builder comments(Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments Additional comments provided by user.
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param mapName The name of the map.
         * 
         * @return builder
         * 
         */
        public Builder mapName(Output<String> mapName) {
            $.mapName = mapName;
            return this;
        }

        /**
         * @param mapName The name of the map.
         * 
         * @return builder
         * 
         */
        public Builder mapName(String mapName) {
            return mapName(Output.of(mapName));
        }

        /**
         * @param trafficTypeId Unique identifier for the location and traffic type combination.
         * 
         * @return builder
         * 
         */
        public Builder trafficTypeId(Output<Integer> trafficTypeId) {
            $.trafficTypeId = trafficTypeId;
            return this;
        }

        /**
         * @param trafficTypeId Unique identifier for the location and traffic type combination.
         * 
         * @return builder
         * 
         */
        public Builder trafficTypeId(Integer trafficTypeId) {
            return trafficTypeId(Output.of(trafficTypeId));
        }

        public GetCloudwrapperConfigurationsConfigurationLocationArgs build() {
            if ($.capacity == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocationArgs", "capacity");
            }
            if ($.comments == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocationArgs", "comments");
            }
            if ($.mapName == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocationArgs", "mapName");
            }
            if ($.trafficTypeId == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocationArgs", "trafficTypeId");
            }
            return $;
        }
    }

}
