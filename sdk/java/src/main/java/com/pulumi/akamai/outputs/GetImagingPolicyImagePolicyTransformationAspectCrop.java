// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationAspectCrop {
    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    private @Nullable String allowExpansion;
    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    private @Nullable String allowExpansionVar;
    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    private @Nullable String height;
    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    private @Nullable String heightVar;
    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    private @Nullable String width;
    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    private @Nullable String widthVar;
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    private @Nullable String xPosition;
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    private @Nullable String xPositionVar;
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    private @Nullable String yPosition;
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    private @Nullable String yPositionVar;

    private GetImagingPolicyImagePolicyTransformationAspectCrop() {}
    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    public Optional<String> allowExpansion() {
        return Optional.ofNullable(this.allowExpansion);
    }
    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    public Optional<String> allowExpansionVar() {
        return Optional.ofNullable(this.allowExpansionVar);
    }
    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }
    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }
    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }
    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> xPositionVar() {
        return Optional.ofNullable(this.xPositionVar);
    }
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }
    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> yPositionVar() {
        return Optional.ofNullable(this.yPositionVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationAspectCrop defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String allowExpansion;
        private @Nullable String allowExpansionVar;
        private @Nullable String height;
        private @Nullable String heightVar;
        private @Nullable String width;
        private @Nullable String widthVar;
        private @Nullable String xPosition;
        private @Nullable String xPositionVar;
        private @Nullable String yPosition;
        private @Nullable String yPositionVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationAspectCrop defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowExpansion = defaults.allowExpansion;
    	      this.allowExpansionVar = defaults.allowExpansionVar;
    	      this.height = defaults.height;
    	      this.heightVar = defaults.heightVar;
    	      this.width = defaults.width;
    	      this.widthVar = defaults.widthVar;
    	      this.xPosition = defaults.xPosition;
    	      this.xPositionVar = defaults.xPositionVar;
    	      this.yPosition = defaults.yPosition;
    	      this.yPositionVar = defaults.yPositionVar;
        }

        @CustomType.Setter
        public Builder allowExpansion(@Nullable String allowExpansion) {

            this.allowExpansion = allowExpansion;
            return this;
        }
        @CustomType.Setter
        public Builder allowExpansionVar(@Nullable String allowExpansionVar) {

            this.allowExpansionVar = allowExpansionVar;
            return this;
        }
        @CustomType.Setter
        public Builder height(@Nullable String height) {

            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder heightVar(@Nullable String heightVar) {

            this.heightVar = heightVar;
            return this;
        }
        @CustomType.Setter
        public Builder width(@Nullable String width) {

            this.width = width;
            return this;
        }
        @CustomType.Setter
        public Builder widthVar(@Nullable String widthVar) {

            this.widthVar = widthVar;
            return this;
        }
        @CustomType.Setter
        public Builder xPosition(@Nullable String xPosition) {

            this.xPosition = xPosition;
            return this;
        }
        @CustomType.Setter
        public Builder xPositionVar(@Nullable String xPositionVar) {

            this.xPositionVar = xPositionVar;
            return this;
        }
        @CustomType.Setter
        public Builder yPosition(@Nullable String yPosition) {

            this.yPosition = yPosition;
            return this;
        }
        @CustomType.Setter
        public Builder yPositionVar(@Nullable String yPositionVar) {

            this.yPositionVar = yPositionVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationAspectCrop build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationAspectCrop();
            _resultValue.allowExpansion = allowExpansion;
            _resultValue.allowExpansionVar = allowExpansionVar;
            _resultValue.height = height;
            _resultValue.heightVar = heightVar;
            _resultValue.width = width;
            _resultValue.widthVar = widthVar;
            _resultValue.xPosition = xPosition;
            _resultValue.xPositionVar = xPositionVar;
            _resultValue.yPosition = yPosition;
            _resultValue.yPositionVar = yPositionVar;
            return _resultValue;
        }
    }
}
