// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsThirdPartyEnrollmentCsrArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpsThirdPartyEnrollmentCsrArgs Empty = new CpsThirdPartyEnrollmentCsrArgs();

    /**
     * City where organization is located
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return City where organization is located
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * The code of the country where organization is located
     * 
     */
    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    /**
     * @return The code of the country where organization is located
     * 
     */
    public Output<String> countryCode() {
        return this.countryCode;
    }

    /**
     * Name of organization used in all legal documents
     * 
     */
    @Import(name="organization", required=true)
    private Output<String> organization;

    /**
     * @return Name of organization used in all legal documents
     * 
     */
    public Output<String> organization() {
        return this.organization;
    }

    /**
     * Organizational unit of organization
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    /**
     * @return Organizational unit of organization
     * 
     */
    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * For the Let&#39;s Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
     * 
     */
    @Import(name="preferredTrustChain")
    private @Nullable Output<String> preferredTrustChain;

    /**
     * @return For the Let&#39;s Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
     * 
     */
    public Optional<Output<String>> preferredTrustChain() {
        return Optional.ofNullable(this.preferredTrustChain);
    }

    /**
     * State or province of organization location
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State or province of organization location
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private CpsThirdPartyEnrollmentCsrArgs() {}

    private CpsThirdPartyEnrollmentCsrArgs(CpsThirdPartyEnrollmentCsrArgs $) {
        this.city = $.city;
        this.countryCode = $.countryCode;
        this.organization = $.organization;
        this.organizationalUnit = $.organizationalUnit;
        this.preferredTrustChain = $.preferredTrustChain;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsThirdPartyEnrollmentCsrArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsThirdPartyEnrollmentCsrArgs $;

        public Builder() {
            $ = new CpsThirdPartyEnrollmentCsrArgs();
        }

        public Builder(CpsThirdPartyEnrollmentCsrArgs defaults) {
            $ = new CpsThirdPartyEnrollmentCsrArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param city City where organization is located
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city City where organization is located
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param countryCode The code of the country where organization is located
         * 
         * @return builder
         * 
         */
        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode The code of the country where organization is located
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param organization Name of organization used in all legal documents
         * 
         * @return builder
         * 
         */
        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Name of organization used in all legal documents
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param organizationalUnit Organizational unit of organization
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param organizationalUnit Organizational unit of organization
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        /**
         * @param preferredTrustChain For the Let&#39;s Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
         * 
         * @return builder
         * 
         */
        public Builder preferredTrustChain(@Nullable Output<String> preferredTrustChain) {
            $.preferredTrustChain = preferredTrustChain;
            return this;
        }

        /**
         * @param preferredTrustChain For the Let&#39;s Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
         * 
         * @return builder
         * 
         */
        public Builder preferredTrustChain(String preferredTrustChain) {
            return preferredTrustChain(Output.of(preferredTrustChain));
        }

        /**
         * @param state State or province of organization location
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State or province of organization location
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public CpsThirdPartyEnrollmentCsrArgs build() {
            if ($.city == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentCsrArgs", "city");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentCsrArgs", "countryCode");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("CpsThirdPartyEnrollmentCsrArgs", "organization");
            }
            return $;
        }
    }

}
