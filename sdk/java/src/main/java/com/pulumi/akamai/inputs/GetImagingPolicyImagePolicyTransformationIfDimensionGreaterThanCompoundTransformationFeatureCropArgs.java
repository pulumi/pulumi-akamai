// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs();

    @Import(name="failGravity")
    private @Nullable Output<String> failGravity;

    public Optional<Output<String>> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    @Import(name="failGravityVar")
    private @Nullable Output<String> failGravityVar;

    public Optional<Output<String>> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    @Import(name="featureRadius")
    private @Nullable Output<String> featureRadius;

    public Optional<Output<String>> featureRadius() {
        return Optional.ofNullable(this.featureRadius);
    }

    @Import(name="featureRadiusVar")
    private @Nullable Output<String> featureRadiusVar;

    public Optional<Output<String>> featureRadiusVar() {
        return Optional.ofNullable(this.featureRadiusVar);
    }

    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    @Import(name="height")
    private @Nullable Output<String> height;

    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    @Import(name="maxFeatures")
    private @Nullable Output<String> maxFeatures;

    public Optional<Output<String>> maxFeatures() {
        return Optional.ofNullable(this.maxFeatures);
    }

    @Import(name="maxFeaturesVar")
    private @Nullable Output<String> maxFeaturesVar;

    public Optional<Output<String>> maxFeaturesVar() {
        return Optional.ofNullable(this.maxFeaturesVar);
    }

    @Import(name="minFeatureQuality")
    private @Nullable Output<String> minFeatureQuality;

    public Optional<Output<String>> minFeatureQuality() {
        return Optional.ofNullable(this.minFeatureQuality);
    }

    @Import(name="minFeatureQualityVar")
    private @Nullable Output<String> minFeatureQualityVar;

    public Optional<Output<String>> minFeatureQualityVar() {
        return Optional.ofNullable(this.minFeatureQualityVar);
    }

    @Import(name="padding")
    private @Nullable Output<String> padding;

    public Optional<Output<String>> padding() {
        return Optional.ofNullable(this.padding);
    }

    @Import(name="paddingVar")
    private @Nullable Output<String> paddingVar;

    public Optional<Output<String>> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    @Import(name="style")
    private @Nullable Output<String> style;

    public Optional<Output<String>> style() {
        return Optional.ofNullable(this.style);
    }

    @Import(name="styleVar")
    private @Nullable Output<String> styleVar;

    public Optional<Output<String>> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    @Import(name="width")
    private @Nullable Output<String> width;

    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs $) {
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.featureRadius = $.featureRadius;
        this.featureRadiusVar = $.featureRadiusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.maxFeatures = $.maxFeatures;
        this.maxFeaturesVar = $.maxFeaturesVar;
        this.minFeatureQuality = $.minFeatureQuality;
        this.minFeatureQualityVar = $.minFeatureQualityVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs(Objects.requireNonNull(defaults));
        }

        public Builder failGravity(@Nullable Output<String> failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        public Builder failGravity(String failGravity) {
            return failGravity(Output.of(failGravity));
        }

        public Builder failGravityVar(@Nullable Output<String> failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        public Builder failGravityVar(String failGravityVar) {
            return failGravityVar(Output.of(failGravityVar));
        }

        public Builder featureRadius(@Nullable Output<String> featureRadius) {
            $.featureRadius = featureRadius;
            return this;
        }

        public Builder featureRadius(String featureRadius) {
            return featureRadius(Output.of(featureRadius));
        }

        public Builder featureRadiusVar(@Nullable Output<String> featureRadiusVar) {
            $.featureRadiusVar = featureRadiusVar;
            return this;
        }

        public Builder featureRadiusVar(String featureRadiusVar) {
            return featureRadiusVar(Output.of(featureRadiusVar));
        }

        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        public Builder height(String height) {
            return height(Output.of(height));
        }

        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        public Builder maxFeatures(@Nullable Output<String> maxFeatures) {
            $.maxFeatures = maxFeatures;
            return this;
        }

        public Builder maxFeatures(String maxFeatures) {
            return maxFeatures(Output.of(maxFeatures));
        }

        public Builder maxFeaturesVar(@Nullable Output<String> maxFeaturesVar) {
            $.maxFeaturesVar = maxFeaturesVar;
            return this;
        }

        public Builder maxFeaturesVar(String maxFeaturesVar) {
            return maxFeaturesVar(Output.of(maxFeaturesVar));
        }

        public Builder minFeatureQuality(@Nullable Output<String> minFeatureQuality) {
            $.minFeatureQuality = minFeatureQuality;
            return this;
        }

        public Builder minFeatureQuality(String minFeatureQuality) {
            return minFeatureQuality(Output.of(minFeatureQuality));
        }

        public Builder minFeatureQualityVar(@Nullable Output<String> minFeatureQualityVar) {
            $.minFeatureQualityVar = minFeatureQualityVar;
            return this;
        }

        public Builder minFeatureQualityVar(String minFeatureQualityVar) {
            return minFeatureQualityVar(Output.of(minFeatureQualityVar));
        }

        public Builder padding(@Nullable Output<String> padding) {
            $.padding = padding;
            return this;
        }

        public Builder padding(String padding) {
            return padding(Output.of(padding));
        }

        public Builder paddingVar(@Nullable Output<String> paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        public Builder paddingVar(String paddingVar) {
            return paddingVar(Output.of(paddingVar));
        }

        public Builder style(@Nullable Output<String> style) {
            $.style = style;
            return this;
        }

        public Builder style(String style) {
            return style(Output.of(style));
        }

        public Builder styleVar(@Nullable Output<String> styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        public Builder styleVar(String styleVar) {
            return styleVar(Output.of(styleVar));
        }

        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        public Builder width(String width) {
            return width(Output.of(width));
        }

        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanCompoundTransformationFeatureCropArgs build() {
            return $;
        }
    }

}
