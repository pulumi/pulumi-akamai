// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformation Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformation();

    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     * 
     */
    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor> backgroundColors;

    /**
     * @return Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    /**
     * Applies a Gaussian blur to the image.
     * 
     */
    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationBlur> blurs;

    /**
     * @return Applies a Gaussian blur to the image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
     * 
     */
    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey> chromaKeys;

    /**
     * @return Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     * 
     */
    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationComposite> composites;

    /**
     * @return Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    /**
     * Adjusts both the contrast and brightness of an image.
     * 
     */
    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationContrast> contrasts;

    /**
     * @return Adjusts both the contrast and brightness of an image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     * 
     */
    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationGoop> goops;

    /**
     * @return Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    /**
     * Restricts image color to shades of gray only.
     * 
     */
    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale> grayscales;

    /**
     * @return Restricts image color to shades of gray only.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     * 
     */
    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsl> hsls;

    /**
     * @return Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     * 
     */
    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsv> hsvs;

    /**
     * @return Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     * 
     */
    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor> maxColors;

    /**
     * @return Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    /**
     * Flips an image horizontally, vertically, or both.
     * 
     */
    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMirror> mirrors;

    /**
     * @return Flips an image horizontally, vertically, or both.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     * 
     */
    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue> monoHues;

    /**
     * @return Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     * 
     */
    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity> opacities;

    /**
     * @return Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     * 
     */
    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor> removeColors;

    /**
     * @return Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     * 
     */
    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask> unsharpMasks;

    /**
     * @return Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformation() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformation(GetImagingPolicyImagePolicyPostBreakpointTransformation $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformation();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformation defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformation(Objects.requireNonNull(defaults));
        }

        /**
         * @param backgroundColors Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        /**
         * @param backgroundColors Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        /**
         * @param blurs Applies a Gaussian blur to the image.
         * 
         * @return builder
         * 
         */
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        /**
         * @param blurs Applies a Gaussian blur to the image.
         * 
         * @return builder
         * 
         */
        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationBlur... blurs) {
            return blurs(List.of(blurs));
        }

        /**
         * @param chromaKeys Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
         * 
         * @return builder
         * 
         */
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        /**
         * @param chromaKeys Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
         * 
         * @return builder
         * 
         */
        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        /**
         * @param composites Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
         * 
         * @return builder
         * 
         */
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationComposite> composites) {
            $.composites = composites;
            return this;
        }

        /**
         * @param composites Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100% opaque. A common use of an overlay composite is to add a watermark.
         * 
         * @return builder
         * 
         */
        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationCompound... compounds) {
            return compounds(List.of(compounds));
        }

        /**
         * @param contrasts Adjusts both the contrast and brightness of an image.
         * 
         * @return builder
         * 
         */
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        /**
         * @param contrasts Adjusts both the contrast and brightness of an image.
         * 
         * @return builder
         * 
         */
        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        /**
         * @param goops Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
         * 
         * @return builder
         * 
         */
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationGoop> goops) {
            $.goops = goops;
            return this;
        }

        /**
         * @param goops Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
         * 
         * @return builder
         * 
         */
        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationGoop... goops) {
            return goops(List.of(goops));
        }

        /**
         * @param grayscales Restricts image color to shades of gray only.
         * 
         * @return builder
         * 
         */
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        /**
         * @param grayscales Restricts image color to shades of gray only.
         * 
         * @return builder
         * 
         */
        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        /**
         * @param hsls Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
         * 
         * @return builder
         * 
         */
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        /**
         * @param hsls Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
         * 
         * @return builder
         * 
         */
        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationHsl... hsls) {
            return hsls(List.of(hsls));
        }

        /**
         * @param hsvs Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
         * 
         * @return builder
         * 
         */
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        /**
         * @param hsvs Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
         * 
         * @return builder
         * 
         */
        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        /**
         * @param maxColors Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
         * 
         * @return builder
         * 
         */
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        /**
         * @param maxColors Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
         * 
         * @return builder
         * 
         */
        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        /**
         * @param mirrors Flips an image horizontally, vertically, or both.
         * 
         * @return builder
         * 
         */
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        /**
         * @param mirrors Flips an image horizontally, vertically, or both.
         * 
         * @return builder
         * 
         */
        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        /**
         * @param monoHues Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
         * 
         * @return builder
         * 
         */
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        /**
         * @param monoHues Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
         * 
         * @return builder
         * 
         */
        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        /**
         * @param opacities Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
         * 
         * @return builder
         * 
         */
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        /**
         * @param opacities Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
         * 
         * @return builder
         * 
         */
        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        /**
         * @param removeColors Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
         * 
         * @return builder
         * 
         */
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        /**
         * @param removeColors Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
         * 
         * @return builder
         * 
         */
        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        /**
         * @param unsharpMasks Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
         * 
         * @return builder
         * 
         */
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        /**
         * @param unsharpMasks Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
         * 
         * @return builder
         * 
         */
        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformation build() {
            return $;
        }
    }

}
