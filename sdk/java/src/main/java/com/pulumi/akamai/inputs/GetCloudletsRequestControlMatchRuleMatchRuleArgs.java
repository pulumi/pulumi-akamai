// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudletsRequestControlMatchRuleMatchRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCloudletsRequestControlMatchRuleMatchRuleArgs Empty = new GetCloudletsRequestControlMatchRuleMatchRuleArgs();

    /**
     * If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
     * 
     */
    @Import(name="allowDeny", required=true)
    private Output<String> allowDeny;

    /**
     * @return If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
     * 
     */
    public Output<String> allowDeny() {
        return this.allowDeny;
    }

    /**
     * If set to true, disables a rule so it is not evaluated against incoming requests.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return If set to true, disables a rule so it is not evaluated against incoming requests.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The end time for this match (in seconds since the epoch)
     * 
     */
    @Import(name="end")
    private @Nullable Output<Integer> end;

    /**
     * @return The end time for this match (in seconds since the epoch)
     * 
     */
    public Optional<Output<Integer>> end() {
        return Optional.ofNullable(this.end);
    }

    /**
     * Defines a set of match objects
     * 
     */
    @Import(name="matches")
    private @Nullable Output<List<GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs>> matches;

    /**
     * @return Defines a set of match objects
     * 
     */
    public Optional<Output<List<GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs>>> matches() {
        return Optional.ofNullable(this.matches);
    }

    /**
     * Is used in some cloudlets to support default rules (rule that is always matched)
     * 
     */
    @Import(name="matchesAlways")
    private @Nullable Output<Boolean> matchesAlways;

    /**
     * @return Is used in some cloudlets to support default rules (rule that is always matched)
     * 
     */
    public Optional<Output<Boolean>> matchesAlways() {
        return Optional.ofNullable(this.matchesAlways);
    }

    /**
     * The name of the rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The start time for this match (in seconds since the epoch)
     * 
     */
    @Import(name="start")
    private @Nullable Output<Integer> start;

    /**
     * @return The start time for this match (in seconds since the epoch)
     * 
     */
    public Optional<Output<Integer>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * The type of Cloudlet the rule is for
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of Cloudlet the rule is for
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GetCloudletsRequestControlMatchRuleMatchRuleArgs() {}

    private GetCloudletsRequestControlMatchRuleMatchRuleArgs(GetCloudletsRequestControlMatchRuleMatchRuleArgs $) {
        this.allowDeny = $.allowDeny;
        this.disabled = $.disabled;
        this.end = $.end;
        this.matches = $.matches;
        this.matchesAlways = $.matchesAlways;
        this.name = $.name;
        this.start = $.start;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudletsRequestControlMatchRuleMatchRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudletsRequestControlMatchRuleMatchRuleArgs $;

        public Builder() {
            $ = new GetCloudletsRequestControlMatchRuleMatchRuleArgs();
        }

        public Builder(GetCloudletsRequestControlMatchRuleMatchRuleArgs defaults) {
            $ = new GetCloudletsRequestControlMatchRuleMatchRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowDeny If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
         * 
         * @return builder
         * 
         */
        public Builder allowDeny(Output<String> allowDeny) {
            $.allowDeny = allowDeny;
            return this;
        }

        /**
         * @param allowDeny If set to allow, the request is sent to origin when all conditions are true. If deny, the request is denied when all conditions are true. If denybranded, the request is denied and rerouted according to the configuration of the Request Control behavior
         * 
         * @return builder
         * 
         */
        public Builder allowDeny(String allowDeny) {
            return allowDeny(Output.of(allowDeny));
        }

        /**
         * @param disabled If set to true, disables a rule so it is not evaluated against incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled If set to true, disables a rule so it is not evaluated against incoming requests.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param end The end time for this match (in seconds since the epoch)
         * 
         * @return builder
         * 
         */
        public Builder end(@Nullable Output<Integer> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end The end time for this match (in seconds since the epoch)
         * 
         * @return builder
         * 
         */
        public Builder end(Integer end) {
            return end(Output.of(end));
        }

        /**
         * @param matches Defines a set of match objects
         * 
         * @return builder
         * 
         */
        public Builder matches(@Nullable Output<List<GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs>> matches) {
            $.matches = matches;
            return this;
        }

        /**
         * @param matches Defines a set of match objects
         * 
         * @return builder
         * 
         */
        public Builder matches(List<GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs> matches) {
            return matches(Output.of(matches));
        }

        /**
         * @param matches Defines a set of match objects
         * 
         * @return builder
         * 
         */
        public Builder matches(GetCloudletsRequestControlMatchRuleMatchRuleMatchArgs... matches) {
            return matches(List.of(matches));
        }

        /**
         * @param matchesAlways Is used in some cloudlets to support default rules (rule that is always matched)
         * 
         * @return builder
         * 
         */
        public Builder matchesAlways(@Nullable Output<Boolean> matchesAlways) {
            $.matchesAlways = matchesAlways;
            return this;
        }

        /**
         * @param matchesAlways Is used in some cloudlets to support default rules (rule that is always matched)
         * 
         * @return builder
         * 
         */
        public Builder matchesAlways(Boolean matchesAlways) {
            return matchesAlways(Output.of(matchesAlways));
        }

        /**
         * @param name The name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param start The start time for this match (in seconds since the epoch)
         * 
         * @return builder
         * 
         */
        public Builder start(@Nullable Output<Integer> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start The start time for this match (in seconds since the epoch)
         * 
         * @return builder
         * 
         */
        public Builder start(Integer start) {
            return start(Output.of(start));
        }

        /**
         * @param type The type of Cloudlet the rule is for
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of Cloudlet the rule is for
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetCloudletsRequestControlMatchRuleMatchRuleArgs build() {
            if ($.allowDeny == null) {
                throw new MissingRequiredPropertyException("GetCloudletsRequestControlMatchRuleMatchRuleArgs", "allowDeny");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetCloudletsRequestControlMatchRuleMatchRuleArgs", "type");
            }
            return $;
        }
    }

}
