// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IamUserUserNotifications {
    /**
     * @return Enables notifications for expiring API client credentials.
     * 
     */
    private @Nullable Boolean apiClientCredentialExpiryNotification;
    /**
     * @return Enables email notifications.
     * 
     */
    private Boolean enableEmailNotifications;
    /**
     * @return Enables notifications for group administrators when the user creates other new users.
     * 
     */
    private @Nullable Boolean newUserNotification;
    /**
     * @return Enables notifications for expiring passwords.
     * 
     */
    private Boolean passwordExpiry;
    /**
     * @return Products for which the user gets notifications for service issues.
     * 
     */
    private List<String> proactives;
    /**
     * @return Products for which the user receives notifications for upgrades.
     * 
     */
    private List<String> upgrades;

    private IamUserUserNotifications() {}
    /**
     * @return Enables notifications for expiring API client credentials.
     * 
     */
    public Optional<Boolean> apiClientCredentialExpiryNotification() {
        return Optional.ofNullable(this.apiClientCredentialExpiryNotification);
    }
    /**
     * @return Enables email notifications.
     * 
     */
    public Boolean enableEmailNotifications() {
        return this.enableEmailNotifications;
    }
    /**
     * @return Enables notifications for group administrators when the user creates other new users.
     * 
     */
    public Optional<Boolean> newUserNotification() {
        return Optional.ofNullable(this.newUserNotification);
    }
    /**
     * @return Enables notifications for expiring passwords.
     * 
     */
    public Boolean passwordExpiry() {
        return this.passwordExpiry;
    }
    /**
     * @return Products for which the user gets notifications for service issues.
     * 
     */
    public List<String> proactives() {
        return this.proactives;
    }
    /**
     * @return Products for which the user receives notifications for upgrades.
     * 
     */
    public List<String> upgrades() {
        return this.upgrades;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IamUserUserNotifications defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean apiClientCredentialExpiryNotification;
        private Boolean enableEmailNotifications;
        private @Nullable Boolean newUserNotification;
        private Boolean passwordExpiry;
        private List<String> proactives;
        private List<String> upgrades;
        public Builder() {}
        public Builder(IamUserUserNotifications defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiClientCredentialExpiryNotification = defaults.apiClientCredentialExpiryNotification;
    	      this.enableEmailNotifications = defaults.enableEmailNotifications;
    	      this.newUserNotification = defaults.newUserNotification;
    	      this.passwordExpiry = defaults.passwordExpiry;
    	      this.proactives = defaults.proactives;
    	      this.upgrades = defaults.upgrades;
        }

        @CustomType.Setter
        public Builder apiClientCredentialExpiryNotification(@Nullable Boolean apiClientCredentialExpiryNotification) {

            this.apiClientCredentialExpiryNotification = apiClientCredentialExpiryNotification;
            return this;
        }
        @CustomType.Setter
        public Builder enableEmailNotifications(Boolean enableEmailNotifications) {
            if (enableEmailNotifications == null) {
              throw new MissingRequiredPropertyException("IamUserUserNotifications", "enableEmailNotifications");
            }
            this.enableEmailNotifications = enableEmailNotifications;
            return this;
        }
        @CustomType.Setter
        public Builder newUserNotification(@Nullable Boolean newUserNotification) {

            this.newUserNotification = newUserNotification;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpiry(Boolean passwordExpiry) {
            if (passwordExpiry == null) {
              throw new MissingRequiredPropertyException("IamUserUserNotifications", "passwordExpiry");
            }
            this.passwordExpiry = passwordExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder proactives(List<String> proactives) {
            if (proactives == null) {
              throw new MissingRequiredPropertyException("IamUserUserNotifications", "proactives");
            }
            this.proactives = proactives;
            return this;
        }
        public Builder proactives(String... proactives) {
            return proactives(List.of(proactives));
        }
        @CustomType.Setter
        public Builder upgrades(List<String> upgrades) {
            if (upgrades == null) {
              throw new MissingRequiredPropertyException("IamUserUserNotifications", "upgrades");
            }
            this.upgrades = upgrades;
            return this;
        }
        public Builder upgrades(String... upgrades) {
            return upgrades(List.of(upgrades));
        }
        public IamUserUserNotifications build() {
            final var _resultValue = new IamUserUserNotifications();
            _resultValue.apiClientCredentialExpiryNotification = apiClientCredentialExpiryNotification;
            _resultValue.enableEmailNotifications = enableEmailNotifications;
            _resultValue.newUserNotification = newUserNotification;
            _resultValue.passwordExpiry = passwordExpiry;
            _resultValue.proactives = proactives;
            _resultValue.upgrades = upgrades;
            return _resultValue;
        }
    }
}
