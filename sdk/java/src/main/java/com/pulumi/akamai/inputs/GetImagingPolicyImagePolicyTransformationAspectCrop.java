// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationAspectCrop extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationAspectCrop Empty = new GetImagingPolicyImagePolicyTransformationAspectCrop();

    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    @Import(name="allowExpansion")
    private @Nullable String allowExpansion;

    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    public Optional<String> allowExpansion() {
        return Optional.ofNullable(this.allowExpansion);
    }

    /**
     * Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    @Import(name="allowExpansionVar")
    private @Nullable String allowExpansionVar;

    /**
     * @return Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
     * 
     */
    public Optional<String> allowExpansionVar() {
        return Optional.ofNullable(this.allowExpansionVar);
    }

    /**
     * The height term of the aspect ratio to crop.
     * 
     */
    @Import(name="height")
    private @Nullable String height;

    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    public Optional<String> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height term of the aspect ratio to crop.
     * 
     */
    @Import(name="heightVar")
    private @Nullable String heightVar;

    /**
     * @return The height term of the aspect ratio to crop.
     * 
     */
    public Optional<String> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The width term of the aspect ratio to crop.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width term of the aspect ratio to crop.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The width term of the aspect ratio to crop.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    @Import(name="xPosition")
    private @Nullable String xPosition;

    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }

    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    @Import(name="xPositionVar")
    private @Nullable String xPositionVar;

    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> xPositionVar() {
        return Optional.ofNullable(this.xPositionVar);
    }

    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    @Import(name="yPosition")
    private @Nullable String yPosition;

    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }

    /**
     * Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    @Import(name="yPositionVar")
    private @Nullable String yPositionVar;

    /**
     * @return Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
     * 
     */
    public Optional<String> yPositionVar() {
        return Optional.ofNullable(this.yPositionVar);
    }

    private GetImagingPolicyImagePolicyTransformationAspectCrop() {}

    private GetImagingPolicyImagePolicyTransformationAspectCrop(GetImagingPolicyImagePolicyTransformationAspectCrop $) {
        this.allowExpansion = $.allowExpansion;
        this.allowExpansionVar = $.allowExpansionVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
        this.xPosition = $.xPosition;
        this.xPositionVar = $.xPositionVar;
        this.yPosition = $.yPosition;
        this.yPositionVar = $.yPositionVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationAspectCrop defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationAspectCrop $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationAspectCrop();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationAspectCrop defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationAspectCrop(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowExpansion Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansion(@Nullable String allowExpansion) {
            $.allowExpansion = allowExpansion;
            return this;
        }

        /**
         * @param allowExpansionVar Increases the size of the image canvas to achieve the requested aspect ratio instead of cropping the image. Use the Horizontal Offset and Vertical Offset settings to determine where to add the fully transparent pixels on the expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansionVar(@Nullable String allowExpansionVar) {
            $.allowExpansionVar = allowExpansionVar;
            return this;
        }

        /**
         * @param height The height term of the aspect ratio to crop.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable String height) {
            $.height = height;
            return this;
        }

        /**
         * @param heightVar The height term of the aspect ratio to crop.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable String heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param width The width term of the aspect ratio to crop.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The width term of the aspect ratio to crop.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param xPosition Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder xPosition(@Nullable String xPosition) {
            $.xPosition = xPosition;
            return this;
        }

        /**
         * @param xPositionVar Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder xPositionVar(@Nullable String xPositionVar) {
            $.xPositionVar = xPositionVar;
            return this;
        }

        /**
         * @param yPosition Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder yPosition(@Nullable String yPosition) {
            $.yPosition = yPosition;
            return this;
        }

        /**
         * @param yPositionVar Specifies the horizontal portion of the image you want to keep when the aspect ratio cropping is applied. When using Allow Expansion this setting defines the horizontal position of the image on the new expanded image canvas.
         * 
         * @return builder
         * 
         */
        public Builder yPositionVar(@Nullable String yPositionVar) {
            $.yPositionVar = yPositionVar;
            return this;
        }

        public GetImagingPolicyImagePolicyTransformationAspectCrop build() {
            return $;
        }
    }

}
