// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudletsEdgeRedirectorMatchRuleMatchRule extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudletsEdgeRedirectorMatchRuleMatchRule Empty = new GetCloudletsEdgeRedirectorMatchRuleMatchRule();

    @Import(name="disabled")
    private @Nullable Boolean disabled;

    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="end")
    private @Nullable Integer end;

    public Optional<Integer> end() {
        return Optional.ofNullable(this.end);
    }

    @Import(name="matchUrl")
    private @Nullable String matchUrl;

    public Optional<String> matchUrl() {
        return Optional.ofNullable(this.matchUrl);
    }

    @Import(name="matches")
    private @Nullable List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches;

    public Optional<List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch>> matches() {
        return Optional.ofNullable(this.matches);
    }

    @Import(name="matchesAlways")
    private @Nullable Boolean matchesAlways;

    public Optional<Boolean> matchesAlways() {
        return Optional.ofNullable(this.matchesAlways);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="redirectUrl", required=true)
    private String redirectUrl;

    public String redirectUrl() {
        return this.redirectUrl;
    }

    @Import(name="start")
    private @Nullable Integer start;

    public Optional<Integer> start() {
        return Optional.ofNullable(this.start);
    }

    @Import(name="statusCode", required=true)
    private Integer statusCode;

    public Integer statusCode() {
        return this.statusCode;
    }

    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    @Import(name="useIncomingQueryString")
    private @Nullable Boolean useIncomingQueryString;

    public Optional<Boolean> useIncomingQueryString() {
        return Optional.ofNullable(this.useIncomingQueryString);
    }

    @Import(name="useRelativeUrl")
    private @Nullable String useRelativeUrl;

    public Optional<String> useRelativeUrl() {
        return Optional.ofNullable(this.useRelativeUrl);
    }

    private GetCloudletsEdgeRedirectorMatchRuleMatchRule() {}

    private GetCloudletsEdgeRedirectorMatchRuleMatchRule(GetCloudletsEdgeRedirectorMatchRuleMatchRule $) {
        this.disabled = $.disabled;
        this.end = $.end;
        this.matchUrl = $.matchUrl;
        this.matches = $.matches;
        this.matchesAlways = $.matchesAlways;
        this.name = $.name;
        this.redirectUrl = $.redirectUrl;
        this.start = $.start;
        this.statusCode = $.statusCode;
        this.type = $.type;
        this.useIncomingQueryString = $.useIncomingQueryString;
        this.useRelativeUrl = $.useRelativeUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudletsEdgeRedirectorMatchRuleMatchRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudletsEdgeRedirectorMatchRuleMatchRule $;

        public Builder() {
            $ = new GetCloudletsEdgeRedirectorMatchRuleMatchRule();
        }

        public Builder(GetCloudletsEdgeRedirectorMatchRuleMatchRule defaults) {
            $ = new GetCloudletsEdgeRedirectorMatchRuleMatchRule(Objects.requireNonNull(defaults));
        }

        public Builder disabled(@Nullable Boolean disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder end(@Nullable Integer end) {
            $.end = end;
            return this;
        }

        public Builder matchUrl(@Nullable String matchUrl) {
            $.matchUrl = matchUrl;
            return this;
        }

        public Builder matches(@Nullable List<GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch> matches) {
            $.matches = matches;
            return this;
        }

        public Builder matches(GetCloudletsEdgeRedirectorMatchRuleMatchRuleMatch... matches) {
            return matches(List.of(matches));
        }

        public Builder matchesAlways(@Nullable Boolean matchesAlways) {
            $.matchesAlways = matchesAlways;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        public Builder start(@Nullable Integer start) {
            $.start = start;
            return this;
        }

        public Builder statusCode(Integer statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder useIncomingQueryString(@Nullable Boolean useIncomingQueryString) {
            $.useIncomingQueryString = useIncomingQueryString;
            return this;
        }

        public Builder useRelativeUrl(@Nullable String useRelativeUrl) {
            $.useRelativeUrl = useRelativeUrl;
            return this;
        }

        public GetCloudletsEdgeRedirectorMatchRuleMatchRule build() {
            $.redirectUrl = Objects.requireNonNull($.redirectUrl, "expected parameter 'redirectUrl' to be non-null");
            $.statusCode = Objects.requireNonNull($.statusCode, "expected parameter 'statusCode' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
