// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.PropertyHostnameBucketHostnamesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyHostnameBucketState extends com.pulumi.resources.ResourceArgs {

    public static final PropertyHostnameBucketState Empty = new PropertyHostnameBucketState();

    /**
     * The ID of the latest hostname bucket activation.
     * 
     */
    @Import(name="activationId")
    private @Nullable Output<String> activationId;

    /**
     * @return The ID of the latest hostname bucket activation.
     * 
     */
    public Optional<Output<String>> activationId() {
        return Optional.ofNullable(this.activationId);
    }

    /**
     * The unique identifier for the contract. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return The unique identifier for the contract. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * The unique identifier for the group. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The unique identifier for the group. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
     * 
     */
    @Import(name="hostnameCount")
    private @Nullable Output<Integer> hostnameCount;

    /**
     * @return The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
     * 
     */
    public Optional<Output<Integer>> hostnameCount() {
        return Optional.ofNullable(this.hostnameCount);
    }

    /**
     * The hostnames mapping. The key represents &#39;cname_from&#39; and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
     * 
     */
    @Import(name="hostnames")
    private @Nullable Output<Map<String,PropertyHostnameBucketHostnamesArgs>> hostnames;

    /**
     * @return The hostnames mapping. The key represents &#39;cname_from&#39; and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
     * 
     */
    public Optional<Output<Map<String,PropertyHostnameBucketHostnamesArgs>>> hostnames() {
        return Optional.ofNullable(this.hostnames);
    }

    /**
     * The network to activate on, either `STAGING` or `PRODUCTION`.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network to activate on, either `STAGING` or `PRODUCTION`.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Assigns a log message to the request.
     * 
     */
    @Import(name="note")
    private @Nullable Output<String> note;

    /**
     * @return Assigns a log message to the request.
     * 
     */
    public Optional<Output<String>> note() {
        return Optional.ofNullable(this.note);
    }

    /**
     * Email addresses to notify when the activation status changes.
     * 
     */
    @Import(name="notifyEmails")
    private @Nullable Output<List<String>> notifyEmails;

    /**
     * @return Email addresses to notify when the activation status changes.
     * 
     */
    public Optional<Output<List<String>>> notifyEmails() {
        return Optional.ofNullable(this.notifyEmails);
    }

    /**
     * The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
     * 
     */
    @Import(name="pendingDefaultCerts")
    private @Nullable Output<Integer> pendingDefaultCerts;

    /**
     * @return The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
     * 
     */
    public Optional<Output<Integer>> pendingDefaultCerts() {
        return Optional.ofNullable(this.pendingDefaultCerts);
    }

    /**
     * The unique identifier for the property.
     * 
     */
    @Import(name="propertyId")
    private @Nullable Output<String> propertyId;

    /**
     * @return The unique identifier for the property.
     * 
     */
    public Optional<Output<String>> propertyId() {
        return Optional.ofNullable(this.propertyId);
    }

    /**
     * The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
     * 
     */
    @Import(name="timeoutForActivation")
    private @Nullable Output<Integer> timeoutForActivation;

    /**
     * @return The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
     * 
     */
    public Optional<Output<Integer>> timeoutForActivation() {
        return Optional.ofNullable(this.timeoutForActivation);
    }

    private PropertyHostnameBucketState() {}

    private PropertyHostnameBucketState(PropertyHostnameBucketState $) {
        this.activationId = $.activationId;
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.hostnameCount = $.hostnameCount;
        this.hostnames = $.hostnames;
        this.network = $.network;
        this.note = $.note;
        this.notifyEmails = $.notifyEmails;
        this.pendingDefaultCerts = $.pendingDefaultCerts;
        this.propertyId = $.propertyId;
        this.timeoutForActivation = $.timeoutForActivation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyHostnameBucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyHostnameBucketState $;

        public Builder() {
            $ = new PropertyHostnameBucketState();
        }

        public Builder(PropertyHostnameBucketState defaults) {
            $ = new PropertyHostnameBucketState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationId The ID of the latest hostname bucket activation.
         * 
         * @return builder
         * 
         */
        public Builder activationId(@Nullable Output<String> activationId) {
            $.activationId = activationId;
            return this;
        }

        /**
         * @param activationId The ID of the latest hostname bucket activation.
         * 
         * @return builder
         * 
         */
        public Builder activationId(String activationId) {
            return activationId(Output.of(activationId));
        }

        /**
         * @param contractId The unique identifier for the contract. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The unique identifier for the contract. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId The unique identifier for the group. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The unique identifier for the group. Provide it if resolving the property without &#39;contract_id&#39; and &#39;group_id&#39; is not possible
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param hostnameCount The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
         * 
         * @return builder
         * 
         */
        public Builder hostnameCount(@Nullable Output<Integer> hostnameCount) {
            $.hostnameCount = hostnameCount;
            return this;
        }

        /**
         * @param hostnameCount The computed number of hostnames after applying desired modifications. Used only to informduring the plan phase about the number of hostnames that will be active after making the changes.
         * 
         * @return builder
         * 
         */
        public Builder hostnameCount(Integer hostnameCount) {
            return hostnameCount(Output.of(hostnameCount));
        }

        /**
         * @param hostnames The hostnames mapping. The key represents &#39;cname_from&#39; and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(@Nullable Output<Map<String,PropertyHostnameBucketHostnamesArgs>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames The hostnames mapping. The key represents &#39;cname_from&#39; and the value contains hostnames details, consisting of certificate provisioning type and edge hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(Map<String,PropertyHostnameBucketHostnamesArgs> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param network The network to activate on, either `STAGING` or `PRODUCTION`.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network to activate on, either `STAGING` or `PRODUCTION`.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param note Assigns a log message to the request.
         * 
         * @return builder
         * 
         */
        public Builder note(@Nullable Output<String> note) {
            $.note = note;
            return this;
        }

        /**
         * @param note Assigns a log message to the request.
         * 
         * @return builder
         * 
         */
        public Builder note(String note) {
            return note(Output.of(note));
        }

        /**
         * @param notifyEmails Email addresses to notify when the activation status changes.
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(@Nullable Output<List<String>> notifyEmails) {
            $.notifyEmails = notifyEmails;
            return this;
        }

        /**
         * @param notifyEmails Email addresses to notify when the activation status changes.
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(List<String> notifyEmails) {
            return notifyEmails(Output.of(notifyEmails));
        }

        /**
         * @param notifyEmails Email addresses to notify when the activation status changes.
         * 
         * @return builder
         * 
         */
        public Builder notifyEmails(String... notifyEmails) {
            return notifyEmails(List.of(notifyEmails));
        }

        /**
         * @param pendingDefaultCerts The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
         * 
         * @return builder
         * 
         */
        public Builder pendingDefaultCerts(@Nullable Output<Integer> pendingDefaultCerts) {
            $.pendingDefaultCerts = pendingDefaultCerts;
            return this;
        }

        /**
         * @param pendingDefaultCerts The number of hostnames with a `DEFAULT` certificate type that are still in the `PENDING` state.
         * 
         * @return builder
         * 
         */
        public Builder pendingDefaultCerts(Integer pendingDefaultCerts) {
            return pendingDefaultCerts(Output.of(pendingDefaultCerts));
        }

        /**
         * @param propertyId The unique identifier for the property.
         * 
         * @return builder
         * 
         */
        public Builder propertyId(@Nullable Output<String> propertyId) {
            $.propertyId = propertyId;
            return this;
        }

        /**
         * @param propertyId The unique identifier for the property.
         * 
         * @return builder
         * 
         */
        public Builder propertyId(String propertyId) {
            return propertyId(Output.of(propertyId));
        }

        /**
         * @param timeoutForActivation The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeoutForActivation(@Nullable Output<Integer> timeoutForActivation) {
            $.timeoutForActivation = timeoutForActivation;
            return this;
        }

        /**
         * @param timeoutForActivation The timeout value in minutes after which a single hostname activation will be canceled. Defaults to 50 minutes.
         * 
         * @return builder
         * 
         */
        public Builder timeoutForActivation(Integer timeoutForActivation) {
            return timeoutForActivation(Output.of(timeoutForActivation));
        }

        public PropertyHostnameBucketState build() {
            return $;
        }
    }

}
