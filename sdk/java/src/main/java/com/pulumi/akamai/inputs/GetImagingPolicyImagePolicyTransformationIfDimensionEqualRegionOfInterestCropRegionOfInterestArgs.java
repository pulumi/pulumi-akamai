// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs();

    @Import(name="circleShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs>> circleShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs>>> circleShapes() {
        return Optional.ofNullable(this.circleShapes);
    }

    @Import(name="pointShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs>> pointShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs>>> pointShapes() {
        return Optional.ofNullable(this.pointShapes);
    }

    @Import(name="polygonShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs>> polygonShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs>>> polygonShapes() {
        return Optional.ofNullable(this.polygonShapes);
    }

    @Import(name="rectangleShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs>> rectangleShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs>>> rectangleShapes() {
        return Optional.ofNullable(this.rectangleShapes);
    }

    @Import(name="unionShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs>> unionShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs>>> unionShapes() {
        return Optional.ofNullable(this.unionShapes);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs $) {
        this.circleShapes = $.circleShapes;
        this.pointShapes = $.pointShapes;
        this.polygonShapes = $.polygonShapes;
        this.rectangleShapes = $.rectangleShapes;
        this.unionShapes = $.unionShapes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs(Objects.requireNonNull(defaults));
        }

        public Builder circleShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs>> circleShapes) {
            $.circleShapes = circleShapes;
            return this;
        }

        public Builder circleShapes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs> circleShapes) {
            return circleShapes(Output.of(circleShapes));
        }

        public Builder circleShapes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestCircleShapeArgs... circleShapes) {
            return circleShapes(List.of(circleShapes));
        }

        public Builder pointShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs>> pointShapes) {
            $.pointShapes = pointShapes;
            return this;
        }

        public Builder pointShapes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs> pointShapes) {
            return pointShapes(Output.of(pointShapes));
        }

        public Builder pointShapes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPointShapeArgs... pointShapes) {
            return pointShapes(List.of(pointShapes));
        }

        public Builder polygonShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs>> polygonShapes) {
            $.polygonShapes = polygonShapes;
            return this;
        }

        public Builder polygonShapes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs> polygonShapes) {
            return polygonShapes(Output.of(polygonShapes));
        }

        public Builder polygonShapes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestPolygonShapeArgs... polygonShapes) {
            return polygonShapes(List.of(polygonShapes));
        }

        public Builder rectangleShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs>> rectangleShapes) {
            $.rectangleShapes = rectangleShapes;
            return this;
        }

        public Builder rectangleShapes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs> rectangleShapes) {
            return rectangleShapes(Output.of(rectangleShapes));
        }

        public Builder rectangleShapes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestRectangleShapeArgs... rectangleShapes) {
            return rectangleShapes(List.of(rectangleShapes));
        }

        public Builder unionShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs>> unionShapes) {
            $.unionShapes = unionShapes;
            return this;
        }

        public Builder unionShapes(List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs> unionShapes) {
            return unionShapes(Output.of(unionShapes));
        }

        public Builder unionShapes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestUnionShapeArgs... unionShapes) {
            return unionShapes(List.of(unionShapes));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionEqualRegionOfInterestCropRegionOfInterestArgs build() {
            return $;
        }
    }

}
