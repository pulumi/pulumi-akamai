// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSecPenaltyBoxState extends com.pulumi.resources.ResourceArgs {

    public static final AppSecPenaltyBoxState Empty = new AppSecPenaltyBoxState();

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * The action to be taken when the penalty box is triggered
     * 
     */
    @Import(name="penaltyBoxAction")
    private @Nullable Output<String> penaltyBoxAction;

    /**
     * @return The action to be taken when the penalty box is triggered
     * 
     */
    public Optional<Output<String>> penaltyBoxAction() {
        return Optional.ofNullable(this.penaltyBoxAction);
    }

    /**
     * Whether to enable the penalty box for the specified security policy
     * 
     */
    @Import(name="penaltyBoxProtection")
    private @Nullable Output<Boolean> penaltyBoxProtection;

    /**
     * @return Whether to enable the penalty box for the specified security policy
     * 
     */
    public Optional<Output<Boolean>> penaltyBoxProtection() {
        return Optional.ofNullable(this.penaltyBoxProtection);
    }

    /**
     * Unique identifier of the security policy
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return Unique identifier of the security policy
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    private AppSecPenaltyBoxState() {}

    private AppSecPenaltyBoxState(AppSecPenaltyBoxState $) {
        this.configId = $.configId;
        this.penaltyBoxAction = $.penaltyBoxAction;
        this.penaltyBoxProtection = $.penaltyBoxProtection;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecPenaltyBoxState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecPenaltyBoxState $;

        public Builder() {
            $ = new AppSecPenaltyBoxState();
        }

        public Builder(AppSecPenaltyBoxState defaults) {
            $ = new AppSecPenaltyBoxState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param penaltyBoxAction The action to be taken when the penalty box is triggered
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxAction(@Nullable Output<String> penaltyBoxAction) {
            $.penaltyBoxAction = penaltyBoxAction;
            return this;
        }

        /**
         * @param penaltyBoxAction The action to be taken when the penalty box is triggered
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxAction(String penaltyBoxAction) {
            return penaltyBoxAction(Output.of(penaltyBoxAction));
        }

        /**
         * @param penaltyBoxProtection Whether to enable the penalty box for the specified security policy
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxProtection(@Nullable Output<Boolean> penaltyBoxProtection) {
            $.penaltyBoxProtection = penaltyBoxProtection;
            return this;
        }

        /**
         * @param penaltyBoxProtection Whether to enable the penalty box for the specified security policy
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxProtection(Boolean penaltyBoxProtection) {
            return penaltyBoxProtection(Output.of(penaltyBoxProtection));
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        public AppSecPenaltyBoxState build() {
            return $;
        }
    }

}
