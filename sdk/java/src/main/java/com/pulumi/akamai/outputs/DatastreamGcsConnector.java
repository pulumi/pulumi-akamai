// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamGcsConnector {
    /**
     * @return The name of the storage bucket created in Google Cloud account
     * 
     */
    private String bucket;
    /**
     * @return Indicates whether the logs should be compressed
     * 
     */
    private @Nullable Boolean compressLogs;
    /**
     * @return The name of the connector
     * 
     */
    private String displayName;
    /**
     * @return The path to the folder within Google Cloud bucket where logs will be stored
     * 
     */
    private @Nullable String path;
    /**
     * @return The contents of the JSON private key generated and downloaded in Google Cloud Storage account
     * 
     */
    private String privateKey;
    /**
     * @return The unique ID of Google Cloud project
     * 
     */
    private String projectId;
    /**
     * @return The name of the service account with the storage.object.create permission or Storage Object Creator role
     * 
     */
    private String serviceAccountName;

    private DatastreamGcsConnector() {}
    /**
     * @return The name of the storage bucket created in Google Cloud account
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Indicates whether the logs should be compressed
     * 
     */
    public Optional<Boolean> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }
    /**
     * @return The name of the connector
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The path to the folder within Google Cloud bucket where logs will be stored
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The contents of the JSON private key generated and downloaded in Google Cloud Storage account
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return The unique ID of Google Cloud project
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The name of the service account with the storage.object.create permission or Storage Object Creator role
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamGcsConnector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable Boolean compressLogs;
        private String displayName;
        private @Nullable String path;
        private String privateKey;
        private String projectId;
        private String serviceAccountName;
        public Builder() {}
        public Builder(DatastreamGcsConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.compressLogs = defaults.compressLogs;
    	      this.displayName = defaults.displayName;
    	      this.path = defaults.path;
    	      this.privateKey = defaults.privateKey;
    	      this.projectId = defaults.projectId;
    	      this.serviceAccountName = defaults.serviceAccountName;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("DatastreamGcsConnector", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder compressLogs(@Nullable Boolean compressLogs) {

            this.compressLogs = compressLogs;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("DatastreamGcsConnector", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("DatastreamGcsConnector", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("DatastreamGcsConnector", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountName(String serviceAccountName) {
            if (serviceAccountName == null) {
              throw new MissingRequiredPropertyException("DatastreamGcsConnector", "serviceAccountName");
            }
            this.serviceAccountName = serviceAccountName;
            return this;
        }
        public DatastreamGcsConnector build() {
            final var _resultValue = new DatastreamGcsConnector();
            _resultValue.bucket = bucket;
            _resultValue.compressLogs = compressLogs;
            _resultValue.displayName = displayName;
            _resultValue.path = path;
            _resultValue.privateKey = privateKey;
            _resultValue.projectId = projectId;
            _resultValue.serviceAccountName = serviceAccountName;
            return _resultValue;
        }
    }
}
