// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationCropArgs Empty = new GetImagingPolicyImagePolicyTransformationCropArgs();

    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    @Import(name="allowExpansion")
    private @Nullable Output<String> allowExpansion;

    /**
     * @return If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    public Optional<Output<String>> allowExpansion() {
        return Optional.ofNullable(this.allowExpansion);
    }

    /**
     * If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    @Import(name="allowExpansionVar")
    private @Nullable Output<String> allowExpansionVar;

    /**
     * @return If cropping an area outside of the existing canvas, expands the image canvas.
     * 
     */
    public Optional<Output<String>> allowExpansionVar() {
        return Optional.ofNullable(this.allowExpansionVar);
    }

    /**
     * Frame of reference for X and Y Positions.
     * 
     */
    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    /**
     * @return Frame of reference for X and Y Positions.
     * 
     */
    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Frame of reference for X and Y Positions.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    /**
     * @return Frame of reference for X and Y Positions.
     * 
     */
    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The number of pixels to crop along the y-axis.
     * 
     */
    @Import(name="height")
    private @Nullable Output<String> height;

    /**
     * @return The number of pixels to crop along the y-axis.
     * 
     */
    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The number of pixels to crop along the y-axis.
     * 
     */
    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    /**
     * @return The number of pixels to crop along the y-axis.
     * 
     */
    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The number of pixels to crop along the x-axis.
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The number of pixels to crop along the x-axis.
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The number of pixels to crop along the x-axis.
     * 
     */
    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    /**
     * @return The number of pixels to crop along the x-axis.
     * 
     */
    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    /**
     * The x-axis position of the image to crop from.
     * 
     */
    @Import(name="xPosition")
    private @Nullable Output<String> xPosition;

    /**
     * @return The x-axis position of the image to crop from.
     * 
     */
    public Optional<Output<String>> xPosition() {
        return Optional.ofNullable(this.xPosition);
    }

    /**
     * The x-axis position of the image to crop from.
     * 
     */
    @Import(name="xPositionVar")
    private @Nullable Output<String> xPositionVar;

    /**
     * @return The x-axis position of the image to crop from.
     * 
     */
    public Optional<Output<String>> xPositionVar() {
        return Optional.ofNullable(this.xPositionVar);
    }

    /**
     * The y-axis position of the image to crop from.
     * 
     */
    @Import(name="yPosition")
    private @Nullable Output<String> yPosition;

    /**
     * @return The y-axis position of the image to crop from.
     * 
     */
    public Optional<Output<String>> yPosition() {
        return Optional.ofNullable(this.yPosition);
    }

    /**
     * The y-axis position of the image to crop from.
     * 
     */
    @Import(name="yPositionVar")
    private @Nullable Output<String> yPositionVar;

    /**
     * @return The y-axis position of the image to crop from.
     * 
     */
    public Optional<Output<String>> yPositionVar() {
        return Optional.ofNullable(this.yPositionVar);
    }

    private GetImagingPolicyImagePolicyTransformationCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationCropArgs(GetImagingPolicyImagePolicyTransformationCropArgs $) {
        this.allowExpansion = $.allowExpansion;
        this.allowExpansionVar = $.allowExpansionVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
        this.xPosition = $.xPosition;
        this.xPositionVar = $.xPositionVar;
        this.yPosition = $.yPosition;
        this.yPositionVar = $.yPositionVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCropArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowExpansion If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansion(@Nullable Output<String> allowExpansion) {
            $.allowExpansion = allowExpansion;
            return this;
        }

        /**
         * @param allowExpansion If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansion(String allowExpansion) {
            return allowExpansion(Output.of(allowExpansion));
        }

        /**
         * @param allowExpansionVar If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansionVar(@Nullable Output<String> allowExpansionVar) {
            $.allowExpansionVar = allowExpansionVar;
            return this;
        }

        /**
         * @param allowExpansionVar If cropping an area outside of the existing canvas, expands the image canvas.
         * 
         * @return builder
         * 
         */
        public Builder allowExpansionVar(String allowExpansionVar) {
            return allowExpansionVar(Output.of(allowExpansionVar));
        }

        /**
         * @param gravity Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravity Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        /**
         * @param gravityVar Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param gravityVar Frame of reference for X and Y Positions.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        /**
         * @param height The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder height(String height) {
            return height(Output.of(height));
        }

        /**
         * @param heightVar The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param heightVar The number of pixels to crop along the y-axis.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        /**
         * @param width The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        /**
         * @param widthVar The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param widthVar The number of pixels to crop along the x-axis.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        /**
         * @param xPosition The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPosition(@Nullable Output<String> xPosition) {
            $.xPosition = xPosition;
            return this;
        }

        /**
         * @param xPosition The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPosition(String xPosition) {
            return xPosition(Output.of(xPosition));
        }

        /**
         * @param xPositionVar The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPositionVar(@Nullable Output<String> xPositionVar) {
            $.xPositionVar = xPositionVar;
            return this;
        }

        /**
         * @param xPositionVar The x-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder xPositionVar(String xPositionVar) {
            return xPositionVar(Output.of(xPositionVar));
        }

        /**
         * @param yPosition The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPosition(@Nullable Output<String> yPosition) {
            $.yPosition = yPosition;
            return this;
        }

        /**
         * @param yPosition The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPosition(String yPosition) {
            return yPosition(Output.of(yPosition));
        }

        /**
         * @param yPositionVar The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPositionVar(@Nullable Output<String> yPositionVar) {
            $.yPositionVar = yPositionVar;
            return this;
        }

        /**
         * @param yPositionVar The y-axis position of the image to crop from.
         * 
         * @return builder
         * 
         */
        public Builder yPositionVar(String yPositionVar) {
            return yPositionVar(Output.of(yPositionVar));
        }

        public GetImagingPolicyImagePolicyTransformationCropArgs build() {
            return $;
        }
    }

}
