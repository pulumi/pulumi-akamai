// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs();

    @Import(name="default")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultArgs> default_;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeArgs> landscape;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeArgs>> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitArgs> portrait;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitArgs>> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareArgs> square;

    public Optional<Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareArgs>> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        public Builder landscape(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeArgs> landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder landscape(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationLandscapeArgs landscape) {
            return landscape(Output.of(landscape));
        }

        public Builder portrait(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitArgs> portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder portrait(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationPortraitArgs portrait) {
            return portrait(Output.of(portrait));
        }

        public Builder square(@Nullable Output<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareArgs> square) {
            $.square = square;
            return this;
        }

        public Builder square(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationSquareArgs square) {
            return square(Output.of(square));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionGreaterThanIfOrientationArgs build() {
            return $;
        }
    }

}
