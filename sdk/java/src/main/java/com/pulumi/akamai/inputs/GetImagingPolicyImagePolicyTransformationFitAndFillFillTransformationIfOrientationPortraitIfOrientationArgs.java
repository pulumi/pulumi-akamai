// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefaultArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortraitArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs Empty = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs();

    @Import(name="default")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefaultArgs> default_;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefaultArgs>> default_() {
        return Optional.ofNullable(this.default_);
    }

    @Import(name="landscape")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscapeArgs> landscape;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscapeArgs>> landscape() {
        return Optional.ofNullable(this.landscape);
    }

    @Import(name="portrait")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortraitArgs> portrait;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortraitArgs>> portrait() {
        return Optional.ofNullable(this.portrait);
    }

    @Import(name="square")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquareArgs> square;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquareArgs>> square() {
        return Optional.ofNullable(this.square);
    }

    private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs() {}

    private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs $) {
        this.default_ = $.default_;
        this.landscape = $.landscape;
        this.portrait = $.portrait;
        this.square = $.square;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs(Objects.requireNonNull(defaults));
        }

        public Builder default_(@Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefaultArgs> default_) {
            $.default_ = default_;
            return this;
        }

        public Builder default_(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationDefaultArgs default_) {
            return default_(Output.of(default_));
        }

        public Builder landscape(@Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscapeArgs> landscape) {
            $.landscape = landscape;
            return this;
        }

        public Builder landscape(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationLandscapeArgs landscape) {
            return landscape(Output.of(landscape));
        }

        public Builder portrait(@Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortraitArgs> portrait) {
            $.portrait = portrait;
            return this;
        }

        public Builder portrait(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationPortraitArgs portrait) {
            return portrait(Output.of(portrait));
        }

        public Builder square(@Nullable Output<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquareArgs> square) {
            $.square = square;
            return this;
        }

        public Builder square(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationSquareArgs square) {
            return square(Output.of(square));
        }

        public GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationPortraitIfOrientationArgs build() {
            return $;
        }
    }

}
