// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefaultUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionDefaultIfDimensionDefault build() {
            return $;
        }
    }

}
