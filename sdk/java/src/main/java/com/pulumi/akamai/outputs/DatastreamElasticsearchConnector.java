// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamElasticsearchConnector {
    /**
     * @return The certification authority (CA) certificate used to verify the origin server&#39;s certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     * 
     */
    private @Nullable String caCert;
    /**
     * @return The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     * 
     */
    private @Nullable String clientCert;
    /**
     * @return The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     * 
     */
    private @Nullable String clientKey;
    /**
     * @return The type of the resource passed in the request&#39;s custom header. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return A human-readable name for the request&#39;s custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String customHeaderName;
    /**
     * @return The custom header&#39;s contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     * 
     */
    private @Nullable String customHeaderValue;
    /**
     * @return The name of the connector.
     * 
     */
    private String displayName;
    /**
     * @return The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
     * 
     */
    private String endpoint;
    /**
     * @return The index name of the Elastic cloud where you want to store log files.
     * 
     */
    private String indexName;
    /**
     * @return Indicates whether mTLS is enabled or not.
     * 
     */
    private @Nullable Boolean mTls;
    /**
     * @return The Elasticsearch basic access authentication password.
     * 
     */
    private String password;
    /**
     * @return The hostname that verifies the server&#39;s certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     * 
     */
    private @Nullable String tlsHostname;
    /**
     * @return The Elasticsearch basic access authentication username.
     * 
     */
    private String userName;

    private DatastreamElasticsearchConnector() {}
    /**
     * @return The certification authority (CA) certificate used to verify the origin server&#39;s certificate. If the certificate is not signed by a well-known certification authority, enter the CA certificate in the PEM format for verification.
     * 
     */
    public Optional<String> caCert() {
        return Optional.ofNullable(this.caCert);
    }
    /**
     * @return The PEM-formatted digital certificate you want to authenticate requests to your destination with. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     * 
     */
    public Optional<String> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }
    /**
     * @return The private key in the non-encrypted PKCS8 format you want to use to authenticate with the backend server. If you want to use mutual authentication, you need to provide both the client certificate and the client key.
     * 
     */
    public Optional<String> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    /**
     * @return The type of the resource passed in the request&#39;s custom header. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return A human-readable name for the request&#39;s custom header, containing only alphanumeric, dash, and underscore characters. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> customHeaderName() {
        return Optional.ofNullable(this.customHeaderName);
    }
    /**
     * @return The custom header&#39;s contents passed with the request that contains information about the client connection. For details, see Additional options in the DataStream user guide.
     * 
     */
    public Optional<String> customHeaderValue() {
        return Optional.ofNullable(this.customHeaderValue);
    }
    /**
     * @return The name of the connector.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The Elasticsearch bulk endpoint URL in the https://hostname.elastic-cloud.com:9243/_bulk/ format. Set indexName in the appropriate field instead of providing it in the URL. You can use Akamaized property hostnames as endpoint URLs. See Stream logs to Elasticsearch.
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return The index name of the Elastic cloud where you want to store log files.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return Indicates whether mTLS is enabled or not.
     * 
     */
    public Optional<Boolean> mTls() {
        return Optional.ofNullable(this.mTls);
    }
    /**
     * @return The Elasticsearch basic access authentication password.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The hostname that verifies the server&#39;s certificate and matches the Subject Alternative Names (SANs) in the certificate. If not provided, DataStream fetches the hostname from the endpoint URL.
     * 
     */
    public Optional<String> tlsHostname() {
        return Optional.ofNullable(this.tlsHostname);
    }
    /**
     * @return The Elasticsearch basic access authentication username.
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamElasticsearchConnector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String caCert;
        private @Nullable String clientCert;
        private @Nullable String clientKey;
        private @Nullable String contentType;
        private @Nullable String customHeaderName;
        private @Nullable String customHeaderValue;
        private String displayName;
        private String endpoint;
        private String indexName;
        private @Nullable Boolean mTls;
        private String password;
        private @Nullable String tlsHostname;
        private String userName;
        public Builder() {}
        public Builder(DatastreamElasticsearchConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCert = defaults.caCert;
    	      this.clientCert = defaults.clientCert;
    	      this.clientKey = defaults.clientKey;
    	      this.contentType = defaults.contentType;
    	      this.customHeaderName = defaults.customHeaderName;
    	      this.customHeaderValue = defaults.customHeaderValue;
    	      this.displayName = defaults.displayName;
    	      this.endpoint = defaults.endpoint;
    	      this.indexName = defaults.indexName;
    	      this.mTls = defaults.mTls;
    	      this.password = defaults.password;
    	      this.tlsHostname = defaults.tlsHostname;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder caCert(@Nullable String caCert) {

            this.caCert = caCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientCert(@Nullable String clientCert) {

            this.clientCert = clientCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(@Nullable String clientKey) {

            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaderName(@Nullable String customHeaderName) {

            this.customHeaderName = customHeaderName;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaderValue(@Nullable String customHeaderValue) {

            this.customHeaderValue = customHeaderValue;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("DatastreamElasticsearchConnector", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("DatastreamElasticsearchConnector", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("DatastreamElasticsearchConnector", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder mTls(@Nullable Boolean mTls) {

            this.mTls = mTls;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("DatastreamElasticsearchConnector", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder tlsHostname(@Nullable String tlsHostname) {

            this.tlsHostname = tlsHostname;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("DatastreamElasticsearchConnector", "userName");
            }
            this.userName = userName;
            return this;
        }
        public DatastreamElasticsearchConnector build() {
            final var _resultValue = new DatastreamElasticsearchConnector();
            _resultValue.caCert = caCert;
            _resultValue.clientCert = clientCert;
            _resultValue.clientKey = clientKey;
            _resultValue.contentType = contentType;
            _resultValue.customHeaderName = customHeaderName;
            _resultValue.customHeaderValue = customHeaderValue;
            _resultValue.displayName = displayName;
            _resultValue.endpoint = endpoint;
            _resultValue.indexName = indexName;
            _resultValue.mTls = mTls;
            _resultValue.password = password;
            _resultValue.tlsHostname = tlsHostname;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
