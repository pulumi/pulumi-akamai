// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AppSecMalwarePolicyActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSecMalwarePolicyActionArgs Empty = new AppSecMalwarePolicyActionArgs();

    /**
     * Action to be taken for requests scanned according to the malware policy
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to be taken for requests scanned according to the malware policy
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * Unique identifier of the malware policy
     * 
     */
    @Import(name="malwarePolicyId", required=true)
    private Output<Integer> malwarePolicyId;

    /**
     * @return Unique identifier of the malware policy
     * 
     */
    public Output<Integer> malwarePolicyId() {
        return this.malwarePolicyId;
    }

    /**
     * Unique identifier of the security policy
     * 
     */
    @Import(name="securityPolicyId", required=true)
    private Output<String> securityPolicyId;

    /**
     * @return Unique identifier of the security policy
     * 
     */
    public Output<String> securityPolicyId() {
        return this.securityPolicyId;
    }

    /**
     * Action to be taken for requests not scanned according to the malware policy
     * 
     */
    @Import(name="unscannedAction", required=true)
    private Output<String> unscannedAction;

    /**
     * @return Action to be taken for requests not scanned according to the malware policy
     * 
     */
    public Output<String> unscannedAction() {
        return this.unscannedAction;
    }

    private AppSecMalwarePolicyActionArgs() {}

    private AppSecMalwarePolicyActionArgs(AppSecMalwarePolicyActionArgs $) {
        this.action = $.action;
        this.configId = $.configId;
        this.malwarePolicyId = $.malwarePolicyId;
        this.securityPolicyId = $.securityPolicyId;
        this.unscannedAction = $.unscannedAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecMalwarePolicyActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecMalwarePolicyActionArgs $;

        public Builder() {
            $ = new AppSecMalwarePolicyActionArgs();
        }

        public Builder(AppSecMalwarePolicyActionArgs defaults) {
            $ = new AppSecMalwarePolicyActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to be taken for requests scanned according to the malware policy
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to be taken for requests scanned according to the malware policy
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param malwarePolicyId Unique identifier of the malware policy
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(Output<Integer> malwarePolicyId) {
            $.malwarePolicyId = malwarePolicyId;
            return this;
        }

        /**
         * @param malwarePolicyId Unique identifier of the malware policy
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(Integer malwarePolicyId) {
            return malwarePolicyId(Output.of(malwarePolicyId));
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param unscannedAction Action to be taken for requests not scanned according to the malware policy
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(Output<String> unscannedAction) {
            $.unscannedAction = unscannedAction;
            return this;
        }

        /**
         * @param unscannedAction Action to be taken for requests not scanned according to the malware policy
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(String unscannedAction) {
            return unscannedAction(Output.of(unscannedAction));
        }

        public AppSecMalwarePolicyActionArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("AppSecMalwarePolicyActionArgs", "action");
            }
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("AppSecMalwarePolicyActionArgs", "configId");
            }
            if ($.malwarePolicyId == null) {
                throw new MissingRequiredPropertyException("AppSecMalwarePolicyActionArgs", "malwarePolicyId");
            }
            if ($.securityPolicyId == null) {
                throw new MissingRequiredPropertyException("AppSecMalwarePolicyActionArgs", "securityPolicyId");
            }
            if ($.unscannedAction == null) {
                throw new MissingRequiredPropertyException("AppSecMalwarePolicyActionArgs", "unscannedAction");
            }
            return $;
        }
    }

}
