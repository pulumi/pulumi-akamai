// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationLocationCapacity;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetCloudwrapperConfigurationsConfigurationLocation extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationsConfigurationLocation Empty = new GetCloudwrapperConfigurationsConfigurationLocation();

    @Import(name="capacity", required=true)
    private GetCloudwrapperConfigurationsConfigurationLocationCapacity capacity;

    public GetCloudwrapperConfigurationsConfigurationLocationCapacity capacity() {
        return this.capacity;
    }

    @Import(name="comments", required=true)
    private String comments;

    public String comments() {
        return this.comments;
    }

    @Import(name="mapName", required=true)
    private String mapName;

    public String mapName() {
        return this.mapName;
    }

    @Import(name="trafficTypeId", required=true)
    private Integer trafficTypeId;

    public Integer trafficTypeId() {
        return this.trafficTypeId;
    }

    private GetCloudwrapperConfigurationsConfigurationLocation() {}

    private GetCloudwrapperConfigurationsConfigurationLocation(GetCloudwrapperConfigurationsConfigurationLocation $) {
        this.capacity = $.capacity;
        this.comments = $.comments;
        this.mapName = $.mapName;
        this.trafficTypeId = $.trafficTypeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationLocation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationLocation $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationLocation();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationLocation defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationLocation(Objects.requireNonNull(defaults));
        }

        public Builder capacity(GetCloudwrapperConfigurationsConfigurationLocationCapacity capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder comments(String comments) {
            $.comments = comments;
            return this;
        }

        public Builder mapName(String mapName) {
            $.mapName = mapName;
            return this;
        }

        public Builder trafficTypeId(Integer trafficTypeId) {
            $.trafficTypeId = trafficTypeId;
            return this;
        }

        public GetCloudwrapperConfigurationsConfigurationLocation build() {
            if ($.capacity == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocation", "capacity");
            }
            if ($.comments == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocation", "comments");
            }
            if ($.mapName == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocation", "mapName");
            }
            if ($.trafficTypeId == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationLocation", "trafficTypeId");
            }
            return $;
        }
    }

}
