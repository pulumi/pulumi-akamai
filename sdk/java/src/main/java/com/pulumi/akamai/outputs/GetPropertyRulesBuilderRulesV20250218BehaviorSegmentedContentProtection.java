// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection {
    /**
     * @return Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client&#39;s access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
     * 
     */
    private @Nullable Boolean acl;
    /**
     * @return Whether to enable DASH Media Encryption.
     * 
     */
    private @Nullable Boolean dashMediaEncryption;
    /**
     * @return Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
     * 
     */
    private @Nullable Boolean dataPayload;
    /**
     * @return When enabled, in the DASH media encryption variant, passes tokens in query strings, as an alternative to cookies.
     * 
     */
    private @Nullable Boolean enableTokenInQueryString;
    /**
     * @return When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
     * 
     */
    private @Nullable Boolean enableTokenInUri;
    /**
     * @return Enables the segmented content protection behavior.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String fieldCarryOver;
    /**
     * @return This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
     * 
     */
    private @Nullable List<String> headerForSalts;
    /**
     * @return Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
     * 
     */
    private @Nullable List<String> hlsMasterManifestFiles;
    /**
     * @return Enables HLS Segment Encryption.
     * 
     */
    private @Nullable Boolean hlsMediaEncryption;
    /**
     * @return Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
     * 
     */
    private @Nullable Boolean ip;
    /**
     * @return Specifies the encryption key to use as a shared secret to validate tokens.
     * 
     */
    private @Nullable String key;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String mediaEncryptionTitle;
    /**
     * @return Identifies the `TokenAuth` tokens to block from accessing your content.
     * 
     */
    private @Nullable Integer revokedListId;
    /**
     * @return Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
     * 
     */
    private @Nullable String salt;
    /**
     * @return Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
     * 
     */
    private @Nullable Boolean sessionId;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String tokenAuthDashTitle;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String tokenAuthHlsTitle;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String tokenAuthenticationTitle;
    /**
     * @return Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
     * 
     */
    private @Nullable Boolean tokenRevocationEnabled;
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    private @Nullable String tokenRevocationTitle;
    /**
     * @return An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
     * 
     */
    private @Nullable String transitionKey;
    /**
     * @return Allows you to specify advanced `transitionKey` and `salt` options.
     * 
     */
    private @Nullable Boolean useAdvanced;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection() {}
    /**
     * @return Enabling this option carries the `ACL` field from the access token over to the session token, to limit the requesting client&#39;s access to the specific URL or path set in the `ACL` field. Playback may fail if the base path of the master playlist (and variant playlist, plus segments) varies from that of the `ACL` field.
     * 
     */
    public Optional<Boolean> acl() {
        return Optional.ofNullable(this.acl);
    }
    /**
     * @return Whether to enable DASH Media Encryption.
     * 
     */
    public Optional<Boolean> dashMediaEncryption() {
        return Optional.ofNullable(this.dashMediaEncryption);
    }
    /**
     * @return Enabling this option carries the `data/payload` field from the access token over to the session token, allowing access to opaque data for log analysis for a URL protected by a session token.
     * 
     */
    public Optional<Boolean> dataPayload() {
        return Optional.ofNullable(this.dataPayload);
    }
    /**
     * @return When enabled, in the DASH media encryption variant, passes tokens in query strings, as an alternative to cookies.
     * 
     */
    public Optional<Boolean> enableTokenInQueryString() {
        return Optional.ofNullable(this.enableTokenInQueryString);
    }
    /**
     * @return When enabled, passes tokens in HLS variant manifest URLs and HLS segment URLs, as an alternative to cookies.
     * 
     */
    public Optional<Boolean> enableTokenInUri() {
        return Optional.ofNullable(this.enableTokenInUri);
    }
    /**
     * @return Enables the segmented content protection behavior.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> fieldCarryOver() {
        return Optional.ofNullable(this.fieldCarryOver);
    }
    /**
     * @return This allows you to include additional salt properties specific to each end user to strengthen the relationship between the session token and playback session. This specifies the set of request headers whose values generate the salt value, typically `User-Agent`, `X-Playback-Session-Id`, and `Origin`. Any specified header needs to appear in the player&#39;s request.
     * 
     */
    public List<String> headerForSalts() {
        return this.headerForSalts == null ? List.of() : this.headerForSalts;
    }
    /**
     * @return Specifies the set of filenames that form HLS master manifest URLs. You can use `*` wildcard character that matches zero or more characters. Make sure to specify master manifest filenames uniquely, to distinguish them from variant manifest files.
     * 
     */
    public List<String> hlsMasterManifestFiles() {
        return this.hlsMasterManifestFiles == null ? List.of() : this.hlsMasterManifestFiles;
    }
    /**
     * @return Enables HLS Segment Encryption.
     * 
     */
    public Optional<Boolean> hlsMediaEncryption() {
        return Optional.ofNullable(this.hlsMediaEncryption);
    }
    /**
     * @return Enabling this restricts content access to a specific IP address, only appropriate if it does not change during the playback session.
     * 
     */
    public Optional<Boolean> ip() {
        return Optional.ofNullable(this.ip);
    }
    /**
     * @return Specifies the encryption key to use as a shared secret to validate tokens.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> mediaEncryptionTitle() {
        return Optional.ofNullable(this.mediaEncryptionTitle);
    }
    /**
     * @return Identifies the `TokenAuth` tokens to block from accessing your content.
     * 
     */
    public Optional<Integer> revokedListId() {
        return Optional.ofNullable(this.revokedListId);
    }
    /**
     * @return Specifies a salt as input into the token for added security. This value needs to match the salt used in the token generation code.
     * 
     */
    public Optional<String> salt() {
        return Optional.ofNullable(this.salt);
    }
    /**
     * @return Enabling this option carries the `session_id` value from the access token over to the session token, for use in tracking and counting unique playback sessions.
     * 
     */
    public Optional<Boolean> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenAuthDashTitle() {
        return Optional.ofNullable(this.tokenAuthDashTitle);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenAuthHlsTitle() {
        return Optional.ofNullable(this.tokenAuthHlsTitle);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenAuthenticationTitle() {
        return Optional.ofNullable(this.tokenAuthenticationTitle);
    }
    /**
     * @return Enable this to deny requests from playback URLs that contain a `TokenAuth` token that uses specific token identifiers.
     * 
     */
    public Optional<Boolean> tokenRevocationEnabled() {
        return Optional.ofNullable(this.tokenRevocationEnabled);
    }
    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> tokenRevocationTitle() {
        return Optional.ofNullable(this.tokenRevocationTitle);
    }
    /**
     * @return An alternate encryption key to match along with the `key` field, allowing you to rotate keys with no down time.
     * 
     */
    public Optional<String> transitionKey() {
        return Optional.ofNullable(this.transitionKey);
    }
    /**
     * @return Allows you to specify advanced `transitionKey` and `salt` options.
     * 
     */
    public Optional<Boolean> useAdvanced() {
        return Optional.ofNullable(this.useAdvanced);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acl;
        private @Nullable Boolean dashMediaEncryption;
        private @Nullable Boolean dataPayload;
        private @Nullable Boolean enableTokenInQueryString;
        private @Nullable Boolean enableTokenInUri;
        private @Nullable Boolean enabled;
        private @Nullable String fieldCarryOver;
        private @Nullable List<String> headerForSalts;
        private @Nullable List<String> hlsMasterManifestFiles;
        private @Nullable Boolean hlsMediaEncryption;
        private @Nullable Boolean ip;
        private @Nullable String key;
        private @Nullable Boolean locked;
        private @Nullable String mediaEncryptionTitle;
        private @Nullable Integer revokedListId;
        private @Nullable String salt;
        private @Nullable Boolean sessionId;
        private @Nullable String templateUuid;
        private @Nullable String tokenAuthDashTitle;
        private @Nullable String tokenAuthHlsTitle;
        private @Nullable String tokenAuthenticationTitle;
        private @Nullable Boolean tokenRevocationEnabled;
        private @Nullable String tokenRevocationTitle;
        private @Nullable String transitionKey;
        private @Nullable Boolean useAdvanced;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.dashMediaEncryption = defaults.dashMediaEncryption;
    	      this.dataPayload = defaults.dataPayload;
    	      this.enableTokenInQueryString = defaults.enableTokenInQueryString;
    	      this.enableTokenInUri = defaults.enableTokenInUri;
    	      this.enabled = defaults.enabled;
    	      this.fieldCarryOver = defaults.fieldCarryOver;
    	      this.headerForSalts = defaults.headerForSalts;
    	      this.hlsMasterManifestFiles = defaults.hlsMasterManifestFiles;
    	      this.hlsMediaEncryption = defaults.hlsMediaEncryption;
    	      this.ip = defaults.ip;
    	      this.key = defaults.key;
    	      this.locked = defaults.locked;
    	      this.mediaEncryptionTitle = defaults.mediaEncryptionTitle;
    	      this.revokedListId = defaults.revokedListId;
    	      this.salt = defaults.salt;
    	      this.sessionId = defaults.sessionId;
    	      this.templateUuid = defaults.templateUuid;
    	      this.tokenAuthDashTitle = defaults.tokenAuthDashTitle;
    	      this.tokenAuthHlsTitle = defaults.tokenAuthHlsTitle;
    	      this.tokenAuthenticationTitle = defaults.tokenAuthenticationTitle;
    	      this.tokenRevocationEnabled = defaults.tokenRevocationEnabled;
    	      this.tokenRevocationTitle = defaults.tokenRevocationTitle;
    	      this.transitionKey = defaults.transitionKey;
    	      this.useAdvanced = defaults.useAdvanced;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder acl(@Nullable Boolean acl) {

            this.acl = acl;
            return this;
        }
        @CustomType.Setter
        public Builder dashMediaEncryption(@Nullable Boolean dashMediaEncryption) {

            this.dashMediaEncryption = dashMediaEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder dataPayload(@Nullable Boolean dataPayload) {

            this.dataPayload = dataPayload;
            return this;
        }
        @CustomType.Setter
        public Builder enableTokenInQueryString(@Nullable Boolean enableTokenInQueryString) {

            this.enableTokenInQueryString = enableTokenInQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder enableTokenInUri(@Nullable Boolean enableTokenInUri) {

            this.enableTokenInUri = enableTokenInUri;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder fieldCarryOver(@Nullable String fieldCarryOver) {

            this.fieldCarryOver = fieldCarryOver;
            return this;
        }
        @CustomType.Setter
        public Builder headerForSalts(@Nullable List<String> headerForSalts) {

            this.headerForSalts = headerForSalts;
            return this;
        }
        public Builder headerForSalts(String... headerForSalts) {
            return headerForSalts(List.of(headerForSalts));
        }
        @CustomType.Setter
        public Builder hlsMasterManifestFiles(@Nullable List<String> hlsMasterManifestFiles) {

            this.hlsMasterManifestFiles = hlsMasterManifestFiles;
            return this;
        }
        public Builder hlsMasterManifestFiles(String... hlsMasterManifestFiles) {
            return hlsMasterManifestFiles(List.of(hlsMasterManifestFiles));
        }
        @CustomType.Setter
        public Builder hlsMediaEncryption(@Nullable Boolean hlsMediaEncryption) {

            this.hlsMediaEncryption = hlsMediaEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder ip(@Nullable Boolean ip) {

            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder mediaEncryptionTitle(@Nullable String mediaEncryptionTitle) {

            this.mediaEncryptionTitle = mediaEncryptionTitle;
            return this;
        }
        @CustomType.Setter
        public Builder revokedListId(@Nullable Integer revokedListId) {

            this.revokedListId = revokedListId;
            return this;
        }
        @CustomType.Setter
        public Builder salt(@Nullable String salt) {

            this.salt = salt;
            return this;
        }
        @CustomType.Setter
        public Builder sessionId(@Nullable Boolean sessionId) {

            this.sessionId = sessionId;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthDashTitle(@Nullable String tokenAuthDashTitle) {

            this.tokenAuthDashTitle = tokenAuthDashTitle;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthHlsTitle(@Nullable String tokenAuthHlsTitle) {

            this.tokenAuthHlsTitle = tokenAuthHlsTitle;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthenticationTitle(@Nullable String tokenAuthenticationTitle) {

            this.tokenAuthenticationTitle = tokenAuthenticationTitle;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRevocationEnabled(@Nullable Boolean tokenRevocationEnabled) {

            this.tokenRevocationEnabled = tokenRevocationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder tokenRevocationTitle(@Nullable String tokenRevocationTitle) {

            this.tokenRevocationTitle = tokenRevocationTitle;
            return this;
        }
        @CustomType.Setter
        public Builder transitionKey(@Nullable String transitionKey) {

            this.transitionKey = transitionKey;
            return this;
        }
        @CustomType.Setter
        public Builder useAdvanced(@Nullable Boolean useAdvanced) {

            this.useAdvanced = useAdvanced;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20250218BehaviorSegmentedContentProtection();
            _resultValue.acl = acl;
            _resultValue.dashMediaEncryption = dashMediaEncryption;
            _resultValue.dataPayload = dataPayload;
            _resultValue.enableTokenInQueryString = enableTokenInQueryString;
            _resultValue.enableTokenInUri = enableTokenInUri;
            _resultValue.enabled = enabled;
            _resultValue.fieldCarryOver = fieldCarryOver;
            _resultValue.headerForSalts = headerForSalts;
            _resultValue.hlsMasterManifestFiles = hlsMasterManifestFiles;
            _resultValue.hlsMediaEncryption = hlsMediaEncryption;
            _resultValue.ip = ip;
            _resultValue.key = key;
            _resultValue.locked = locked;
            _resultValue.mediaEncryptionTitle = mediaEncryptionTitle;
            _resultValue.revokedListId = revokedListId;
            _resultValue.salt = salt;
            _resultValue.sessionId = sessionId;
            _resultValue.templateUuid = templateUuid;
            _resultValue.tokenAuthDashTitle = tokenAuthDashTitle;
            _resultValue.tokenAuthHlsTitle = tokenAuthHlsTitle;
            _resultValue.tokenAuthenticationTitle = tokenAuthenticationTitle;
            _resultValue.tokenRevocationEnabled = tokenRevocationEnabled;
            _resultValue.tokenRevocationTitle = tokenRevocationTitle;
            _resultValue.transitionKey = transitionKey;
            _resultValue.useAdvanced = useAdvanced;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
