// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetContractPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetContractPlainArgs Empty = new GetContractPlainArgs();

    /**
     * Either the group ID or the group name that includes the contract. You can&#39;t use this argument with `group_id` and `group_name`.
     * 
     * @deprecated
     * The setting &#34;group&#34; has been deprecated.
     * 
     */
    @Deprecated /* The setting ""group"" has been deprecated. */
    @Import(name="group")
    private @Nullable String group;

    /**
     * @return Either the group ID or the group name that includes the contract. You can&#39;t use this argument with `group_id` and `group_name`.
     * 
     * @deprecated
     * The setting &#34;group&#34; has been deprecated.
     * 
     */
    @Deprecated /* The setting ""group"" has been deprecated. */
    public Optional<String> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * The unique ID of the group containing the contract, including the  `grp_` prefix.
     * 
     */
    @Import(name="groupId")
    private @Nullable String groupId;

    /**
     * @return The unique ID of the group containing the contract, including the  `grp_` prefix.
     * 
     */
    public Optional<String> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The name of the group containing the contract.
     * 
     */
    @Import(name="groupName")
    private @Nullable String groupName;

    /**
     * @return The name of the group containing the contract.
     * 
     */
    public Optional<String> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    private GetContractPlainArgs() {}

    private GetContractPlainArgs(GetContractPlainArgs $) {
        this.group = $.group;
        this.groupId = $.groupId;
        this.groupName = $.groupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetContractPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetContractPlainArgs $;

        public Builder() {
            $ = new GetContractPlainArgs();
        }

        public Builder(GetContractPlainArgs defaults) {
            $ = new GetContractPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param group Either the group ID or the group name that includes the contract. You can&#39;t use this argument with `group_id` and `group_name`.
         * 
         * @return builder
         * 
         * @deprecated
         * The setting &#34;group&#34; has been deprecated.
         * 
         */
        @Deprecated /* The setting ""group"" has been deprecated. */
        public Builder group(@Nullable String group) {
            $.group = group;
            return this;
        }

        /**
         * @param groupId The unique ID of the group containing the contract, including the  `grp_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable String groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupName The name of the group containing the contract.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable String groupName) {
            $.groupName = groupName;
            return this;
        }

        public GetContractPlainArgs build() {
            return $;
        }
    }

}
