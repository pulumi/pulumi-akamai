// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs Empty = new GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs();

    /**
     * Configures how sets of query string parameters translate to cache keys. Be careful not to ignore any parameters that result in substantially different content, as it is `not` reflected in the cached object.
     * 
     */
    @Import(name="behavior")
    private @Nullable Output<String> behavior;

    /**
     * @return Configures how sets of query string parameters translate to cache keys. Be careful not to ignore any parameters that result in substantially different content, as it is `not` reflected in the cached object.
     * 
     */
    public Optional<Output<String>> behavior() {
        return Optional.ofNullable(this.behavior);
    }

    /**
     * When enabled, `parameters` needs to match exactly. Keep disabled to match string prefixes.
     * 
     */
    @Import(name="exactMatch")
    private @Nullable Output<Boolean> exactMatch;

    /**
     * @return When enabled, `parameters` needs to match exactly. Keep disabled to match string prefixes.
     * 
     */
    public Optional<Output<Boolean>> exactMatch() {
        return Optional.ofNullable(this.exactMatch);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the set of parameter field names to include in or exclude from the cache key. By default, these match the field names as string prefixes.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<String>> parameters;

    /**
     * @return Specifies the set of parameter field names to include in or exclude from the cache key. By default, these match the field names as string prefixes.
     * 
     */
    public Optional<Output<List<String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs() {}

    private GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs(GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs $) {
        this.behavior = $.behavior;
        this.exactMatch = $.exactMatch;
        this.locked = $.locked;
        this.parameters = $.parameters;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param behavior Configures how sets of query string parameters translate to cache keys. Be careful not to ignore any parameters that result in substantially different content, as it is `not` reflected in the cached object.
         * 
         * @return builder
         * 
         */
        public Builder behavior(@Nullable Output<String> behavior) {
            $.behavior = behavior;
            return this;
        }

        /**
         * @param behavior Configures how sets of query string parameters translate to cache keys. Be careful not to ignore any parameters that result in substantially different content, as it is `not` reflected in the cached object.
         * 
         * @return builder
         * 
         */
        public Builder behavior(String behavior) {
            return behavior(Output.of(behavior));
        }

        /**
         * @param exactMatch When enabled, `parameters` needs to match exactly. Keep disabled to match string prefixes.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(@Nullable Output<Boolean> exactMatch) {
            $.exactMatch = exactMatch;
            return this;
        }

        /**
         * @param exactMatch When enabled, `parameters` needs to match exactly. Keep disabled to match string prefixes.
         * 
         * @return builder
         * 
         */
        public Builder exactMatch(Boolean exactMatch) {
            return exactMatch(Output.of(exactMatch));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param parameters Specifies the set of parameter field names to include in or exclude from the cache key. By default, these match the field names as string prefixes.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Specifies the set of parameter field names to include in or exclude from the cache key. By default, these match the field names as string prefixes.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Specifies the set of parameter field names to include in or exclude from the cache key. By default, these match the field names as string prefixes.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20240212BehaviorCacheKeyQueryParamsArgs build() {
            return $;
        }
    }

}
