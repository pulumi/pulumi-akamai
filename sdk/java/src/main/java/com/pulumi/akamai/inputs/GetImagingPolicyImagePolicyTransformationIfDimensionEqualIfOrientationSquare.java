// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquareUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionEqualIfOrientationSquare build() {
            return $;
        }
    }

}
