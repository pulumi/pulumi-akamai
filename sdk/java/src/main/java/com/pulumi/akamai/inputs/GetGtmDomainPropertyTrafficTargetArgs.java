// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGtmDomainPropertyTrafficTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGtmDomainPropertyTrafficTargetArgs Empty = new GetGtmDomainPropertyTrafficTargetArgs();

    /**
     * A unique identifier for an existing data center in the domain.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<Integer> datacenterId;

    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Output<Integer> datacenterId() {
        return this.datacenterId;
    }

    /**
     * Indicates whether the traffic target is used.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Indicates whether the traffic target is used.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Specifies an optional data center for the property.
     * 
     */
    @Import(name="handoutCname", required=true)
    private Output<String> handoutCname;

    /**
     * @return Specifies an optional data center for the property.
     * 
     */
    public Output<String> handoutCname() {
        return this.handoutCname;
    }

    /**
     * An alternative label for the traffic target.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return An alternative label for the traffic target.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     * 
     */
    @Import(name="precedence", required=true)
    private Output<Integer> precedence;

    /**
     * @return Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     * 
     */
    public Output<Integer> precedence() {
        return this.precedence;
    }

    /**
     * Identifies the IP address or the hostnames of the servers.
     * 
     */
    @Import(name="servers", required=true)
    private Output<List<String>> servers;

    /**
     * @return Identifies the IP address or the hostnames of the servers.
     * 
     */
    public Output<List<String>> servers() {
        return this.servers;
    }

    /**
     * Specifies the traffic target weight for the target.
     * 
     */
    @Import(name="weight", required=true)
    private Output<Double> weight;

    /**
     * @return Specifies the traffic target weight for the target.
     * 
     */
    public Output<Double> weight() {
        return this.weight;
    }

    private GetGtmDomainPropertyTrafficTargetArgs() {}

    private GetGtmDomainPropertyTrafficTargetArgs(GetGtmDomainPropertyTrafficTargetArgs $) {
        this.datacenterId = $.datacenterId;
        this.enabled = $.enabled;
        this.handoutCname = $.handoutCname;
        this.name = $.name;
        this.precedence = $.precedence;
        this.servers = $.servers;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainPropertyTrafficTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainPropertyTrafficTargetArgs $;

        public Builder() {
            $ = new GetGtmDomainPropertyTrafficTargetArgs();
        }

        public Builder(GetGtmDomainPropertyTrafficTargetArgs defaults) {
            $ = new GetGtmDomainPropertyTrafficTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<Integer> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Integer datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param enabled Indicates whether the traffic target is used.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether the traffic target is used.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param handoutCname Specifies an optional data center for the property.
         * 
         * @return builder
         * 
         */
        public Builder handoutCname(Output<String> handoutCname) {
            $.handoutCname = handoutCname;
            return this;
        }

        /**
         * @param handoutCname Specifies an optional data center for the property.
         * 
         * @return builder
         * 
         */
        public Builder handoutCname(String handoutCname) {
            return handoutCname(Output.of(handoutCname));
        }

        /**
         * @param name An alternative label for the traffic target.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name An alternative label for the traffic target.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param precedence Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
         * 
         * @return builder
         * 
         */
        public Builder precedence(Output<Integer> precedence) {
            $.precedence = precedence;
            return this;
        }

        /**
         * @param precedence Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
         * 
         * @return builder
         * 
         */
        public Builder precedence(Integer precedence) {
            return precedence(Output.of(precedence));
        }

        /**
         * @param servers Identifies the IP address or the hostnames of the servers.
         * 
         * @return builder
         * 
         */
        public Builder servers(Output<List<String>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Identifies the IP address or the hostnames of the servers.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<String> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers Identifies the IP address or the hostnames of the servers.
         * 
         * @return builder
         * 
         */
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param weight Specifies the traffic target weight for the target.
         * 
         * @return builder
         * 
         */
        public Builder weight(Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Specifies the traffic target weight for the target.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public GetGtmDomainPropertyTrafficTargetArgs build() {
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "datacenterId");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "enabled");
            }
            if ($.handoutCname == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "handoutCname");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "name");
            }
            if ($.precedence == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "precedence");
            }
            if ($.servers == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "servers");
            }
            if ($.weight == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTargetArgs", "weight");
            }
            return $;
        }
    }

}
