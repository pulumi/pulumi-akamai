// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240109CriterionTime {
    /**
     * @return Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
     * 
     */
    private @Nullable Boolean applyDaylightSavingsTime;
    /**
     * @return Sets the start of a time period.
     * 
     */
    private @Nullable String beginDate;
    /**
     * @return Sets the end of a fixed time period.
     * 
     */
    private @Nullable String endDate;
    /**
     * @return Sets the start of a fixed time period.
     * 
     */
    private @Nullable String lastingDate;
    /**
     * @return Specifies the end of a time period as a duration relative to the `lastingDate`.
     * 
     */
    private @Nullable String lastingDuration;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Specifies how to define the range of time.
     * 
     */
    private @Nullable String matchOperator;
    /**
     * @return Sets the start of the initial time period.
     * 
     */
    private @Nullable String repeatBeginDate;
    /**
     * @return Sets the duration of each repeating time period.
     * 
     */
    private @Nullable String repeatDuration;
    /**
     * @return Sets the time between each repeating time period&#39;s starting points.
     * 
     */
    private @Nullable String repeatInterval;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20240109CriterionTime() {}
    /**
     * @return Adjusts the start time plus repeat interval to account for daylight saving time. Applies when the current time and the start time use different systems, daylight and standard, and the two values are in conflict.
     * 
     */
    public Optional<Boolean> applyDaylightSavingsTime() {
        return Optional.ofNullable(this.applyDaylightSavingsTime);
    }
    /**
     * @return Sets the start of a time period.
     * 
     */
    public Optional<String> beginDate() {
        return Optional.ofNullable(this.beginDate);
    }
    /**
     * @return Sets the end of a fixed time period.
     * 
     */
    public Optional<String> endDate() {
        return Optional.ofNullable(this.endDate);
    }
    /**
     * @return Sets the start of a fixed time period.
     * 
     */
    public Optional<String> lastingDate() {
        return Optional.ofNullable(this.lastingDate);
    }
    /**
     * @return Specifies the end of a time period as a duration relative to the `lastingDate`.
     * 
     */
    public Optional<String> lastingDuration() {
        return Optional.ofNullable(this.lastingDuration);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Specifies how to define the range of time.
     * 
     */
    public Optional<String> matchOperator() {
        return Optional.ofNullable(this.matchOperator);
    }
    /**
     * @return Sets the start of the initial time period.
     * 
     */
    public Optional<String> repeatBeginDate() {
        return Optional.ofNullable(this.repeatBeginDate);
    }
    /**
     * @return Sets the duration of each repeating time period.
     * 
     */
    public Optional<String> repeatDuration() {
        return Optional.ofNullable(this.repeatDuration);
    }
    /**
     * @return Sets the time between each repeating time period&#39;s starting points.
     * 
     */
    public Optional<String> repeatInterval() {
        return Optional.ofNullable(this.repeatInterval);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240109CriterionTime defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean applyDaylightSavingsTime;
        private @Nullable String beginDate;
        private @Nullable String endDate;
        private @Nullable String lastingDate;
        private @Nullable String lastingDuration;
        private @Nullable Boolean locked;
        private @Nullable String matchOperator;
        private @Nullable String repeatBeginDate;
        private @Nullable String repeatDuration;
        private @Nullable String repeatInterval;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240109CriterionTime defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applyDaylightSavingsTime = defaults.applyDaylightSavingsTime;
    	      this.beginDate = defaults.beginDate;
    	      this.endDate = defaults.endDate;
    	      this.lastingDate = defaults.lastingDate;
    	      this.lastingDuration = defaults.lastingDuration;
    	      this.locked = defaults.locked;
    	      this.matchOperator = defaults.matchOperator;
    	      this.repeatBeginDate = defaults.repeatBeginDate;
    	      this.repeatDuration = defaults.repeatDuration;
    	      this.repeatInterval = defaults.repeatInterval;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder applyDaylightSavingsTime(@Nullable Boolean applyDaylightSavingsTime) {

            this.applyDaylightSavingsTime = applyDaylightSavingsTime;
            return this;
        }
        @CustomType.Setter
        public Builder beginDate(@Nullable String beginDate) {

            this.beginDate = beginDate;
            return this;
        }
        @CustomType.Setter
        public Builder endDate(@Nullable String endDate) {

            this.endDate = endDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastingDate(@Nullable String lastingDate) {

            this.lastingDate = lastingDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastingDuration(@Nullable String lastingDuration) {

            this.lastingDuration = lastingDuration;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder matchOperator(@Nullable String matchOperator) {

            this.matchOperator = matchOperator;
            return this;
        }
        @CustomType.Setter
        public Builder repeatBeginDate(@Nullable String repeatBeginDate) {

            this.repeatBeginDate = repeatBeginDate;
            return this;
        }
        @CustomType.Setter
        public Builder repeatDuration(@Nullable String repeatDuration) {

            this.repeatDuration = repeatDuration;
            return this;
        }
        @CustomType.Setter
        public Builder repeatInterval(@Nullable String repeatInterval) {

            this.repeatInterval = repeatInterval;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240109CriterionTime build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240109CriterionTime();
            _resultValue.applyDaylightSavingsTime = applyDaylightSavingsTime;
            _resultValue.beginDate = beginDate;
            _resultValue.endDate = endDate;
            _resultValue.lastingDate = lastingDate;
            _resultValue.lastingDuration = lastingDuration;
            _resultValue.locked = locked;
            _resultValue.matchOperator = matchOperator;
            _resultValue.repeatBeginDate = repeatBeginDate;
            _resultValue.repeatDuration = repeatDuration;
            _resultValue.repeatInterval = repeatInterval;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
