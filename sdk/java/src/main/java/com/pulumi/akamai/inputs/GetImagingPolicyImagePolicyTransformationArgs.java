// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationArgs Empty = new GetImagingPolicyImagePolicyTransformationArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationArgs() {}

    private GetImagingPolicyImagePolicyTransformationArgs(GetImagingPolicyImagePolicyTransformationArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationArgs build() {
            return $;
        }
    }

}
