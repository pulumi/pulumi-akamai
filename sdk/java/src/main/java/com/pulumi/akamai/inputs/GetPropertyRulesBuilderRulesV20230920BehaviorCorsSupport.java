// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport();

    /**
     * Accepts requests made using credentials, like cookies or TLS client certificates.
     * 
     */
    @Import(name="allowCredentials")
    private @Nullable Boolean allowCredentials;

    /**
     * @return Accepts requests made using credentials, like cookies or TLS client certificates.
     * 
     */
    public Optional<Boolean> allowCredentials() {
        return Optional.ofNullable(this.allowCredentials);
    }

    /**
     * In responses to preflight requests, defines which headers to allow when making the actual request.
     * 
     */
    @Import(name="allowHeaders")
    private @Nullable String allowHeaders;

    /**
     * @return In responses to preflight requests, defines which headers to allow when making the actual request.
     * 
     */
    public Optional<String> allowHeaders() {
        return Optional.ofNullable(this.allowHeaders);
    }

    /**
     * In responses to preflight requests, sets which origin hostnames to accept requests from.
     * 
     */
    @Import(name="allowOrigins")
    private @Nullable String allowOrigins;

    /**
     * @return In responses to preflight requests, sets which origin hostnames to accept requests from.
     * 
     */
    public Optional<String> allowOrigins() {
        return Optional.ofNullable(this.allowOrigins);
    }

    /**
     * Enables CORS feature.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enables CORS feature.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * In responses to preflight requests, lists names of headers that clients can access. By default, clients can access the following simple response headers: `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`. You can add other header names to make them accessible to clients.
     * 
     */
    @Import(name="exposeHeaders")
    private @Nullable List<String> exposeHeaders;

    /**
     * @return In responses to preflight requests, lists names of headers that clients can access. By default, clients can access the following simple response headers: `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`. You can add other header names to make them accessible to clients.
     * 
     */
    public Optional<List<String>> exposeHeaders() {
        return Optional.ofNullable(this.exposeHeaders);
    }

    /**
     * Defines the supported request headers.
     * 
     */
    @Import(name="headers")
    private @Nullable List<String> headers;

    /**
     * @return Defines the supported request headers.
     * 
     */
    public Optional<List<String>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies any combination of the following methods: `DELETE`, `GET`, `PATCH`, `POST`, and `PUT` that are allowed when accessing the resource from an external domain.
     * 
     */
    @Import(name="methods")
    private @Nullable List<String> methods;

    /**
     * @return Specifies any combination of the following methods: `DELETE`, `GET`, `PATCH`, `POST`, and `PUT` that are allowed when accessing the resource from an external domain.
     * 
     */
    public Optional<List<String>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * Defines the origin hostnames to accept requests from. The hostnames that you enter need to start with `http` or `https`. For detailed hostname syntax requirements, refer to RFC-952 and RFC-1123 specifications.
     * 
     */
    @Import(name="origins")
    private @Nullable List<String> origins;

    /**
     * @return Defines the origin hostnames to accept requests from. The hostnames that you enter need to start with `http` or `https`. For detailed hostname syntax requirements, refer to RFC-952 and RFC-1123 specifications.
     * 
     */
    public Optional<List<String>> origins() {
        return Optional.ofNullable(this.origins);
    }

    /**
     * Defines the number of seconds that the browser should cache the response to a preflight request.
     * 
     */
    @Import(name="preflightMaxAge")
    private @Nullable String preflightMaxAge;

    /**
     * @return Defines the number of seconds that the browser should cache the response to a preflight request.
     * 
     */
    public Optional<String> preflightMaxAge() {
        return Optional.ofNullable(this.preflightMaxAge);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport(GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport $) {
        this.allowCredentials = $.allowCredentials;
        this.allowHeaders = $.allowHeaders;
        this.allowOrigins = $.allowOrigins;
        this.enabled = $.enabled;
        this.exposeHeaders = $.exposeHeaders;
        this.headers = $.headers;
        this.locked = $.locked;
        this.methods = $.methods;
        this.origins = $.origins;
        this.preflightMaxAge = $.preflightMaxAge;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowCredentials Accepts requests made using credentials, like cookies or TLS client certificates.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(@Nullable Boolean allowCredentials) {
            $.allowCredentials = allowCredentials;
            return this;
        }

        /**
         * @param allowHeaders In responses to preflight requests, defines which headers to allow when making the actual request.
         * 
         * @return builder
         * 
         */
        public Builder allowHeaders(@Nullable String allowHeaders) {
            $.allowHeaders = allowHeaders;
            return this;
        }

        /**
         * @param allowOrigins In responses to preflight requests, sets which origin hostnames to accept requests from.
         * 
         * @return builder
         * 
         */
        public Builder allowOrigins(@Nullable String allowOrigins) {
            $.allowOrigins = allowOrigins;
            return this;
        }

        /**
         * @param enabled Enables CORS feature.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param exposeHeaders In responses to preflight requests, lists names of headers that clients can access. By default, clients can access the following simple response headers: `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`. You can add other header names to make them accessible to clients.
         * 
         * @return builder
         * 
         */
        public Builder exposeHeaders(@Nullable List<String> exposeHeaders) {
            $.exposeHeaders = exposeHeaders;
            return this;
        }

        /**
         * @param exposeHeaders In responses to preflight requests, lists names of headers that clients can access. By default, clients can access the following simple response headers: `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, and `Pragma`. You can add other header names to make them accessible to clients.
         * 
         * @return builder
         * 
         */
        public Builder exposeHeaders(String... exposeHeaders) {
            return exposeHeaders(List.of(exposeHeaders));
        }

        /**
         * @param headers Defines the supported request headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable List<String> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Defines the supported request headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param methods Specifies any combination of the following methods: `DELETE`, `GET`, `PATCH`, `POST`, and `PUT` that are allowed when accessing the resource from an external domain.
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable List<String> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods Specifies any combination of the following methods: `DELETE`, `GET`, `PATCH`, `POST`, and `PUT` that are allowed when accessing the resource from an external domain.
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param origins Defines the origin hostnames to accept requests from. The hostnames that you enter need to start with `http` or `https`. For detailed hostname syntax requirements, refer to RFC-952 and RFC-1123 specifications.
         * 
         * @return builder
         * 
         */
        public Builder origins(@Nullable List<String> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins Defines the origin hostnames to accept requests from. The hostnames that you enter need to start with `http` or `https`. For detailed hostname syntax requirements, refer to RFC-952 and RFC-1123 specifications.
         * 
         * @return builder
         * 
         */
        public Builder origins(String... origins) {
            return origins(List.of(origins));
        }

        /**
         * @param preflightMaxAge Defines the number of seconds that the browser should cache the response to a preflight request.
         * 
         * @return builder
         * 
         */
        public Builder preflightMaxAge(@Nullable String preflightMaxAge) {
            $.preflightMaxAge = preflightMaxAge;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorCorsSupport build() {
            return $;
        }
    }

}
