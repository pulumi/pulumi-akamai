// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqualUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfDimensionEqual build() {
            return $;
        }
    }

}
