// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetPropertyHostnameActivationHostname;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyHostnameActivationResult {
    private String accountId;
    private String activationType;
    private String contractId;
    private String groupId;
    private String hostnameActivationId;
    private List<GetPropertyHostnameActivationHostname> hostnames;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean includeHostnames;
    private String network;
    private String note;
    private List<String> notifyEmails;
    private String propertyId;
    private String propertyName;
    private String status;
    private String submitDate;
    private String updateDate;

    private GetPropertyHostnameActivationResult() {}
    public String accountId() {
        return this.accountId;
    }
    public String activationType() {
        return this.activationType;
    }
    public String contractId() {
        return this.contractId;
    }
    public String groupId() {
        return this.groupId;
    }
    public String hostnameActivationId() {
        return this.hostnameActivationId;
    }
    public List<GetPropertyHostnameActivationHostname> hostnames() {
        return this.hostnames;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> includeHostnames() {
        return Optional.ofNullable(this.includeHostnames);
    }
    public String network() {
        return this.network;
    }
    public String note() {
        return this.note;
    }
    public List<String> notifyEmails() {
        return this.notifyEmails;
    }
    public String propertyId() {
        return this.propertyId;
    }
    public String propertyName() {
        return this.propertyName;
    }
    public String status() {
        return this.status;
    }
    public String submitDate() {
        return this.submitDate;
    }
    public String updateDate() {
        return this.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyHostnameActivationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String activationType;
        private String contractId;
        private String groupId;
        private String hostnameActivationId;
        private List<GetPropertyHostnameActivationHostname> hostnames;
        private String id;
        private @Nullable Boolean includeHostnames;
        private String network;
        private String note;
        private List<String> notifyEmails;
        private String propertyId;
        private String propertyName;
        private String status;
        private String submitDate;
        private String updateDate;
        public Builder() {}
        public Builder(GetPropertyHostnameActivationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.activationType = defaults.activationType;
    	      this.contractId = defaults.contractId;
    	      this.groupId = defaults.groupId;
    	      this.hostnameActivationId = defaults.hostnameActivationId;
    	      this.hostnames = defaults.hostnames;
    	      this.id = defaults.id;
    	      this.includeHostnames = defaults.includeHostnames;
    	      this.network = defaults.network;
    	      this.note = defaults.note;
    	      this.notifyEmails = defaults.notifyEmails;
    	      this.propertyId = defaults.propertyId;
    	      this.propertyName = defaults.propertyName;
    	      this.status = defaults.status;
    	      this.submitDate = defaults.submitDate;
    	      this.updateDate = defaults.updateDate;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder activationType(String activationType) {
            if (activationType == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "activationType");
            }
            this.activationType = activationType;
            return this;
        }
        @CustomType.Setter
        public Builder contractId(String contractId) {
            if (contractId == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "contractId");
            }
            this.contractId = contractId;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameActivationId(String hostnameActivationId) {
            if (hostnameActivationId == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "hostnameActivationId");
            }
            this.hostnameActivationId = hostnameActivationId;
            return this;
        }
        @CustomType.Setter
        public Builder hostnames(List<GetPropertyHostnameActivationHostname> hostnames) {
            if (hostnames == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "hostnames");
            }
            this.hostnames = hostnames;
            return this;
        }
        public Builder hostnames(GetPropertyHostnameActivationHostname... hostnames) {
            return hostnames(List.of(hostnames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeHostnames(@Nullable Boolean includeHostnames) {

            this.includeHostnames = includeHostnames;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder note(String note) {
            if (note == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "note");
            }
            this.note = note;
            return this;
        }
        @CustomType.Setter
        public Builder notifyEmails(List<String> notifyEmails) {
            if (notifyEmails == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "notifyEmails");
            }
            this.notifyEmails = notifyEmails;
            return this;
        }
        public Builder notifyEmails(String... notifyEmails) {
            return notifyEmails(List.of(notifyEmails));
        }
        @CustomType.Setter
        public Builder propertyId(String propertyId) {
            if (propertyId == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "propertyId");
            }
            this.propertyId = propertyId;
            return this;
        }
        @CustomType.Setter
        public Builder propertyName(String propertyName) {
            if (propertyName == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "propertyName");
            }
            this.propertyName = propertyName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder submitDate(String submitDate) {
            if (submitDate == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "submitDate");
            }
            this.submitDate = submitDate;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            if (updateDate == null) {
              throw new MissingRequiredPropertyException("GetPropertyHostnameActivationResult", "updateDate");
            }
            this.updateDate = updateDate;
            return this;
        }
        public GetPropertyHostnameActivationResult build() {
            final var _resultValue = new GetPropertyHostnameActivationResult();
            _resultValue.accountId = accountId;
            _resultValue.activationType = activationType;
            _resultValue.contractId = contractId;
            _resultValue.groupId = groupId;
            _resultValue.hostnameActivationId = hostnameActivationId;
            _resultValue.hostnames = hostnames;
            _resultValue.id = id;
            _resultValue.includeHostnames = includeHostnames;
            _resultValue.network = network;
            _resultValue.note = note;
            _resultValue.notifyEmails = notifyEmails;
            _resultValue.propertyId = propertyId;
            _resultValue.propertyName = propertyName;
            _resultValue.status = status;
            _resultValue.submitDate = submitDate;
            _resultValue.updateDate = updateDate;
            return _resultValue;
        }
    }
}
