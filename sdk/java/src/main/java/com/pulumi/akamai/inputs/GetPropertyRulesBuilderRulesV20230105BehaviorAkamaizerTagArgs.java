// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs Empty = new GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs();

    /**
     * Whether to include the `tagsAttribute` value.
     * 
     */
    @Import(name="includeTagsAttribute")
    private @Nullable Output<Boolean> includeTagsAttribute;

    /**
     * @return Whether to include the `tagsAttribute` value.
     * 
     */
    public Optional<Output<Boolean>> includeTagsAttribute() {
        return Optional.ofNullable(this.includeTagsAttribute);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the hostname to match on as a Perl-compatible regular expression.
     * 
     */
    @Import(name="matchHostname")
    private @Nullable Output<String> matchHostname;

    /**
     * @return Specifies the hostname to match on as a Perl-compatible regular expression.
     * 
     */
    public Optional<Output<String>> matchHostname() {
        return Optional.ofNullable(this.matchHostname);
    }

    /**
     * Replaces all matches when enabled, otherwise replaces only the first match.
     * 
     */
    @Import(name="replaceAll")
    private @Nullable Output<Boolean> replaceAll;

    /**
     * @return Replaces all matches when enabled, otherwise replaces only the first match.
     * 
     */
    public Optional<Output<Boolean>> replaceAll() {
        return Optional.ofNullable(this.replaceAll);
    }

    /**
     * Specifies the replacement hostname for the tag to use.
     * 
     */
    @Import(name="replacementHostname")
    private @Nullable Output<String> replacementHostname;

    /**
     * @return Specifies the replacement hostname for the tag to use.
     * 
     */
    public Optional<Output<String>> replacementHostname() {
        return Optional.ofNullable(this.replacementHostname);
    }

    /**
     * Specifies the part of HTML content the `tagsAttribute` refers to.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Specifies the part of HTML content the `tagsAttribute` refers to.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Specifies the tag or tag/attribute combination to operate on.
     * 
     */
    @Import(name="tagsAttribute")
    private @Nullable Output<String> tagsAttribute;

    /**
     * @return Specifies the tag or tag/attribute combination to operate on.
     * 
     */
    public Optional<Output<String>> tagsAttribute() {
        return Optional.ofNullable(this.tagsAttribute);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs() {}

    private GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs(GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs $) {
        this.includeTagsAttribute = $.includeTagsAttribute;
        this.locked = $.locked;
        this.matchHostname = $.matchHostname;
        this.replaceAll = $.replaceAll;
        this.replacementHostname = $.replacementHostname;
        this.scope = $.scope;
        this.tagsAttribute = $.tagsAttribute;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeTagsAttribute Whether to include the `tagsAttribute` value.
         * 
         * @return builder
         * 
         */
        public Builder includeTagsAttribute(@Nullable Output<Boolean> includeTagsAttribute) {
            $.includeTagsAttribute = includeTagsAttribute;
            return this;
        }

        /**
         * @param includeTagsAttribute Whether to include the `tagsAttribute` value.
         * 
         * @return builder
         * 
         */
        public Builder includeTagsAttribute(Boolean includeTagsAttribute) {
            return includeTagsAttribute(Output.of(includeTagsAttribute));
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param matchHostname Specifies the hostname to match on as a Perl-compatible regular expression.
         * 
         * @return builder
         * 
         */
        public Builder matchHostname(@Nullable Output<String> matchHostname) {
            $.matchHostname = matchHostname;
            return this;
        }

        /**
         * @param matchHostname Specifies the hostname to match on as a Perl-compatible regular expression.
         * 
         * @return builder
         * 
         */
        public Builder matchHostname(String matchHostname) {
            return matchHostname(Output.of(matchHostname));
        }

        /**
         * @param replaceAll Replaces all matches when enabled, otherwise replaces only the first match.
         * 
         * @return builder
         * 
         */
        public Builder replaceAll(@Nullable Output<Boolean> replaceAll) {
            $.replaceAll = replaceAll;
            return this;
        }

        /**
         * @param replaceAll Replaces all matches when enabled, otherwise replaces only the first match.
         * 
         * @return builder
         * 
         */
        public Builder replaceAll(Boolean replaceAll) {
            return replaceAll(Output.of(replaceAll));
        }

        /**
         * @param replacementHostname Specifies the replacement hostname for the tag to use.
         * 
         * @return builder
         * 
         */
        public Builder replacementHostname(@Nullable Output<String> replacementHostname) {
            $.replacementHostname = replacementHostname;
            return this;
        }

        /**
         * @param replacementHostname Specifies the replacement hostname for the tag to use.
         * 
         * @return builder
         * 
         */
        public Builder replacementHostname(String replacementHostname) {
            return replacementHostname(Output.of(replacementHostname));
        }

        /**
         * @param scope Specifies the part of HTML content the `tagsAttribute` refers to.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Specifies the part of HTML content the `tagsAttribute` refers to.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param tagsAttribute Specifies the tag or tag/attribute combination to operate on.
         * 
         * @return builder
         * 
         */
        public Builder tagsAttribute(@Nullable Output<String> tagsAttribute) {
            $.tagsAttribute = tagsAttribute;
            return this;
        }

        /**
         * @param tagsAttribute Specifies the tag or tag/attribute combination to operate on.
         * 
         * @return builder
         * 
         */
        public Builder tagsAttribute(String tagsAttribute) {
            return tagsAttribute(Output.of(tagsAttribute));
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230105BehaviorAkamaizerTagArgs build() {
            return $;
        }
    }

}
