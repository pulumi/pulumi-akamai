// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey {
    private @Nullable String hue;
    private @Nullable String hueFeather;
    private @Nullable String hueFeatherVar;
    private @Nullable String hueTolerance;
    private @Nullable String hueToleranceVar;
    private @Nullable String hueVar;
    private @Nullable String lightnessFeather;
    private @Nullable String lightnessFeatherVar;
    private @Nullable String lightnessTolerance;
    private @Nullable String lightnessToleranceVar;
    private @Nullable String saturationFeather;
    private @Nullable String saturationFeatherVar;
    private @Nullable String saturationTolerance;
    private @Nullable String saturationToleranceVar;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey() {}
    public Optional<String> hue() {
        return Optional.ofNullable(this.hue);
    }
    public Optional<String> hueFeather() {
        return Optional.ofNullable(this.hueFeather);
    }
    public Optional<String> hueFeatherVar() {
        return Optional.ofNullable(this.hueFeatherVar);
    }
    public Optional<String> hueTolerance() {
        return Optional.ofNullable(this.hueTolerance);
    }
    public Optional<String> hueToleranceVar() {
        return Optional.ofNullable(this.hueToleranceVar);
    }
    public Optional<String> hueVar() {
        return Optional.ofNullable(this.hueVar);
    }
    public Optional<String> lightnessFeather() {
        return Optional.ofNullable(this.lightnessFeather);
    }
    public Optional<String> lightnessFeatherVar() {
        return Optional.ofNullable(this.lightnessFeatherVar);
    }
    public Optional<String> lightnessTolerance() {
        return Optional.ofNullable(this.lightnessTolerance);
    }
    public Optional<String> lightnessToleranceVar() {
        return Optional.ofNullable(this.lightnessToleranceVar);
    }
    public Optional<String> saturationFeather() {
        return Optional.ofNullable(this.saturationFeather);
    }
    public Optional<String> saturationFeatherVar() {
        return Optional.ofNullable(this.saturationFeatherVar);
    }
    public Optional<String> saturationTolerance() {
        return Optional.ofNullable(this.saturationTolerance);
    }
    public Optional<String> saturationToleranceVar() {
        return Optional.ofNullable(this.saturationToleranceVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hue;
        private @Nullable String hueFeather;
        private @Nullable String hueFeatherVar;
        private @Nullable String hueTolerance;
        private @Nullable String hueToleranceVar;
        private @Nullable String hueVar;
        private @Nullable String lightnessFeather;
        private @Nullable String lightnessFeatherVar;
        private @Nullable String lightnessTolerance;
        private @Nullable String lightnessToleranceVar;
        private @Nullable String saturationFeather;
        private @Nullable String saturationFeatherVar;
        private @Nullable String saturationTolerance;
        private @Nullable String saturationToleranceVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hue = defaults.hue;
    	      this.hueFeather = defaults.hueFeather;
    	      this.hueFeatherVar = defaults.hueFeatherVar;
    	      this.hueTolerance = defaults.hueTolerance;
    	      this.hueToleranceVar = defaults.hueToleranceVar;
    	      this.hueVar = defaults.hueVar;
    	      this.lightnessFeather = defaults.lightnessFeather;
    	      this.lightnessFeatherVar = defaults.lightnessFeatherVar;
    	      this.lightnessTolerance = defaults.lightnessTolerance;
    	      this.lightnessToleranceVar = defaults.lightnessToleranceVar;
    	      this.saturationFeather = defaults.saturationFeather;
    	      this.saturationFeatherVar = defaults.saturationFeatherVar;
    	      this.saturationTolerance = defaults.saturationTolerance;
    	      this.saturationToleranceVar = defaults.saturationToleranceVar;
        }

        @CustomType.Setter
        public Builder hue(@Nullable String hue) {
            this.hue = hue;
            return this;
        }
        @CustomType.Setter
        public Builder hueFeather(@Nullable String hueFeather) {
            this.hueFeather = hueFeather;
            return this;
        }
        @CustomType.Setter
        public Builder hueFeatherVar(@Nullable String hueFeatherVar) {
            this.hueFeatherVar = hueFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder hueTolerance(@Nullable String hueTolerance) {
            this.hueTolerance = hueTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder hueToleranceVar(@Nullable String hueToleranceVar) {
            this.hueToleranceVar = hueToleranceVar;
            return this;
        }
        @CustomType.Setter
        public Builder hueVar(@Nullable String hueVar) {
            this.hueVar = hueVar;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessFeather(@Nullable String lightnessFeather) {
            this.lightnessFeather = lightnessFeather;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessFeatherVar(@Nullable String lightnessFeatherVar) {
            this.lightnessFeatherVar = lightnessFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessTolerance(@Nullable String lightnessTolerance) {
            this.lightnessTolerance = lightnessTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessToleranceVar(@Nullable String lightnessToleranceVar) {
            this.lightnessToleranceVar = lightnessToleranceVar;
            return this;
        }
        @CustomType.Setter
        public Builder saturationFeather(@Nullable String saturationFeather) {
            this.saturationFeather = saturationFeather;
            return this;
        }
        @CustomType.Setter
        public Builder saturationFeatherVar(@Nullable String saturationFeatherVar) {
            this.saturationFeatherVar = saturationFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder saturationTolerance(@Nullable String saturationTolerance) {
            this.saturationTolerance = saturationTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder saturationToleranceVar(@Nullable String saturationToleranceVar) {
            this.saturationToleranceVar = saturationToleranceVar;
            return this;
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey build() {
            final var o = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationPortraitIfDimensionLessThanChromaKey();
            o.hue = hue;
            o.hueFeather = hueFeather;
            o.hueFeatherVar = hueFeatherVar;
            o.hueTolerance = hueTolerance;
            o.hueToleranceVar = hueToleranceVar;
            o.hueVar = hueVar;
            o.lightnessFeather = lightnessFeather;
            o.lightnessFeatherVar = lightnessFeatherVar;
            o.lightnessTolerance = lightnessTolerance;
            o.lightnessToleranceVar = lightnessToleranceVar;
            o.saturationFeather = saturationFeather;
            o.saturationFeatherVar = saturationFeatherVar;
            o.saturationTolerance = saturationTolerance;
            o.saturationToleranceVar = saturationToleranceVar;
            return o;
        }
    }
}
