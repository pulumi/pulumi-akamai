// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.IamApiClientPurgeOptionsCpCodeAccessArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;


public final class IamApiClientPurgeOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final IamApiClientPurgeOptionsArgs Empty = new IamApiClientPurgeOptionsArgs();

    /**
     * Whether the API client can purge content by cache tag.
     * 
     */
    @Import(name="canPurgeByCacheTag", required=true)
    private Output<Boolean> canPurgeByCacheTag;

    /**
     * @return Whether the API client can purge content by cache tag.
     * 
     */
    public Output<Boolean> canPurgeByCacheTag() {
        return this.canPurgeByCacheTag;
    }

    /**
     * Whether the API client can purge content by CP code.
     * 
     */
    @Import(name="canPurgeByCpCode", required=true)
    private Output<Boolean> canPurgeByCpCode;

    /**
     * @return Whether the API client can purge content by CP code.
     * 
     */
    public Output<Boolean> canPurgeByCpCode() {
        return this.canPurgeByCpCode;
    }

    /**
     * CP codes the API client can purge.
     * 
     */
    @Import(name="cpCodeAccess", required=true)
    private Output<IamApiClientPurgeOptionsCpCodeAccessArgs> cpCodeAccess;

    /**
     * @return CP codes the API client can purge.
     * 
     */
    public Output<IamApiClientPurgeOptionsCpCodeAccessArgs> cpCodeAccess() {
        return this.cpCodeAccess;
    }

    private IamApiClientPurgeOptionsArgs() {}

    private IamApiClientPurgeOptionsArgs(IamApiClientPurgeOptionsArgs $) {
        this.canPurgeByCacheTag = $.canPurgeByCacheTag;
        this.canPurgeByCpCode = $.canPurgeByCpCode;
        this.cpCodeAccess = $.cpCodeAccess;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IamApiClientPurgeOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IamApiClientPurgeOptionsArgs $;

        public Builder() {
            $ = new IamApiClientPurgeOptionsArgs();
        }

        public Builder(IamApiClientPurgeOptionsArgs defaults) {
            $ = new IamApiClientPurgeOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param canPurgeByCacheTag Whether the API client can purge content by cache tag.
         * 
         * @return builder
         * 
         */
        public Builder canPurgeByCacheTag(Output<Boolean> canPurgeByCacheTag) {
            $.canPurgeByCacheTag = canPurgeByCacheTag;
            return this;
        }

        /**
         * @param canPurgeByCacheTag Whether the API client can purge content by cache tag.
         * 
         * @return builder
         * 
         */
        public Builder canPurgeByCacheTag(Boolean canPurgeByCacheTag) {
            return canPurgeByCacheTag(Output.of(canPurgeByCacheTag));
        }

        /**
         * @param canPurgeByCpCode Whether the API client can purge content by CP code.
         * 
         * @return builder
         * 
         */
        public Builder canPurgeByCpCode(Output<Boolean> canPurgeByCpCode) {
            $.canPurgeByCpCode = canPurgeByCpCode;
            return this;
        }

        /**
         * @param canPurgeByCpCode Whether the API client can purge content by CP code.
         * 
         * @return builder
         * 
         */
        public Builder canPurgeByCpCode(Boolean canPurgeByCpCode) {
            return canPurgeByCpCode(Output.of(canPurgeByCpCode));
        }

        /**
         * @param cpCodeAccess CP codes the API client can purge.
         * 
         * @return builder
         * 
         */
        public Builder cpCodeAccess(Output<IamApiClientPurgeOptionsCpCodeAccessArgs> cpCodeAccess) {
            $.cpCodeAccess = cpCodeAccess;
            return this;
        }

        /**
         * @param cpCodeAccess CP codes the API client can purge.
         * 
         * @return builder
         * 
         */
        public Builder cpCodeAccess(IamApiClientPurgeOptionsCpCodeAccessArgs cpCodeAccess) {
            return cpCodeAccess(Output.of(cpCodeAccess));
        }

        public IamApiClientPurgeOptionsArgs build() {
            if ($.canPurgeByCacheTag == null) {
                throw new MissingRequiredPropertyException("IamApiClientPurgeOptionsArgs", "canPurgeByCacheTag");
            }
            if ($.canPurgeByCpCode == null) {
                throw new MissingRequiredPropertyException("IamApiClientPurgeOptionsArgs", "canPurgeByCpCode");
            }
            if ($.cpCodeAccess == null) {
                throw new MissingRequiredPropertyException("IamApiClientPurgeOptionsArgs", "cpCodeAccess");
            }
            return $;
        }
    }

}
