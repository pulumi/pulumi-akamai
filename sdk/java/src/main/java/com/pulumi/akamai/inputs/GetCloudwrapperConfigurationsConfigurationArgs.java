// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationLocationArgs;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationsConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetCloudwrapperConfigurationsConfigurationArgs Empty = new GetCloudwrapperConfigurationsConfigurationArgs();

    /**
     * Represents the threshold for sending alerts.
     * 
     */
    @Import(name="capacityAlertsThreshold", required=true)
    private Output<Integer> capacityAlertsThreshold;

    /**
     * @return Represents the threshold for sending alerts.
     * 
     */
    public Output<Integer> capacityAlertsThreshold() {
        return this.capacityAlertsThreshold;
    }

    /**
     * Additional information provided by user which can help to differentiate or track changes of the configuration.
     * 
     */
    @Import(name="comments", required=true)
    private Output<String> comments;

    /**
     * @return Additional information provided by user which can help to differentiate or track changes of the configuration.
     * 
     */
    public Output<String> comments() {
        return this.comments;
    }

    /**
     * Name of the configuration.
     * 
     */
    @Import(name="configName", required=true)
    private Output<String> configName;

    /**
     * @return Name of the configuration.
     * 
     */
    public Output<String> configName() {
        return this.configName;
    }

    /**
     * Contract ID with Cloud Wrapper entitlement.
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return Contract ID with Cloud Wrapper entitlement.
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * Unique identifier of a Cloud Wrapper configuration.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return Unique identifier of a Cloud Wrapper configuration.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * User to last activate the configuration.
     * 
     */
    @Import(name="lastActivatedBy", required=true)
    private Output<String> lastActivatedBy;

    /**
     * @return User to last activate the configuration.
     * 
     */
    public Output<String> lastActivatedBy() {
        return this.lastActivatedBy;
    }

    /**
     * ISO format date that represents when the configuration was last activated successfully.
     * 
     */
    @Import(name="lastActivatedDate", required=true)
    private Output<String> lastActivatedDate;

    /**
     * @return ISO format date that represents when the configuration was last activated successfully.
     * 
     */
    public Output<String> lastActivatedDate() {
        return this.lastActivatedDate;
    }

    /**
     * User to last modify the configuration.
     * 
     */
    @Import(name="lastUpdatedBy", required=true)
    private Output<String> lastUpdatedBy;

    /**
     * @return User to last modify the configuration.
     * 
     */
    public Output<String> lastUpdatedBy() {
        return this.lastUpdatedBy;
    }

    /**
     * ISO format date that represents when the configuration was last edited.
     * 
     */
    @Import(name="lastUpdatedDate", required=true)
    private Output<String> lastUpdatedDate;

    /**
     * @return ISO format date that represents when the configuration was last edited.
     * 
     */
    public Output<String> lastUpdatedDate() {
        return this.lastUpdatedDate;
    }

    /**
     * List of all unused properties.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<GetCloudwrapperConfigurationsConfigurationLocationArgs>> locations;

    /**
     * @return List of all unused properties.
     * 
     */
    public Optional<Output<List<GetCloudwrapperConfigurationsConfigurationLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Specify details about the Multi CDN settings.
     * 
     */
    @Import(name="multiCdnSettings")
    private @Nullable Output<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs> multiCdnSettings;

    /**
     * @return Specify details about the Multi CDN settings.
     * 
     */
    public Optional<Output<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs>> multiCdnSettings() {
        return Optional.ofNullable(this.multiCdnSettings);
    }

    /**
     * Email addresses to receive notifications.
     * 
     */
    @Import(name="notificationEmails", required=true)
    private Output<List<String>> notificationEmails;

    /**
     * @return Email addresses to receive notifications.
     * 
     */
    public Output<List<String>> notificationEmails() {
        return this.notificationEmails;
    }

    /**
     * List of properties belonging to media delivery products. Properties need to be unique across configurations.
     * 
     */
    @Import(name="propertyIds", required=true)
    private Output<List<String>> propertyIds;

    /**
     * @return List of properties belonging to media delivery products. Properties need to be unique across configurations.
     * 
     */
    public Output<List<String>> propertyIds() {
        return this.propertyIds;
    }

    /**
     * Retain idle objects beyond their max idle lifetime.
     * 
     */
    @Import(name="retainIdleObjects", required=true)
    private Output<Boolean> retainIdleObjects;

    /**
     * @return Retain idle objects beyond their max idle lifetime.
     * 
     */
    public Output<Boolean> retainIdleObjects() {
        return this.retainIdleObjects;
    }

    /**
     * Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    private GetCloudwrapperConfigurationsConfigurationArgs() {}

    private GetCloudwrapperConfigurationsConfigurationArgs(GetCloudwrapperConfigurationsConfigurationArgs $) {
        this.capacityAlertsThreshold = $.capacityAlertsThreshold;
        this.comments = $.comments;
        this.configName = $.configName;
        this.contractId = $.contractId;
        this.id = $.id;
        this.lastActivatedBy = $.lastActivatedBy;
        this.lastActivatedDate = $.lastActivatedDate;
        this.lastUpdatedBy = $.lastUpdatedBy;
        this.lastUpdatedDate = $.lastUpdatedDate;
        this.locations = $.locations;
        this.multiCdnSettings = $.multiCdnSettings;
        this.notificationEmails = $.notificationEmails;
        this.propertyIds = $.propertyIds;
        this.retainIdleObjects = $.retainIdleObjects;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationArgs $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationArgs();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationArgs defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityAlertsThreshold Represents the threshold for sending alerts.
         * 
         * @return builder
         * 
         */
        public Builder capacityAlertsThreshold(Output<Integer> capacityAlertsThreshold) {
            $.capacityAlertsThreshold = capacityAlertsThreshold;
            return this;
        }

        /**
         * @param capacityAlertsThreshold Represents the threshold for sending alerts.
         * 
         * @return builder
         * 
         */
        public Builder capacityAlertsThreshold(Integer capacityAlertsThreshold) {
            return capacityAlertsThreshold(Output.of(capacityAlertsThreshold));
        }

        /**
         * @param comments Additional information provided by user which can help to differentiate or track changes of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder comments(Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments Additional information provided by user which can help to differentiate or track changes of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param configName Name of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configName(Output<String> configName) {
            $.configName = configName;
            return this;
        }

        /**
         * @param configName Name of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder configName(String configName) {
            return configName(Output.of(configName));
        }

        /**
         * @param contractId Contract ID with Cloud Wrapper entitlement.
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID with Cloud Wrapper entitlement.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param id Unique identifier of a Cloud Wrapper configuration.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier of a Cloud Wrapper configuration.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param lastActivatedBy User to last activate the configuration.
         * 
         * @return builder
         * 
         */
        public Builder lastActivatedBy(Output<String> lastActivatedBy) {
            $.lastActivatedBy = lastActivatedBy;
            return this;
        }

        /**
         * @param lastActivatedBy User to last activate the configuration.
         * 
         * @return builder
         * 
         */
        public Builder lastActivatedBy(String lastActivatedBy) {
            return lastActivatedBy(Output.of(lastActivatedBy));
        }

        /**
         * @param lastActivatedDate ISO format date that represents when the configuration was last activated successfully.
         * 
         * @return builder
         * 
         */
        public Builder lastActivatedDate(Output<String> lastActivatedDate) {
            $.lastActivatedDate = lastActivatedDate;
            return this;
        }

        /**
         * @param lastActivatedDate ISO format date that represents when the configuration was last activated successfully.
         * 
         * @return builder
         * 
         */
        public Builder lastActivatedDate(String lastActivatedDate) {
            return lastActivatedDate(Output.of(lastActivatedDate));
        }

        /**
         * @param lastUpdatedBy User to last modify the configuration.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(Output<String> lastUpdatedBy) {
            $.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        /**
         * @param lastUpdatedBy User to last modify the configuration.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedBy(String lastUpdatedBy) {
            return lastUpdatedBy(Output.of(lastUpdatedBy));
        }

        /**
         * @param lastUpdatedDate ISO format date that represents when the configuration was last edited.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedDate(Output<String> lastUpdatedDate) {
            $.lastUpdatedDate = lastUpdatedDate;
            return this;
        }

        /**
         * @param lastUpdatedDate ISO format date that represents when the configuration was last edited.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedDate(String lastUpdatedDate) {
            return lastUpdatedDate(Output.of(lastUpdatedDate));
        }

        /**
         * @param locations List of all unused properties.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<GetCloudwrapperConfigurationsConfigurationLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations List of all unused properties.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<GetCloudwrapperConfigurationsConfigurationLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations List of all unused properties.
         * 
         * @return builder
         * 
         */
        public Builder locations(GetCloudwrapperConfigurationsConfigurationLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param multiCdnSettings Specify details about the Multi CDN settings.
         * 
         * @return builder
         * 
         */
        public Builder multiCdnSettings(@Nullable Output<GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs> multiCdnSettings) {
            $.multiCdnSettings = multiCdnSettings;
            return this;
        }

        /**
         * @param multiCdnSettings Specify details about the Multi CDN settings.
         * 
         * @return builder
         * 
         */
        public Builder multiCdnSettings(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsArgs multiCdnSettings) {
            return multiCdnSettings(Output.of(multiCdnSettings));
        }

        /**
         * @param notificationEmails Email addresses to receive notifications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(Output<List<String>> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        /**
         * @param notificationEmails Email addresses to receive notifications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(List<String> notificationEmails) {
            return notificationEmails(Output.of(notificationEmails));
        }

        /**
         * @param notificationEmails Email addresses to receive notifications.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        /**
         * @param propertyIds List of properties belonging to media delivery products. Properties need to be unique across configurations.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(Output<List<String>> propertyIds) {
            $.propertyIds = propertyIds;
            return this;
        }

        /**
         * @param propertyIds List of properties belonging to media delivery products. Properties need to be unique across configurations.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(List<String> propertyIds) {
            return propertyIds(Output.of(propertyIds));
        }

        /**
         * @param propertyIds List of properties belonging to media delivery products. Properties need to be unique across configurations.
         * 
         * @return builder
         * 
         */
        public Builder propertyIds(String... propertyIds) {
            return propertyIds(List.of(propertyIds));
        }

        /**
         * @param retainIdleObjects Retain idle objects beyond their max idle lifetime.
         * 
         * @return builder
         * 
         */
        public Builder retainIdleObjects(Output<Boolean> retainIdleObjects) {
            $.retainIdleObjects = retainIdleObjects;
            return this;
        }

        /**
         * @param retainIdleObjects Retain idle objects beyond their max idle lifetime.
         * 
         * @return builder
         * 
         */
        public Builder retainIdleObjects(Boolean retainIdleObjects) {
            return retainIdleObjects(Output.of(retainIdleObjects));
        }

        /**
         * @param status Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current state of the provisioning of the configuration, either SAVED, IN_PROGRESS, ACTIVE, DELETE_IN_PROGRESS, or FAILED.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetCloudwrapperConfigurationsConfigurationArgs build() {
            if ($.capacityAlertsThreshold == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "capacityAlertsThreshold");
            }
            if ($.comments == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "comments");
            }
            if ($.configName == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "configName");
            }
            if ($.contractId == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "contractId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "id");
            }
            if ($.lastActivatedBy == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "lastActivatedBy");
            }
            if ($.lastActivatedDate == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "lastActivatedDate");
            }
            if ($.lastUpdatedBy == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "lastUpdatedBy");
            }
            if ($.lastUpdatedDate == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "lastUpdatedDate");
            }
            if ($.notificationEmails == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "notificationEmails");
            }
            if ($.propertyIds == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "propertyIds");
            }
            if ($.retainIdleObjects == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "retainIdleObjects");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationArgs", "status");
            }
            return $;
        }
    }

}
