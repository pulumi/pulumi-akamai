// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicy;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCode;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorage;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization Empty = new GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization();

    /**
     * Sets advanced configuration options for the allowed user&#39;s cookie.
     * 
     */
    @Import(name="allowedUserCookieAdvanced")
    private @Nullable Boolean allowedUserCookieAdvanced;

    /**
     * @return Sets advanced configuration options for the allowed user&#39;s cookie.
     * 
     */
    public Optional<Boolean> allowedUserCookieAdvanced() {
        return Optional.ofNullable(this.allowedUserCookieAdvanced);
    }

    /**
     * Sets an automatic `salt` value to verify the integrity of the cookie for an allowed user. Disable this if you want to share the cookie across properties.
     * 
     */
    @Import(name="allowedUserCookieAutomaticSalt")
    private @Nullable Boolean allowedUserCookieAutomaticSalt;

    /**
     * @return Sets an automatic `salt` value to verify the integrity of the cookie for an allowed user. Disable this if you want to share the cookie across properties.
     * 
     */
    public Optional<Boolean> allowedUserCookieAutomaticSalt() {
        return Optional.ofNullable(this.allowedUserCookieAutomaticSalt);
    }

    /**
     * Specifies a domain for an allowed user cookie.
     * 
     */
    @Import(name="allowedUserCookieDomain")
    private @Nullable String allowedUserCookieDomain;

    /**
     * @return Specifies a domain for an allowed user cookie.
     * 
     */
    public Optional<String> allowedUserCookieDomain() {
        return Optional.ofNullable(this.allowedUserCookieDomain);
    }

    /**
     * Specify with `allowedUserCookieAdvanced` enabled.
     * 
     */
    @Import(name="allowedUserCookieDomainType")
    private @Nullable String allowedUserCookieDomainType;

    /**
     * @return Specify with `allowedUserCookieAdvanced` enabled.
     * 
     */
    public Optional<String> allowedUserCookieDomainType() {
        return Optional.ofNullable(this.allowedUserCookieDomainType);
    }

    /**
     * Sets the number of seconds for the allowed user&#39;s session once allowed through to the site.
     * 
     */
    @Import(name="allowedUserCookieDuration")
    private @Nullable Integer allowedUserCookieDuration;

    /**
     * @return Sets the number of seconds for the allowed user&#39;s session once allowed through to the site.
     * 
     */
    public Optional<Integer> allowedUserCookieDuration() {
        return Optional.ofNullable(this.allowedUserCookieDuration);
    }

    /**
     * Sets a cookie for users who have been allowed through to the site.
     * 
     */
    @Import(name="allowedUserCookieEnabled")
    private @Nullable Boolean allowedUserCookieEnabled;

    /**
     * @return Sets a cookie for users who have been allowed through to the site.
     * 
     */
    public Optional<Boolean> allowedUserCookieEnabled() {
        return Optional.ofNullable(this.allowedUserCookieEnabled);
    }

    /**
     * Applies the `HttpOnly` flag to the allowed user&#39;s cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
     * 
     */
    @Import(name="allowedUserCookieHttpOnly")
    private @Nullable Boolean allowedUserCookieHttpOnly;

    /**
     * @return Applies the `HttpOnly` flag to the allowed user&#39;s cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
     * 
     */
    public Optional<Boolean> allowedUserCookieHttpOnly() {
        return Optional.ofNullable(this.allowedUserCookieHttpOnly);
    }

    /**
     * Specifies a label to distinguish this cookie for an allowed user from others. The value appends to the cookie&#39;s name, and helps you to maintain the same user assignment across behaviors within a property, and across properties.
     * 
     */
    @Import(name="allowedUserCookieLabel")
    private @Nullable String allowedUserCookieLabel;

    /**
     * @return Specifies a label to distinguish this cookie for an allowed user from others. The value appends to the cookie&#39;s name, and helps you to maintain the same user assignment across behaviors within a property, and across properties.
     * 
     */
    public Optional<String> allowedUserCookieLabel() {
        return Optional.ofNullable(this.allowedUserCookieLabel);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="allowedUserCookieManagementTitle")
    private @Nullable String allowedUserCookieManagementTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> allowedUserCookieManagementTitle() {
        return Optional.ofNullable(this.allowedUserCookieManagementTitle);
    }

    /**
     * Resets the duration of an allowed cookie with each request, so that it only expires if the user doesn&#39;t make any requests for the specified duration. Do not enable this option if you want to set a fixed time for all users.
     * 
     */
    @Import(name="allowedUserCookieRefresh")
    private @Nullable Boolean allowedUserCookieRefresh;

    /**
     * @return Resets the duration of an allowed cookie with each request, so that it only expires if the user doesn&#39;t make any requests for the specified duration. Do not enable this option if you want to set a fixed time for all users.
     * 
     */
    public Optional<Boolean> allowedUserCookieRefresh() {
        return Optional.ofNullable(this.allowedUserCookieRefresh);
    }

    /**
     * Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie to all allowed users.
     * 
     */
    @Import(name="allowedUserCookieSalt")
    private @Nullable String allowedUserCookieSalt;

    /**
     * @return Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie to all allowed users.
     * 
     */
    public Optional<String> allowedUserCookieSalt() {
        return Optional.ofNullable(this.allowedUserCookieSalt);
    }

    /**
     * Identifies the Cloudlet policy.
     * 
     */
    @Import(name="cloudletPolicy")
    private @Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicy cloudletPolicy;

    /**
     * @return Identifies the Cloudlet policy.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicy> cloudletPolicy() {
        return Optional.ofNullable(this.cloudletPolicy);
    }

    /**
     * Enables the Visitor Prioritization behavior.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enables the Visitor Prioritization behavior.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * When enabled, identifies users by the value of a cookie.
     * 
     */
    @Import(name="userIdentificationByCookie")
    private @Nullable Boolean userIdentificationByCookie;

    /**
     * @return When enabled, identifies users by the value of a cookie.
     * 
     */
    public Optional<Boolean> userIdentificationByCookie() {
        return Optional.ofNullable(this.userIdentificationByCookie);
    }

    /**
     * When enabled, identifies users by the values of GET or POST request headers.
     * 
     */
    @Import(name="userIdentificationByHeaders")
    private @Nullable Boolean userIdentificationByHeaders;

    /**
     * @return When enabled, identifies users by the values of GET or POST request headers.
     * 
     */
    public Optional<Boolean> userIdentificationByHeaders() {
        return Optional.ofNullable(this.userIdentificationByHeaders);
    }

    /**
     * Allows IP addresses to identify users.
     * 
     */
    @Import(name="userIdentificationByIp")
    private @Nullable Boolean userIdentificationByIp;

    /**
     * @return Allows IP addresses to identify users.
     * 
     */
    public Optional<Boolean> userIdentificationByIp() {
        return Optional.ofNullable(this.userIdentificationByIp);
    }

    /**
     * When enabled, identifies users by the values of GET or POST request parameters.
     * 
     */
    @Import(name="userIdentificationByParams")
    private @Nullable Boolean userIdentificationByParams;

    /**
     * @return When enabled, identifies users by the values of GET or POST request parameters.
     * 
     */
    public Optional<Boolean> userIdentificationByParams() {
        return Optional.ofNullable(this.userIdentificationByParams);
    }

    /**
     * Specifies the name of the cookie whose value identifies users. To match a user, the value of the cookie needs to remain constant across all requests.
     * 
     */
    @Import(name="userIdentificationKeyCookie")
    private @Nullable String userIdentificationKeyCookie;

    /**
     * @return Specifies the name of the cookie whose value identifies users. To match a user, the value of the cookie needs to remain constant across all requests.
     * 
     */
    public Optional<String> userIdentificationKeyCookie() {
        return Optional.ofNullable(this.userIdentificationKeyCookie);
    }

    /**
     * Specifies names of request headers whose values identify users. To match a user, values for all the specified headers need to remain constant across all requests.
     * 
     */
    @Import(name="userIdentificationKeyHeaders")
    private @Nullable List<String> userIdentificationKeyHeaders;

    /**
     * @return Specifies names of request headers whose values identify users. To match a user, values for all the specified headers need to remain constant across all requests.
     * 
     */
    public Optional<List<String>> userIdentificationKeyHeaders() {
        return Optional.ofNullable(this.userIdentificationKeyHeaders);
    }

    /**
     * Specifies names of request parameters whose values identify users. To match a user, values for all the specified parameters need to remain constant across all requests. Parameters that are absent or blank may also identify users.
     * 
     */
    @Import(name="userIdentificationKeyParams")
    private @Nullable List<String> userIdentificationKeyParams;

    /**
     * @return Specifies names of request parameters whose values identify users. To match a user, values for all the specified parameters need to remain constant across all requests. Parameters that are absent or blank may also identify users.
     * 
     */
    public Optional<List<String>> userIdentificationKeyParams() {
        return Optional.ofNullable(this.userIdentificationKeyParams);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="userIdentificationTitle")
    private @Nullable String userIdentificationTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> userIdentificationTitle() {
        return Optional.ofNullable(this.userIdentificationTitle);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Specifies the waiting room page&#39;s time to live in the cache, `5` minutes by default.
     * 
     */
    @Import(name="waitingRoomCacheTtl")
    private @Nullable Integer waitingRoomCacheTtl;

    /**
     * @return Specifies the waiting room page&#39;s time to live in the cache, `5` minutes by default.
     * 
     */
    public Optional<Integer> waitingRoomCacheTtl() {
        return Optional.ofNullable(this.waitingRoomCacheTtl);
    }

    /**
     * When enabled along with `waitingRoomCookieEnabled`, sets advanced configuration options for the waiting room cookie.
     * 
     */
    @Import(name="waitingRoomCookieAdvanced")
    private @Nullable Boolean waitingRoomCookieAdvanced;

    /**
     * @return When enabled along with `waitingRoomCookieEnabled`, sets advanced configuration options for the waiting room cookie.
     * 
     */
    public Optional<Boolean> waitingRoomCookieAdvanced() {
        return Optional.ofNullable(this.waitingRoomCookieAdvanced);
    }

    /**
     * Sets an automatic `salt` value to verify the integrity of the waiting room cookie.  Disable this if you want to share the cookie across properties.
     * 
     */
    @Import(name="waitingRoomCookieAutomaticSalt")
    private @Nullable Boolean waitingRoomCookieAutomaticSalt;

    /**
     * @return Sets an automatic `salt` value to verify the integrity of the waiting room cookie.  Disable this if you want to share the cookie across properties.
     * 
     */
    public Optional<Boolean> waitingRoomCookieAutomaticSalt() {
        return Optional.ofNullable(this.waitingRoomCookieAutomaticSalt);
    }

    /**
     * Specifies a domain for the waiting room cookie.
     * 
     */
    @Import(name="waitingRoomCookieDomain")
    private @Nullable String waitingRoomCookieDomain;

    /**
     * @return Specifies a domain for the waiting room cookie.
     * 
     */
    public Optional<String> waitingRoomCookieDomain() {
        return Optional.ofNullable(this.waitingRoomCookieDomain);
    }

    /**
     * Specify with `waitingRoomCookieAdvanced` enabled, selects whether to use the `DYNAMIC` incoming host header, or a `CUSTOMER`-defined cookie domain.
     * 
     */
    @Import(name="waitingRoomCookieDomainType")
    private @Nullable String waitingRoomCookieDomainType;

    /**
     * @return Specify with `waitingRoomCookieAdvanced` enabled, selects whether to use the `DYNAMIC` incoming host header, or a `CUSTOMER`-defined cookie domain.
     * 
     */
    public Optional<String> waitingRoomCookieDomainType() {
        return Optional.ofNullable(this.waitingRoomCookieDomainType);
    }

    /**
     * Sets the number of seconds for which users remain in the waiting room. During this time, users who refresh the waiting room page remain there.
     * 
     */
    @Import(name="waitingRoomCookieDuration")
    private @Nullable Integer waitingRoomCookieDuration;

    /**
     * @return Sets the number of seconds for which users remain in the waiting room. During this time, users who refresh the waiting room page remain there.
     * 
     */
    public Optional<Integer> waitingRoomCookieDuration() {
        return Optional.ofNullable(this.waitingRoomCookieDuration);
    }

    /**
     * Enables a cookie to track a waiting room assignment.
     * 
     */
    @Import(name="waitingRoomCookieEnabled")
    private @Nullable Boolean waitingRoomCookieEnabled;

    /**
     * @return Enables a cookie to track a waiting room assignment.
     * 
     */
    public Optional<Boolean> waitingRoomCookieEnabled() {
        return Optional.ofNullable(this.waitingRoomCookieEnabled);
    }

    /**
     * Applies the `HttpOnly` flag to the waiting room cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
     * 
     */
    @Import(name="waitingRoomCookieHttpOnly")
    private @Nullable Boolean waitingRoomCookieHttpOnly;

    /**
     * @return Applies the `HttpOnly` flag to the waiting room cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
     * 
     */
    public Optional<Boolean> waitingRoomCookieHttpOnly() {
        return Optional.ofNullable(this.waitingRoomCookieHttpOnly);
    }

    /**
     * Specifies a label to distinguish this waiting room cookie from others. The value appends to the cookie&#39;s name, and helps you to maintain the same waiting room assignment across behaviors within a property, and across properties.
     * 
     */
    @Import(name="waitingRoomCookieLabel")
    private @Nullable String waitingRoomCookieLabel;

    /**
     * @return Specifies a label to distinguish this waiting room cookie from others. The value appends to the cookie&#39;s name, and helps you to maintain the same waiting room assignment across behaviors within a property, and across properties.
     * 
     */
    public Optional<String> waitingRoomCookieLabel() {
        return Optional.ofNullable(this.waitingRoomCookieLabel);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="waitingRoomCookieManagementTitle")
    private @Nullable String waitingRoomCookieManagementTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> waitingRoomCookieManagementTitle() {
        return Optional.ofNullable(this.waitingRoomCookieManagementTitle);
    }

    /**
     * Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie for the waiting room session.
     * 
     */
    @Import(name="waitingRoomCookieSalt")
    private @Nullable String waitingRoomCookieSalt;

    /**
     * @return Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie for the waiting room session.
     * 
     */
    public Optional<String> waitingRoomCookieSalt() {
        return Optional.ofNullable(this.waitingRoomCookieSalt);
    }

    /**
     * Enabling this option shares the same `allowedUserCookieLabel` string. If disabled, specify a different `waitingRoomCookieLabel`.
     * 
     */
    @Import(name="waitingRoomCookieShareLabel")
    private @Nullable Boolean waitingRoomCookieShareLabel;

    /**
     * @return Enabling this option shares the same `allowedUserCookieLabel` string. If disabled, specify a different `waitingRoomCookieLabel`.
     * 
     */
    public Optional<Boolean> waitingRoomCookieShareLabel() {
        return Optional.ofNullable(this.waitingRoomCookieShareLabel);
    }

    /**
     * Specifies a CP code for requests sent to the waiting room. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    @Import(name="waitingRoomCpCode")
    private @Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCode waitingRoomCpCode;

    /**
     * @return Specifies a CP code for requests sent to the waiting room. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCode> waitingRoomCpCode() {
        return Optional.ofNullable(this.waitingRoomCpCode);
    }

    /**
     * Specifies the NetStorage directory that contains the static waiting room page, with no trailing slash character.
     * 
     */
    @Import(name="waitingRoomDirectory")
    private @Nullable String waitingRoomDirectory;

    /**
     * @return Specifies the NetStorage directory that contains the static waiting room page, with no trailing slash character.
     * 
     */
    public Optional<String> waitingRoomDirectory() {
        return Optional.ofNullable(this.waitingRoomDirectory);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="waitingRoomManagementTitle")
    private @Nullable String waitingRoomManagementTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> waitingRoomManagementTitle() {
        return Optional.ofNullable(this.waitingRoomManagementTitle);
    }

    /**
     * Specifies the NetStorage domain for the waiting room page.
     * 
     */
    @Import(name="waitingRoomNetStorage")
    private @Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorage waitingRoomNetStorage;

    /**
     * @return Specifies the NetStorage domain for the waiting room page.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorage> waitingRoomNetStorage() {
        return Optional.ofNullable(this.waitingRoomNetStorage);
    }

    /**
     * Specifies the response code for requests sent to the waiting room.
     * 
     */
    @Import(name="waitingRoomStatusCode")
    private @Nullable Integer waitingRoomStatusCode;

    /**
     * @return Specifies the response code for requests sent to the waiting room.
     * 
     */
    public Optional<Integer> waitingRoomStatusCode() {
        return Optional.ofNullable(this.waitingRoomStatusCode);
    }

    /**
     * Allows you to assign a different CP code that tracks any requests that are sent to the waiting room.
     * 
     */
    @Import(name="waitingRoomUseCpCode")
    private @Nullable Boolean waitingRoomUseCpCode;

    /**
     * @return Allows you to assign a different CP code that tracks any requests that are sent to the waiting room.
     * 
     */
    public Optional<Boolean> waitingRoomUseCpCode() {
        return Optional.ofNullable(this.waitingRoomUseCpCode);
    }

    private GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization() {}

    private GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization(GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization $) {
        this.allowedUserCookieAdvanced = $.allowedUserCookieAdvanced;
        this.allowedUserCookieAutomaticSalt = $.allowedUserCookieAutomaticSalt;
        this.allowedUserCookieDomain = $.allowedUserCookieDomain;
        this.allowedUserCookieDomainType = $.allowedUserCookieDomainType;
        this.allowedUserCookieDuration = $.allowedUserCookieDuration;
        this.allowedUserCookieEnabled = $.allowedUserCookieEnabled;
        this.allowedUserCookieHttpOnly = $.allowedUserCookieHttpOnly;
        this.allowedUserCookieLabel = $.allowedUserCookieLabel;
        this.allowedUserCookieManagementTitle = $.allowedUserCookieManagementTitle;
        this.allowedUserCookieRefresh = $.allowedUserCookieRefresh;
        this.allowedUserCookieSalt = $.allowedUserCookieSalt;
        this.cloudletPolicy = $.cloudletPolicy;
        this.enabled = $.enabled;
        this.locked = $.locked;
        this.templateUuid = $.templateUuid;
        this.userIdentificationByCookie = $.userIdentificationByCookie;
        this.userIdentificationByHeaders = $.userIdentificationByHeaders;
        this.userIdentificationByIp = $.userIdentificationByIp;
        this.userIdentificationByParams = $.userIdentificationByParams;
        this.userIdentificationKeyCookie = $.userIdentificationKeyCookie;
        this.userIdentificationKeyHeaders = $.userIdentificationKeyHeaders;
        this.userIdentificationKeyParams = $.userIdentificationKeyParams;
        this.userIdentificationTitle = $.userIdentificationTitle;
        this.uuid = $.uuid;
        this.waitingRoomCacheTtl = $.waitingRoomCacheTtl;
        this.waitingRoomCookieAdvanced = $.waitingRoomCookieAdvanced;
        this.waitingRoomCookieAutomaticSalt = $.waitingRoomCookieAutomaticSalt;
        this.waitingRoomCookieDomain = $.waitingRoomCookieDomain;
        this.waitingRoomCookieDomainType = $.waitingRoomCookieDomainType;
        this.waitingRoomCookieDuration = $.waitingRoomCookieDuration;
        this.waitingRoomCookieEnabled = $.waitingRoomCookieEnabled;
        this.waitingRoomCookieHttpOnly = $.waitingRoomCookieHttpOnly;
        this.waitingRoomCookieLabel = $.waitingRoomCookieLabel;
        this.waitingRoomCookieManagementTitle = $.waitingRoomCookieManagementTitle;
        this.waitingRoomCookieSalt = $.waitingRoomCookieSalt;
        this.waitingRoomCookieShareLabel = $.waitingRoomCookieShareLabel;
        this.waitingRoomCpCode = $.waitingRoomCpCode;
        this.waitingRoomDirectory = $.waitingRoomDirectory;
        this.waitingRoomManagementTitle = $.waitingRoomManagementTitle;
        this.waitingRoomNetStorage = $.waitingRoomNetStorage;
        this.waitingRoomStatusCode = $.waitingRoomStatusCode;
        this.waitingRoomUseCpCode = $.waitingRoomUseCpCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedUserCookieAdvanced Sets advanced configuration options for the allowed user&#39;s cookie.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieAdvanced(@Nullable Boolean allowedUserCookieAdvanced) {
            $.allowedUserCookieAdvanced = allowedUserCookieAdvanced;
            return this;
        }

        /**
         * @param allowedUserCookieAutomaticSalt Sets an automatic `salt` value to verify the integrity of the cookie for an allowed user. Disable this if you want to share the cookie across properties.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieAutomaticSalt(@Nullable Boolean allowedUserCookieAutomaticSalt) {
            $.allowedUserCookieAutomaticSalt = allowedUserCookieAutomaticSalt;
            return this;
        }

        /**
         * @param allowedUserCookieDomain Specifies a domain for an allowed user cookie.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieDomain(@Nullable String allowedUserCookieDomain) {
            $.allowedUserCookieDomain = allowedUserCookieDomain;
            return this;
        }

        /**
         * @param allowedUserCookieDomainType Specify with `allowedUserCookieAdvanced` enabled.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieDomainType(@Nullable String allowedUserCookieDomainType) {
            $.allowedUserCookieDomainType = allowedUserCookieDomainType;
            return this;
        }

        /**
         * @param allowedUserCookieDuration Sets the number of seconds for the allowed user&#39;s session once allowed through to the site.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieDuration(@Nullable Integer allowedUserCookieDuration) {
            $.allowedUserCookieDuration = allowedUserCookieDuration;
            return this;
        }

        /**
         * @param allowedUserCookieEnabled Sets a cookie for users who have been allowed through to the site.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieEnabled(@Nullable Boolean allowedUserCookieEnabled) {
            $.allowedUserCookieEnabled = allowedUserCookieEnabled;
            return this;
        }

        /**
         * @param allowedUserCookieHttpOnly Applies the `HttpOnly` flag to the allowed user&#39;s cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieHttpOnly(@Nullable Boolean allowedUserCookieHttpOnly) {
            $.allowedUserCookieHttpOnly = allowedUserCookieHttpOnly;
            return this;
        }

        /**
         * @param allowedUserCookieLabel Specifies a label to distinguish this cookie for an allowed user from others. The value appends to the cookie&#39;s name, and helps you to maintain the same user assignment across behaviors within a property, and across properties.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieLabel(@Nullable String allowedUserCookieLabel) {
            $.allowedUserCookieLabel = allowedUserCookieLabel;
            return this;
        }

        /**
         * @param allowedUserCookieManagementTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieManagementTitle(@Nullable String allowedUserCookieManagementTitle) {
            $.allowedUserCookieManagementTitle = allowedUserCookieManagementTitle;
            return this;
        }

        /**
         * @param allowedUserCookieRefresh Resets the duration of an allowed cookie with each request, so that it only expires if the user doesn&#39;t make any requests for the specified duration. Do not enable this option if you want to set a fixed time for all users.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieRefresh(@Nullable Boolean allowedUserCookieRefresh) {
            $.allowedUserCookieRefresh = allowedUserCookieRefresh;
            return this;
        }

        /**
         * @param allowedUserCookieSalt Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie to all allowed users.
         * 
         * @return builder
         * 
         */
        public Builder allowedUserCookieSalt(@Nullable String allowedUserCookieSalt) {
            $.allowedUserCookieSalt = allowedUserCookieSalt;
            return this;
        }

        /**
         * @param cloudletPolicy Identifies the Cloudlet policy.
         * 
         * @return builder
         * 
         */
        public Builder cloudletPolicy(@Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationCloudletPolicy cloudletPolicy) {
            $.cloudletPolicy = cloudletPolicy;
            return this;
        }

        /**
         * @param enabled Enables the Visitor Prioritization behavior.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param userIdentificationByCookie When enabled, identifies users by the value of a cookie.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationByCookie(@Nullable Boolean userIdentificationByCookie) {
            $.userIdentificationByCookie = userIdentificationByCookie;
            return this;
        }

        /**
         * @param userIdentificationByHeaders When enabled, identifies users by the values of GET or POST request headers.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationByHeaders(@Nullable Boolean userIdentificationByHeaders) {
            $.userIdentificationByHeaders = userIdentificationByHeaders;
            return this;
        }

        /**
         * @param userIdentificationByIp Allows IP addresses to identify users.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationByIp(@Nullable Boolean userIdentificationByIp) {
            $.userIdentificationByIp = userIdentificationByIp;
            return this;
        }

        /**
         * @param userIdentificationByParams When enabled, identifies users by the values of GET or POST request parameters.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationByParams(@Nullable Boolean userIdentificationByParams) {
            $.userIdentificationByParams = userIdentificationByParams;
            return this;
        }

        /**
         * @param userIdentificationKeyCookie Specifies the name of the cookie whose value identifies users. To match a user, the value of the cookie needs to remain constant across all requests.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationKeyCookie(@Nullable String userIdentificationKeyCookie) {
            $.userIdentificationKeyCookie = userIdentificationKeyCookie;
            return this;
        }

        /**
         * @param userIdentificationKeyHeaders Specifies names of request headers whose values identify users. To match a user, values for all the specified headers need to remain constant across all requests.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationKeyHeaders(@Nullable List<String> userIdentificationKeyHeaders) {
            $.userIdentificationKeyHeaders = userIdentificationKeyHeaders;
            return this;
        }

        /**
         * @param userIdentificationKeyHeaders Specifies names of request headers whose values identify users. To match a user, values for all the specified headers need to remain constant across all requests.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationKeyHeaders(String... userIdentificationKeyHeaders) {
            return userIdentificationKeyHeaders(List.of(userIdentificationKeyHeaders));
        }

        /**
         * @param userIdentificationKeyParams Specifies names of request parameters whose values identify users. To match a user, values for all the specified parameters need to remain constant across all requests. Parameters that are absent or blank may also identify users.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationKeyParams(@Nullable List<String> userIdentificationKeyParams) {
            $.userIdentificationKeyParams = userIdentificationKeyParams;
            return this;
        }

        /**
         * @param userIdentificationKeyParams Specifies names of request parameters whose values identify users. To match a user, values for all the specified parameters need to remain constant across all requests. Parameters that are absent or blank may also identify users.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationKeyParams(String... userIdentificationKeyParams) {
            return userIdentificationKeyParams(List.of(userIdentificationKeyParams));
        }

        /**
         * @param userIdentificationTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder userIdentificationTitle(@Nullable String userIdentificationTitle) {
            $.userIdentificationTitle = userIdentificationTitle;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param waitingRoomCacheTtl Specifies the waiting room page&#39;s time to live in the cache, `5` minutes by default.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCacheTtl(@Nullable Integer waitingRoomCacheTtl) {
            $.waitingRoomCacheTtl = waitingRoomCacheTtl;
            return this;
        }

        /**
         * @param waitingRoomCookieAdvanced When enabled along with `waitingRoomCookieEnabled`, sets advanced configuration options for the waiting room cookie.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieAdvanced(@Nullable Boolean waitingRoomCookieAdvanced) {
            $.waitingRoomCookieAdvanced = waitingRoomCookieAdvanced;
            return this;
        }

        /**
         * @param waitingRoomCookieAutomaticSalt Sets an automatic `salt` value to verify the integrity of the waiting room cookie.  Disable this if you want to share the cookie across properties.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieAutomaticSalt(@Nullable Boolean waitingRoomCookieAutomaticSalt) {
            $.waitingRoomCookieAutomaticSalt = waitingRoomCookieAutomaticSalt;
            return this;
        }

        /**
         * @param waitingRoomCookieDomain Specifies a domain for the waiting room cookie.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieDomain(@Nullable String waitingRoomCookieDomain) {
            $.waitingRoomCookieDomain = waitingRoomCookieDomain;
            return this;
        }

        /**
         * @param waitingRoomCookieDomainType Specify with `waitingRoomCookieAdvanced` enabled, selects whether to use the `DYNAMIC` incoming host header, or a `CUSTOMER`-defined cookie domain.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieDomainType(@Nullable String waitingRoomCookieDomainType) {
            $.waitingRoomCookieDomainType = waitingRoomCookieDomainType;
            return this;
        }

        /**
         * @param waitingRoomCookieDuration Sets the number of seconds for which users remain in the waiting room. During this time, users who refresh the waiting room page remain there.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieDuration(@Nullable Integer waitingRoomCookieDuration) {
            $.waitingRoomCookieDuration = waitingRoomCookieDuration;
            return this;
        }

        /**
         * @param waitingRoomCookieEnabled Enables a cookie to track a waiting room assignment.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieEnabled(@Nullable Boolean waitingRoomCookieEnabled) {
            $.waitingRoomCookieEnabled = waitingRoomCookieEnabled;
            return this;
        }

        /**
         * @param waitingRoomCookieHttpOnly Applies the `HttpOnly` flag to the waiting room cookie to ensure it&#39;s accessed over HTTP and not manipulated by the client.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieHttpOnly(@Nullable Boolean waitingRoomCookieHttpOnly) {
            $.waitingRoomCookieHttpOnly = waitingRoomCookieHttpOnly;
            return this;
        }

        /**
         * @param waitingRoomCookieLabel Specifies a label to distinguish this waiting room cookie from others. The value appends to the cookie&#39;s name, and helps you to maintain the same waiting room assignment across behaviors within a property, and across properties.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieLabel(@Nullable String waitingRoomCookieLabel) {
            $.waitingRoomCookieLabel = waitingRoomCookieLabel;
            return this;
        }

        /**
         * @param waitingRoomCookieManagementTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieManagementTitle(@Nullable String waitingRoomCookieManagementTitle) {
            $.waitingRoomCookieManagementTitle = waitingRoomCookieManagementTitle;
            return this;
        }

        /**
         * @param waitingRoomCookieSalt Specifies a fixed `salt` value, which is incorporated into the cookie&#39;s value to prevent users from manipulating it. You can use the same salt string across different behaviors or properties to apply a single cookie for the waiting room session.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieSalt(@Nullable String waitingRoomCookieSalt) {
            $.waitingRoomCookieSalt = waitingRoomCookieSalt;
            return this;
        }

        /**
         * @param waitingRoomCookieShareLabel Enabling this option shares the same `allowedUserCookieLabel` string. If disabled, specify a different `waitingRoomCookieLabel`.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCookieShareLabel(@Nullable Boolean waitingRoomCookieShareLabel) {
            $.waitingRoomCookieShareLabel = waitingRoomCookieShareLabel;
            return this;
        }

        /**
         * @param waitingRoomCpCode Specifies a CP code for requests sent to the waiting room. You only need to provide the initial `id`, stripping any `cpc_` prefix to pass the integer to the rule tree. Additional CP code details may reflect back in subsequent read-only data.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomCpCode(@Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomCpCode waitingRoomCpCode) {
            $.waitingRoomCpCode = waitingRoomCpCode;
            return this;
        }

        /**
         * @param waitingRoomDirectory Specifies the NetStorage directory that contains the static waiting room page, with no trailing slash character.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomDirectory(@Nullable String waitingRoomDirectory) {
            $.waitingRoomDirectory = waitingRoomDirectory;
            return this;
        }

        /**
         * @param waitingRoomManagementTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomManagementTitle(@Nullable String waitingRoomManagementTitle) {
            $.waitingRoomManagementTitle = waitingRoomManagementTitle;
            return this;
        }

        /**
         * @param waitingRoomNetStorage Specifies the NetStorage domain for the waiting room page.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomNetStorage(@Nullable GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritizationWaitingRoomNetStorage waitingRoomNetStorage) {
            $.waitingRoomNetStorage = waitingRoomNetStorage;
            return this;
        }

        /**
         * @param waitingRoomStatusCode Specifies the response code for requests sent to the waiting room.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomStatusCode(@Nullable Integer waitingRoomStatusCode) {
            $.waitingRoomStatusCode = waitingRoomStatusCode;
            return this;
        }

        /**
         * @param waitingRoomUseCpCode Allows you to assign a different CP code that tracks any requests that are sent to the waiting room.
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomUseCpCode(@Nullable Boolean waitingRoomUseCpCode) {
            $.waitingRoomUseCpCode = waitingRoomUseCpCode;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20230530BehaviorVisitorPrioritization build() {
            return $;
        }
    }

}
