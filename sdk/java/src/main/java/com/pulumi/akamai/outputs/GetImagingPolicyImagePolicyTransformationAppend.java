// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationAppendImage;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationAppend {
    /**
     * @return Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     * 
     */
    private @Nullable String gravity;
    /**
     * @return Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     * 
     */
    private @Nullable String gravityPriority;
    /**
     * @return Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     * 
     */
    private @Nullable String gravityPriorityVar;
    /**
     * @return Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     * 
     */
    private @Nullable String gravityVar;
    private GetImagingPolicyImagePolicyTransformationAppendImage image;
    /**
     * @return Whether to preserve the source image&#39;s minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &amp;times; 100 pixels. The dimensions of the appending `image` are 50 &amp;times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image&#39;s minor dimension vertical. To preserve the source image&#39;s minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image&#39;s minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &amp;times; 100 pixels.
     * 
     */
    private @Nullable String preserveMinorDimension;
    /**
     * @return Whether to preserve the source image&#39;s minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &amp;times; 100 pixels. The dimensions of the appending `image` are 50 &amp;times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image&#39;s minor dimension vertical. To preserve the source image&#39;s minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image&#39;s minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &amp;times; 100 pixels.
     * 
     */
    private @Nullable String preserveMinorDimensionVar;

    private GetImagingPolicyImagePolicyTransformationAppend() {}
    /**
     * @return Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     * 
     */
    public Optional<String> gravity() {
        return Optional.ofNullable(this.gravity);
    }
    /**
     * @return Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     * 
     */
    public Optional<String> gravityPriority() {
        return Optional.ofNullable(this.gravityPriority);
    }
    /**
     * @return Determines the exact placement of the `image` when `gravity` is `Center` or a diagonal. The value is either `horizontal` or `vertical`. Use `horizontal` to append an `image` east or west of the source image. This aligns the `image` on the vertical gravity component, placing `Center` gravity east. Use `vertical` to append an `image` north or south of the source image. This aligns the `image` on the horizontal gravity component, placing `Center` gravity south.
     * 
     */
    public Optional<String> gravityPriorityVar() {
        return Optional.ofNullable(this.gravityPriorityVar);
    }
    /**
     * @return Specifies where to place the `image` relative to the source image. The available values represent the eight cardinal directions (`North`, `South`, `East`, `West`, `NorthEast`, `NorthWest`, `SouthEast`, `SouthWest`) and a `Center` by default.
     * 
     */
    public Optional<String> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }
    public GetImagingPolicyImagePolicyTransformationAppendImage image() {
        return this.image;
    }
    /**
     * @return Whether to preserve the source image&#39;s minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &amp;times; 100 pixels. The dimensions of the appending `image` are 50 &amp;times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image&#39;s minor dimension vertical. To preserve the source image&#39;s minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image&#39;s minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &amp;times; 100 pixels.
     * 
     */
    public Optional<String> preserveMinorDimension() {
        return Optional.ofNullable(this.preserveMinorDimension);
    }
    /**
     * @return Whether to preserve the source image&#39;s minor dimension, `false` by default. The minor dimension is the dimension opposite the dimension that the appending `image` is placed. For example, the dimensions of the source image are 100 &amp;times; 100 pixels. The dimensions of the appending `image` are 50 &amp;times; 150 pixels. The `gravity` is set to `East`. This makes the major dimension horizontal and the source image&#39;s minor dimension vertical. To preserve the source image&#39;s minor dimension at 100 pixels, the `preserveMinorDimension` is set to `true`. As a result of the append, the major dimension expanded with the appended image to 150 pixels. The source image&#39;s minor dimension was maintained at 100 pixels. The total combined dimension of the image is 150 &amp;times; 100 pixels.
     * 
     */
    public Optional<String> preserveMinorDimensionVar() {
        return Optional.ofNullable(this.preserveMinorDimensionVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationAppend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String gravity;
        private @Nullable String gravityPriority;
        private @Nullable String gravityPriorityVar;
        private @Nullable String gravityVar;
        private GetImagingPolicyImagePolicyTransformationAppendImage image;
        private @Nullable String preserveMinorDimension;
        private @Nullable String preserveMinorDimensionVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationAppend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gravity = defaults.gravity;
    	      this.gravityPriority = defaults.gravityPriority;
    	      this.gravityPriorityVar = defaults.gravityPriorityVar;
    	      this.gravityVar = defaults.gravityVar;
    	      this.image = defaults.image;
    	      this.preserveMinorDimension = defaults.preserveMinorDimension;
    	      this.preserveMinorDimensionVar = defaults.preserveMinorDimensionVar;
        }

        @CustomType.Setter
        public Builder gravity(@Nullable String gravity) {

            this.gravity = gravity;
            return this;
        }
        @CustomType.Setter
        public Builder gravityPriority(@Nullable String gravityPriority) {

            this.gravityPriority = gravityPriority;
            return this;
        }
        @CustomType.Setter
        public Builder gravityPriorityVar(@Nullable String gravityPriorityVar) {

            this.gravityPriorityVar = gravityPriorityVar;
            return this;
        }
        @CustomType.Setter
        public Builder gravityVar(@Nullable String gravityVar) {

            this.gravityVar = gravityVar;
            return this;
        }
        @CustomType.Setter
        public Builder image(GetImagingPolicyImagePolicyTransformationAppendImage image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetImagingPolicyImagePolicyTransformationAppend", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder preserveMinorDimension(@Nullable String preserveMinorDimension) {

            this.preserveMinorDimension = preserveMinorDimension;
            return this;
        }
        @CustomType.Setter
        public Builder preserveMinorDimensionVar(@Nullable String preserveMinorDimensionVar) {

            this.preserveMinorDimensionVar = preserveMinorDimensionVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationAppend build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationAppend();
            _resultValue.gravity = gravity;
            _resultValue.gravityPriority = gravityPriority;
            _resultValue.gravityPriorityVar = gravityPriorityVar;
            _resultValue.gravityVar = gravityVar;
            _resultValue.image = image;
            _resultValue.preserveMinorDimension = preserveMinorDimension;
            _resultValue.preserveMinorDimensionVar = preserveMinorDimensionVar;
            return _resultValue;
        }
    }
}
