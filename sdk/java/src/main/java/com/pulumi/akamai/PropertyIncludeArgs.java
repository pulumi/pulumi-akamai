// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PropertyIncludeArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyIncludeArgs Empty = new PropertyIncludeArgs();

    /**
     * (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
     * 
     */
    @Import(name="contractId", required=true)
    private Output<String> contractId;

    /**
     * @return (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
     * 
     */
    public Output<String> contractId() {
        return this.contractId;
    }

    /**
     * (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * (Required) The descriptive name for the include.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return (Required) The descriptive name for the include.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The product assigned to the include
     * 
     */
    @Import(name="productId")
    private @Nullable Output<String> productId;

    /**
     * @return The product assigned to the include
     * 
     */
    public Optional<Output<String>> productId() {
        return Optional.ofNullable(this.productId);
    }

    /**
     * (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
     * 
     */
    @Import(name="ruleFormat", required=true)
    private Output<String> ruleFormat;

    /**
     * @return (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
     * 
     */
    public Output<String> ruleFormat() {
        return this.ruleFormat;
    }

    /**
     * (Optional) Include&#39;s rules as JSON.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<String> rules;

    /**
     * @return (Optional) Include&#39;s rules as JSON.
     * 
     */
    public Optional<Output<String>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private PropertyIncludeArgs() {}

    private PropertyIncludeArgs(PropertyIncludeArgs $) {
        this.contractId = $.contractId;
        this.groupId = $.groupId;
        this.name = $.name;
        this.productId = $.productId;
        this.ruleFormat = $.ruleFormat;
        this.rules = $.rules;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyIncludeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyIncludeArgs $;

        public Builder() {
            $ = new PropertyIncludeArgs();
        }

        public Builder(PropertyIncludeArgs defaults) {
            $ = new PropertyIncludeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contractId (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId (Required) A contract&#39;s unique ID, including the optional `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param groupId (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId (Required) A group&#39;s unique ID, including the optional `grp_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param name (Required) The descriptive name for the include.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name (Required) The descriptive name for the include.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param productId The product assigned to the include
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable Output<String> productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param productId The product assigned to the include
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            return productId(Output.of(productId));
        }

        /**
         * @param ruleFormat (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
         * 
         * @return builder
         * 
         */
        public Builder ruleFormat(Output<String> ruleFormat) {
            $.ruleFormat = ruleFormat;
            return this;
        }

        /**
         * @param ruleFormat (Required) Indicates the versioned set of features and criteria. See [Rule format schemas](https://techdocs.akamai.com/property-mgr/reference/rule-format-schemas) to learn more.
         * 
         * @return builder
         * 
         */
        public Builder ruleFormat(String ruleFormat) {
            return ruleFormat(Output.of(ruleFormat));
        }

        /**
         * @param rules (Optional) Include&#39;s rules as JSON.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<String> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules (Optional) Include&#39;s rules as JSON.
         * 
         * @return builder
         * 
         */
        public Builder rules(String rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param type (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type (Required) Specifies the type of the include, either `MICROSERVICES` or `COMMON_SETTINGS`. Use this field for filtering. `MICROSERVICES` allow different teams to work independently on different parts of a single site. `COMMON_SETTINGS` includes are useful for configurations that share a large number of settings, often managed by a central team.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PropertyIncludeArgs build() {
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.ruleFormat = Objects.requireNonNull($.ruleFormat, "expected parameter 'ruleFormat' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
