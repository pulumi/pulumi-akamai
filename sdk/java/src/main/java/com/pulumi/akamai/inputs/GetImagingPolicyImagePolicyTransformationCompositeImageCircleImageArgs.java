// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs Empty = new GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs();

    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    @Import(name="colorVar")
    private @Nullable Output<String> colorVar;

    /**
     * @return The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    public Optional<Output<String>> colorVar() {
        return Optional.ofNullable(this.colorVar);
    }

    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    @Import(name="diameter")
    private @Nullable Output<String> diameter;

    /**
     * @return The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    public Optional<Output<String>> diameter() {
        return Optional.ofNullable(this.diameter);
    }

    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    @Import(name="diameterVar")
    private @Nullable Output<String> diameterVar;

    /**
     * @return The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    public Optional<Output<String>> diameterVar() {
        return Optional.ofNullable(this.diameterVar);
    }

    @Import(name="transformation")
    private @Nullable Output<GetImagingPolicyImagePolicyTransformationArgs> transformation;

    public Optional<Output<GetImagingPolicyImagePolicyTransformationArgs>> transformation() {
        return Optional.ofNullable(this.transformation);
    }

    /**
     * The width of the box in pixels.
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The width of the box in pixels.
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width of the box in pixels.
     * 
     */
    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    /**
     * @return The width of the box in pixels.
     * 
     */
    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs() {}

    private GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs(GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs $) {
        this.color = $.color;
        this.colorVar = $.colorVar;
        this.diameter = $.diameter;
        this.diameterVar = $.diameterVar;
        this.transformation = $.transformation;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param colorVar The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder colorVar(@Nullable Output<String> colorVar) {
            $.colorVar = colorVar;
            return this;
        }

        /**
         * @param colorVar The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder colorVar(String colorVar) {
            return colorVar(Output.of(colorVar));
        }

        /**
         * @param diameter The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameter(@Nullable Output<String> diameter) {
            $.diameter = diameter;
            return this;
        }

        /**
         * @param diameter The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameter(String diameter) {
            return diameter(Output.of(diameter));
        }

        /**
         * @param diameterVar The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameterVar(@Nullable Output<String> diameterVar) {
            $.diameterVar = diameterVar;
            return this;
        }

        /**
         * @param diameterVar The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameterVar(String diameterVar) {
            return diameterVar(Output.of(diameterVar));
        }

        public Builder transformation(@Nullable Output<GetImagingPolicyImagePolicyTransformationArgs> transformation) {
            $.transformation = transformation;
            return this;
        }

        public Builder transformation(GetImagingPolicyImagePolicyTransformationArgs transformation) {
            return transformation(Output.of(transformation));
        }

        /**
         * @param width The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        /**
         * @param widthVar The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param widthVar The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationCompositeImageCircleImageArgs build() {
            return $;
        }
    }

}
