// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.MtlskeystoreClientCertificateAkamaiVersionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MtlskeystoreClientCertificateAkamaiState extends com.pulumi.resources.ResourceArgs {

    public static final MtlskeystoreClientCertificateAkamaiState Empty = new MtlskeystoreClientCertificateAkamaiState();

    /**
     * The unique identifier of the client certificate.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<Integer> certificateId;

    /**
     * @return The unique identifier of the client certificate.
     * 
     */
    public Optional<Output<Integer>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The name of the client certificate. Must be between 1 and 64 characters.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return The name of the client certificate. Must be between 1 and 64 characters.
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * The contract assigned to the client certificate. Must have a length of at least 1.
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return The contract assigned to the client certificate. Must have a length of at least 1.
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * The user who created the client certificate. Read-only.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The user who created the client certificate. Read-only.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * An ISO 8601 timestamp indicating the client certificate&#39;s creation. Read-only.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return An ISO 8601 timestamp indicating the client certificate&#39;s creation. Read-only.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Unique identifier for the `current` client certificate version.
     * 
     */
    @Import(name="currentGuid")
    private @Nullable Output<String> currentGuid;

    /**
     * @return Unique identifier for the `current` client certificate version.
     * 
     */
    public Optional<Output<String>> currentGuid() {
        return Optional.ofNullable(this.currentGuid);
    }

    /**
     * Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
     * 
     */
    @Import(name="geography")
    private @Nullable Output<String> geography;

    /**
     * @return Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
     * 
     */
    public Optional<Output<String>> geography() {
        return Optional.ofNullable(this.geography);
    }

    /**
     * The group assigned to the client certificate. Must be greater than or equal to 0.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<Integer> groupId;

    /**
     * @return The group assigned to the client certificate. Must be greater than or equal to 0.
     * 
     */
    public Optional<Output<Integer>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    /**
     * The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
     * 
     */
    @Import(name="keyAlgorithm")
    private @Nullable Output<String> keyAlgorithm;

    /**
     * @return The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
     * 
     */
    public Optional<Output<String>> keyAlgorithm() {
        return Optional.ofNullable(this.keyAlgorithm);
    }

    /**
     * The email addresses to notify for client certificate-related issues. Must have at least one email address.
     * 
     */
    @Import(name="notificationEmails")
    private @Nullable Output<List<String>> notificationEmails;

    /**
     * @return The email addresses to notify for client certificate-related issues. Must have at least one email address.
     * 
     */
    public Optional<Output<List<String>>> notificationEmails() {
        return Optional.ofNullable(this.notificationEmails);
    }

    /**
     * Unique identifier for the `previous` client certificate version.
     * 
     */
    @Import(name="previousGuid")
    private @Nullable Output<String> previousGuid;

    /**
     * @return Unique identifier for the `previous` client certificate version.
     * 
     */
    public Optional<Output<String>> previousGuid() {
        return Optional.ofNullable(this.previousGuid);
    }

    /**
     * Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
     * 
     */
    @Import(name="secureNetwork")
    private @Nullable Output<String> secureNetwork;

    /**
     * @return Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
     * 
     */
    public Optional<Output<String>> secureNetwork() {
        return Optional.ofNullable(this.secureNetwork);
    }

    /**
     * The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * A list of client certificate versions. Each version represents a specific iteration of the client certificate.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<MtlskeystoreClientCertificateAkamaiVersionArgs>> versions;

    /**
     * @return A list of client certificate versions. Each version represents a specific iteration of the client certificate.
     * 
     */
    public Optional<Output<List<MtlskeystoreClientCertificateAkamaiVersionArgs>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private MtlskeystoreClientCertificateAkamaiState() {}

    private MtlskeystoreClientCertificateAkamaiState(MtlskeystoreClientCertificateAkamaiState $) {
        this.certificateId = $.certificateId;
        this.certificateName = $.certificateName;
        this.contractId = $.contractId;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.currentGuid = $.currentGuid;
        this.geography = $.geography;
        this.groupId = $.groupId;
        this.keyAlgorithm = $.keyAlgorithm;
        this.notificationEmails = $.notificationEmails;
        this.previousGuid = $.previousGuid;
        this.secureNetwork = $.secureNetwork;
        this.subject = $.subject;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MtlskeystoreClientCertificateAkamaiState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MtlskeystoreClientCertificateAkamaiState $;

        public Builder() {
            $ = new MtlskeystoreClientCertificateAkamaiState();
        }

        public Builder(MtlskeystoreClientCertificateAkamaiState defaults) {
            $ = new MtlskeystoreClientCertificateAkamaiState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId The unique identifier of the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<Integer> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId The unique identifier of the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(Integer certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateName The name of the client certificate. Must be between 1 and 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The name of the client certificate. Must be between 1 and 64 characters.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param contractId The contract assigned to the client certificate. Must have a length of at least 1.
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId The contract assigned to the client certificate. Must have a length of at least 1.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param createdBy The user who created the client certificate. Read-only.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The user who created the client certificate. Read-only.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate An ISO 8601 timestamp indicating the client certificate&#39;s creation. Read-only.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate An ISO 8601 timestamp indicating the client certificate&#39;s creation. Read-only.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param currentGuid Unique identifier for the `current` client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder currentGuid(@Nullable Output<String> currentGuid) {
            $.currentGuid = currentGuid;
            return this;
        }

        /**
         * @param currentGuid Unique identifier for the `current` client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder currentGuid(String currentGuid) {
            return currentGuid(Output.of(currentGuid));
        }

        /**
         * @param geography Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
         * 
         * @return builder
         * 
         */
        public Builder geography(@Nullable Output<String> geography) {
            $.geography = geography;
            return this;
        }

        /**
         * @param geography Specifies the type of network to deploy the client certificate. Possible values: `CORE`, `RUSSIA_AND_CORE`, or `CHINA_AND_CORE`.
         * 
         * @return builder
         * 
         */
        public Builder geography(String geography) {
            return geography(Output.of(geography));
        }

        /**
         * @param groupId The group assigned to the client certificate. Must be greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<Integer> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The group assigned to the client certificate. Must be greater than or equal to 0.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Integer groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param keyAlgorithm The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(@Nullable Output<String> keyAlgorithm) {
            $.keyAlgorithm = keyAlgorithm;
            return this;
        }

        /**
         * @param keyAlgorithm The cryptographic algorithm used for key generation. Possible values: `RSA` or `ECDSA`.
         * 
         * @return builder
         * 
         */
        public Builder keyAlgorithm(String keyAlgorithm) {
            return keyAlgorithm(Output.of(keyAlgorithm));
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(@Nullable Output<List<String>> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(List<String> notificationEmails) {
            return notificationEmails(Output.of(notificationEmails));
        }

        /**
         * @param notificationEmails The email addresses to notify for client certificate-related issues. Must have at least one email address.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        /**
         * @param previousGuid Unique identifier for the `previous` client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder previousGuid(@Nullable Output<String> previousGuid) {
            $.previousGuid = previousGuid;
            return this;
        }

        /**
         * @param previousGuid Unique identifier for the `previous` client certificate version.
         * 
         * @return builder
         * 
         */
        public Builder previousGuid(String previousGuid) {
            return previousGuid(Output.of(previousGuid));
        }

        /**
         * @param secureNetwork Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(@Nullable Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork Identifies the network deployment type. Possible values: `STANDARD_TLS` or `ENHANCED_TLS`.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param subject The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject The CA certificate’s key value details. The `CN` attribute is required and included in the subject. When not specified, the subject is constructed in this format: `/C=US/O=Akamai Technologies, Inc./OU={vcd_id} {contract_id} {group_id}/CN={certificate_name}/`.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param versions A list of client certificate versions. Each version represents a specific iteration of the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<MtlskeystoreClientCertificateAkamaiVersionArgs>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions A list of client certificate versions. Each version represents a specific iteration of the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder versions(List<MtlskeystoreClientCertificateAkamaiVersionArgs> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions A list of client certificate versions. Each version represents a specific iteration of the client certificate.
         * 
         * @return builder
         * 
         */
        public Builder versions(MtlskeystoreClientCertificateAkamaiVersionArgs... versions) {
            return versions(List.of(versions));
        }

        public MtlskeystoreClientCertificateAkamaiState build() {
            return $;
        }
    }

}
