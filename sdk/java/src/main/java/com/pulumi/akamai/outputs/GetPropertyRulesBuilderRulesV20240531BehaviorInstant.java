// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240531BehaviorInstant {
    /**
     * @return Specify link relation values that activate the prefetching behavior. For example, specifying `fetch` allows you to use shorter `rel=&#34;fetch&#34;` markup.
     * 
     */
    private @Nullable List<String> customLinkRelations;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return When enabled, applies prefetching only to objects already set to be cacheable, for example using the `caching` behavior. Only applies to content with the `tieredDistribution` behavior enabled.
     * 
     */
    private @Nullable Boolean prefetchCacheable;
    /**
     * @return Allows edge servers to prefetch additional HTML pages while pages that link to them are being delivered. This only applies to links from `&lt;a&gt;` or `&lt;link&gt;` tags with the appropriate link relation attribute.
     * 
     */
    private @Nullable Boolean prefetchHtml;
    /**
     * @return Allows otherwise non-cacheable `no-store` content to prefetch if the URL path ends with `/` to indicate a request for a default file, or if the extension matches the value of the `prefetchNoStoreExtensions` option. Only applies to content with the `sureRoute` behavior enabled.
     * 
     */
    private @Nullable Boolean prefetchNoStore;
    /**
     * @return Specifies a set of file extensions for which the `prefetchNoStore` option is allowed.
     * 
     */
    private @Nullable List<String> prefetchNoStoreExtensions;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20240531BehaviorInstant() {}
    /**
     * @return Specify link relation values that activate the prefetching behavior. For example, specifying `fetch` allows you to use shorter `rel=&#34;fetch&#34;` markup.
     * 
     */
    public List<String> customLinkRelations() {
        return this.customLinkRelations == null ? List.of() : this.customLinkRelations;
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return When enabled, applies prefetching only to objects already set to be cacheable, for example using the `caching` behavior. Only applies to content with the `tieredDistribution` behavior enabled.
     * 
     */
    public Optional<Boolean> prefetchCacheable() {
        return Optional.ofNullable(this.prefetchCacheable);
    }
    /**
     * @return Allows edge servers to prefetch additional HTML pages while pages that link to them are being delivered. This only applies to links from `&lt;a&gt;` or `&lt;link&gt;` tags with the appropriate link relation attribute.
     * 
     */
    public Optional<Boolean> prefetchHtml() {
        return Optional.ofNullable(this.prefetchHtml);
    }
    /**
     * @return Allows otherwise non-cacheable `no-store` content to prefetch if the URL path ends with `/` to indicate a request for a default file, or if the extension matches the value of the `prefetchNoStoreExtensions` option. Only applies to content with the `sureRoute` behavior enabled.
     * 
     */
    public Optional<Boolean> prefetchNoStore() {
        return Optional.ofNullable(this.prefetchNoStore);
    }
    /**
     * @return Specifies a set of file extensions for which the `prefetchNoStore` option is allowed.
     * 
     */
    public List<String> prefetchNoStoreExtensions() {
        return this.prefetchNoStoreExtensions == null ? List.of() : this.prefetchNoStoreExtensions;
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorInstant defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> customLinkRelations;
        private @Nullable Boolean locked;
        private @Nullable Boolean prefetchCacheable;
        private @Nullable Boolean prefetchHtml;
        private @Nullable Boolean prefetchNoStore;
        private @Nullable List<String> prefetchNoStoreExtensions;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorInstant defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customLinkRelations = defaults.customLinkRelations;
    	      this.locked = defaults.locked;
    	      this.prefetchCacheable = defaults.prefetchCacheable;
    	      this.prefetchHtml = defaults.prefetchHtml;
    	      this.prefetchNoStore = defaults.prefetchNoStore;
    	      this.prefetchNoStoreExtensions = defaults.prefetchNoStoreExtensions;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder customLinkRelations(@Nullable List<String> customLinkRelations) {

            this.customLinkRelations = customLinkRelations;
            return this;
        }
        public Builder customLinkRelations(String... customLinkRelations) {
            return customLinkRelations(List.of(customLinkRelations));
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder prefetchCacheable(@Nullable Boolean prefetchCacheable) {

            this.prefetchCacheable = prefetchCacheable;
            return this;
        }
        @CustomType.Setter
        public Builder prefetchHtml(@Nullable Boolean prefetchHtml) {

            this.prefetchHtml = prefetchHtml;
            return this;
        }
        @CustomType.Setter
        public Builder prefetchNoStore(@Nullable Boolean prefetchNoStore) {

            this.prefetchNoStore = prefetchNoStore;
            return this;
        }
        @CustomType.Setter
        public Builder prefetchNoStoreExtensions(@Nullable List<String> prefetchNoStoreExtensions) {

            this.prefetchNoStoreExtensions = prefetchNoStoreExtensions;
            return this;
        }
        public Builder prefetchNoStoreExtensions(String... prefetchNoStoreExtensions) {
            return prefetchNoStoreExtensions(List.of(prefetchNoStoreExtensions));
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240531BehaviorInstant build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240531BehaviorInstant();
            _resultValue.customLinkRelations = customLinkRelations;
            _resultValue.locked = locked;
            _resultValue.prefetchCacheable = prefetchCacheable;
            _resultValue.prefetchHtml = prefetchHtml;
            _resultValue.prefetchNoStore = prefetchNoStore;
            _resultValue.prefetchNoStoreExtensions = prefetchNoStoreExtensions;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
