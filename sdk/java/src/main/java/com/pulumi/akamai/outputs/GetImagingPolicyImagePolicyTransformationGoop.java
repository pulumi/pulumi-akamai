// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationGoop {
    /**
     * @return Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     * 
     */
    private @Nullable String chaos;
    /**
     * @return Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     * 
     */
    private @Nullable String chaosVar;
    /**
     * @return Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     * 
     */
    private @Nullable String density;
    /**
     * @return Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     * 
     */
    private @Nullable String densityVar;
    /**
     * @return By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     * 
     */
    private @Nullable String power;
    /**
     * @return By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     * 
     */
    private @Nullable String powerVar;
    /**
     * @return Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     * 
     */
    private @Nullable String seed;
    /**
     * @return Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     * 
     */
    private @Nullable String seedVar;

    private GetImagingPolicyImagePolicyTransformationGoop() {}
    /**
     * @return Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     * 
     */
    public Optional<String> chaos() {
        return Optional.ofNullable(this.chaos);
    }
    /**
     * @return Specifies the greatest distance control points may move from their original position. A value of `1.0` shifts control points over as far as the next one in the original grid. A value of `0.0` leaves the image unchanged. Values under `0.5` work better for subtle distortions, otherwise control points may pass each other and cause a twisting effect.
     * 
     */
    public Optional<String> chaosVar() {
        return Optional.ofNullable(this.chaosVar);
    }
    /**
     * @return Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     * 
     */
    public Optional<String> density() {
        return Optional.ofNullable(this.density);
    }
    /**
     * @return Controls the density of control points used to distort the image. The largest dimension of the input image is divided up to fit this number of control points. A grid of points is extended on the smaller dimension such that each row and column of control points is equidistant from each adjacent row or column. This parameter strongly affects transformation performance. Be careful choosing values above the default if you expect to transform medium to large size images.
     * 
     */
    public Optional<String> densityVar() {
        return Optional.ofNullable(this.densityVar);
    }
    /**
     * @return By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     * 
     */
    public Optional<String> power() {
        return Optional.ofNullable(this.power);
    }
    /**
     * @return By default, the distortion algorithm relies on inverse squares to calculate distance but this allows you to change the exponent. You shouldnt need to vary the default value of `2.0`.
     * 
     */
    public Optional<String> powerVar() {
        return Optional.ofNullable(this.powerVar);
    }
    /**
     * @return Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     * 
     */
    public Optional<String> seed() {
        return Optional.ofNullable(this.seed);
    }
    /**
     * @return Specifies your own `seed` value as an alternative to the default, which is subject to variability. This allows for reproducible and deterministic distortions. If all parameters are kept equal and a constant seed is used, `Goop` distorts an input image consistently over many transformations. By default, this value is set to the current Epoch Time measured in milliseconds, which provides inconsistent transformation output.
     * 
     */
    public Optional<String> seedVar() {
        return Optional.ofNullable(this.seedVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationGoop defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chaos;
        private @Nullable String chaosVar;
        private @Nullable String density;
        private @Nullable String densityVar;
        private @Nullable String power;
        private @Nullable String powerVar;
        private @Nullable String seed;
        private @Nullable String seedVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationGoop defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chaos = defaults.chaos;
    	      this.chaosVar = defaults.chaosVar;
    	      this.density = defaults.density;
    	      this.densityVar = defaults.densityVar;
    	      this.power = defaults.power;
    	      this.powerVar = defaults.powerVar;
    	      this.seed = defaults.seed;
    	      this.seedVar = defaults.seedVar;
        }

        @CustomType.Setter
        public Builder chaos(@Nullable String chaos) {

            this.chaos = chaos;
            return this;
        }
        @CustomType.Setter
        public Builder chaosVar(@Nullable String chaosVar) {

            this.chaosVar = chaosVar;
            return this;
        }
        @CustomType.Setter
        public Builder density(@Nullable String density) {

            this.density = density;
            return this;
        }
        @CustomType.Setter
        public Builder densityVar(@Nullable String densityVar) {

            this.densityVar = densityVar;
            return this;
        }
        @CustomType.Setter
        public Builder power(@Nullable String power) {

            this.power = power;
            return this;
        }
        @CustomType.Setter
        public Builder powerVar(@Nullable String powerVar) {

            this.powerVar = powerVar;
            return this;
        }
        @CustomType.Setter
        public Builder seed(@Nullable String seed) {

            this.seed = seed;
            return this;
        }
        @CustomType.Setter
        public Builder seedVar(@Nullable String seedVar) {

            this.seedVar = seedVar;
            return this;
        }
        public GetImagingPolicyImagePolicyTransformationGoop build() {
            final var _resultValue = new GetImagingPolicyImagePolicyTransformationGoop();
            _resultValue.chaos = chaos;
            _resultValue.chaosVar = chaosVar;
            _resultValue.density = density;
            _resultValue.densityVar = densityVar;
            _resultValue.power = power;
            _resultValue.powerVar = powerVar;
            _resultValue.seed = seed;
            _resultValue.seedVar = seedVar;
            return _resultValue;
        }
    }
}
