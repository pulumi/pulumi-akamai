// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class AppSecAdvancedSettingsPrefetchArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSecAdvancedSettingsPrefetchArgs Empty = new AppSecAdvancedSettingsPrefetchArgs();

    /**
     * Whether to enable prefetch requests for all file extensions
     * 
     */
    @Import(name="allExtensions", required=true)
    private Output<Boolean> allExtensions;

    /**
     * @return Whether to enable prefetch requests for all file extensions
     * 
     */
    public Output<Boolean> allExtensions() {
        return this.allExtensions;
    }

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * Whether to enable or disable prefetch requests
     * 
     */
    @Import(name="enableAppLayer", required=true)
    private Output<Boolean> enableAppLayer;

    /**
     * @return Whether to enable or disable prefetch requests
     * 
     */
    public Output<Boolean> enableAppLayer() {
        return this.enableAppLayer;
    }

    /**
     * Whether to enable prefetch requests for rate controls
     * 
     */
    @Import(name="enableRateControls", required=true)
    private Output<Boolean> enableRateControls;

    /**
     * @return Whether to enable prefetch requests for rate controls
     * 
     */
    public Output<Boolean> enableRateControls() {
        return this.enableRateControls;
    }

    /**
     * List of file extensions
     * 
     */
    @Import(name="extensions", required=true)
    private Output<List<String>> extensions;

    /**
     * @return List of file extensions
     * 
     */
    public Output<List<String>> extensions() {
        return this.extensions;
    }

    private AppSecAdvancedSettingsPrefetchArgs() {}

    private AppSecAdvancedSettingsPrefetchArgs(AppSecAdvancedSettingsPrefetchArgs $) {
        this.allExtensions = $.allExtensions;
        this.configId = $.configId;
        this.enableAppLayer = $.enableAppLayer;
        this.enableRateControls = $.enableRateControls;
        this.extensions = $.extensions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecAdvancedSettingsPrefetchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecAdvancedSettingsPrefetchArgs $;

        public Builder() {
            $ = new AppSecAdvancedSettingsPrefetchArgs();
        }

        public Builder(AppSecAdvancedSettingsPrefetchArgs defaults) {
            $ = new AppSecAdvancedSettingsPrefetchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allExtensions Whether to enable prefetch requests for all file extensions
         * 
         * @return builder
         * 
         */
        public Builder allExtensions(Output<Boolean> allExtensions) {
            $.allExtensions = allExtensions;
            return this;
        }

        /**
         * @param allExtensions Whether to enable prefetch requests for all file extensions
         * 
         * @return builder
         * 
         */
        public Builder allExtensions(Boolean allExtensions) {
            return allExtensions(Output.of(allExtensions));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param enableAppLayer Whether to enable or disable prefetch requests
         * 
         * @return builder
         * 
         */
        public Builder enableAppLayer(Output<Boolean> enableAppLayer) {
            $.enableAppLayer = enableAppLayer;
            return this;
        }

        /**
         * @param enableAppLayer Whether to enable or disable prefetch requests
         * 
         * @return builder
         * 
         */
        public Builder enableAppLayer(Boolean enableAppLayer) {
            return enableAppLayer(Output.of(enableAppLayer));
        }

        /**
         * @param enableRateControls Whether to enable prefetch requests for rate controls
         * 
         * @return builder
         * 
         */
        public Builder enableRateControls(Output<Boolean> enableRateControls) {
            $.enableRateControls = enableRateControls;
            return this;
        }

        /**
         * @param enableRateControls Whether to enable prefetch requests for rate controls
         * 
         * @return builder
         * 
         */
        public Builder enableRateControls(Boolean enableRateControls) {
            return enableRateControls(Output.of(enableRateControls));
        }

        /**
         * @param extensions List of file extensions
         * 
         * @return builder
         * 
         */
        public Builder extensions(Output<List<String>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions List of file extensions
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<String> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions List of file extensions
         * 
         * @return builder
         * 
         */
        public Builder extensions(String... extensions) {
            return extensions(List.of(extensions));
        }

        public AppSecAdvancedSettingsPrefetchArgs build() {
            if ($.allExtensions == null) {
                throw new MissingRequiredPropertyException("AppSecAdvancedSettingsPrefetchArgs", "allExtensions");
            }
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("AppSecAdvancedSettingsPrefetchArgs", "configId");
            }
            if ($.enableAppLayer == null) {
                throw new MissingRequiredPropertyException("AppSecAdvancedSettingsPrefetchArgs", "enableAppLayer");
            }
            if ($.enableRateControls == null) {
                throw new MissingRequiredPropertyException("AppSecAdvancedSettingsPrefetchArgs", "enableRateControls");
            }
            if ($.extensions == null) {
                throw new MissingRequiredPropertyException("AppSecAdvancedSettingsPrefetchArgs", "extensions");
            }
            return $;
        }
    }

}
