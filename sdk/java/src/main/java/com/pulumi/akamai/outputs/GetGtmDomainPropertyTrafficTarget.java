// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGtmDomainPropertyTrafficTarget {
    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    private Integer datacenterId;
    /**
     * @return Indicates whether the traffic target is used.
     * 
     */
    private Boolean enabled;
    /**
     * @return Specifies an optional data center for the property.
     * 
     */
    private String handoutCname;
    /**
     * @return An alternative label for the traffic target.
     * 
     */
    private String name;
    /**
     * @return Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     * 
     */
    private Integer precedence;
    /**
     * @return Identifies the IP address or the hostnames of the servers.
     * 
     */
    private List<String> servers;
    /**
     * @return Specifies the traffic target weight for the target.
     * 
     */
    private Double weight;

    private GetGtmDomainPropertyTrafficTarget() {}
    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Integer datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Indicates whether the traffic target is used.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies an optional data center for the property.
     * 
     */
    public String handoutCname() {
        return this.handoutCname;
    }
    /**
     * @return An alternative label for the traffic target.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Non-negative integer that ranks the order of the backups that GTM will hand out in the event that the primary Traffic Target has been declared down
     * 
     */
    public Integer precedence() {
        return this.precedence;
    }
    /**
     * @return Identifies the IP address or the hostnames of the servers.
     * 
     */
    public List<String> servers() {
        return this.servers;
    }
    /**
     * @return Specifies the traffic target weight for the target.
     * 
     */
    public Double weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGtmDomainPropertyTrafficTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer datacenterId;
        private Boolean enabled;
        private String handoutCname;
        private String name;
        private Integer precedence;
        private List<String> servers;
        private Double weight;
        public Builder() {}
        public Builder(GetGtmDomainPropertyTrafficTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datacenterId = defaults.datacenterId;
    	      this.enabled = defaults.enabled;
    	      this.handoutCname = defaults.handoutCname;
    	      this.name = defaults.name;
    	      this.precedence = defaults.precedence;
    	      this.servers = defaults.servers;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder datacenterId(Integer datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder handoutCname(String handoutCname) {
            if (handoutCname == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "handoutCname");
            }
            this.handoutCname = handoutCname;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder precedence(Integer precedence) {
            if (precedence == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "precedence");
            }
            this.precedence = precedence;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<String> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder weight(Double weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainPropertyTrafficTarget", "weight");
            }
            this.weight = weight;
            return this;
        }
        public GetGtmDomainPropertyTrafficTarget build() {
            final var _resultValue = new GetGtmDomainPropertyTrafficTarget();
            _resultValue.datacenterId = datacenterId;
            _resultValue.enabled = enabled;
            _resultValue.handoutCname = handoutCname;
            _resultValue.name = name;
            _resultValue.precedence = precedence;
            _resultValue.servers = servers;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
