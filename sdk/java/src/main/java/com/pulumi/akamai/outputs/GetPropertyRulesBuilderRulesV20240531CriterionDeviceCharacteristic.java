// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic {
    /**
     * @return When the `characteristic` expects a boolean value, this specifies the value.
     * 
     */
    private @Nullable Boolean booleanValue;
    /**
     * @return Aspect of the device or browser to match.
     * 
     */
    private @Nullable String characteristic;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Sets a case-sensitive match for the `stringValue` field.
     * 
     */
    private @Nullable Boolean matchCaseSensitive;
    /**
     * @return Allows wildcards in the `stringValue` field, where `?` matches a single character and `*` matches zero or more characters.
     * 
     */
    private @Nullable Boolean matchWildcard;
    /**
     * @return When the `characteristic` expects a numeric value, compares the specified `numericValue` against the matched client.
     * 
     */
    private @Nullable String numericMatchOperator;
    /**
     * @return When the `characteristic` expects a numeric value, this specifies the number.
     * 
     */
    private @Nullable Integer numericValue;
    /**
     * @return When the `characteristic` expects a string value, set this to `MATCHES_ONE_OF` to match against the `stringValue` set, otherwise set to `DOES_NOT_MATCH_ONE_OF` to exclude that set of values.
     * 
     */
    private @Nullable String stringMatchOperator;
    /**
     * @return When the `characteristic` expects a string, this specifies the set of values.
     * 
     */
    private @Nullable List<String> stringValues;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return When the `characteristic` expects a version string value, compares the specified `versionValue` against the matched client, using the following operators: `IS`, `IS_MORE_THAN_OR_EQUAL`, `IS_MORE_THAN`, `IS_LESS_THAN_OR_EQUAL`, `IS_LESS_THAN`, `IS_NOT`.
     * 
     */
    private @Nullable String versionMatchOperator;
    /**
     * @return When the `characteristic` expects a version number, this specifies it as a string.
     * 
     */
    private @Nullable String versionValue;

    private GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic() {}
    /**
     * @return When the `characteristic` expects a boolean value, this specifies the value.
     * 
     */
    public Optional<Boolean> booleanValue() {
        return Optional.ofNullable(this.booleanValue);
    }
    /**
     * @return Aspect of the device or browser to match.
     * 
     */
    public Optional<String> characteristic() {
        return Optional.ofNullable(this.characteristic);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Sets a case-sensitive match for the `stringValue` field.
     * 
     */
    public Optional<Boolean> matchCaseSensitive() {
        return Optional.ofNullable(this.matchCaseSensitive);
    }
    /**
     * @return Allows wildcards in the `stringValue` field, where `?` matches a single character and `*` matches zero or more characters.
     * 
     */
    public Optional<Boolean> matchWildcard() {
        return Optional.ofNullable(this.matchWildcard);
    }
    /**
     * @return When the `characteristic` expects a numeric value, compares the specified `numericValue` against the matched client.
     * 
     */
    public Optional<String> numericMatchOperator() {
        return Optional.ofNullable(this.numericMatchOperator);
    }
    /**
     * @return When the `characteristic` expects a numeric value, this specifies the number.
     * 
     */
    public Optional<Integer> numericValue() {
        return Optional.ofNullable(this.numericValue);
    }
    /**
     * @return When the `characteristic` expects a string value, set this to `MATCHES_ONE_OF` to match against the `stringValue` set, otherwise set to `DOES_NOT_MATCH_ONE_OF` to exclude that set of values.
     * 
     */
    public Optional<String> stringMatchOperator() {
        return Optional.ofNullable(this.stringMatchOperator);
    }
    /**
     * @return When the `characteristic` expects a string, this specifies the set of values.
     * 
     */
    public List<String> stringValues() {
        return this.stringValues == null ? List.of() : this.stringValues;
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return When the `characteristic` expects a version string value, compares the specified `versionValue` against the matched client, using the following operators: `IS`, `IS_MORE_THAN_OR_EQUAL`, `IS_MORE_THAN`, `IS_LESS_THAN_OR_EQUAL`, `IS_LESS_THAN`, `IS_NOT`.
     * 
     */
    public Optional<String> versionMatchOperator() {
        return Optional.ofNullable(this.versionMatchOperator);
    }
    /**
     * @return When the `characteristic` expects a version number, this specifies it as a string.
     * 
     */
    public Optional<String> versionValue() {
        return Optional.ofNullable(this.versionValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean booleanValue;
        private @Nullable String characteristic;
        private @Nullable Boolean locked;
        private @Nullable Boolean matchCaseSensitive;
        private @Nullable Boolean matchWildcard;
        private @Nullable String numericMatchOperator;
        private @Nullable Integer numericValue;
        private @Nullable String stringMatchOperator;
        private @Nullable List<String> stringValues;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        private @Nullable String versionMatchOperator;
        private @Nullable String versionValue;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.booleanValue = defaults.booleanValue;
    	      this.characteristic = defaults.characteristic;
    	      this.locked = defaults.locked;
    	      this.matchCaseSensitive = defaults.matchCaseSensitive;
    	      this.matchWildcard = defaults.matchWildcard;
    	      this.numericMatchOperator = defaults.numericMatchOperator;
    	      this.numericValue = defaults.numericValue;
    	      this.stringMatchOperator = defaults.stringMatchOperator;
    	      this.stringValues = defaults.stringValues;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
    	      this.versionMatchOperator = defaults.versionMatchOperator;
    	      this.versionValue = defaults.versionValue;
        }

        @CustomType.Setter
        public Builder booleanValue(@Nullable Boolean booleanValue) {

            this.booleanValue = booleanValue;
            return this;
        }
        @CustomType.Setter
        public Builder characteristic(@Nullable String characteristic) {

            this.characteristic = characteristic;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder matchCaseSensitive(@Nullable Boolean matchCaseSensitive) {

            this.matchCaseSensitive = matchCaseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder matchWildcard(@Nullable Boolean matchWildcard) {

            this.matchWildcard = matchWildcard;
            return this;
        }
        @CustomType.Setter
        public Builder numericMatchOperator(@Nullable String numericMatchOperator) {

            this.numericMatchOperator = numericMatchOperator;
            return this;
        }
        @CustomType.Setter
        public Builder numericValue(@Nullable Integer numericValue) {

            this.numericValue = numericValue;
            return this;
        }
        @CustomType.Setter
        public Builder stringMatchOperator(@Nullable String stringMatchOperator) {

            this.stringMatchOperator = stringMatchOperator;
            return this;
        }
        @CustomType.Setter
        public Builder stringValues(@Nullable List<String> stringValues) {

            this.stringValues = stringValues;
            return this;
        }
        public Builder stringValues(String... stringValues) {
            return stringValues(List.of(stringValues));
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder versionMatchOperator(@Nullable String versionMatchOperator) {

            this.versionMatchOperator = versionMatchOperator;
            return this;
        }
        @CustomType.Setter
        public Builder versionValue(@Nullable String versionValue) {

            this.versionValue = versionValue;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240531CriterionDeviceCharacteristic();
            _resultValue.booleanValue = booleanValue;
            _resultValue.characteristic = characteristic;
            _resultValue.locked = locked;
            _resultValue.matchCaseSensitive = matchCaseSensitive;
            _resultValue.matchWildcard = matchWildcard;
            _resultValue.numericMatchOperator = numericMatchOperator;
            _resultValue.numericValue = numericValue;
            _resultValue.stringMatchOperator = stringMatchOperator;
            _resultValue.stringValues = stringValues;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            _resultValue.versionMatchOperator = versionMatchOperator;
            _resultValue.versionValue = versionValue;
            return _resultValue;
        }
    }
}
