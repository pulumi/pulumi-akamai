// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperCapacitiesCapacityApproved;
import com.pulumi.akamai.inputs.GetCloudwrapperCapacitiesCapacityAssigned;
import com.pulumi.akamai.inputs.GetCloudwrapperCapacitiesCapacityUnassigned;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetCloudwrapperCapacitiesCapacity extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperCapacitiesCapacity Empty = new GetCloudwrapperCapacitiesCapacity();

    @Import(name="approved", required=true)
    private GetCloudwrapperCapacitiesCapacityApproved approved;

    public GetCloudwrapperCapacitiesCapacityApproved approved() {
        return this.approved;
    }

    @Import(name="assigned", required=true)
    private GetCloudwrapperCapacitiesCapacityAssigned assigned;

    public GetCloudwrapperCapacitiesCapacityAssigned assigned() {
        return this.assigned;
    }

    @Import(name="contractId", required=true)
    private String contractId;

    public String contractId() {
        return this.contractId;
    }

    @Import(name="locationId", required=true)
    private Integer locationId;

    public Integer locationId() {
        return this.locationId;
    }

    @Import(name="locationName", required=true)
    private String locationName;

    public String locationName() {
        return this.locationName;
    }

    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    @Import(name="unassigned", required=true)
    private GetCloudwrapperCapacitiesCapacityUnassigned unassigned;

    public GetCloudwrapperCapacitiesCapacityUnassigned unassigned() {
        return this.unassigned;
    }

    private GetCloudwrapperCapacitiesCapacity() {}

    private GetCloudwrapperCapacitiesCapacity(GetCloudwrapperCapacitiesCapacity $) {
        this.approved = $.approved;
        this.assigned = $.assigned;
        this.contractId = $.contractId;
        this.locationId = $.locationId;
        this.locationName = $.locationName;
        this.type = $.type;
        this.unassigned = $.unassigned;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperCapacitiesCapacity defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperCapacitiesCapacity $;

        public Builder() {
            $ = new GetCloudwrapperCapacitiesCapacity();
        }

        public Builder(GetCloudwrapperCapacitiesCapacity defaults) {
            $ = new GetCloudwrapperCapacitiesCapacity(Objects.requireNonNull(defaults));
        }

        public Builder approved(GetCloudwrapperCapacitiesCapacityApproved approved) {
            $.approved = approved;
            return this;
        }

        public Builder assigned(GetCloudwrapperCapacitiesCapacityAssigned assigned) {
            $.assigned = assigned;
            return this;
        }

        public Builder contractId(String contractId) {
            $.contractId = contractId;
            return this;
        }

        public Builder locationId(Integer locationId) {
            $.locationId = locationId;
            return this;
        }

        public Builder locationName(String locationName) {
            $.locationName = locationName;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder unassigned(GetCloudwrapperCapacitiesCapacityUnassigned unassigned) {
            $.unassigned = unassigned;
            return this;
        }

        public GetCloudwrapperCapacitiesCapacity build() {
            $.approved = Objects.requireNonNull($.approved, "expected parameter 'approved' to be non-null");
            $.assigned = Objects.requireNonNull($.assigned, "expected parameter 'assigned' to be non-null");
            $.contractId = Objects.requireNonNull($.contractId, "expected parameter 'contractId' to be non-null");
            $.locationId = Objects.requireNonNull($.locationId, "expected parameter 'locationId' to be non-null");
            $.locationName = Objects.requireNonNull($.locationName, "expected parameter 'locationName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.unassigned = Objects.requireNonNull($.unassigned, "expected parameter 'unassigned' to be non-null");
            return $;
        }
    }

}
