// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationPortraitIfOrientationDefaultArgs build() {
            return $;
        }
    }

}
