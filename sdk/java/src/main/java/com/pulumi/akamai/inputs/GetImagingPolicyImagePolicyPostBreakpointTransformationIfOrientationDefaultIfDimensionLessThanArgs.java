// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs();

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs $) {
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.removeColors = $.removeColors;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfOrientationDefaultIfDimensionLessThanArgs build() {
            return $;
        }
    }

}
