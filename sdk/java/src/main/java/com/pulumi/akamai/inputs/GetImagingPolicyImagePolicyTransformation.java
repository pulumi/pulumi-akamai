// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformation extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformation Empty = new GetImagingPolicyImagePolicyTransformation();

    /**
     * Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
     * 
     */
    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationAppend> appends;

    /**
     * @return Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    /**
     * Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
     * 
     */
    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationAspectCrop> aspectCrops;

    /**
     * @return Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    /**
     * Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     * 
     */
    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationBackgroundColor> backgroundColors;

    /**
     * @return Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    /**
     * Applies a Gaussian blur to the image.
     * 
     */
    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationBlur> blurs;

    /**
     * @return Applies a Gaussian blur to the image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    /**
     * Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
     * 
     */
    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationChromaKey> chromaKeys;

    /**
     * @return Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    /**
     * Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100%!o(MISSING)paque. A common use of an overlay composite is to add a watermark.
     * 
     */
    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationComposite> composites;

    /**
     * @return Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100%!o(MISSING)paque. A common use of an overlay composite is to add a watermark.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    /**
     * Adjusts both the contrast and brightness of an image.
     * 
     */
    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationContrast> contrasts;

    /**
     * @return Adjusts both the contrast and brightness of an image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    /**
     * Crops an image.
     * 
     */
    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationCrop> crops;

    /**
     * @return Crops an image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    /**
     * Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
     * 
     */
    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFaceCrop> faceCrops;

    /**
     * @return Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    /**
     * Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
     * 
     */
    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFeatureCrop> featureCrops;

    /**
     * @return Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    /**
     * Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
     * 
     */
    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFill> fitAndFills;

    /**
     * @return Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    /**
     * Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     * 
     */
    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationGoop> goops;

    /**
     * @return Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    /**
     * Restricts image color to shades of gray only.
     * 
     */
    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationGrayscale> grayscales;

    /**
     * @return Restricts image color to shades of gray only.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    /**
     * Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     * 
     */
    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationHsl> hsls;

    /**
     * @return Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    /**
     * Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     * 
     */
    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationHsv> hsvs;

    /**
     * @return Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    /**
     * Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
     * 
     */
    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationImQuery> imQueries;

    /**
     * @return Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    /**
     * Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     * 
     */
    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationMaxColor> maxColors;

    /**
     * @return Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    /**
     * Flips an image horizontally, vertically, or both.
     * 
     */
    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationMirror> mirrors;

    /**
     * @return Flips an image horizontally, vertically, or both.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    /**
     * Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     * 
     */
    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationMonoHue> monoHues;

    /**
     * @return Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    /**
     * Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     * 
     */
    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationOpacity> opacities;

    /**
     * @return Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    /**
     * Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
     * 
     */
    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop> regionOfInterestCrops;

    /**
     * @return Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    /**
     * Shrinks or expands an image relative to the image&#39;s specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
     * 
     */
    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRelativeCrop> relativeCrops;

    /**
     * @return Shrinks or expands an image relative to the image&#39;s specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    /**
     * Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     * 
     */
    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRemoveColor> removeColors;

    /**
     * @return Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    /**
     * Resizes an image to a particular, absolute dimension. If you don&#39;t enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image&#39;s aspect.
     * 
     */
    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationResize> resizes;

    /**
     * @return Resizes an image to a particular, absolute dimension. If you don&#39;t enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image&#39;s aspect.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    /**
     * Rotate the image around its center by indicating the degrees of rotation.
     * 
     */
    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationRotate> rotates;

    /**
     * @return Rotate the image around its center by indicating the degrees of rotation.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    /**
     * Changes the image&#39;s size to different dimensions relative to its starting size.
     * 
     */
    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationScale> scales;

    /**
     * @return Changes the image&#39;s size to different dimensions relative to its starting size.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    /**
     * Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it&#39;s often useful to use a `BackgroundColor` transformation for these areas.
     * 
     */
    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationShears> shears;

    /**
     * @return Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it&#39;s often useful to use a `BackgroundColor` transformation for these areas.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    /**
     * Automatically crops uniform backgrounds from the edges of an image.
     * 
     */
    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationTrim> trims;

    /**
     * @return Automatically crops uniform backgrounds from the edges of an image.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    /**
     * Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     * 
     */
    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationUnsharpMask> unsharpMasks;

    /**
     * @return Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
     * 
     */
    public Optional<List<GetImagingPolicyImagePolicyTransformationUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformation() {}

    private GetImagingPolicyImagePolicyTransformation(GetImagingPolicyImagePolicyTransformation $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformation $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformation();
        }

        public Builder(GetImagingPolicyImagePolicyTransformation defaults) {
            $ = new GetImagingPolicyImagePolicyTransformation(Objects.requireNonNull(defaults));
        }

        /**
         * @param appends Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
         * 
         * @return builder
         * 
         */
        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationAppend> appends) {
            $.appends = appends;
            return this;
        }

        /**
         * @param appends Places a specified `image` beside the source image. The API places the `image` on a major dimension, then aligns it on the minor dimension. Transparent pixels fill any area not covered by either image.
         * 
         * @return builder
         * 
         */
        public Builder appends(GetImagingPolicyImagePolicyTransformationAppend... appends) {
            return appends(List.of(appends));
        }

        /**
         * @param aspectCrops Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
         * 
         * @return builder
         * 
         */
        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        /**
         * @param aspectCrops Lets you change the height or width of an image (either by cropping or expanding the area) to an aspect ratio of your choosing.
         * 
         * @return builder
         * 
         */
        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        /**
         * @param backgroundColors Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        /**
         * @param backgroundColors Places a transparent image on a set background color. Color is specified in the typical CSS hexadecimal format.
         * 
         * @return builder
         * 
         */
        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        /**
         * @param blurs Applies a Gaussian blur to the image.
         * 
         * @return builder
         * 
         */
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        /**
         * @param blurs Applies a Gaussian blur to the image.
         * 
         * @return builder
         * 
         */
        public Builder blurs(GetImagingPolicyImagePolicyTransformationBlur... blurs) {
            return blurs(List.of(blurs));
        }

        /**
         * @param chromaKeys Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
         * 
         * @return builder
         * 
         */
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        /**
         * @param chromaKeys Changes any color in an image within the specified volume of the HSL colorspace to transparent or semitransparent. This transformation applies a &#39;green screen&#39; technique commonly used to isolate and remove background colors.
         * 
         * @return builder
         * 
         */
        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        /**
         * @param composites Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100%!o(MISSING)paque. A common use of an overlay composite is to add a watermark.
         * 
         * @return builder
         * 
         */
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationComposite> composites) {
            $.composites = composites;
            return this;
        }

        /**
         * @param composites Applies another image to the source image, either as an overlay or an underlay. The image that&#39;s underneath is visible in areas that are beyond the edges of the top image or that are less than 100%!o(MISSING)paque. A common use of an overlay composite is to add a watermark.
         * 
         * @return builder
         * 
         */
        public Builder composites(GetImagingPolicyImagePolicyTransformationComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationCompound... compounds) {
            return compounds(List.of(compounds));
        }

        /**
         * @param contrasts Adjusts both the contrast and brightness of an image.
         * 
         * @return builder
         * 
         */
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        /**
         * @param contrasts Adjusts both the contrast and brightness of an image.
         * 
         * @return builder
         * 
         */
        public Builder contrasts(GetImagingPolicyImagePolicyTransformationContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        /**
         * @param crops Crops an image.
         * 
         * @return builder
         * 
         */
        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationCrop> crops) {
            $.crops = crops;
            return this;
        }

        /**
         * @param crops Crops an image.
         * 
         * @return builder
         * 
         */
        public Builder crops(GetImagingPolicyImagePolicyTransformationCrop... crops) {
            return crops(List.of(crops));
        }

        /**
         * @param faceCrops Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
         * 
         * @return builder
         * 
         */
        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        /**
         * @param faceCrops Applies a method to detect faces in the source image and applies the rectangular crop on either the `biggest` face or `all` of the faces detected. Image and Video Manager tries to preserve faces in the image instead of using specified crop coordinates.
         * 
         * @return builder
         * 
         */
        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        /**
         * @param featureCrops Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
         * 
         * @return builder
         * 
         */
        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        /**
         * @param featureCrops Identifies prominent features of the source image, then crops around as many of these features as possible relative to the specified `width` and `height` values.
         * 
         * @return builder
         * 
         */
        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        /**
         * @param fitAndFills Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
         * 
         * @return builder
         * 
         */
        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        /**
         * @param fitAndFills Resizes an image to fit within a specific size box and then uses a fill of that same image to cover any transparent space at the edges. By default the fill image has a Blur transformation with a sigma value of 8 applied, but the transformation can be customized using the fillTransformation parameter.
         * 
         * @return builder
         * 
         */
        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        /**
         * @param goops Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
         * 
         * @return builder
         * 
         */
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationGoop> goops) {
            $.goops = goops;
            return this;
        }

        /**
         * @param goops Distorts an image by randomly repositioning a set of control points along a specified grid. The transformed image appears _goopy_. Adjust the density of the grid and the degree of randomity. You can use this transformation to create watermarks for use in security.
         * 
         * @return builder
         * 
         */
        public Builder goops(GetImagingPolicyImagePolicyTransformationGoop... goops) {
            return goops(List.of(goops));
        }

        /**
         * @param grayscales Restricts image color to shades of gray only.
         * 
         * @return builder
         * 
         */
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        /**
         * @param grayscales Restricts image color to shades of gray only.
         * 
         * @return builder
         * 
         */
        public Builder grayscales(GetImagingPolicyImagePolicyTransformationGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        /**
         * @param hsls Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
         * 
         * @return builder
         * 
         */
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        /**
         * @param hsls Adjusts the hue, saturation, and lightness (HSL) of an image. Hue is the number of degrees that colors rotate around the color wheel. Saturation is a multiplier to increase or decrease color saturation. Lightness is a multiplier to increase or decrease the lightness of an image. Other transformations can also affect color, such as `Grayscale` and `MaxColors`. If youre using more than one, consider the order to apply them for the desired results.
         * 
         * @return builder
         * 
         */
        public Builder hsls(GetImagingPolicyImagePolicyTransformationHsl... hsls) {
            return hsls(List.of(hsls));
        }

        /**
         * @param hsvs Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
         * 
         * @return builder
         * 
         */
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        /**
         * @param hsvs Identical to HSL except it replaces `lightness` with `value`. For example, if you reduce the `lightness` of a light green, almost white, image, the color turns a vibrant green. Reducing the `value` turns the image a darker color, close to grey. This happens because the original image color is very close to white.
         * 
         * @return builder
         * 
         */
        public Builder hsvs(GetImagingPolicyImagePolicyTransformationHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        /**
         * @param imQueries Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
         * 
         * @return builder
         * 
         */
        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        /**
         * @param imQueries Apply artistic transformations to images quickly and dynamically by specifying transformations with a query string appendedto the image URL.
         * 
         * @return builder
         * 
         */
        public Builder imQueries(GetImagingPolicyImagePolicyTransformationImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        /**
         * @param maxColors Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
         * 
         * @return builder
         * 
         */
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        /**
         * @param maxColors Set the maximum number of colors in the images palette. Reducing the number of colors in an image can help to reduce file size.
         * 
         * @return builder
         * 
         */
        public Builder maxColors(GetImagingPolicyImagePolicyTransformationMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        /**
         * @param mirrors Flips an image horizontally, vertically, or both.
         * 
         * @return builder
         * 
         */
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        /**
         * @param mirrors Flips an image horizontally, vertically, or both.
         * 
         * @return builder
         * 
         */
        public Builder mirrors(GetImagingPolicyImagePolicyTransformationMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        /**
         * @param monoHues Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
         * 
         * @return builder
         * 
         */
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        /**
         * @param monoHues Allows you to set all hues in an image to a single specified hue of your choosing. Mono Hue maintains the original color’s lightness and saturation but sets the hue to that of the specified value. This has the effect of making the image shades of the specified hue.
         * 
         * @return builder
         * 
         */
        public Builder monoHues(GetImagingPolicyImagePolicyTransformationMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        /**
         * @param opacities Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
         * 
         * @return builder
         * 
         */
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        /**
         * @param opacities Adjusts the level of transparency of an image. Use this transformation to make an image more or less transparent.
         * 
         * @return builder
         * 
         */
        public Builder opacities(GetImagingPolicyImagePolicyTransformationOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        /**
         * @param regionOfInterestCrops Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
         * 
         * @return builder
         * 
         */
        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        /**
         * @param regionOfInterestCrops Crops to a region around a specified area of interest relative to the specified `width` and `height` values.
         * 
         * @return builder
         * 
         */
        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        /**
         * @param relativeCrops Shrinks or expands an image relative to the image&#39;s specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
         * 
         * @return builder
         * 
         */
        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        /**
         * @param relativeCrops Shrinks or expands an image relative to the image&#39;s specified dimensions. Image and Video Manager fills the expanded areas with transparency. Positive values shrink the side, while negative values expand it.
         * 
         * @return builder
         * 
         */
        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        /**
         * @param removeColors Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
         * 
         * @return builder
         * 
         */
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        /**
         * @param removeColors Removes a specified color from an image and replaces it with transparent pixels. This transformation is ideal for removing solid background colors from product images photographed on clean, consistent backgrounds without any shadows.
         * 
         * @return builder
         * 
         */
        public Builder removeColors(GetImagingPolicyImagePolicyTransformationRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        /**
         * @param resizes Resizes an image to a particular, absolute dimension. If you don&#39;t enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image&#39;s aspect.
         * 
         * @return builder
         * 
         */
        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        /**
         * @param resizes Resizes an image to a particular, absolute dimension. If you don&#39;t enter a `width` or a `height`, the image is resized with the `fit` aspect preservation mode, which selects a value for the missing dimension that preserves the image&#39;s aspect.
         * 
         * @return builder
         * 
         */
        public Builder resizes(GetImagingPolicyImagePolicyTransformationResize... resizes) {
            return resizes(List.of(resizes));
        }

        /**
         * @param rotates Rotate the image around its center by indicating the degrees of rotation.
         * 
         * @return builder
         * 
         */
        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        /**
         * @param rotates Rotate the image around its center by indicating the degrees of rotation.
         * 
         * @return builder
         * 
         */
        public Builder rotates(GetImagingPolicyImagePolicyTransformationRotate... rotates) {
            return rotates(List.of(rotates));
        }

        /**
         * @param scales Changes the image&#39;s size to different dimensions relative to its starting size.
         * 
         * @return builder
         * 
         */
        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationScale> scales) {
            $.scales = scales;
            return this;
        }

        /**
         * @param scales Changes the image&#39;s size to different dimensions relative to its starting size.
         * 
         * @return builder
         * 
         */
        public Builder scales(GetImagingPolicyImagePolicyTransformationScale... scales) {
            return scales(List.of(scales));
        }

        /**
         * @param shears Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it&#39;s often useful to use a `BackgroundColor` transformation for these areas.
         * 
         * @return builder
         * 
         */
        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationShears> shears) {
            $.shears = shears;
            return this;
        }

        /**
         * @param shears Slants an image into a parallelogram, as a percent of the starting dimension as represented in decimal format. You need to specify at least one axis property. Transparent pixels fill empty areas around the sheared image as needed, so it&#39;s often useful to use a `BackgroundColor` transformation for these areas.
         * 
         * @return builder
         * 
         */
        public Builder shears(GetImagingPolicyImagePolicyTransformationShears... shears) {
            return shears(List.of(shears));
        }

        /**
         * @param trims Automatically crops uniform backgrounds from the edges of an image.
         * 
         * @return builder
         * 
         */
        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationTrim> trims) {
            $.trims = trims;
            return this;
        }

        /**
         * @param trims Automatically crops uniform backgrounds from the edges of an image.
         * 
         * @return builder
         * 
         */
        public Builder trims(GetImagingPolicyImagePolicyTransformationTrim... trims) {
            return trims(List.of(trims));
        }

        /**
         * @param unsharpMasks Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
         * 
         * @return builder
         * 
         */
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        /**
         * @param unsharpMasks Emphasizes edges and details in source images without distorting the colors. Although this effect is often referred to as _sharpening_ an image, it actually creates a blurred, inverted copy of the image known as an unsharp mask. Image and Video Manager combines the unsharp mask with the source image to create an image perceived as clearer.
         * 
         * @return builder
         * 
         */
        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformation build() {
            return $;
        }
    }

}
