// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor();

    @Import(name="colors")
    private @Nullable String colors;

    public Optional<String> colors() {
        return Optional.ofNullable(this.colors);
    }

    @Import(name="colorsVar")
    private @Nullable String colorsVar;

    public Optional<String> colorsVar() {
        return Optional.ofNullable(this.colorsVar);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor $) {
        this.colors = $.colors;
        this.colorsVar = $.colorsVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor(Objects.requireNonNull(defaults));
        }

        public Builder colors(@Nullable String colors) {
            $.colors = colors;
            return this;
        }

        public Builder colorsVar(@Nullable String colorsVar) {
            $.colorsVar = colorsVar;
            return this;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationIfDimensionLessThanIfOrientationPortraitMaxColor build() {
            return $;
        }
    }

}
