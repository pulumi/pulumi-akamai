// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationMultiCdnSettingsBocc;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationMultiCdnSettingsCdn;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationMultiCdnSettingsDataStreams;
import com.pulumi.akamai.inputs.GetCloudwrapperConfigurationMultiCdnSettingsOrigin;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperConfigurationMultiCdnSettings extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationMultiCdnSettings Empty = new GetCloudwrapperConfigurationMultiCdnSettings();

    @Import(name="bocc")
    private @Nullable GetCloudwrapperConfigurationMultiCdnSettingsBocc bocc;

    public Optional<GetCloudwrapperConfigurationMultiCdnSettingsBocc> bocc() {
        return Optional.ofNullable(this.bocc);
    }

    @Import(name="cdns")
    private @Nullable List<GetCloudwrapperConfigurationMultiCdnSettingsCdn> cdns;

    public Optional<List<GetCloudwrapperConfigurationMultiCdnSettingsCdn>> cdns() {
        return Optional.ofNullable(this.cdns);
    }

    @Import(name="dataStreams")
    private @Nullable GetCloudwrapperConfigurationMultiCdnSettingsDataStreams dataStreams;

    public Optional<GetCloudwrapperConfigurationMultiCdnSettingsDataStreams> dataStreams() {
        return Optional.ofNullable(this.dataStreams);
    }

    @Import(name="enableSoftAlerts", required=true)
    private Boolean enableSoftAlerts;

    public Boolean enableSoftAlerts() {
        return this.enableSoftAlerts;
    }

    @Import(name="origins")
    private @Nullable List<GetCloudwrapperConfigurationMultiCdnSettingsOrigin> origins;

    public Optional<List<GetCloudwrapperConfigurationMultiCdnSettingsOrigin>> origins() {
        return Optional.ofNullable(this.origins);
    }

    private GetCloudwrapperConfigurationMultiCdnSettings() {}

    private GetCloudwrapperConfigurationMultiCdnSettings(GetCloudwrapperConfigurationMultiCdnSettings $) {
        this.bocc = $.bocc;
        this.cdns = $.cdns;
        this.dataStreams = $.dataStreams;
        this.enableSoftAlerts = $.enableSoftAlerts;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationMultiCdnSettings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationMultiCdnSettings $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationMultiCdnSettings();
        }

        public Builder(GetCloudwrapperConfigurationMultiCdnSettings defaults) {
            $ = new GetCloudwrapperConfigurationMultiCdnSettings(Objects.requireNonNull(defaults));
        }

        public Builder bocc(@Nullable GetCloudwrapperConfigurationMultiCdnSettingsBocc bocc) {
            $.bocc = bocc;
            return this;
        }

        public Builder cdns(@Nullable List<GetCloudwrapperConfigurationMultiCdnSettingsCdn> cdns) {
            $.cdns = cdns;
            return this;
        }

        public Builder cdns(GetCloudwrapperConfigurationMultiCdnSettingsCdn... cdns) {
            return cdns(List.of(cdns));
        }

        public Builder dataStreams(@Nullable GetCloudwrapperConfigurationMultiCdnSettingsDataStreams dataStreams) {
            $.dataStreams = dataStreams;
            return this;
        }

        public Builder enableSoftAlerts(Boolean enableSoftAlerts) {
            $.enableSoftAlerts = enableSoftAlerts;
            return this;
        }

        public Builder origins(@Nullable List<GetCloudwrapperConfigurationMultiCdnSettingsOrigin> origins) {
            $.origins = origins;
            return this;
        }

        public Builder origins(GetCloudwrapperConfigurationMultiCdnSettingsOrigin... origins) {
            return origins(List.of(origins));
        }

        public GetCloudwrapperConfigurationMultiCdnSettings build() {
            $.enableSoftAlerts = Objects.requireNonNull($.enableSoftAlerts, "expected parameter 'enableSoftAlerts' to be non-null");
            return $;
        }
    }

}
