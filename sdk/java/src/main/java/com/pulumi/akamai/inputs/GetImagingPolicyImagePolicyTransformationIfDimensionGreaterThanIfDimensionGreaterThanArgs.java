// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs();

    @Import(name="appends")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs>> appends;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs>>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs>> aspectCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs>>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs>> backgroundColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs>>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs>> blurs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs>>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs>> chromaKeys;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs>>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs>> composites;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs>>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs>> compounds;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs>>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs>> contrasts;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs>>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs>> crops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs>>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs>> faceCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs>>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs>> featureCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs>>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs>> fitAndFills;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs>>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs>> goops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs>>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs>> grayscales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs>>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs>> hsls;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs>>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs>> hsvs;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs>>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs>> ifDimensions;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs>>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs>> ifOrientations;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs>>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs>> imQueries;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs>>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs>> maxColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs>>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs>> mirrors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs>>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs>> monoHues;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs>>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs>> opacities;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs>>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs>> regionOfInterestCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs>>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs>> relativeCrops;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs>>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs>> removeColors;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs>>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs>> resizes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs>>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs>> rotates;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs>>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs>> scales;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs>>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs>> shears;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs>>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs>> trims;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs>>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs>> unsharpMasks;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs>>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs>> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs> appends) {
            return appends(Output.of(appends));
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAppendArgs... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs>> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs> aspectCrops) {
            return aspectCrops(Output.of(aspectCrops));
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanAspectCropArgs... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs>> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs> backgroundColors) {
            return backgroundColors(Output.of(backgroundColors));
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBackgroundColorArgs... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs>> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs> blurs) {
            return blurs(Output.of(blurs));
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanBlurArgs... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs>> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs> chromaKeys) {
            return chromaKeys(Output.of(chromaKeys));
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanChromaKeyArgs... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs>> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs> composites) {
            return composites(Output.of(composites));
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompositeArgs... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs>> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs> compounds) {
            return compounds(Output.of(compounds));
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCompoundArgs... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs>> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs> contrasts) {
            return contrasts(Output.of(contrasts));
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanContrastArgs... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs>> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs> crops) {
            return crops(Output.of(crops));
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanCropArgs... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs>> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs> faceCrops) {
            return faceCrops(Output.of(faceCrops));
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFaceCropArgs... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs>> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs> featureCrops) {
            return featureCrops(Output.of(featureCrops));
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFeatureCropArgs... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs>> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs> fitAndFills) {
            return fitAndFills(Output.of(fitAndFills));
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanFitAndFillArgs... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs>> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs> goops) {
            return goops(Output.of(goops));
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGoopArgs... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs>> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs> grayscales) {
            return grayscales(Output.of(grayscales));
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanGrayscaleArgs... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs>> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs> hsls) {
            return hsls(Output.of(hsls));
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHslArgs... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs>> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs> hsvs) {
            return hsvs(Output.of(hsvs));
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanHsvArgs... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs>> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs> ifDimensions) {
            return ifDimensions(Output.of(ifDimensions));
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfDimensionArgs... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs>> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs> ifOrientations) {
            return ifOrientations(Output.of(ifOrientations));
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanIfOrientationArgs... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs>> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs> imQueries) {
            return imQueries(Output.of(imQueries));
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanImQueryArgs... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs>> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs> maxColors) {
            return maxColors(Output.of(maxColors));
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMaxColorArgs... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs>> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs> mirrors) {
            return mirrors(Output.of(mirrors));
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMirrorArgs... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs>> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs> monoHues) {
            return monoHues(Output.of(monoHues));
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanMonoHueArgs... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs>> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs> opacities) {
            return opacities(Output.of(opacities));
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanOpacityArgs... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs>> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs> regionOfInterestCrops) {
            return regionOfInterestCrops(Output.of(regionOfInterestCrops));
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRegionOfInterestCropArgs... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs>> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs> relativeCrops) {
            return relativeCrops(Output.of(relativeCrops));
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRelativeCropArgs... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs>> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs> removeColors) {
            return removeColors(Output.of(removeColors));
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRemoveColorArgs... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs>> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs> resizes) {
            return resizes(Output.of(resizes));
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanResizeArgs... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs>> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs> rotates) {
            return rotates(Output.of(rotates));
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanRotateArgs... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs>> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs> scales) {
            return scales(Output.of(scales));
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanScaleArgs... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs>> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs> shears) {
            return shears(Output.of(shears));
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanShearsArgs... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs>> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs> trims) {
            return trims(Output.of(trims));
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanTrimArgs... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs>> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs> unsharpMasks) {
            return unsharpMasks(Output.of(unsharpMasks));
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanUnsharpMaskArgs... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionGreaterThanArgs build() {
            return $;
        }
    }

}
