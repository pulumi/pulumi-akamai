// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppsecRapidRulesState extends com.pulumi.resources.ResourceArgs {

    public static final AppsecRapidRulesState Empty = new AppsecRapidRulesState();

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * Default action that applies to violations of all rapid rules
     * 
     */
    @Import(name="defaultAction")
    private @Nullable Output<String> defaultAction;

    /**
     * @return Default action that applies to violations of all rapid rules
     * 
     */
    public Optional<Output<String>> defaultAction() {
        return Optional.ofNullable(this.defaultAction);
    }

    /**
     * Hidden attribute containing information about rapid rules status enabled/disabled
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Hidden attribute containing information about rapid rules status enabled/disabled
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * JSON-formatted list of rule definition (ID, action, action lock and exception)
     * 
     */
    @Import(name="ruleDefinitions")
    private @Nullable Output<String> ruleDefinitions;

    /**
     * @return JSON-formatted list of rule definition (ID, action, action lock and exception)
     * 
     */
    public Optional<Output<String>> ruleDefinitions() {
        return Optional.ofNullable(this.ruleDefinitions);
    }

    /**
     * Unique identifier of the security policy
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return Unique identifier of the security policy
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    private AppsecRapidRulesState() {}

    private AppsecRapidRulesState(AppsecRapidRulesState $) {
        this.configId = $.configId;
        this.defaultAction = $.defaultAction;
        this.enabled = $.enabled;
        this.ruleDefinitions = $.ruleDefinitions;
        this.securityPolicyId = $.securityPolicyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppsecRapidRulesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppsecRapidRulesState $;

        public Builder() {
            $ = new AppsecRapidRulesState();
        }

        public Builder(AppsecRapidRulesState defaults) {
            $ = new AppsecRapidRulesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param defaultAction Default action that applies to violations of all rapid rules
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(@Nullable Output<String> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction Default action that applies to violations of all rapid rules
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(String defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param enabled Hidden attribute containing information about rapid rules status enabled/disabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Hidden attribute containing information about rapid rules status enabled/disabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param ruleDefinitions JSON-formatted list of rule definition (ID, action, action lock and exception)
         * 
         * @return builder
         * 
         */
        public Builder ruleDefinitions(@Nullable Output<String> ruleDefinitions) {
            $.ruleDefinitions = ruleDefinitions;
            return this;
        }

        /**
         * @param ruleDefinitions JSON-formatted list of rule definition (ID, action, action lock and exception)
         * 
         * @return builder
         * 
         */
        public Builder ruleDefinitions(String ruleDefinitions) {
            return ruleDefinitions(Output.of(ruleDefinitions));
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId Unique identifier of the security policy
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        public AppsecRapidRulesState build() {
            return $;
        }
    }

}
