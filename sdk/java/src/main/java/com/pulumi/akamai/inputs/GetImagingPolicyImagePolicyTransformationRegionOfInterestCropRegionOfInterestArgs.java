// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs Empty = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs();

    /**
     * Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    @Import(name="circleShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs>> circleShapes;

    /**
     * @return Defines a circle with a specified `radius` from its `center` point.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs>>> circleShapes() {
        return Optional.ofNullable(this.circleShapes);
    }

    @Import(name="pointShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs>> pointShapes;

    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs>>> pointShapes() {
        return Optional.ofNullable(this.pointShapes);
    }

    /**
     * Defines a polygon from a series of connected points.
     * 
     */
    @Import(name="polygonShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs>> polygonShapes;

    /**
     * @return Defines a polygon from a series of connected points.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs>>> polygonShapes() {
        return Optional.ofNullable(this.polygonShapes);
    }

    /**
     * Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    @Import(name="rectangleShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs>> rectangleShapes;

    /**
     * @return Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs>>> rectangleShapes() {
        return Optional.ofNullable(this.rectangleShapes);
    }

    /**
     * Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    @Import(name="unionShapes")
    private @Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs>> unionShapes;

    /**
     * @return Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
     * 
     */
    public Optional<Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs>>> unionShapes() {
        return Optional.ofNullable(this.unionShapes);
    }

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs() {}

    private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs $) {
        this.circleShapes = $.circleShapes;
        this.pointShapes = $.pointShapes;
        this.polygonShapes = $.polygonShapes;
        this.rectangleShapes = $.rectangleShapes;
        this.unionShapes = $.unionShapes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param circleShapes Defines a circle with a specified `radius` from its `center` point.
         * 
         * @return builder
         * 
         */
        public Builder circleShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs>> circleShapes) {
            $.circleShapes = circleShapes;
            return this;
        }

        /**
         * @param circleShapes Defines a circle with a specified `radius` from its `center` point.
         * 
         * @return builder
         * 
         */
        public Builder circleShapes(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs> circleShapes) {
            return circleShapes(Output.of(circleShapes));
        }

        /**
         * @param circleShapes Defines a circle with a specified `radius` from its `center` point.
         * 
         * @return builder
         * 
         */
        public Builder circleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestCircleShapeArgs... circleShapes) {
            return circleShapes(List.of(circleShapes));
        }

        public Builder pointShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs>> pointShapes) {
            $.pointShapes = pointShapes;
            return this;
        }

        public Builder pointShapes(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs> pointShapes) {
            return pointShapes(Output.of(pointShapes));
        }

        public Builder pointShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPointShapeArgs... pointShapes) {
            return pointShapes(List.of(pointShapes));
        }

        /**
         * @param polygonShapes Defines a polygon from a series of connected points.
         * 
         * @return builder
         * 
         */
        public Builder polygonShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs>> polygonShapes) {
            $.polygonShapes = polygonShapes;
            return this;
        }

        /**
         * @param polygonShapes Defines a polygon from a series of connected points.
         * 
         * @return builder
         * 
         */
        public Builder polygonShapes(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs> polygonShapes) {
            return polygonShapes(Output.of(polygonShapes));
        }

        /**
         * @param polygonShapes Defines a polygon from a series of connected points.
         * 
         * @return builder
         * 
         */
        public Builder polygonShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestPolygonShapeArgs... polygonShapes) {
            return polygonShapes(List.of(polygonShapes));
        }

        /**
         * @param rectangleShapes Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
         * 
         * @return builder
         * 
         */
        public Builder rectangleShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs>> rectangleShapes) {
            $.rectangleShapes = rectangleShapes;
            return this;
        }

        /**
         * @param rectangleShapes Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
         * 
         * @return builder
         * 
         */
        public Builder rectangleShapes(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs> rectangleShapes) {
            return rectangleShapes(Output.of(rectangleShapes));
        }

        /**
         * @param rectangleShapes Defines a rectangle&#39;s `width` and `height` relative to an `anchor` point at the top left corner.
         * 
         * @return builder
         * 
         */
        public Builder rectangleShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestRectangleShapeArgs... rectangleShapes) {
            return rectangleShapes(List.of(rectangleShapes));
        }

        /**
         * @param unionShapes Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
         * 
         * @return builder
         * 
         */
        public Builder unionShapes(@Nullable Output<List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs>> unionShapes) {
            $.unionShapes = unionShapes;
            return this;
        }

        /**
         * @param unionShapes Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
         * 
         * @return builder
         * 
         */
        public Builder unionShapes(List<GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs> unionShapes) {
            return unionShapes(Output.of(unionShapes));
        }

        /**
         * @param unionShapes Identifies a combined shape based on a set of other shapes. You can use a full JSON object to represent a union or an array of shapes that describe it.
         * 
         * @return builder
         * 
         */
        public Builder unionShapes(GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestUnionShapeArgs... unionShapes) {
            return unionShapes(List.of(unionShapes));
        }

        public GetImagingPolicyImagePolicyTransformationRegionOfInterestCropRegionOfInterestArgs build() {
            return $;
        }
    }

}
