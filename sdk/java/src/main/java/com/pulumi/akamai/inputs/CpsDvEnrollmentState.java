// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.CpsDvEnrollmentAdminContactArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentCsrArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentDnsChallengeArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentHttpChallengeArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentOrganizationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentTechContactArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentTimeoutsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsDvEnrollmentState extends com.pulumi.resources.ResourceArgs {

    public static final CpsDvEnrollmentState Empty = new CpsDvEnrollmentState();

    /**
     * Whether acknowledge warnings before certificate verification
     * 
     */
    @Import(name="acknowledgePreVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePreVerificationWarnings;

    /**
     * @return Whether acknowledge warnings before certificate verification
     * 
     */
    public Optional<Output<Boolean>> acknowledgePreVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePreVerificationWarnings);
    }

    /**
     * Contact information for the certificate administrator to use at organization
     * 
     */
    @Import(name="adminContact")
    private @Nullable Output<CpsDvEnrollmentAdminContactArgs> adminContact;

    /**
     * @return Contact information for the certificate administrator to use at organization
     * 
     */
    public Optional<Output<CpsDvEnrollmentAdminContactArgs>> adminContact() {
        return Optional.ofNullable(this.adminContact);
    }

    /**
     * Allow to duplicate common name
     * 
     */
    @Import(name="allowDuplicateCommonName")
    private @Nullable Output<Boolean> allowDuplicateCommonName;

    /**
     * @return Allow to duplicate common name
     * 
     */
    public Optional<Output<Boolean>> allowDuplicateCommonName() {
        return Optional.ofNullable(this.allowDuplicateCommonName);
    }

    /**
     * Certificate trust chain type
     * 
     */
    @Import(name="certificateChainType")
    private @Nullable Output<String> certificateChainType;

    /**
     * @return Certificate trust chain type
     * 
     */
    public Optional<Output<String>> certificateChainType() {
        return Optional.ofNullable(this.certificateChainType);
    }

    /**
     * Certificate type of enrollment
     * 
     */
    @Import(name="certificateType")
    private @Nullable Output<String> certificateType;

    /**
     * @return Certificate type of enrollment
     * 
     */
    public Optional<Output<String>> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * Common name used for enrollment
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return Common name used for enrollment
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * Contract ID for which enrollment is retrieved
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return Contract ID for which enrollment is retrieved
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * Certificate signing request generated during enrollment creation
     * 
     */
    @Import(name="csr")
    private @Nullable Output<CpsDvEnrollmentCsrArgs> csr;

    /**
     * @return Certificate signing request generated during enrollment creation
     * 
     */
    public Optional<Output<CpsDvEnrollmentCsrArgs>> csr() {
        return Optional.ofNullable(this.csr);
    }

    /**
     * DNS challenge information
     * 
     */
    @Import(name="dnsChallenges")
    private @Nullable Output<List<CpsDvEnrollmentDnsChallengeArgs>> dnsChallenges;

    /**
     * @return DNS challenge information
     * 
     */
    public Optional<Output<List<CpsDvEnrollmentDnsChallengeArgs>>> dnsChallenges() {
        return Optional.ofNullable(this.dnsChallenges);
    }

    /**
     * HTTP challenge information
     * 
     */
    @Import(name="httpChallenges")
    private @Nullable Output<List<CpsDvEnrollmentHttpChallengeArgs>> httpChallenges;

    /**
     * @return HTTP challenge information
     * 
     */
    public Optional<Output<List<CpsDvEnrollmentHttpChallengeArgs>>> httpChallenges() {
        return Optional.ofNullable(this.httpChallenges);
    }

    /**
     * Settings containing network information and TLS Metadata used by CPS
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Settings containing network information and TLS Metadata used by CPS
     * 
     */
    public Optional<Output<CpsDvEnrollmentNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * Organization information
     * 
     */
    @Import(name="organization")
    private @Nullable Output<CpsDvEnrollmentOrganizationArgs> organization;

    /**
     * @return Organization information
     * 
     */
    public Optional<Output<CpsDvEnrollmentOrganizationArgs>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * The registration authority or certificate authority (CA) used to obtain a certificate
     * 
     */
    @Import(name="registrationAuthority")
    private @Nullable Output<String> registrationAuthority;

    /**
     * @return The registration authority or certificate authority (CA) used to obtain a certificate
     * 
     */
    public Optional<Output<String>> registrationAuthority() {
        return Optional.ofNullable(this.registrationAuthority);
    }

    /**
     * List of SANs
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return List of SANs
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * Type of TLS deployment network
     * 
     */
    @Import(name="secureNetwork")
    private @Nullable Output<String> secureNetwork;

    /**
     * @return Type of TLS deployment network
     * 
     */
    public Optional<Output<String>> secureNetwork() {
        return Optional.ofNullable(this.secureNetwork);
    }

    /**
     * SHA algorithm type
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return SHA algorithm type
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Whether Server Name Indication is used for enrollment
     * 
     */
    @Import(name="sniOnly")
    private @Nullable Output<Boolean> sniOnly;

    /**
     * @return Whether Server Name Indication is used for enrollment
     * 
     */
    public Optional<Output<Boolean>> sniOnly() {
        return Optional.ofNullable(this.sniOnly);
    }

    /**
     * Contact information for an administrator at Akamai
     * 
     */
    @Import(name="techContact")
    private @Nullable Output<CpsDvEnrollmentTechContactArgs> techContact;

    /**
     * @return Contact information for an administrator at Akamai
     * 
     */
    public Optional<Output<CpsDvEnrollmentTechContactArgs>> techContact() {
        return Optional.ofNullable(this.techContact);
    }

    /**
     * Enables to set timeout for processing
     * 
     */
    @Import(name="timeouts")
    private @Nullable Output<CpsDvEnrollmentTimeoutsArgs> timeouts;

    /**
     * @return Enables to set timeout for processing
     * 
     */
    public Optional<Output<CpsDvEnrollmentTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * Enrolment validation type
     * 
     */
    @Import(name="validationType")
    private @Nullable Output<String> validationType;

    /**
     * @return Enrolment validation type
     * 
     */
    public Optional<Output<String>> validationType() {
        return Optional.ofNullable(this.validationType);
    }

    private CpsDvEnrollmentState() {}

    private CpsDvEnrollmentState(CpsDvEnrollmentState $) {
        this.acknowledgePreVerificationWarnings = $.acknowledgePreVerificationWarnings;
        this.adminContact = $.adminContact;
        this.allowDuplicateCommonName = $.allowDuplicateCommonName;
        this.certificateChainType = $.certificateChainType;
        this.certificateType = $.certificateType;
        this.commonName = $.commonName;
        this.contractId = $.contractId;
        this.csr = $.csr;
        this.dnsChallenges = $.dnsChallenges;
        this.httpChallenges = $.httpChallenges;
        this.networkConfiguration = $.networkConfiguration;
        this.organization = $.organization;
        this.registrationAuthority = $.registrationAuthority;
        this.sans = $.sans;
        this.secureNetwork = $.secureNetwork;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.sniOnly = $.sniOnly;
        this.techContact = $.techContact;
        this.timeouts = $.timeouts;
        this.validationType = $.validationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsDvEnrollmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsDvEnrollmentState $;

        public Builder() {
            $ = new CpsDvEnrollmentState();
        }

        public Builder(CpsDvEnrollmentState defaults) {
            $ = new CpsDvEnrollmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(@Nullable Output<Boolean> acknowledgePreVerificationWarnings) {
            $.acknowledgePreVerificationWarnings = acknowledgePreVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether acknowledge warnings before certificate verification
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(Boolean acknowledgePreVerificationWarnings) {
            return acknowledgePreVerificationWarnings(Output.of(acknowledgePreVerificationWarnings));
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(@Nullable Output<CpsDvEnrollmentAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        /**
         * @param adminContact Contact information for the certificate administrator to use at organization
         * 
         * @return builder
         * 
         */
        public Builder adminContact(CpsDvEnrollmentAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(@Nullable Output<Boolean> allowDuplicateCommonName) {
            $.allowDuplicateCommonName = allowDuplicateCommonName;
            return this;
        }

        /**
         * @param allowDuplicateCommonName Allow to duplicate common name
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(Boolean allowDuplicateCommonName) {
            return allowDuplicateCommonName(Output.of(allowDuplicateCommonName));
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(@Nullable Output<String> certificateChainType) {
            $.certificateChainType = certificateChainType;
            return this;
        }

        /**
         * @param certificateChainType Certificate trust chain type
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(String certificateChainType) {
            return certificateChainType(Output.of(certificateChainType));
        }

        /**
         * @param certificateType Certificate type of enrollment
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType Certificate type of enrollment
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName Common name used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId Contract ID for which enrollment is retrieved
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param csr Certificate signing request generated during enrollment creation
         * 
         * @return builder
         * 
         */
        public Builder csr(@Nullable Output<CpsDvEnrollmentCsrArgs> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr Certificate signing request generated during enrollment creation
         * 
         * @return builder
         * 
         */
        public Builder csr(CpsDvEnrollmentCsrArgs csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(@Nullable Output<List<CpsDvEnrollmentDnsChallengeArgs>> dnsChallenges) {
            $.dnsChallenges = dnsChallenges;
            return this;
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(List<CpsDvEnrollmentDnsChallengeArgs> dnsChallenges) {
            return dnsChallenges(Output.of(dnsChallenges));
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(CpsDvEnrollmentDnsChallengeArgs... dnsChallenges) {
            return dnsChallenges(List.of(dnsChallenges));
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(@Nullable Output<List<CpsDvEnrollmentHttpChallengeArgs>> httpChallenges) {
            $.httpChallenges = httpChallenges;
            return this;
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(List<CpsDvEnrollmentHttpChallengeArgs> httpChallenges) {
            return httpChallenges(Output.of(httpChallenges));
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(CpsDvEnrollmentHttpChallengeArgs... httpChallenges) {
            return httpChallenges(List.of(httpChallenges));
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS Metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Settings containing network information and TLS Metadata used by CPS
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CpsDvEnrollmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<CpsDvEnrollmentOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization information
         * 
         * @return builder
         * 
         */
        public Builder organization(CpsDvEnrollmentOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param registrationAuthority The registration authority or certificate authority (CA) used to obtain a certificate
         * 
         * @return builder
         * 
         */
        public Builder registrationAuthority(@Nullable Output<String> registrationAuthority) {
            $.registrationAuthority = registrationAuthority;
            return this;
        }

        /**
         * @param registrationAuthority The registration authority or certificate authority (CA) used to obtain a certificate
         * 
         * @return builder
         * 
         */
        public Builder registrationAuthority(String registrationAuthority) {
            return registrationAuthority(Output.of(registrationAuthority));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans List of SANs
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(@Nullable Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork Type of TLS deployment network
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param signatureAlgorithm SHA algorithm type
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm SHA algorithm type
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(@Nullable Output<Boolean> sniOnly) {
            $.sniOnly = sniOnly;
            return this;
        }

        /**
         * @param sniOnly Whether Server Name Indication is used for enrollment
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Boolean sniOnly) {
            return sniOnly(Output.of(sniOnly));
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(@Nullable Output<CpsDvEnrollmentTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        /**
         * @param techContact Contact information for an administrator at Akamai
         * 
         * @return builder
         * 
         */
        public Builder techContact(CpsDvEnrollmentTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(@Nullable Output<CpsDvEnrollmentTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        /**
         * @param timeouts Enables to set timeout for processing
         * 
         * @return builder
         * 
         */
        public Builder timeouts(CpsDvEnrollmentTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param validationType Enrolment validation type
         * 
         * @return builder
         * 
         */
        public Builder validationType(@Nullable Output<String> validationType) {
            $.validationType = validationType;
            return this;
        }

        /**
         * @param validationType Enrolment validation type
         * 
         * @return builder
         * 
         */
        public Builder validationType(String validationType) {
            return validationType(Output.of(validationType));
        }

        public CpsDvEnrollmentState build() {
            return $;
        }
    }

}
