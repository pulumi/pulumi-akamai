// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.CpsDvEnrollmentAdminContactArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentCsrArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentDnsChallengeArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentHttpChallengeArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentNetworkConfigurationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentOrganizationArgs;
import com.pulumi.akamai.inputs.CpsDvEnrollmentTechContactArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsDvEnrollmentState extends com.pulumi.resources.ResourceArgs {

    public static final CpsDvEnrollmentState Empty = new CpsDvEnrollmentState();

    /**
     * Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
     * 
     */
    @Import(name="acknowledgePreVerificationWarnings")
    private @Nullable Output<Boolean> acknowledgePreVerificationWarnings;

    /**
     * @return Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
     * 
     */
    public Optional<Output<Boolean>> acknowledgePreVerificationWarnings() {
        return Optional.ofNullable(this.acknowledgePreVerificationWarnings);
    }

    /**
     * Contact information for the certificate administrator at your company.
     * 
     */
    @Import(name="adminContact")
    private @Nullable Output<CpsDvEnrollmentAdminContactArgs> adminContact;

    /**
     * @return Contact information for the certificate administrator at your company.
     * 
     */
    public Optional<Output<CpsDvEnrollmentAdminContactArgs>> adminContact() {
        return Optional.ofNullable(this.adminContact);
    }

    /**
     * (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
     * 
     */
    @Import(name="allowDuplicateCommonName")
    private @Nullable Output<Boolean> allowDuplicateCommonName;

    /**
     * @return (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
     * 
     */
    public Optional<Output<Boolean>> allowDuplicateCommonName() {
        return Optional.ofNullable(this.allowDuplicateCommonName);
    }

    /**
     * Certificate trust chain type.
     * 
     */
    @Import(name="certificateChainType")
    private @Nullable Output<String> certificateChainType;

    /**
     * @return Certificate trust chain type.
     * 
     */
    public Optional<Output<String>> certificateChainType() {
        return Optional.ofNullable(this.certificateChainType);
    }

    /**
     * Certificate type of enrollment
     * 
     */
    @Import(name="certificateType")
    private @Nullable Output<String> certificateType;

    /**
     * @return Certificate type of enrollment
     * 
     */
    public Optional<Output<String>> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
     * 
     */
    @Import(name="contractId")
    private @Nullable Output<String> contractId;

    /**
     * @return (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
     * 
     */
    public Optional<Output<String>> contractId() {
        return Optional.ofNullable(this.contractId);
    }

    /**
     * When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     * 
     */
    @Import(name="csr")
    private @Nullable Output<CpsDvEnrollmentCsrArgs> csr;

    /**
     * @return When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
     * 
     */
    public Optional<Output<CpsDvEnrollmentCsrArgs>> csr() {
        return Optional.ofNullable(this.csr);
    }

    /**
     * DNS challenge information
     * 
     */
    @Import(name="dnsChallenges")
    private @Nullable Output<List<CpsDvEnrollmentDnsChallengeArgs>> dnsChallenges;

    /**
     * @return DNS challenge information
     * 
     */
    public Optional<Output<List<CpsDvEnrollmentDnsChallengeArgs>>> dnsChallenges() {
        return Optional.ofNullable(this.dnsChallenges);
    }

    /**
     * Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
     * 
     * @deprecated
     * Deprecated, don&#39;t use; always false
     * 
     */
    @Deprecated /* Deprecated, don't use; always false */
    @Import(name="enableMultiStackedCertificates")
    private @Nullable Output<Boolean> enableMultiStackedCertificates;

    /**
     * @return Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
     * 
     * @deprecated
     * Deprecated, don&#39;t use; always false
     * 
     */
    @Deprecated /* Deprecated, don't use; always false */
    public Optional<Output<Boolean>> enableMultiStackedCertificates() {
        return Optional.ofNullable(this.enableMultiStackedCertificates);
    }

    /**
     * HTTP challenge information
     * 
     */
    @Import(name="httpChallenges")
    private @Nullable Output<List<CpsDvEnrollmentHttpChallengeArgs>> httpChallenges;

    /**
     * @return HTTP challenge information
     * 
     */
    public Optional<Output<List<CpsDvEnrollmentHttpChallengeArgs>>> httpChallenges() {
        return Optional.ofNullable(this.httpChallenges);
    }

    /**
     * The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
     * 
     */
    public Optional<Output<CpsDvEnrollmentNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * Your organization information.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<CpsDvEnrollmentOrganizationArgs> organization;

    /**
     * @return Your organization information.
     * 
     */
    public Optional<Output<CpsDvEnrollmentOrganizationArgs>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * The registration authority or certificate authority (CA) used to obtain a certificate
     * 
     */
    @Import(name="registrationAuthority")
    private @Nullable Output<String> registrationAuthority;

    /**
     * @return The registration authority or certificate authority (CA) used to obtain a certificate
     * 
     */
    public Optional<Output<String>> registrationAuthority() {
        return Optional.ofNullable(this.registrationAuthority);
    }

    /**
     * Additional common names to create a Subject Alternative Names (SAN) list.
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return Additional common names to create a Subject Alternative Names (SAN) list.
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
     * 
     */
    @Import(name="secureNetwork")
    private @Nullable Output<String> secureNetwork;

    /**
     * @return The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
     * 
     */
    public Optional<Output<String>> secureNetwork() {
        return Optional.ofNullable(this.secureNetwork);
    }

    /**
     * The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
     * 
     */
    @Import(name="sniOnly")
    private @Nullable Output<Boolean> sniOnly;

    /**
     * @return Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
     * 
     */
    public Optional<Output<Boolean>> sniOnly() {
        return Optional.ofNullable(this.sniOnly);
    }

    /**
     * The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
     * 
     */
    @Import(name="techContact")
    private @Nullable Output<CpsDvEnrollmentTechContactArgs> techContact;

    /**
     * @return The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
     * 
     */
    public Optional<Output<CpsDvEnrollmentTechContactArgs>> techContact() {
        return Optional.ofNullable(this.techContact);
    }

    /**
     * Enrolment validation type
     * 
     */
    @Import(name="validationType")
    private @Nullable Output<String> validationType;

    /**
     * @return Enrolment validation type
     * 
     */
    public Optional<Output<String>> validationType() {
        return Optional.ofNullable(this.validationType);
    }

    private CpsDvEnrollmentState() {}

    private CpsDvEnrollmentState(CpsDvEnrollmentState $) {
        this.acknowledgePreVerificationWarnings = $.acknowledgePreVerificationWarnings;
        this.adminContact = $.adminContact;
        this.allowDuplicateCommonName = $.allowDuplicateCommonName;
        this.certificateChainType = $.certificateChainType;
        this.certificateType = $.certificateType;
        this.commonName = $.commonName;
        this.contractId = $.contractId;
        this.csr = $.csr;
        this.dnsChallenges = $.dnsChallenges;
        this.enableMultiStackedCertificates = $.enableMultiStackedCertificates;
        this.httpChallenges = $.httpChallenges;
        this.networkConfiguration = $.networkConfiguration;
        this.organization = $.organization;
        this.registrationAuthority = $.registrationAuthority;
        this.sans = $.sans;
        this.secureNetwork = $.secureNetwork;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.sniOnly = $.sniOnly;
        this.techContact = $.techContact;
        this.validationType = $.validationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsDvEnrollmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsDvEnrollmentState $;

        public Builder() {
            $ = new CpsDvEnrollmentState();
        }

        public Builder(CpsDvEnrollmentState defaults) {
            $ = new CpsDvEnrollmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(@Nullable Output<Boolean> acknowledgePreVerificationWarnings) {
            $.acknowledgePreVerificationWarnings = acknowledgePreVerificationWarnings;
            return this;
        }

        /**
         * @param acknowledgePreVerificationWarnings Whether you want to automatically acknowledge the validation warnings of the current job state and proceed with the execution of a change.
         * 
         * @return builder
         * 
         */
        public Builder acknowledgePreVerificationWarnings(Boolean acknowledgePreVerificationWarnings) {
            return acknowledgePreVerificationWarnings(Output.of(acknowledgePreVerificationWarnings));
        }

        /**
         * @param adminContact Contact information for the certificate administrator at your company.
         * 
         * @return builder
         * 
         */
        public Builder adminContact(@Nullable Output<CpsDvEnrollmentAdminContactArgs> adminContact) {
            $.adminContact = adminContact;
            return this;
        }

        /**
         * @param adminContact Contact information for the certificate administrator at your company.
         * 
         * @return builder
         * 
         */
        public Builder adminContact(CpsDvEnrollmentAdminContactArgs adminContact) {
            return adminContact(Output.of(adminContact));
        }

        /**
         * @param allowDuplicateCommonName (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(@Nullable Output<Boolean> allowDuplicateCommonName) {
            $.allowDuplicateCommonName = allowDuplicateCommonName;
            return this;
        }

        /**
         * @param allowDuplicateCommonName (Optional) Boolean. Set to `true` if you want to reuse a common name that&#39;s part of an existing enrollment.
         * 
         * @return builder
         * 
         */
        public Builder allowDuplicateCommonName(Boolean allowDuplicateCommonName) {
            return allowDuplicateCommonName(Output.of(allowDuplicateCommonName));
        }

        /**
         * @param certificateChainType Certificate trust chain type.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(@Nullable Output<String> certificateChainType) {
            $.certificateChainType = certificateChainType;
            return this;
        }

        /**
         * @param certificateChainType Certificate trust chain type.
         * 
         * @return builder
         * 
         */
        public Builder certificateChainType(String certificateChainType) {
            return certificateChainType(Output.of(certificateChainType));
        }

        /**
         * @param certificateType Certificate type of enrollment
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType Certificate type of enrollment
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param commonName (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName (Required) The fully qualified domain name (FQDN) for which you plan to use your certificate. The domain name you specify here must be owned or have legal rights to use the domain by the company you specify as `organization`. The company that owns the domain name must be a legally incorporated entity and be active and in good standing.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param contractId (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(@Nullable Output<String> contractId) {
            $.contractId = contractId;
            return this;
        }

        /**
         * @param contractId (Required) A contract&#39;s ID, optionally with the `ctr_` prefix.
         * 
         * @return builder
         * 
         */
        public Builder contractId(String contractId) {
            return contractId(Output.of(contractId));
        }

        /**
         * @param csr When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
         * 
         * @return builder
         * 
         */
        public Builder csr(@Nullable Output<CpsDvEnrollmentCsrArgs> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr When you create an enrollment, you also generate a certificate signing request (CSR) using CPS. CPS signs the CSR with the private key. The CSR contains all the information the CA needs to issue your certificate.
         * 
         * @return builder
         * 
         */
        public Builder csr(CpsDvEnrollmentCsrArgs csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(@Nullable Output<List<CpsDvEnrollmentDnsChallengeArgs>> dnsChallenges) {
            $.dnsChallenges = dnsChallenges;
            return this;
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(List<CpsDvEnrollmentDnsChallengeArgs> dnsChallenges) {
            return dnsChallenges(Output.of(dnsChallenges));
        }

        /**
         * @param dnsChallenges DNS challenge information
         * 
         * @return builder
         * 
         */
        public Builder dnsChallenges(CpsDvEnrollmentDnsChallengeArgs... dnsChallenges) {
            return dnsChallenges(List.of(dnsChallenges));
        }

        /**
         * @param enableMultiStackedCertificates Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated, don&#39;t use; always false
         * 
         */
        @Deprecated /* Deprecated, don't use; always false */
        public Builder enableMultiStackedCertificates(@Nullable Output<Boolean> enableMultiStackedCertificates) {
            $.enableMultiStackedCertificates = enableMultiStackedCertificates;
            return this;
        }

        /**
         * @param enableMultiStackedCertificates Whether to enable an ECDSA certificate in addition to an RSA certificate. CPS automatically performs all certificate operations on both certificates, and uses the best certificate for each client connection to your secure properties. If you are pinning the certificates, you need to pin both the RSA and the ECDSA certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * Deprecated, don&#39;t use; always false
         * 
         */
        @Deprecated /* Deprecated, don't use; always false */
        public Builder enableMultiStackedCertificates(Boolean enableMultiStackedCertificates) {
            return enableMultiStackedCertificates(Output.of(enableMultiStackedCertificates));
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(@Nullable Output<List<CpsDvEnrollmentHttpChallengeArgs>> httpChallenges) {
            $.httpChallenges = httpChallenges;
            return this;
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(List<CpsDvEnrollmentHttpChallengeArgs> httpChallenges) {
            return httpChallenges(Output.of(httpChallenges));
        }

        /**
         * @param httpChallenges HTTP challenge information
         * 
         * @return builder
         * 
         */
        public Builder httpChallenges(CpsDvEnrollmentHttpChallengeArgs... httpChallenges) {
            return httpChallenges(List.of(httpChallenges));
        }

        /**
         * @param networkConfiguration The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<CpsDvEnrollmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration The network information and TLS Metadata you want CPS to use to push the completed certificate to the network.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(CpsDvEnrollmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param organization Your organization information.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<CpsDvEnrollmentOrganizationArgs> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Your organization information.
         * 
         * @return builder
         * 
         */
        public Builder organization(CpsDvEnrollmentOrganizationArgs organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param registrationAuthority The registration authority or certificate authority (CA) used to obtain a certificate
         * 
         * @return builder
         * 
         */
        public Builder registrationAuthority(@Nullable Output<String> registrationAuthority) {
            $.registrationAuthority = registrationAuthority;
            return this;
        }

        /**
         * @param registrationAuthority The registration authority or certificate authority (CA) used to obtain a certificate
         * 
         * @return builder
         * 
         */
        public Builder registrationAuthority(String registrationAuthority) {
            return registrationAuthority(Output.of(registrationAuthority));
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans Additional common names to create a Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param secureNetwork The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(@Nullable Output<String> secureNetwork) {
            $.secureNetwork = secureNetwork;
            return this;
        }

        /**
         * @param secureNetwork The type of deployment network you want to use. `standard-tls` deploys your certificate to Akamai&#39;s standard secure network, but it isn&#39;t PCI compliant. `enhanced-tls` deploys your certificate to Akamai&#39;s more secure network with PCI compliance capability.
         * 
         * @return builder
         * 
         */
        public Builder secureNetwork(String secureNetwork) {
            return secureNetwork(Output.of(secureNetwork));
        }

        /**
         * @param signatureAlgorithm The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The Secure Hash Algorithm (SHA) function, either `SHA-1` or `SHA-256`.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param sniOnly Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(@Nullable Output<Boolean> sniOnly) {
            $.sniOnly = sniOnly;
            return this;
        }

        /**
         * @param sniOnly Whether you want to enable SNI-only extension for the enrollment. Server Name Indication (SNI) is an extension of the Transport Layer Security (TLS) networking protocol. It allows a server to present multiple certificates on the same IP address. All modern web browsers support the SNI extension. If you have the same SAN on two or more certificates with the SNI-only option set, Akamai may serve traffic using any certificate which matches the requested SNI hostname. You should avoid multiple certificates with overlapping SAN names when using SNI-only. You can&#39;t change this setting once an enrollment is created.
         * 
         * @return builder
         * 
         */
        public Builder sniOnly(Boolean sniOnly) {
            return sniOnly(Output.of(sniOnly));
        }

        /**
         * @param techContact The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
         * 
         * @return builder
         * 
         */
        public Builder techContact(@Nullable Output<CpsDvEnrollmentTechContactArgs> techContact) {
            $.techContact = techContact;
            return this;
        }

        /**
         * @param techContact The technical contact within Akamai. This is the person you work closest with at Akamai and who can verify the certificate request. The CA calls this contact if there are any issues with the certificate and they can&#39;t reach the `admin_contact`.
         * 
         * @return builder
         * 
         */
        public Builder techContact(CpsDvEnrollmentTechContactArgs techContact) {
            return techContact(Output.of(techContact));
        }

        /**
         * @param validationType Enrolment validation type
         * 
         * @return builder
         * 
         */
        public Builder validationType(@Nullable Output<String> validationType) {
            $.validationType = validationType;
            return this;
        }

        /**
         * @param validationType Enrolment validation type
         * 
         * @return builder
         * 
         */
        public Builder validationType(String validationType) {
            return validationType(Output.of(validationType));
        }

        public CpsDvEnrollmentState build() {
            return $;
        }
    }

}
