// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetCloudletsSharedPolicyActivationsStagingLatest extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudletsSharedPolicyActivationsStagingLatest Empty = new GetCloudletsSharedPolicyActivationsStagingLatest();

    /**
     * Identifies the activation.
     * 
     */
    @Import(name="activationId", required=true)
    private Integer activationId;

    /**
     * @return Identifies the activation.
     * 
     */
    public Integer activationId() {
        return this.activationId;
    }

    /**
     * The username who created the activation.
     * 
     */
    @Import(name="createdBy", required=true)
    private String createdBy;

    /**
     * @return The username who created the activation.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }

    /**
     * ISO 8601 timestamp indicating when the activation was created.
     * 
     */
    @Import(name="createdDate", required=true)
    private String createdDate;

    /**
     * @return ISO 8601 timestamp indicating when the activation was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in &#39;failureDetails&#39;.
     * 
     */
    @Import(name="finishDate", required=true)
    private String finishDate;

    /**
     * @return ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in &#39;failureDetails&#39;.
     * 
     */
    public String finishDate() {
        return this.finishDate;
    }

    /**
     * The networks where you can activate or deactivate the policy version, either &#39;PRODUCTION&#39; or &#39;STAGING&#39;.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    /**
     * @return The networks where you can activate or deactivate the policy version, either &#39;PRODUCTION&#39; or &#39;STAGING&#39;.
     * 
     */
    public String network() {
        return this.network;
    }

    /**
     * The operations that you can perform on a policy version, either &#39;ACTIVATION&#39; or &#39;DEACTIVATION&#39;.
     * 
     */
    @Import(name="operation", required=true)
    private String operation;

    /**
     * @return The operations that you can perform on a policy version, either &#39;ACTIVATION&#39; or &#39;DEACTIVATION&#39;.
     * 
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Identifies the shared policy.
     * 
     */
    @Import(name="policyId", required=true)
    private Integer policyId;

    /**
     * @return Identifies the shared policy.
     * 
     */
    public Integer policyId() {
        return this.policyId;
    }

    /**
     * The number of the policy version.
     * 
     */
    @Import(name="policyVersion", required=true)
    private Integer policyVersion;

    /**
     * @return The number of the policy version.
     * 
     */
    public Integer policyVersion() {
        return this.policyVersion;
    }

    /**
     * Indicates if the policy version is deleted.
     * 
     */
    @Import(name="policyVersionDeleted", required=true)
    private Boolean policyVersionDeleted;

    /**
     * @return Indicates if the policy version is deleted.
     * 
     */
    public Boolean policyVersionDeleted() {
        return this.policyVersionDeleted;
    }

    /**
     * The status of the operation, either &#39;IN_PROGRESS&#39;, &#39;SUCCESS&#39;, or &#39;FAILED&#39;.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The status of the operation, either &#39;IN_PROGRESS&#39;, &#39;SUCCESS&#39;, or &#39;FAILED&#39;.
     * 
     */
    public String status() {
        return this.status;
    }

    private GetCloudletsSharedPolicyActivationsStagingLatest() {}

    private GetCloudletsSharedPolicyActivationsStagingLatest(GetCloudletsSharedPolicyActivationsStagingLatest $) {
        this.activationId = $.activationId;
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.finishDate = $.finishDate;
        this.network = $.network;
        this.operation = $.operation;
        this.policyId = $.policyId;
        this.policyVersion = $.policyVersion;
        this.policyVersionDeleted = $.policyVersionDeleted;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudletsSharedPolicyActivationsStagingLatest defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudletsSharedPolicyActivationsStagingLatest $;

        public Builder() {
            $ = new GetCloudletsSharedPolicyActivationsStagingLatest();
        }

        public Builder(GetCloudletsSharedPolicyActivationsStagingLatest defaults) {
            $ = new GetCloudletsSharedPolicyActivationsStagingLatest(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationId Identifies the activation.
         * 
         * @return builder
         * 
         */
        public Builder activationId(Integer activationId) {
            $.activationId = activationId;
            return this;
        }

        /**
         * @param createdBy The username who created the activation.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdDate ISO 8601 timestamp indicating when the activation was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param finishDate ISO 8601 timestamp indicating when the activation ended, either successfully or unsuccessfully. You can check details of unsuccessful attempts in &#39;failureDetails&#39;.
         * 
         * @return builder
         * 
         */
        public Builder finishDate(String finishDate) {
            $.finishDate = finishDate;
            return this;
        }

        /**
         * @param network The networks where you can activate or deactivate the policy version, either &#39;PRODUCTION&#39; or &#39;STAGING&#39;.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            $.network = network;
            return this;
        }

        /**
         * @param operation The operations that you can perform on a policy version, either &#39;ACTIVATION&#39; or &#39;DEACTIVATION&#39;.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param policyId Identifies the shared policy.
         * 
         * @return builder
         * 
         */
        public Builder policyId(Integer policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyVersion The number of the policy version.
         * 
         * @return builder
         * 
         */
        public Builder policyVersion(Integer policyVersion) {
            $.policyVersion = policyVersion;
            return this;
        }

        /**
         * @param policyVersionDeleted Indicates if the policy version is deleted.
         * 
         * @return builder
         * 
         */
        public Builder policyVersionDeleted(Boolean policyVersionDeleted) {
            $.policyVersionDeleted = policyVersionDeleted;
            return this;
        }

        /**
         * @param status The status of the operation, either &#39;IN_PROGRESS&#39;, &#39;SUCCESS&#39;, or &#39;FAILED&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public GetCloudletsSharedPolicyActivationsStagingLatest build() {
            if ($.activationId == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "activationId");
            }
            if ($.createdBy == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "createdBy");
            }
            if ($.createdDate == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "createdDate");
            }
            if ($.finishDate == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "finishDate");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "network");
            }
            if ($.operation == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "operation");
            }
            if ($.policyId == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "policyId");
            }
            if ($.policyVersion == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "policyVersion");
            }
            if ($.policyVersionDeleted == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "policyVersionDeleted");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetCloudletsSharedPolicyActivationsStagingLatest", "status");
            }
            return $;
        }
    }

}
