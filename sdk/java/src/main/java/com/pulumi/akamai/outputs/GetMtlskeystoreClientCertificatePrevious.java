// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetMtlskeystoreClientCertificatePreviousCertificateBlock;
import com.pulumi.akamai.outputs.GetMtlskeystoreClientCertificatePreviousCsrBlock;
import com.pulumi.akamai.outputs.GetMtlskeystoreClientCertificatePreviousProperty;
import com.pulumi.akamai.outputs.GetMtlskeystoreClientCertificatePreviousValidation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMtlskeystoreClientCertificatePrevious {
    /**
     * @return Details of the certificate block for the client certificate version.
     * 
     */
    private GetMtlskeystoreClientCertificatePreviousCertificateBlock certificateBlock;
    /**
     * @return The user who uploaded the `THIRD_PARTY` client certificate version.
     * 
     */
    private String certificateSubmittedBy;
    /**
     * @return An ISO 8601 timestamp indicating when the `THIRD_PARTY` signer client certificate version was uploaded.
     * 
     */
    private String certificateSubmittedDate;
    /**
     * @return The user who created the client certificate version.
     * 
     */
    private String createdBy;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    private String createdDate;
    /**
     * @return Details of the Certificate Signing Request (CSR) for the client certificate version.
     * 
     */
    private GetMtlskeystoreClientCertificatePreviousCsrBlock csrBlock;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request.
     * 
     */
    private String deleteRequestedDate;
    /**
     * @return Specifies the key elliptic curve when the key algorithm `ECDSA` is used.
     * 
     */
    private String ellipticCurve;
    /**
     * @return An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    private String expiryDate;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    private String issuedDate;
    /**
     * @return The signing entity of the client certificate version.
     * 
     */
    private String issuer;
    /**
     * @return Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    private String keyAlgorithm;
    /**
     * @return The private key length of the client certificate version when the key algorithm `RSA` is used.
     * 
     */
    private String keySizeInBytes;
    /**
     * @return A list of properties associated with the client certificate.
     * 
     */
    private List<GetMtlskeystoreClientCertificatePreviousProperty> properties;
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s scheduled deletion.
     * 
     */
    private String scheduledDeleteDate;
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    private String status;
    /**
     * @return The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    private String subject;
    /**
     * @return Validation results for the client certificate version.
     * 
     */
    private GetMtlskeystoreClientCertificatePreviousValidation validation;
    /**
     * @return The unique identifier of the client certificate version.
     * 
     */
    private Integer version;
    /**
     * @return Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    private String versionGuid;

    private GetMtlskeystoreClientCertificatePrevious() {}
    /**
     * @return Details of the certificate block for the client certificate version.
     * 
     */
    public GetMtlskeystoreClientCertificatePreviousCertificateBlock certificateBlock() {
        return this.certificateBlock;
    }
    /**
     * @return The user who uploaded the `THIRD_PARTY` client certificate version.
     * 
     */
    public String certificateSubmittedBy() {
        return this.certificateSubmittedBy;
    }
    /**
     * @return An ISO 8601 timestamp indicating when the `THIRD_PARTY` signer client certificate version was uploaded.
     * 
     */
    public String certificateSubmittedDate() {
        return this.certificateSubmittedDate;
    }
    /**
     * @return The user who created the client certificate version.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s creation.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return Details of the Certificate Signing Request (CSR) for the client certificate version.
     * 
     */
    public GetMtlskeystoreClientCertificatePreviousCsrBlock csrBlock() {
        return this.csrBlock;
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s deletion request.
     * 
     */
    public String deleteRequestedDate() {
        return this.deleteRequestedDate;
    }
    /**
     * @return Specifies the key elliptic curve when the key algorithm `ECDSA` is used.
     * 
     */
    public String ellipticCurve() {
        return this.ellipticCurve;
    }
    /**
     * @return An ISO 8601 timestamp indicating when the client certificate version expires.
     * 
     */
    public String expiryDate() {
        return this.expiryDate;
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s availability.
     * 
     */
    public String issuedDate() {
        return this.issuedDate;
    }
    /**
     * @return The signing entity of the client certificate version.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Identifies the client certificate version&#39;s encryption algorithm. Supported values are `RSA` and `ECDSA`.
     * 
     */
    public String keyAlgorithm() {
        return this.keyAlgorithm;
    }
    /**
     * @return The private key length of the client certificate version when the key algorithm `RSA` is used.
     * 
     */
    public String keySizeInBytes() {
        return this.keySizeInBytes;
    }
    /**
     * @return A list of properties associated with the client certificate.
     * 
     */
    public List<GetMtlskeystoreClientCertificatePreviousProperty> properties() {
        return this.properties;
    }
    /**
     * @return An ISO 8601 timestamp indicating the client certificate version&#39;s scheduled deletion.
     * 
     */
    public String scheduledDeleteDate() {
        return this.scheduledDeleteDate;
    }
    /**
     * @return Specifies the algorithm that secures the data exchange between the edge server and origin.
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return The client certificate version status. Possible values: `AWAITING_SIGNED_CERTIFICATE`, `DEPLOYMENT_PENDING`, `DEPLOYED`, or `DELETE_PENDING`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The public key&#39;s entity stored in the client certificate version&#39;s subject public key field.
     * 
     */
    public String subject() {
        return this.subject;
    }
    /**
     * @return Validation results for the client certificate version.
     * 
     */
    public GetMtlskeystoreClientCertificatePreviousValidation validation() {
        return this.validation;
    }
    /**
     * @return The unique identifier of the client certificate version.
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Unique identifier for the client certificate version. Use it to configure mutual authentication (mTLS) sessions between the origin and edge servers in Property Manager&#39;s Mutual TLS Origin Keystore behavior.
     * 
     */
    public String versionGuid() {
        return this.versionGuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMtlskeystoreClientCertificatePrevious defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetMtlskeystoreClientCertificatePreviousCertificateBlock certificateBlock;
        private String certificateSubmittedBy;
        private String certificateSubmittedDate;
        private String createdBy;
        private String createdDate;
        private GetMtlskeystoreClientCertificatePreviousCsrBlock csrBlock;
        private String deleteRequestedDate;
        private String ellipticCurve;
        private String expiryDate;
        private String issuedDate;
        private String issuer;
        private String keyAlgorithm;
        private String keySizeInBytes;
        private List<GetMtlskeystoreClientCertificatePreviousProperty> properties;
        private String scheduledDeleteDate;
        private String signatureAlgorithm;
        private String status;
        private String subject;
        private GetMtlskeystoreClientCertificatePreviousValidation validation;
        private Integer version;
        private String versionGuid;
        public Builder() {}
        public Builder(GetMtlskeystoreClientCertificatePrevious defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateBlock = defaults.certificateBlock;
    	      this.certificateSubmittedBy = defaults.certificateSubmittedBy;
    	      this.certificateSubmittedDate = defaults.certificateSubmittedDate;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.csrBlock = defaults.csrBlock;
    	      this.deleteRequestedDate = defaults.deleteRequestedDate;
    	      this.ellipticCurve = defaults.ellipticCurve;
    	      this.expiryDate = defaults.expiryDate;
    	      this.issuedDate = defaults.issuedDate;
    	      this.issuer = defaults.issuer;
    	      this.keyAlgorithm = defaults.keyAlgorithm;
    	      this.keySizeInBytes = defaults.keySizeInBytes;
    	      this.properties = defaults.properties;
    	      this.scheduledDeleteDate = defaults.scheduledDeleteDate;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.status = defaults.status;
    	      this.subject = defaults.subject;
    	      this.validation = defaults.validation;
    	      this.version = defaults.version;
    	      this.versionGuid = defaults.versionGuid;
        }

        @CustomType.Setter
        public Builder certificateBlock(GetMtlskeystoreClientCertificatePreviousCertificateBlock certificateBlock) {
            if (certificateBlock == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "certificateBlock");
            }
            this.certificateBlock = certificateBlock;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSubmittedBy(String certificateSubmittedBy) {
            if (certificateSubmittedBy == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "certificateSubmittedBy");
            }
            this.certificateSubmittedBy = certificateSubmittedBy;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSubmittedDate(String certificateSubmittedDate) {
            if (certificateSubmittedDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "certificateSubmittedDate");
            }
            this.certificateSubmittedDate = certificateSubmittedDate;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            if (createdDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "createdDate");
            }
            this.createdDate = createdDate;
            return this;
        }
        @CustomType.Setter
        public Builder csrBlock(GetMtlskeystoreClientCertificatePreviousCsrBlock csrBlock) {
            if (csrBlock == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "csrBlock");
            }
            this.csrBlock = csrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder deleteRequestedDate(String deleteRequestedDate) {
            if (deleteRequestedDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "deleteRequestedDate");
            }
            this.deleteRequestedDate = deleteRequestedDate;
            return this;
        }
        @CustomType.Setter
        public Builder ellipticCurve(String ellipticCurve) {
            if (ellipticCurve == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "ellipticCurve");
            }
            this.ellipticCurve = ellipticCurve;
            return this;
        }
        @CustomType.Setter
        public Builder expiryDate(String expiryDate) {
            if (expiryDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "expiryDate");
            }
            this.expiryDate = expiryDate;
            return this;
        }
        @CustomType.Setter
        public Builder issuedDate(String issuedDate) {
            if (issuedDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "issuedDate");
            }
            this.issuedDate = issuedDate;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder keyAlgorithm(String keyAlgorithm) {
            if (keyAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "keyAlgorithm");
            }
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder keySizeInBytes(String keySizeInBytes) {
            if (keySizeInBytes == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "keySizeInBytes");
            }
            this.keySizeInBytes = keySizeInBytes;
            return this;
        }
        @CustomType.Setter
        public Builder properties(List<GetMtlskeystoreClientCertificatePreviousProperty> properties) {
            if (properties == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "properties");
            }
            this.properties = properties;
            return this;
        }
        public Builder properties(GetMtlskeystoreClientCertificatePreviousProperty... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder scheduledDeleteDate(String scheduledDeleteDate) {
            if (scheduledDeleteDate == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "scheduledDeleteDate");
            }
            this.scheduledDeleteDate = scheduledDeleteDate;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subject(String subject) {
            if (subject == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "subject");
            }
            this.subject = subject;
            return this;
        }
        @CustomType.Setter
        public Builder validation(GetMtlskeystoreClientCertificatePreviousValidation validation) {
            if (validation == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "validation");
            }
            this.validation = validation;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionGuid(String versionGuid) {
            if (versionGuid == null) {
              throw new MissingRequiredPropertyException("GetMtlskeystoreClientCertificatePrevious", "versionGuid");
            }
            this.versionGuid = versionGuid;
            return this;
        }
        public GetMtlskeystoreClientCertificatePrevious build() {
            final var _resultValue = new GetMtlskeystoreClientCertificatePrevious();
            _resultValue.certificateBlock = certificateBlock;
            _resultValue.certificateSubmittedBy = certificateSubmittedBy;
            _resultValue.certificateSubmittedDate = certificateSubmittedDate;
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.csrBlock = csrBlock;
            _resultValue.deleteRequestedDate = deleteRequestedDate;
            _resultValue.ellipticCurve = ellipticCurve;
            _resultValue.expiryDate = expiryDate;
            _resultValue.issuedDate = issuedDate;
            _resultValue.issuer = issuer;
            _resultValue.keyAlgorithm = keyAlgorithm;
            _resultValue.keySizeInBytes = keySizeInBytes;
            _resultValue.properties = properties;
            _resultValue.scheduledDeleteDate = scheduledDeleteDate;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.status = status;
            _resultValue.subject = subject;
            _resultValue.validation = validation;
            _resultValue.version = version;
            _resultValue.versionGuid = versionGuid;
            return _resultValue;
        }
    }
}
