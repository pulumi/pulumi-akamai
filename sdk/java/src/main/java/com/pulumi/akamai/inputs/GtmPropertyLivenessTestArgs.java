// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GtmPropertyLivenessTestHttpHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GtmPropertyLivenessTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GtmPropertyLivenessTestArgs Empty = new GtmPropertyLivenessTestArgs();

    @Import(name="alternateCaCertificates")
    private @Nullable Output<List<String>> alternateCaCertificates;

    public Optional<Output<List<String>>> alternateCaCertificates() {
        return Optional.ofNullable(this.alternateCaCertificates);
    }

    @Import(name="answersRequired")
    private @Nullable Output<Boolean> answersRequired;

    public Optional<Output<Boolean>> answersRequired() {
        return Optional.ofNullable(this.answersRequired);
    }

    @Import(name="disableNonstandardPortWarning")
    private @Nullable Output<Boolean> disableNonstandardPortWarning;

    public Optional<Output<Boolean>> disableNonstandardPortWarning() {
        return Optional.ofNullable(this.disableNonstandardPortWarning);
    }

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="errorPenalty")
    private @Nullable Output<Double> errorPenalty;

    public Optional<Output<Double>> errorPenalty() {
        return Optional.ofNullable(this.errorPenalty);
    }

    @Import(name="httpError3xx")
    private @Nullable Output<Boolean> httpError3xx;

    public Optional<Output<Boolean>> httpError3xx() {
        return Optional.ofNullable(this.httpError3xx);
    }

    @Import(name="httpError4xx")
    private @Nullable Output<Boolean> httpError4xx;

    public Optional<Output<Boolean>> httpError4xx() {
        return Optional.ofNullable(this.httpError4xx);
    }

    @Import(name="httpError5xx")
    private @Nullable Output<Boolean> httpError5xx;

    public Optional<Output<Boolean>> httpError5xx() {
        return Optional.ofNullable(this.httpError5xx);
    }

    @Import(name="httpHeaders")
    private @Nullable Output<List<GtmPropertyLivenessTestHttpHeaderArgs>> httpHeaders;

    public Optional<Output<List<GtmPropertyLivenessTestHttpHeaderArgs>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    @Import(name="httpMethod")
    private @Nullable Output<String> httpMethod;

    public Optional<Output<String>> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }

    @Import(name="httpRequestBody")
    private @Nullable Output<String> httpRequestBody;

    public Optional<Output<String>> httpRequestBody() {
        return Optional.ofNullable(this.httpRequestBody);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="peerCertificateVerification")
    private @Nullable Output<Boolean> peerCertificateVerification;

    public Optional<Output<Boolean>> peerCertificateVerification() {
        return Optional.ofNullable(this.peerCertificateVerification);
    }

    /**
     * Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     * 
     */
    @Import(name="pre2023SecurityPosture")
    private @Nullable Output<Boolean> pre2023SecurityPosture;

    /**
     * @return Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
     * 
     */
    public Optional<Output<Boolean>> pre2023SecurityPosture() {
        return Optional.ofNullable(this.pre2023SecurityPosture);
    }

    @Import(name="recursionRequested")
    private @Nullable Output<Boolean> recursionRequested;

    public Optional<Output<Boolean>> recursionRequested() {
        return Optional.ofNullable(this.recursionRequested);
    }

    @Import(name="requestString")
    private @Nullable Output<String> requestString;

    public Optional<Output<String>> requestString() {
        return Optional.ofNullable(this.requestString);
    }

    @Import(name="resourceType")
    private @Nullable Output<String> resourceType;

    public Optional<Output<String>> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    @Import(name="responseString")
    private @Nullable Output<String> responseString;

    public Optional<Output<String>> responseString() {
        return Optional.ofNullable(this.responseString);
    }

    @Import(name="sslClientCertificate")
    private @Nullable Output<String> sslClientCertificate;

    public Optional<Output<String>> sslClientCertificate() {
        return Optional.ofNullable(this.sslClientCertificate);
    }

    @Import(name="sslClientPrivateKey")
    private @Nullable Output<String> sslClientPrivateKey;

    public Optional<Output<String>> sslClientPrivateKey() {
        return Optional.ofNullable(this.sslClientPrivateKey);
    }

    @Import(name="testInterval", required=true)
    private Output<Integer> testInterval;

    public Output<Integer> testInterval() {
        return this.testInterval;
    }

    @Import(name="testObject")
    private @Nullable Output<String> testObject;

    public Optional<Output<String>> testObject() {
        return Optional.ofNullable(this.testObject);
    }

    @Import(name="testObjectPassword")
    private @Nullable Output<String> testObjectPassword;

    public Optional<Output<String>> testObjectPassword() {
        return Optional.ofNullable(this.testObjectPassword);
    }

    @Import(name="testObjectPort")
    private @Nullable Output<Integer> testObjectPort;

    public Optional<Output<Integer>> testObjectPort() {
        return Optional.ofNullable(this.testObjectPort);
    }

    @Import(name="testObjectProtocol", required=true)
    private Output<String> testObjectProtocol;

    public Output<String> testObjectProtocol() {
        return this.testObjectProtocol;
    }

    @Import(name="testObjectUsername")
    private @Nullable Output<String> testObjectUsername;

    public Optional<Output<String>> testObjectUsername() {
        return Optional.ofNullable(this.testObjectUsername);
    }

    @Import(name="testTimeout", required=true)
    private Output<Double> testTimeout;

    public Output<Double> testTimeout() {
        return this.testTimeout;
    }

    @Import(name="timeoutPenalty")
    private @Nullable Output<Double> timeoutPenalty;

    public Optional<Output<Double>> timeoutPenalty() {
        return Optional.ofNullable(this.timeoutPenalty);
    }

    private GtmPropertyLivenessTestArgs() {}

    private GtmPropertyLivenessTestArgs(GtmPropertyLivenessTestArgs $) {
        this.alternateCaCertificates = $.alternateCaCertificates;
        this.answersRequired = $.answersRequired;
        this.disableNonstandardPortWarning = $.disableNonstandardPortWarning;
        this.disabled = $.disabled;
        this.errorPenalty = $.errorPenalty;
        this.httpError3xx = $.httpError3xx;
        this.httpError4xx = $.httpError4xx;
        this.httpError5xx = $.httpError5xx;
        this.httpHeaders = $.httpHeaders;
        this.httpMethod = $.httpMethod;
        this.httpRequestBody = $.httpRequestBody;
        this.name = $.name;
        this.peerCertificateVerification = $.peerCertificateVerification;
        this.pre2023SecurityPosture = $.pre2023SecurityPosture;
        this.recursionRequested = $.recursionRequested;
        this.requestString = $.requestString;
        this.resourceType = $.resourceType;
        this.responseString = $.responseString;
        this.sslClientCertificate = $.sslClientCertificate;
        this.sslClientPrivateKey = $.sslClientPrivateKey;
        this.testInterval = $.testInterval;
        this.testObject = $.testObject;
        this.testObjectPassword = $.testObjectPassword;
        this.testObjectPort = $.testObjectPort;
        this.testObjectProtocol = $.testObjectProtocol;
        this.testObjectUsername = $.testObjectUsername;
        this.testTimeout = $.testTimeout;
        this.timeoutPenalty = $.timeoutPenalty;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GtmPropertyLivenessTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GtmPropertyLivenessTestArgs $;

        public Builder() {
            $ = new GtmPropertyLivenessTestArgs();
        }

        public Builder(GtmPropertyLivenessTestArgs defaults) {
            $ = new GtmPropertyLivenessTestArgs(Objects.requireNonNull(defaults));
        }

        public Builder alternateCaCertificates(@Nullable Output<List<String>> alternateCaCertificates) {
            $.alternateCaCertificates = alternateCaCertificates;
            return this;
        }

        public Builder alternateCaCertificates(List<String> alternateCaCertificates) {
            return alternateCaCertificates(Output.of(alternateCaCertificates));
        }

        public Builder alternateCaCertificates(String... alternateCaCertificates) {
            return alternateCaCertificates(List.of(alternateCaCertificates));
        }

        public Builder answersRequired(@Nullable Output<Boolean> answersRequired) {
            $.answersRequired = answersRequired;
            return this;
        }

        public Builder answersRequired(Boolean answersRequired) {
            return answersRequired(Output.of(answersRequired));
        }

        public Builder disableNonstandardPortWarning(@Nullable Output<Boolean> disableNonstandardPortWarning) {
            $.disableNonstandardPortWarning = disableNonstandardPortWarning;
            return this;
        }

        public Builder disableNonstandardPortWarning(Boolean disableNonstandardPortWarning) {
            return disableNonstandardPortWarning(Output.of(disableNonstandardPortWarning));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder errorPenalty(@Nullable Output<Double> errorPenalty) {
            $.errorPenalty = errorPenalty;
            return this;
        }

        public Builder errorPenalty(Double errorPenalty) {
            return errorPenalty(Output.of(errorPenalty));
        }

        public Builder httpError3xx(@Nullable Output<Boolean> httpError3xx) {
            $.httpError3xx = httpError3xx;
            return this;
        }

        public Builder httpError3xx(Boolean httpError3xx) {
            return httpError3xx(Output.of(httpError3xx));
        }

        public Builder httpError4xx(@Nullable Output<Boolean> httpError4xx) {
            $.httpError4xx = httpError4xx;
            return this;
        }

        public Builder httpError4xx(Boolean httpError4xx) {
            return httpError4xx(Output.of(httpError4xx));
        }

        public Builder httpError5xx(@Nullable Output<Boolean> httpError5xx) {
            $.httpError5xx = httpError5xx;
            return this;
        }

        public Builder httpError5xx(Boolean httpError5xx) {
            return httpError5xx(Output.of(httpError5xx));
        }

        public Builder httpHeaders(@Nullable Output<List<GtmPropertyLivenessTestHttpHeaderArgs>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        public Builder httpHeaders(List<GtmPropertyLivenessTestHttpHeaderArgs> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        public Builder httpHeaders(GtmPropertyLivenessTestHttpHeaderArgs... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }

        public Builder httpMethod(@Nullable Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder httpRequestBody(@Nullable Output<String> httpRequestBody) {
            $.httpRequestBody = httpRequestBody;
            return this;
        }

        public Builder httpRequestBody(String httpRequestBody) {
            return httpRequestBody(Output.of(httpRequestBody));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder peerCertificateVerification(@Nullable Output<Boolean> peerCertificateVerification) {
            $.peerCertificateVerification = peerCertificateVerification;
            return this;
        }

        public Builder peerCertificateVerification(Boolean peerCertificateVerification) {
            return peerCertificateVerification(Output.of(peerCertificateVerification));
        }

        /**
         * @param pre2023SecurityPosture Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
         * 
         * @return builder
         * 
         */
        public Builder pre2023SecurityPosture(@Nullable Output<Boolean> pre2023SecurityPosture) {
            $.pre2023SecurityPosture = pre2023SecurityPosture;
            return this;
        }

        /**
         * @param pre2023SecurityPosture Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
         * 
         * @return builder
         * 
         */
        public Builder pre2023SecurityPosture(Boolean pre2023SecurityPosture) {
            return pre2023SecurityPosture(Output.of(pre2023SecurityPosture));
        }

        public Builder recursionRequested(@Nullable Output<Boolean> recursionRequested) {
            $.recursionRequested = recursionRequested;
            return this;
        }

        public Builder recursionRequested(Boolean recursionRequested) {
            return recursionRequested(Output.of(recursionRequested));
        }

        public Builder requestString(@Nullable Output<String> requestString) {
            $.requestString = requestString;
            return this;
        }

        public Builder requestString(String requestString) {
            return requestString(Output.of(requestString));
        }

        public Builder resourceType(@Nullable Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public Builder responseString(@Nullable Output<String> responseString) {
            $.responseString = responseString;
            return this;
        }

        public Builder responseString(String responseString) {
            return responseString(Output.of(responseString));
        }

        public Builder sslClientCertificate(@Nullable Output<String> sslClientCertificate) {
            $.sslClientCertificate = sslClientCertificate;
            return this;
        }

        public Builder sslClientCertificate(String sslClientCertificate) {
            return sslClientCertificate(Output.of(sslClientCertificate));
        }

        public Builder sslClientPrivateKey(@Nullable Output<String> sslClientPrivateKey) {
            $.sslClientPrivateKey = sslClientPrivateKey;
            return this;
        }

        public Builder sslClientPrivateKey(String sslClientPrivateKey) {
            return sslClientPrivateKey(Output.of(sslClientPrivateKey));
        }

        public Builder testInterval(Output<Integer> testInterval) {
            $.testInterval = testInterval;
            return this;
        }

        public Builder testInterval(Integer testInterval) {
            return testInterval(Output.of(testInterval));
        }

        public Builder testObject(@Nullable Output<String> testObject) {
            $.testObject = testObject;
            return this;
        }

        public Builder testObject(String testObject) {
            return testObject(Output.of(testObject));
        }

        public Builder testObjectPassword(@Nullable Output<String> testObjectPassword) {
            $.testObjectPassword = testObjectPassword;
            return this;
        }

        public Builder testObjectPassword(String testObjectPassword) {
            return testObjectPassword(Output.of(testObjectPassword));
        }

        public Builder testObjectPort(@Nullable Output<Integer> testObjectPort) {
            $.testObjectPort = testObjectPort;
            return this;
        }

        public Builder testObjectPort(Integer testObjectPort) {
            return testObjectPort(Output.of(testObjectPort));
        }

        public Builder testObjectProtocol(Output<String> testObjectProtocol) {
            $.testObjectProtocol = testObjectProtocol;
            return this;
        }

        public Builder testObjectProtocol(String testObjectProtocol) {
            return testObjectProtocol(Output.of(testObjectProtocol));
        }

        public Builder testObjectUsername(@Nullable Output<String> testObjectUsername) {
            $.testObjectUsername = testObjectUsername;
            return this;
        }

        public Builder testObjectUsername(String testObjectUsername) {
            return testObjectUsername(Output.of(testObjectUsername));
        }

        public Builder testTimeout(Output<Double> testTimeout) {
            $.testTimeout = testTimeout;
            return this;
        }

        public Builder testTimeout(Double testTimeout) {
            return testTimeout(Output.of(testTimeout));
        }

        public Builder timeoutPenalty(@Nullable Output<Double> timeoutPenalty) {
            $.timeoutPenalty = timeoutPenalty;
            return this;
        }

        public Builder timeoutPenalty(Double timeoutPenalty) {
            return timeoutPenalty(Output.of(timeoutPenalty));
        }

        public GtmPropertyLivenessTestArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GtmPropertyLivenessTestArgs", "name");
            }
            if ($.testInterval == null) {
                throw new MissingRequiredPropertyException("GtmPropertyLivenessTestArgs", "testInterval");
            }
            if ($.testObjectProtocol == null) {
                throw new MissingRequiredPropertyException("GtmPropertyLivenessTestArgs", "testObjectProtocol");
            }
            if ($.testTimeout == null) {
                throw new MissingRequiredPropertyException("GtmPropertyLivenessTestArgs", "testTimeout");
            }
            return $;
        }
    }

}
