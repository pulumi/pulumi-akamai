// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.akamai.inputs.AppSecSiemSettingsExceptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSecSiemSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSecSiemSettingsArgs Empty = new AppSecSiemSettingsArgs();

    /**
     * Unique identifier of the security configuration
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return Unique identifier of the security configuration
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * Whether Bot Manager events should be included in SIEM events
     * 
     */
    @Import(name="enableBotmanSiem")
    private @Nullable Output<Boolean> enableBotmanSiem;

    /**
     * @return Whether Bot Manager events should be included in SIEM events
     * 
     */
    public Optional<Output<Boolean>> enableBotmanSiem() {
        return Optional.ofNullable(this.enableBotmanSiem);
    }

    /**
     * Whether to enable SIEM on all security policies in the security configuration
     * 
     */
    @Import(name="enableForAllPolicies", required=true)
    private Output<Boolean> enableForAllPolicies;

    /**
     * @return Whether to enable SIEM on all security policies in the security configuration
     * 
     */
    public Output<Boolean> enableForAllPolicies() {
        return this.enableForAllPolicies;
    }

    /**
     * Whether to enable SIEM
     * 
     */
    @Import(name="enableSiem", required=true)
    private Output<Boolean> enableSiem;

    /**
     * @return Whether to enable SIEM
     * 
     */
    public Output<Boolean> enableSiem() {
        return this.enableSiem;
    }

    /**
     * Describes all the protections and actions to be excluded from SIEM events
     * 
     */
    @Import(name="exceptions")
    private @Nullable Output<AppSecSiemSettingsExceptionsArgs> exceptions;

    /**
     * @return Describes all the protections and actions to be excluded from SIEM events
     * 
     */
    public Optional<Output<AppSecSiemSettingsExceptionsArgs>> exceptions() {
        return Optional.ofNullable(this.exceptions);
    }

    /**
     * List of IDs of security policy for which SIEM integration is to be enabled
     * 
     */
    @Import(name="securityPolicyIds")
    private @Nullable Output<List<String>> securityPolicyIds;

    /**
     * @return List of IDs of security policy for which SIEM integration is to be enabled
     * 
     */
    public Optional<Output<List<String>>> securityPolicyIds() {
        return Optional.ofNullable(this.securityPolicyIds);
    }

    /**
     * Unique identifier of the SIEM settings being modified
     * 
     */
    @Import(name="siemId", required=true)
    private Output<Integer> siemId;

    /**
     * @return Unique identifier of the SIEM settings being modified
     * 
     */
    public Output<Integer> siemId() {
        return this.siemId;
    }

    private AppSecSiemSettingsArgs() {}

    private AppSecSiemSettingsArgs(AppSecSiemSettingsArgs $) {
        this.configId = $.configId;
        this.enableBotmanSiem = $.enableBotmanSiem;
        this.enableForAllPolicies = $.enableForAllPolicies;
        this.enableSiem = $.enableSiem;
        this.exceptions = $.exceptions;
        this.securityPolicyIds = $.securityPolicyIds;
        this.siemId = $.siemId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecSiemSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecSiemSettingsArgs $;

        public Builder() {
            $ = new AppSecSiemSettingsArgs();
        }

        public Builder(AppSecSiemSettingsArgs defaults) {
            $ = new AppSecSiemSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId Unique identifier of the security configuration
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param enableBotmanSiem Whether Bot Manager events should be included in SIEM events
         * 
         * @return builder
         * 
         */
        public Builder enableBotmanSiem(@Nullable Output<Boolean> enableBotmanSiem) {
            $.enableBotmanSiem = enableBotmanSiem;
            return this;
        }

        /**
         * @param enableBotmanSiem Whether Bot Manager events should be included in SIEM events
         * 
         * @return builder
         * 
         */
        public Builder enableBotmanSiem(Boolean enableBotmanSiem) {
            return enableBotmanSiem(Output.of(enableBotmanSiem));
        }

        /**
         * @param enableForAllPolicies Whether to enable SIEM on all security policies in the security configuration
         * 
         * @return builder
         * 
         */
        public Builder enableForAllPolicies(Output<Boolean> enableForAllPolicies) {
            $.enableForAllPolicies = enableForAllPolicies;
            return this;
        }

        /**
         * @param enableForAllPolicies Whether to enable SIEM on all security policies in the security configuration
         * 
         * @return builder
         * 
         */
        public Builder enableForAllPolicies(Boolean enableForAllPolicies) {
            return enableForAllPolicies(Output.of(enableForAllPolicies));
        }

        /**
         * @param enableSiem Whether to enable SIEM
         * 
         * @return builder
         * 
         */
        public Builder enableSiem(Output<Boolean> enableSiem) {
            $.enableSiem = enableSiem;
            return this;
        }

        /**
         * @param enableSiem Whether to enable SIEM
         * 
         * @return builder
         * 
         */
        public Builder enableSiem(Boolean enableSiem) {
            return enableSiem(Output.of(enableSiem));
        }

        /**
         * @param exceptions Describes all the protections and actions to be excluded from SIEM events
         * 
         * @return builder
         * 
         */
        public Builder exceptions(@Nullable Output<AppSecSiemSettingsExceptionsArgs> exceptions) {
            $.exceptions = exceptions;
            return this;
        }

        /**
         * @param exceptions Describes all the protections and actions to be excluded from SIEM events
         * 
         * @return builder
         * 
         */
        public Builder exceptions(AppSecSiemSettingsExceptionsArgs exceptions) {
            return exceptions(Output.of(exceptions));
        }

        /**
         * @param securityPolicyIds List of IDs of security policy for which SIEM integration is to be enabled
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyIds(@Nullable Output<List<String>> securityPolicyIds) {
            $.securityPolicyIds = securityPolicyIds;
            return this;
        }

        /**
         * @param securityPolicyIds List of IDs of security policy for which SIEM integration is to be enabled
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyIds(List<String> securityPolicyIds) {
            return securityPolicyIds(Output.of(securityPolicyIds));
        }

        /**
         * @param securityPolicyIds List of IDs of security policy for which SIEM integration is to be enabled
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyIds(String... securityPolicyIds) {
            return securityPolicyIds(List.of(securityPolicyIds));
        }

        /**
         * @param siemId Unique identifier of the SIEM settings being modified
         * 
         * @return builder
         * 
         */
        public Builder siemId(Output<Integer> siemId) {
            $.siemId = siemId;
            return this;
        }

        /**
         * @param siemId Unique identifier of the SIEM settings being modified
         * 
         * @return builder
         * 
         */
        public Builder siemId(Integer siemId) {
            return siemId(Output.of(siemId));
        }

        public AppSecSiemSettingsArgs build() {
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("AppSecSiemSettingsArgs", "configId");
            }
            if ($.enableForAllPolicies == null) {
                throw new MissingRequiredPropertyException("AppSecSiemSettingsArgs", "enableForAllPolicies");
            }
            if ($.enableSiem == null) {
                throw new MissingRequiredPropertyException("AppSecSiemSettingsArgs", "enableSiem");
            }
            if ($.siemId == null) {
                throw new MissingRequiredPropertyException("AppSecSiemSettingsArgs", "siemId");
            }
            return $;
        }
    }

}
