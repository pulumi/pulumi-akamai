// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault Empty = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault();

    @Import(name="appends")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend> appends;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend>> appends() {
        return Optional.ofNullable(this.appends);
    }

    @Import(name="aspectCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop> aspectCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop>> aspectCrops() {
        return Optional.ofNullable(this.aspectCrops);
    }

    @Import(name="backgroundColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor> backgroundColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor>> backgroundColors() {
        return Optional.ofNullable(this.backgroundColors);
    }

    @Import(name="blurs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur> blurs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur>> blurs() {
        return Optional.ofNullable(this.blurs);
    }

    @Import(name="chromaKeys")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey> chromaKeys;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey>> chromaKeys() {
        return Optional.ofNullable(this.chromaKeys);
    }

    @Import(name="composites")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite> composites;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite>> composites() {
        return Optional.ofNullable(this.composites);
    }

    @Import(name="compounds")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound> compounds;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound>> compounds() {
        return Optional.ofNullable(this.compounds);
    }

    @Import(name="contrasts")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast> contrasts;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast>> contrasts() {
        return Optional.ofNullable(this.contrasts);
    }

    @Import(name="crops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop> crops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop>> crops() {
        return Optional.ofNullable(this.crops);
    }

    @Import(name="faceCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop> faceCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop>> faceCrops() {
        return Optional.ofNullable(this.faceCrops);
    }

    @Import(name="featureCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop> featureCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop>> featureCrops() {
        return Optional.ofNullable(this.featureCrops);
    }

    @Import(name="fitAndFills")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill> fitAndFills;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill>> fitAndFills() {
        return Optional.ofNullable(this.fitAndFills);
    }

    @Import(name="goops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop> goops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop>> goops() {
        return Optional.ofNullable(this.goops);
    }

    @Import(name="grayscales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale> grayscales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale>> grayscales() {
        return Optional.ofNullable(this.grayscales);
    }

    @Import(name="hsls")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl> hsls;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl>> hsls() {
        return Optional.ofNullable(this.hsls);
    }

    @Import(name="hsvs")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv> hsvs;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv>> hsvs() {
        return Optional.ofNullable(this.hsvs);
    }

    @Import(name="ifDimensions")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension> ifDimensions;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension>> ifDimensions() {
        return Optional.ofNullable(this.ifDimensions);
    }

    @Import(name="ifOrientations")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation> ifOrientations;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation>> ifOrientations() {
        return Optional.ofNullable(this.ifOrientations);
    }

    @Import(name="imQueries")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery> imQueries;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery>> imQueries() {
        return Optional.ofNullable(this.imQueries);
    }

    @Import(name="maxColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor> maxColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor>> maxColors() {
        return Optional.ofNullable(this.maxColors);
    }

    @Import(name="mirrors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror> mirrors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror>> mirrors() {
        return Optional.ofNullable(this.mirrors);
    }

    @Import(name="monoHues")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue> monoHues;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue>> monoHues() {
        return Optional.ofNullable(this.monoHues);
    }

    @Import(name="opacities")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity> opacities;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity>> opacities() {
        return Optional.ofNullable(this.opacities);
    }

    @Import(name="regionOfInterestCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop> regionOfInterestCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop>> regionOfInterestCrops() {
        return Optional.ofNullable(this.regionOfInterestCrops);
    }

    @Import(name="relativeCrops")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop> relativeCrops;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop>> relativeCrops() {
        return Optional.ofNullable(this.relativeCrops);
    }

    @Import(name="removeColors")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor> removeColors;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor>> removeColors() {
        return Optional.ofNullable(this.removeColors);
    }

    @Import(name="resizes")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize> resizes;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize>> resizes() {
        return Optional.ofNullable(this.resizes);
    }

    @Import(name="rotates")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate> rotates;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate>> rotates() {
        return Optional.ofNullable(this.rotates);
    }

    @Import(name="scales")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale> scales;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale>> scales() {
        return Optional.ofNullable(this.scales);
    }

    @Import(name="shears")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears> shears;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears>> shears() {
        return Optional.ofNullable(this.shears);
    }

    @Import(name="trims")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim> trims;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim>> trims() {
        return Optional.ofNullable(this.trims);
    }

    @Import(name="unsharpMasks")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask> unsharpMasks;

    public Optional<List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask>> unsharpMasks() {
        return Optional.ofNullable(this.unsharpMasks);
    }

    private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault() {}

    private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault $) {
        this.appends = $.appends;
        this.aspectCrops = $.aspectCrops;
        this.backgroundColors = $.backgroundColors;
        this.blurs = $.blurs;
        this.chromaKeys = $.chromaKeys;
        this.composites = $.composites;
        this.compounds = $.compounds;
        this.contrasts = $.contrasts;
        this.crops = $.crops;
        this.faceCrops = $.faceCrops;
        this.featureCrops = $.featureCrops;
        this.fitAndFills = $.fitAndFills;
        this.goops = $.goops;
        this.grayscales = $.grayscales;
        this.hsls = $.hsls;
        this.hsvs = $.hsvs;
        this.ifDimensions = $.ifDimensions;
        this.ifOrientations = $.ifOrientations;
        this.imQueries = $.imQueries;
        this.maxColors = $.maxColors;
        this.mirrors = $.mirrors;
        this.monoHues = $.monoHues;
        this.opacities = $.opacities;
        this.regionOfInterestCrops = $.regionOfInterestCrops;
        this.relativeCrops = $.relativeCrops;
        this.removeColors = $.removeColors;
        this.resizes = $.resizes;
        this.rotates = $.rotates;
        this.scales = $.scales;
        this.shears = $.shears;
        this.trims = $.trims;
        this.unsharpMasks = $.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault(Objects.requireNonNull(defaults));
        }

        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend> appends) {
            $.appends = appends;
            return this;
        }

        public Builder appends(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAppend... appends) {
            return appends(List.of(appends));
        }

        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop> aspectCrops) {
            $.aspectCrops = aspectCrops;
            return this;
        }

        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }

        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor> backgroundColors) {
            $.backgroundColors = backgroundColors;
            return this;
        }

        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }

        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur> blurs) {
            $.blurs = blurs;
            return this;
        }

        public Builder blurs(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultBlur... blurs) {
            return blurs(List.of(blurs));
        }

        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey> chromaKeys) {
            $.chromaKeys = chromaKeys;
            return this;
        }

        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }

        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite> composites) {
            $.composites = composites;
            return this;
        }

        public Builder composites(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultComposite... composites) {
            return composites(List.of(composites));
        }

        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound> compounds) {
            $.compounds = compounds;
            return this;
        }

        public Builder compounds(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCompound... compounds) {
            return compounds(List.of(compounds));
        }

        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast> contrasts) {
            $.contrasts = contrasts;
            return this;
        }

        public Builder contrasts(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }

        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop> crops) {
            $.crops = crops;
            return this;
        }

        public Builder crops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultCrop... crops) {
            return crops(List.of(crops));
        }

        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop> faceCrops) {
            $.faceCrops = faceCrops;
            return this;
        }

        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }

        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop> featureCrops) {
            $.featureCrops = featureCrops;
            return this;
        }

        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }

        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill> fitAndFills) {
            $.fitAndFills = fitAndFills;
            return this;
        }

        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }

        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop> goops) {
            $.goops = goops;
            return this;
        }

        public Builder goops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGoop... goops) {
            return goops(List.of(goops));
        }

        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale> grayscales) {
            $.grayscales = grayscales;
            return this;
        }

        public Builder grayscales(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }

        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl> hsls) {
            $.hsls = hsls;
            return this;
        }

        public Builder hsls(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsl... hsls) {
            return hsls(List.of(hsls));
        }

        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv> hsvs) {
            $.hsvs = hsvs;
            return this;
        }

        public Builder hsvs(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }

        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension> ifDimensions) {
            $.ifDimensions = ifDimensions;
            return this;
        }

        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }

        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation> ifOrientations) {
            $.ifOrientations = ifOrientations;
            return this;
        }

        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }

        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery> imQueries) {
            $.imQueries = imQueries;
            return this;
        }

        public Builder imQueries(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }

        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor> maxColors) {
            $.maxColors = maxColors;
            return this;
        }

        public Builder maxColors(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }

        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror> mirrors) {
            $.mirrors = mirrors;
            return this;
        }

        public Builder mirrors(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }

        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue> monoHues) {
            $.monoHues = monoHues;
            return this;
        }

        public Builder monoHues(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }

        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity> opacities) {
            $.opacities = opacities;
            return this;
        }

        public Builder opacities(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultOpacity... opacities) {
            return opacities(List.of(opacities));
        }

        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop> regionOfInterestCrops) {
            $.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }

        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }

        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop> relativeCrops) {
            $.relativeCrops = relativeCrops;
            return this;
        }

        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }

        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor> removeColors) {
            $.removeColors = removeColors;
            return this;
        }

        public Builder removeColors(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }

        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize> resizes) {
            $.resizes = resizes;
            return this;
        }

        public Builder resizes(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultResize... resizes) {
            return resizes(List.of(resizes));
        }

        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate> rotates) {
            $.rotates = rotates;
            return this;
        }

        public Builder rotates(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultRotate... rotates) {
            return rotates(List.of(rotates));
        }

        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale> scales) {
            $.scales = scales;
            return this;
        }

        public Builder scales(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultScale... scales) {
            return scales(List.of(scales));
        }

        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears> shears) {
            $.shears = shears;
            return this;
        }

        public Builder shears(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultShears... shears) {
            return shears(List.of(shears));
        }

        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim> trims) {
            $.trims = trims;
            return this;
        }

        public Builder trims(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultTrim... trims) {
            return trims(List.of(trims));
        }

        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask> unsharpMasks) {
            $.unsharpMasks = unsharpMasks;
            return this;
        }

        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefaultUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }

        public GetImagingPolicyImagePolicyTransformationFitAndFillFillTransformationIfOrientationDefault build() {
            return $;
        }
    }

}
