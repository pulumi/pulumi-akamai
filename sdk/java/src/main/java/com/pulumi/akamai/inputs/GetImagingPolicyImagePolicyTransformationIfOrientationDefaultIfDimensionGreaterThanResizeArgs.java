// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs Empty = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs();

    @Import(name="aspect")
    private @Nullable Output<String> aspect;

    public Optional<Output<String>> aspect() {
        return Optional.ofNullable(this.aspect);
    }

    @Import(name="aspectVar")
    private @Nullable Output<String> aspectVar;

    public Optional<Output<String>> aspectVar() {
        return Optional.ofNullable(this.aspectVar);
    }

    @Import(name="height")
    private @Nullable Output<String> height;

    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="typeVar")
    private @Nullable Output<String> typeVar;

    public Optional<Output<String>> typeVar() {
        return Optional.ofNullable(this.typeVar);
    }

    @Import(name="width")
    private @Nullable Output<String> width;

    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs $) {
        this.aspect = $.aspect;
        this.aspectVar = $.aspectVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.type = $.type;
        this.typeVar = $.typeVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs(Objects.requireNonNull(defaults));
        }

        public Builder aspect(@Nullable Output<String> aspect) {
            $.aspect = aspect;
            return this;
        }

        public Builder aspect(String aspect) {
            return aspect(Output.of(aspect));
        }

        public Builder aspectVar(@Nullable Output<String> aspectVar) {
            $.aspectVar = aspectVar;
            return this;
        }

        public Builder aspectVar(String aspectVar) {
            return aspectVar(Output.of(aspectVar));
        }

        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        public Builder height(String height) {
            return height(Output.of(height));
        }

        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder typeVar(@Nullable Output<String> typeVar) {
            $.typeVar = typeVar;
            return this;
        }

        public Builder typeVar(String typeVar) {
            return typeVar(Output.of(typeVar));
        }

        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        public Builder width(String width) {
            return width(Output.of(width));
        }

        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfOrientationDefaultIfDimensionGreaterThanResizeArgs build() {
            return $;
        }
    }

}
