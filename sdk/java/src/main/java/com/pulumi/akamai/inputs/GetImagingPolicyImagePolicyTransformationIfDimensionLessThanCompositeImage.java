// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage;
import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage();

    @Import(name="boxImages")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage> boxImages;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage>> boxImages() {
        return Optional.ofNullable(this.boxImages);
    }

    @Import(name="circleImages")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage> circleImages;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage>> circleImages() {
        return Optional.ofNullable(this.circleImages);
    }

    @Import(name="textImages")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage> textImages;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage>> textImages() {
        return Optional.ofNullable(this.textImages);
    }

    @Import(name="urlImages")
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage> urlImages;

    public Optional<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage>> urlImages() {
        return Optional.ofNullable(this.urlImages);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage $) {
        this.boxImages = $.boxImages;
        this.circleImages = $.circleImages;
        this.textImages = $.textImages;
        this.urlImages = $.urlImages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage(Objects.requireNonNull(defaults));
        }

        public Builder boxImages(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage> boxImages) {
            $.boxImages = boxImages;
            return this;
        }

        public Builder boxImages(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageBoxImage... boxImages) {
            return boxImages(List.of(boxImages));
        }

        public Builder circleImages(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage> circleImages) {
            $.circleImages = circleImages;
            return this;
        }

        public Builder circleImages(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageCircleImage... circleImages) {
            return circleImages(List.of(circleImages));
        }

        public Builder textImages(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage> textImages) {
            $.textImages = textImages;
            return this;
        }

        public Builder textImages(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageTextImage... textImages) {
            return textImages(List.of(textImages));
        }

        public Builder urlImages(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage> urlImages) {
            $.urlImages = urlImages;
            return this;
        }

        public Builder urlImages(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImageUrlImage... urlImages) {
            return urlImages(List.of(urlImages));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionLessThanCompositeImage build() {
            return $;
        }
    }

}
