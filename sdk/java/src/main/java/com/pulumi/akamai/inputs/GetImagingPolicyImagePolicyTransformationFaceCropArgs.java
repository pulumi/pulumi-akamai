// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationFaceCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationFaceCropArgs Empty = new GetImagingPolicyImagePolicyTransformationFaceCropArgs();

    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    @Import(name="algorithmVar")
    private @Nullable Output<String> algorithmVar;

    /**
     * @return Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
     * 
     */
    public Optional<Output<String>> algorithmVar() {
        return Optional.ofNullable(this.algorithmVar);
    }

    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    @Import(name="confidence")
    private @Nullable Output<String> confidence;

    /**
     * @return With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    public Optional<Output<String>> confidence() {
        return Optional.ofNullable(this.confidence);
    }

    /**
     * With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    @Import(name="confidenceVar")
    private @Nullable Output<String> confidenceVar;

    /**
     * @return With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
     * 
     */
    public Optional<Output<String>> confidenceVar() {
        return Optional.ofNullable(this.confidenceVar);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravity")
    private @Nullable Output<String> failGravity;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<Output<String>> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    /**
     * Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    @Import(name="failGravityVar")
    private @Nullable Output<String> failGravityVar;

    /**
     * @return Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
     * 
     */
    public Optional<Output<String>> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    @Import(name="focus")
    private @Nullable Output<String> focus;

    /**
     * @return Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    public Optional<Output<String>> focus() {
        return Optional.ofNullable(this.focus);
    }

    /**
     * Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    @Import(name="focusVar")
    private @Nullable Output<String> focusVar;

    /**
     * @return Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
     * 
     */
    public Optional<Output<String>> focusVar() {
        return Optional.ofNullable(this.focusVar);
    }

    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    /**
     * @return Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    /**
     * Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    /**
     * @return Controls placement of the crop. Directions are relative to the face(s) plus padding.
     * 
     */
    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    /**
     * The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="height")
    private @Nullable Output<String> height;

    /**
     * @return The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    /**
     * @return The height of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    @Import(name="padding")
    private @Nullable Output<String> padding;

    /**
     * @return The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    public Optional<Output<String>> padding() {
        return Optional.ofNullable(this.padding);
    }

    /**
     * The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    @Import(name="paddingVar")
    private @Nullable Output<String> paddingVar;

    /**
     * @return The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
     * 
     */
    public Optional<Output<String>> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="style")
    private @Nullable Output<String> style;

    /**
     * @return Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<Output<String>> style() {
        return Optional.ofNullable(this.style);
    }

    /**
     * Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    @Import(name="styleVar")
    private @Nullable Output<String> styleVar;

    /**
     * @return Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
     * 
     */
    public Optional<Output<String>> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    /**
     * The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="width")
    private @Nullable Output<String> width;

    /**
     * @return The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    /**
     * @return The width of the output image in pixels relative to the specified `style` value.
     * 
     */
    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationFaceCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationFaceCropArgs(GetImagingPolicyImagePolicyTransformationFaceCropArgs $) {
        this.algorithm = $.algorithm;
        this.algorithmVar = $.algorithmVar;
        this.confidence = $.confidence;
        this.confidenceVar = $.confidenceVar;
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.focus = $.focus;
        this.focusVar = $.focusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationFaceCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationFaceCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationFaceCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationFaceCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationFaceCropArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param algorithmVar Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithmVar(@Nullable Output<String> algorithmVar) {
            $.algorithmVar = algorithmVar;
            return this;
        }

        /**
         * @param algorithmVar Specifies the type of algorithm used to detect faces in the image, either `cascade` for the cascade classifier algorithm or `dnn` for the deep neural network algorithm, `cascade` by default.
         * 
         * @return builder
         * 
         */
        public Builder algorithmVar(String algorithmVar) {
            return algorithmVar(Output.of(algorithmVar));
        }

        /**
         * @param confidence With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidence(@Nullable Output<String> confidence) {
            $.confidence = confidence;
            return this;
        }

        /**
         * @param confidence With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidence(String confidence) {
            return confidence(Output.of(confidence));
        }

        /**
         * @param confidenceVar With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidenceVar(@Nullable Output<String> confidenceVar) {
            $.confidenceVar = confidenceVar;
            return this;
        }

        /**
         * @param confidenceVar With `algorithm` set to `dnn`, specifies the minimum confidence needed to detect faces in the image. Values range from `0` to `1` for increased confidence, and possibly fewer faces detected.
         * 
         * @return builder
         * 
         */
        public Builder confidenceVar(String confidenceVar) {
            return confidenceVar(Output.of(confidenceVar));
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(@Nullable Output<String> failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        /**
         * @param failGravity Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravity(String failGravity) {
            return failGravity(Output.of(failGravity));
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(@Nullable Output<String> failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        /**
         * @param failGravityVar Controls placement of the crop if Image and Video Manager does not detect any faces in the image. Directions are relative to the edges of the image being transformed.
         * 
         * @return builder
         * 
         */
        public Builder failGravityVar(String failGravityVar) {
            return failGravityVar(Output.of(failGravityVar));
        }

        /**
         * @param focus Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focus(@Nullable Output<String> focus) {
            $.focus = focus;
            return this;
        }

        /**
         * @param focus Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focus(String focus) {
            return focus(Output.of(focus));
        }

        /**
         * @param focusVar Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focusVar(@Nullable Output<String> focusVar) {
            $.focusVar = focusVar;
            return this;
        }

        /**
         * @param focusVar Distinguishes the faces detected, either `biggestFace` or `allFaces` to place the crop rectangle around the full set of faces, `all` by default.
         * 
         * @return builder
         * 
         */
        public Builder focusVar(String focusVar) {
            return focusVar(Output.of(focusVar));
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        /**
         * @param gravity Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        /**
         * @param gravityVar Controls placement of the crop. Directions are relative to the face(s) plus padding.
         * 
         * @return builder
         * 
         */
        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        /**
         * @param height The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder height(String height) {
            return height(Output.of(height));
        }

        /**
         * @param heightVar The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        /**
         * @param heightVar The height of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        /**
         * @param padding The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder padding(@Nullable Output<String> padding) {
            $.padding = padding;
            return this;
        }

        /**
         * @param padding The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder padding(String padding) {
            return padding(Output.of(padding));
        }

        /**
         * @param paddingVar The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(@Nullable Output<String> paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        /**
         * @param paddingVar The padding ratio based on the dimensions of the biggest face detected, `0.5` by default. Larger values increase padding.
         * 
         * @return builder
         * 
         */
        public Builder paddingVar(String paddingVar) {
            return paddingVar(Output.of(paddingVar));
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(@Nullable Output<String> style) {
            $.style = style;
            return this;
        }

        /**
         * @param style Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder style(String style) {
            return style(Output.of(style));
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(@Nullable Output<String> styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        /**
         * @param styleVar Specifies how to crop or scale a crop area for the faces detected in the source image, `zoom` by default. The output image resizes to the specified `width` and `height` values. A value of `crop` places a raw crop around the faces, relative to the specified `gravity` value.  A value of `fill` scales the crop area to include as much of the image and faces as possible, relative to the specified `width` and `height` values. A value of `zoom` scales the crop area as small as possible to fit the faces, relative to the specified `width` and `height` values. Allows Variable substitution.
         * 
         * @return builder
         * 
         */
        public Builder styleVar(String styleVar) {
            return styleVar(Output.of(styleVar));
        }

        /**
         * @param width The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder width(String width) {
            return width(Output.of(width));
        }

        /**
         * @param widthVar The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        /**
         * @param widthVar The width of the output image in pixels relative to the specified `style` value.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationFaceCropArgs build() {
            return $;
        }
    }

}
