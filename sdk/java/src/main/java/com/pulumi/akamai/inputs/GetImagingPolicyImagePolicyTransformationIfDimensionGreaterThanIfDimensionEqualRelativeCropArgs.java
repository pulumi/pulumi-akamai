// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs();

    @Import(name="east")
    private @Nullable Output<String> east;

    public Optional<Output<String>> east() {
        return Optional.ofNullable(this.east);
    }

    @Import(name="eastVar")
    private @Nullable Output<String> eastVar;

    public Optional<Output<String>> eastVar() {
        return Optional.ofNullable(this.eastVar);
    }

    @Import(name="north")
    private @Nullable Output<String> north;

    public Optional<Output<String>> north() {
        return Optional.ofNullable(this.north);
    }

    @Import(name="northVar")
    private @Nullable Output<String> northVar;

    public Optional<Output<String>> northVar() {
        return Optional.ofNullable(this.northVar);
    }

    @Import(name="south")
    private @Nullable Output<String> south;

    public Optional<Output<String>> south() {
        return Optional.ofNullable(this.south);
    }

    @Import(name="southVar")
    private @Nullable Output<String> southVar;

    public Optional<Output<String>> southVar() {
        return Optional.ofNullable(this.southVar);
    }

    @Import(name="west")
    private @Nullable Output<String> west;

    public Optional<Output<String>> west() {
        return Optional.ofNullable(this.west);
    }

    @Import(name="westVar")
    private @Nullable Output<String> westVar;

    public Optional<Output<String>> westVar() {
        return Optional.ofNullable(this.westVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs $) {
        this.east = $.east;
        this.eastVar = $.eastVar;
        this.north = $.north;
        this.northVar = $.northVar;
        this.south = $.south;
        this.southVar = $.southVar;
        this.west = $.west;
        this.westVar = $.westVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs(Objects.requireNonNull(defaults));
        }

        public Builder east(@Nullable Output<String> east) {
            $.east = east;
            return this;
        }

        public Builder east(String east) {
            return east(Output.of(east));
        }

        public Builder eastVar(@Nullable Output<String> eastVar) {
            $.eastVar = eastVar;
            return this;
        }

        public Builder eastVar(String eastVar) {
            return eastVar(Output.of(eastVar));
        }

        public Builder north(@Nullable Output<String> north) {
            $.north = north;
            return this;
        }

        public Builder north(String north) {
            return north(Output.of(north));
        }

        public Builder northVar(@Nullable Output<String> northVar) {
            $.northVar = northVar;
            return this;
        }

        public Builder northVar(String northVar) {
            return northVar(Output.of(northVar));
        }

        public Builder south(@Nullable Output<String> south) {
            $.south = south;
            return this;
        }

        public Builder south(String south) {
            return south(Output.of(south));
        }

        public Builder southVar(@Nullable Output<String> southVar) {
            $.southVar = southVar;
            return this;
        }

        public Builder southVar(String southVar) {
            return southVar(Output.of(southVar));
        }

        public Builder west(@Nullable Output<String> west) {
            $.west = west;
            return this;
        }

        public Builder west(String west) {
            return west(Output.of(west));
        }

        public Builder westVar(@Nullable Output<String> westVar) {
            $.westVar = westVar;
            return this;
        }

        public Builder westVar(String westVar) {
            return westVar(Output.of(westVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCropArgs build() {
            return $;
        }
    }

}
