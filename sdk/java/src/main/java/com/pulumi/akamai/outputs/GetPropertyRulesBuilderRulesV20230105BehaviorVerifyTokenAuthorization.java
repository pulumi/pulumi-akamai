// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization {
    /**
     * @return Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
     * 
     */
    private @Nullable String algorithm;
    /**
     * @return URL-escapes HMAC inputs passed in as query parameters.
     * 
     */
    private @Nullable Boolean escapeHmacInputs;
    /**
     * @return When enabled, sends an HTTP error when an authentication test fails.
     * 
     */
    private @Nullable Boolean failureResponse;
    /**
     * @return Enabling this removes the query string from the URL used to form an encryption key.
     * 
     */
    private @Nullable Boolean ignoreQueryString;
    /**
     * @return The shared secret used to validate tokens, which needs to match the key used in the token generation code.
     * 
     */
    private @Nullable String key;
    /**
     * @return Specifies where to find the token in the incoming request.
     * 
     */
    private @Nullable String location;
    /**
     * @return When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
     * 
     */
    private @Nullable String locationId;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
     * 
     */
    private @Nullable String salt;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return Specifies a transition key as a hex value.
     * 
     */
    private @Nullable String transitionKey;
    /**
     * @return If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
     * 
     */
    private @Nullable Boolean useAdvanced;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization() {}
    /**
     * @return Specifies the algorithm that generates the token. It needs to match the method chosen in the token generation code.
     * 
     */
    public Optional<String> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    /**
     * @return URL-escapes HMAC inputs passed in as query parameters.
     * 
     */
    public Optional<Boolean> escapeHmacInputs() {
        return Optional.ofNullable(this.escapeHmacInputs);
    }
    /**
     * @return When enabled, sends an HTTP error when an authentication test fails.
     * 
     */
    public Optional<Boolean> failureResponse() {
        return Optional.ofNullable(this.failureResponse);
    }
    /**
     * @return Enabling this removes the query string from the URL used to form an encryption key.
     * 
     */
    public Optional<Boolean> ignoreQueryString() {
        return Optional.ofNullable(this.ignoreQueryString);
    }
    /**
     * @return The shared secret used to validate tokens, which needs to match the key used in the token generation code.
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return Specifies where to find the token in the incoming request.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return When `location` is `CLIENT_REQUEST_HEADER`, specifies the name of the incoming request&#39;s header where to find the token.
     * 
     */
    public Optional<String> locationId() {
        return Optional.ofNullable(this.locationId);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Specifies a salt string for input when generating the token, which needs to match the salt value used in the token generation code.
     * 
     */
    public Optional<String> salt() {
        return Optional.ofNullable(this.salt);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return Specifies a transition key as a hex value.
     * 
     */
    public Optional<String> transitionKey() {
        return Optional.ofNullable(this.transitionKey);
    }
    /**
     * @return If enabled, allows you to specify advanced options such as `algorithm`, `escapeHmacInputs`, `ignoreQueryString`, `transitionKey`, and `salt`.
     * 
     */
    public Optional<Boolean> useAdvanced() {
        return Optional.ofNullable(this.useAdvanced);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String algorithm;
        private @Nullable Boolean escapeHmacInputs;
        private @Nullable Boolean failureResponse;
        private @Nullable Boolean ignoreQueryString;
        private @Nullable String key;
        private @Nullable String location;
        private @Nullable String locationId;
        private @Nullable Boolean locked;
        private @Nullable String salt;
        private @Nullable String templateUuid;
        private @Nullable String transitionKey;
        private @Nullable Boolean useAdvanced;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.escapeHmacInputs = defaults.escapeHmacInputs;
    	      this.failureResponse = defaults.failureResponse;
    	      this.ignoreQueryString = defaults.ignoreQueryString;
    	      this.key = defaults.key;
    	      this.location = defaults.location;
    	      this.locationId = defaults.locationId;
    	      this.locked = defaults.locked;
    	      this.salt = defaults.salt;
    	      this.templateUuid = defaults.templateUuid;
    	      this.transitionKey = defaults.transitionKey;
    	      this.useAdvanced = defaults.useAdvanced;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable String algorithm) {

            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder escapeHmacInputs(@Nullable Boolean escapeHmacInputs) {

            this.escapeHmacInputs = escapeHmacInputs;
            return this;
        }
        @CustomType.Setter
        public Builder failureResponse(@Nullable Boolean failureResponse) {

            this.failureResponse = failureResponse;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreQueryString(@Nullable Boolean ignoreQueryString) {

            this.ignoreQueryString = ignoreQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder locationId(@Nullable String locationId) {

            this.locationId = locationId;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder salt(@Nullable String salt) {

            this.salt = salt;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder transitionKey(@Nullable String transitionKey) {

            this.transitionKey = transitionKey;
            return this;
        }
        @CustomType.Setter
        public Builder useAdvanced(@Nullable Boolean useAdvanced) {

            this.useAdvanced = useAdvanced;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20230105BehaviorVerifyTokenAuthorization();
            _resultValue.algorithm = algorithm;
            _resultValue.escapeHmacInputs = escapeHmacInputs;
            _resultValue.failureResponse = failureResponse;
            _resultValue.ignoreQueryString = ignoreQueryString;
            _resultValue.key = key;
            _resultValue.location = location;
            _resultValue.locationId = locationId;
            _resultValue.locked = locked;
            _resultValue.salt = salt;
            _resultValue.templateUuid = templateUuid;
            _resultValue.transitionKey = transitionKey;
            _resultValue.useAdvanced = useAdvanced;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
