// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs();

    @Import(name="points", required=true)
    private Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs>> points;

    public Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs>> points() {
        return this.points;
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs $) {
        this.points = $.points;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs(Objects.requireNonNull(defaults));
        }

        public Builder points(Output<List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs>> points) {
            $.points = points;
            return this;
        }

        public Builder points(List<GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs> points) {
            return points(Output.of(points));
        }

        public Builder points(GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapePointArgs... points) {
            return points(List.of(points));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionLessThanRegionOfInterestCropRegionOfInterestPolygonShapeArgs build() {
            $.points = Objects.requireNonNull($.points, "expected parameter 'points' to be non-null");
            return $;
        }
    }

}
