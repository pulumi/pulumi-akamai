// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyOutput {
    private @Nullable String adaptiveQuality;
    private @Nullable List<String> allowedFormats;
    private @Nullable List<String> forcedFormats;
    private @Nullable String perceptualQuality;
    private @Nullable String perceptualQualityFloor;
    private @Nullable String perceptualQualityVar;
    private @Nullable String quality;
    private @Nullable String qualityVar;

    private GetImagingPolicyImagePolicyOutput() {}
    public Optional<String> adaptiveQuality() {
        return Optional.ofNullable(this.adaptiveQuality);
    }
    public List<String> allowedFormats() {
        return this.allowedFormats == null ? List.of() : this.allowedFormats;
    }
    public List<String> forcedFormats() {
        return this.forcedFormats == null ? List.of() : this.forcedFormats;
    }
    public Optional<String> perceptualQuality() {
        return Optional.ofNullable(this.perceptualQuality);
    }
    public Optional<String> perceptualQualityFloor() {
        return Optional.ofNullable(this.perceptualQualityFloor);
    }
    public Optional<String> perceptualQualityVar() {
        return Optional.ofNullable(this.perceptualQualityVar);
    }
    public Optional<String> quality() {
        return Optional.ofNullable(this.quality);
    }
    public Optional<String> qualityVar() {
        return Optional.ofNullable(this.qualityVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyOutput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String adaptiveQuality;
        private @Nullable List<String> allowedFormats;
        private @Nullable List<String> forcedFormats;
        private @Nullable String perceptualQuality;
        private @Nullable String perceptualQualityFloor;
        private @Nullable String perceptualQualityVar;
        private @Nullable String quality;
        private @Nullable String qualityVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyOutput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveQuality = defaults.adaptiveQuality;
    	      this.allowedFormats = defaults.allowedFormats;
    	      this.forcedFormats = defaults.forcedFormats;
    	      this.perceptualQuality = defaults.perceptualQuality;
    	      this.perceptualQualityFloor = defaults.perceptualQualityFloor;
    	      this.perceptualQualityVar = defaults.perceptualQualityVar;
    	      this.quality = defaults.quality;
    	      this.qualityVar = defaults.qualityVar;
        }

        @CustomType.Setter
        public Builder adaptiveQuality(@Nullable String adaptiveQuality) {
            this.adaptiveQuality = adaptiveQuality;
            return this;
        }
        @CustomType.Setter
        public Builder allowedFormats(@Nullable List<String> allowedFormats) {
            this.allowedFormats = allowedFormats;
            return this;
        }
        public Builder allowedFormats(String... allowedFormats) {
            return allowedFormats(List.of(allowedFormats));
        }
        @CustomType.Setter
        public Builder forcedFormats(@Nullable List<String> forcedFormats) {
            this.forcedFormats = forcedFormats;
            return this;
        }
        public Builder forcedFormats(String... forcedFormats) {
            return forcedFormats(List.of(forcedFormats));
        }
        @CustomType.Setter
        public Builder perceptualQuality(@Nullable String perceptualQuality) {
            this.perceptualQuality = perceptualQuality;
            return this;
        }
        @CustomType.Setter
        public Builder perceptualQualityFloor(@Nullable String perceptualQualityFloor) {
            this.perceptualQualityFloor = perceptualQualityFloor;
            return this;
        }
        @CustomType.Setter
        public Builder perceptualQualityVar(@Nullable String perceptualQualityVar) {
            this.perceptualQualityVar = perceptualQualityVar;
            return this;
        }
        @CustomType.Setter
        public Builder quality(@Nullable String quality) {
            this.quality = quality;
            return this;
        }
        @CustomType.Setter
        public Builder qualityVar(@Nullable String qualityVar) {
            this.qualityVar = qualityVar;
            return this;
        }
        public GetImagingPolicyImagePolicyOutput build() {
            final var _resultValue = new GetImagingPolicyImagePolicyOutput();
            _resultValue.adaptiveQuality = adaptiveQuality;
            _resultValue.allowedFormats = allowedFormats;
            _resultValue.forcedFormats = forcedFormats;
            _resultValue.perceptualQuality = perceptualQuality;
            _resultValue.perceptualQualityFloor = perceptualQualityFloor;
            _resultValue.perceptualQualityVar = perceptualQualityVar;
            _resultValue.quality = quality;
            _resultValue.qualityVar = qualityVar;
            return _resultValue;
        }
    }
}
