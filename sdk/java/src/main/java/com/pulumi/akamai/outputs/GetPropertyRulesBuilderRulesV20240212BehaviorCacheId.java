// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240212BehaviorCacheId {
    /**
     * @return Specifies the names of the query parameters, cookies, or headers to include or exclude from the cache ID.
     * 
     */
    private @Nullable List<String> elements;
    /**
     * @return Includes the value of the specified elements in the cache ID. Otherwise only their names are included.
     * 
     */
    private @Nullable Boolean includeValue;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Requires the behavior&#39;s specified elements to be present for content to cache. When disabled, requests that lack the specified elements are still cached.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Specifies how to modify the cache ID.
     * 
     */
    private @Nullable String rule;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return Specifies the name of the variable you want to include in the cache key.
     * 
     */
    private @Nullable String variableName;

    private GetPropertyRulesBuilderRulesV20240212BehaviorCacheId() {}
    /**
     * @return Specifies the names of the query parameters, cookies, or headers to include or exclude from the cache ID.
     * 
     */
    public List<String> elements() {
        return this.elements == null ? List.of() : this.elements;
    }
    /**
     * @return Includes the value of the specified elements in the cache ID. Otherwise only their names are included.
     * 
     */
    public Optional<Boolean> includeValue() {
        return Optional.ofNullable(this.includeValue);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Requires the behavior&#39;s specified elements to be present for content to cache. When disabled, requests that lack the specified elements are still cached.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Specifies how to modify the cache ID.
     * 
     */
    public Optional<String> rule() {
        return Optional.ofNullable(this.rule);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return Specifies the name of the variable you want to include in the cache key.
     * 
     */
    public Optional<String> variableName() {
        return Optional.ofNullable(this.variableName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240212BehaviorCacheId defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> elements;
        private @Nullable Boolean includeValue;
        private @Nullable Boolean locked;
        private @Nullable Boolean optional;
        private @Nullable String rule;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        private @Nullable String variableName;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240212BehaviorCacheId defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.elements = defaults.elements;
    	      this.includeValue = defaults.includeValue;
    	      this.locked = defaults.locked;
    	      this.optional = defaults.optional;
    	      this.rule = defaults.rule;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
    	      this.variableName = defaults.variableName;
        }

        @CustomType.Setter
        public Builder elements(@Nullable List<String> elements) {

            this.elements = elements;
            return this;
        }
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }
        @CustomType.Setter
        public Builder includeValue(@Nullable Boolean includeValue) {

            this.includeValue = includeValue;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder rule(@Nullable String rule) {

            this.rule = rule;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder variableName(@Nullable String variableName) {

            this.variableName = variableName;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240212BehaviorCacheId build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240212BehaviorCacheId();
            _resultValue.elements = elements;
            _resultValue.includeValue = includeValue;
            _resultValue.locked = locked;
            _resultValue.optional = optional;
            _resultValue.rule = rule;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            _resultValue.variableName = variableName;
            return _resultValue;
        }
    }
}
