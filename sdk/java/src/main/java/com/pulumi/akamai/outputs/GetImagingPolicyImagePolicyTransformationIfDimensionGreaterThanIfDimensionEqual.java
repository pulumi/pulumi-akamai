// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim;
import com.pulumi.akamai.outputs.GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask;
import com.pulumi.core.annotations.CustomType;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual {
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend> appends;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop> aspectCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor> backgroundColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur> blurs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey> chromaKeys;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite> composites;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound> compounds;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast> contrasts;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop> crops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop> faceCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop> featureCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill> fitAndFills;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop> goops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale> grayscales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl> hsls;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv> hsvs;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension> ifDimensions;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation> ifOrientations;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery> imQueries;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor> maxColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror> mirrors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue> monoHues;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity> opacities;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop> relativeCrops;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor> removeColors;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize> resizes;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate> rotates;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale> scales;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears> shears;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim> trims;
    private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask> unsharpMasks;

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual() {}
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend> appends() {
        return this.appends == null ? List.of() : this.appends;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop> aspectCrops() {
        return this.aspectCrops == null ? List.of() : this.aspectCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor> backgroundColors() {
        return this.backgroundColors == null ? List.of() : this.backgroundColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur> blurs() {
        return this.blurs == null ? List.of() : this.blurs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey> chromaKeys() {
        return this.chromaKeys == null ? List.of() : this.chromaKeys;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite> composites() {
        return this.composites == null ? List.of() : this.composites;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound> compounds() {
        return this.compounds == null ? List.of() : this.compounds;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast> contrasts() {
        return this.contrasts == null ? List.of() : this.contrasts;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop> crops() {
        return this.crops == null ? List.of() : this.crops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop> faceCrops() {
        return this.faceCrops == null ? List.of() : this.faceCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop> featureCrops() {
        return this.featureCrops == null ? List.of() : this.featureCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill> fitAndFills() {
        return this.fitAndFills == null ? List.of() : this.fitAndFills;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop> goops() {
        return this.goops == null ? List.of() : this.goops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale> grayscales() {
        return this.grayscales == null ? List.of() : this.grayscales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl> hsls() {
        return this.hsls == null ? List.of() : this.hsls;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv> hsvs() {
        return this.hsvs == null ? List.of() : this.hsvs;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension> ifDimensions() {
        return this.ifDimensions == null ? List.of() : this.ifDimensions;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation> ifOrientations() {
        return this.ifOrientations == null ? List.of() : this.ifOrientations;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery> imQueries() {
        return this.imQueries == null ? List.of() : this.imQueries;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor> maxColors() {
        return this.maxColors == null ? List.of() : this.maxColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror> mirrors() {
        return this.mirrors == null ? List.of() : this.mirrors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue> monoHues() {
        return this.monoHues == null ? List.of() : this.monoHues;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity> opacities() {
        return this.opacities == null ? List.of() : this.opacities;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops() {
        return this.regionOfInterestCrops == null ? List.of() : this.regionOfInterestCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop> relativeCrops() {
        return this.relativeCrops == null ? List.of() : this.relativeCrops;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor> removeColors() {
        return this.removeColors == null ? List.of() : this.removeColors;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize> resizes() {
        return this.resizes == null ? List.of() : this.resizes;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate> rotates() {
        return this.rotates == null ? List.of() : this.rotates;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale> scales() {
        return this.scales == null ? List.of() : this.scales;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears> shears() {
        return this.shears == null ? List.of() : this.shears;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim> trims() {
        return this.trims == null ? List.of() : this.trims;
    }
    public List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask> unsharpMasks() {
        return this.unsharpMasks == null ? List.of() : this.unsharpMasks;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend> appends;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop> aspectCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor> backgroundColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur> blurs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey> chromaKeys;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite> composites;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound> compounds;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast> contrasts;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop> crops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop> faceCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop> featureCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill> fitAndFills;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop> goops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale> grayscales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl> hsls;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv> hsvs;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension> ifDimensions;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation> ifOrientations;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery> imQueries;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor> maxColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror> mirrors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue> monoHues;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity> opacities;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop> relativeCrops;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor> removeColors;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize> resizes;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate> rotates;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale> scales;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears> shears;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim> trims;
        private @Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask> unsharpMasks;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appends = defaults.appends;
    	      this.aspectCrops = defaults.aspectCrops;
    	      this.backgroundColors = defaults.backgroundColors;
    	      this.blurs = defaults.blurs;
    	      this.chromaKeys = defaults.chromaKeys;
    	      this.composites = defaults.composites;
    	      this.compounds = defaults.compounds;
    	      this.contrasts = defaults.contrasts;
    	      this.crops = defaults.crops;
    	      this.faceCrops = defaults.faceCrops;
    	      this.featureCrops = defaults.featureCrops;
    	      this.fitAndFills = defaults.fitAndFills;
    	      this.goops = defaults.goops;
    	      this.grayscales = defaults.grayscales;
    	      this.hsls = defaults.hsls;
    	      this.hsvs = defaults.hsvs;
    	      this.ifDimensions = defaults.ifDimensions;
    	      this.ifOrientations = defaults.ifOrientations;
    	      this.imQueries = defaults.imQueries;
    	      this.maxColors = defaults.maxColors;
    	      this.mirrors = defaults.mirrors;
    	      this.monoHues = defaults.monoHues;
    	      this.opacities = defaults.opacities;
    	      this.regionOfInterestCrops = defaults.regionOfInterestCrops;
    	      this.relativeCrops = defaults.relativeCrops;
    	      this.removeColors = defaults.removeColors;
    	      this.resizes = defaults.resizes;
    	      this.rotates = defaults.rotates;
    	      this.scales = defaults.scales;
    	      this.shears = defaults.shears;
    	      this.trims = defaults.trims;
    	      this.unsharpMasks = defaults.unsharpMasks;
        }

        @CustomType.Setter
        public Builder appends(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend> appends) {
            this.appends = appends;
            return this;
        }
        public Builder appends(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAppend... appends) {
            return appends(List.of(appends));
        }
        @CustomType.Setter
        public Builder aspectCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop> aspectCrops) {
            this.aspectCrops = aspectCrops;
            return this;
        }
        public Builder aspectCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualAspectCrop... aspectCrops) {
            return aspectCrops(List.of(aspectCrops));
        }
        @CustomType.Setter
        public Builder backgroundColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor> backgroundColors) {
            this.backgroundColors = backgroundColors;
            return this;
        }
        public Builder backgroundColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBackgroundColor... backgroundColors) {
            return backgroundColors(List.of(backgroundColors));
        }
        @CustomType.Setter
        public Builder blurs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur> blurs) {
            this.blurs = blurs;
            return this;
        }
        public Builder blurs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualBlur... blurs) {
            return blurs(List.of(blurs));
        }
        @CustomType.Setter
        public Builder chromaKeys(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey> chromaKeys) {
            this.chromaKeys = chromaKeys;
            return this;
        }
        public Builder chromaKeys(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualChromaKey... chromaKeys) {
            return chromaKeys(List.of(chromaKeys));
        }
        @CustomType.Setter
        public Builder composites(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite> composites) {
            this.composites = composites;
            return this;
        }
        public Builder composites(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualComposite... composites) {
            return composites(List.of(composites));
        }
        @CustomType.Setter
        public Builder compounds(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound> compounds) {
            this.compounds = compounds;
            return this;
        }
        public Builder compounds(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCompound... compounds) {
            return compounds(List.of(compounds));
        }
        @CustomType.Setter
        public Builder contrasts(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast> contrasts) {
            this.contrasts = contrasts;
            return this;
        }
        public Builder contrasts(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualContrast... contrasts) {
            return contrasts(List.of(contrasts));
        }
        @CustomType.Setter
        public Builder crops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop> crops) {
            this.crops = crops;
            return this;
        }
        public Builder crops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualCrop... crops) {
            return crops(List.of(crops));
        }
        @CustomType.Setter
        public Builder faceCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop> faceCrops) {
            this.faceCrops = faceCrops;
            return this;
        }
        public Builder faceCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCrop... faceCrops) {
            return faceCrops(List.of(faceCrops));
        }
        @CustomType.Setter
        public Builder featureCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop> featureCrops) {
            this.featureCrops = featureCrops;
            return this;
        }
        public Builder featureCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFeatureCrop... featureCrops) {
            return featureCrops(List.of(featureCrops));
        }
        @CustomType.Setter
        public Builder fitAndFills(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill> fitAndFills) {
            this.fitAndFills = fitAndFills;
            return this;
        }
        public Builder fitAndFills(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFitAndFill... fitAndFills) {
            return fitAndFills(List.of(fitAndFills));
        }
        @CustomType.Setter
        public Builder goops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop> goops) {
            this.goops = goops;
            return this;
        }
        public Builder goops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGoop... goops) {
            return goops(List.of(goops));
        }
        @CustomType.Setter
        public Builder grayscales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale> grayscales) {
            this.grayscales = grayscales;
            return this;
        }
        public Builder grayscales(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualGrayscale... grayscales) {
            return grayscales(List.of(grayscales));
        }
        @CustomType.Setter
        public Builder hsls(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl> hsls) {
            this.hsls = hsls;
            return this;
        }
        public Builder hsls(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsl... hsls) {
            return hsls(List.of(hsls));
        }
        @CustomType.Setter
        public Builder hsvs(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv> hsvs) {
            this.hsvs = hsvs;
            return this;
        }
        public Builder hsvs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualHsv... hsvs) {
            return hsvs(List.of(hsvs));
        }
        @CustomType.Setter
        public Builder ifDimensions(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension> ifDimensions) {
            this.ifDimensions = ifDimensions;
            return this;
        }
        public Builder ifDimensions(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfDimension... ifDimensions) {
            return ifDimensions(List.of(ifDimensions));
        }
        @CustomType.Setter
        public Builder ifOrientations(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation> ifOrientations) {
            this.ifOrientations = ifOrientations;
            return this;
        }
        public Builder ifOrientations(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualIfOrientation... ifOrientations) {
            return ifOrientations(List.of(ifOrientations));
        }
        @CustomType.Setter
        public Builder imQueries(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery> imQueries) {
            this.imQueries = imQueries;
            return this;
        }
        public Builder imQueries(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualImQuery... imQueries) {
            return imQueries(List.of(imQueries));
        }
        @CustomType.Setter
        public Builder maxColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor> maxColors) {
            this.maxColors = maxColors;
            return this;
        }
        public Builder maxColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMaxColor... maxColors) {
            return maxColors(List.of(maxColors));
        }
        @CustomType.Setter
        public Builder mirrors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror> mirrors) {
            this.mirrors = mirrors;
            return this;
        }
        public Builder mirrors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMirror... mirrors) {
            return mirrors(List.of(mirrors));
        }
        @CustomType.Setter
        public Builder monoHues(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue> monoHues) {
            this.monoHues = monoHues;
            return this;
        }
        public Builder monoHues(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualMonoHue... monoHues) {
            return monoHues(List.of(monoHues));
        }
        @CustomType.Setter
        public Builder opacities(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity> opacities) {
            this.opacities = opacities;
            return this;
        }
        public Builder opacities(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualOpacity... opacities) {
            return opacities(List.of(opacities));
        }
        @CustomType.Setter
        public Builder regionOfInterestCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop> regionOfInterestCrops) {
            this.regionOfInterestCrops = regionOfInterestCrops;
            return this;
        }
        public Builder regionOfInterestCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRegionOfInterestCrop... regionOfInterestCrops) {
            return regionOfInterestCrops(List.of(regionOfInterestCrops));
        }
        @CustomType.Setter
        public Builder relativeCrops(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop> relativeCrops) {
            this.relativeCrops = relativeCrops;
            return this;
        }
        public Builder relativeCrops(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRelativeCrop... relativeCrops) {
            return relativeCrops(List.of(relativeCrops));
        }
        @CustomType.Setter
        public Builder removeColors(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor> removeColors) {
            this.removeColors = removeColors;
            return this;
        }
        public Builder removeColors(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRemoveColor... removeColors) {
            return removeColors(List.of(removeColors));
        }
        @CustomType.Setter
        public Builder resizes(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize> resizes) {
            this.resizes = resizes;
            return this;
        }
        public Builder resizes(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualResize... resizes) {
            return resizes(List.of(resizes));
        }
        @CustomType.Setter
        public Builder rotates(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate> rotates) {
            this.rotates = rotates;
            return this;
        }
        public Builder rotates(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualRotate... rotates) {
            return rotates(List.of(rotates));
        }
        @CustomType.Setter
        public Builder scales(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale> scales) {
            this.scales = scales;
            return this;
        }
        public Builder scales(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualScale... scales) {
            return scales(List.of(scales));
        }
        @CustomType.Setter
        public Builder shears(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears> shears) {
            this.shears = shears;
            return this;
        }
        public Builder shears(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualShears... shears) {
            return shears(List.of(shears));
        }
        @CustomType.Setter
        public Builder trims(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim> trims) {
            this.trims = trims;
            return this;
        }
        public Builder trims(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualTrim... trims) {
            return trims(List.of(trims));
        }
        @CustomType.Setter
        public Builder unsharpMasks(@Nullable List<GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask> unsharpMasks) {
            this.unsharpMasks = unsharpMasks;
            return this;
        }
        public Builder unsharpMasks(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualUnsharpMask... unsharpMasks) {
            return unsharpMasks(List.of(unsharpMasks));
        }
        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual build() {
            final var o = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqual();
            o.appends = appends;
            o.aspectCrops = aspectCrops;
            o.backgroundColors = backgroundColors;
            o.blurs = blurs;
            o.chromaKeys = chromaKeys;
            o.composites = composites;
            o.compounds = compounds;
            o.contrasts = contrasts;
            o.crops = crops;
            o.faceCrops = faceCrops;
            o.featureCrops = featureCrops;
            o.fitAndFills = fitAndFills;
            o.goops = goops;
            o.grayscales = grayscales;
            o.hsls = hsls;
            o.hsvs = hsvs;
            o.ifDimensions = ifDimensions;
            o.ifOrientations = ifOrientations;
            o.imQueries = imQueries;
            o.maxColors = maxColors;
            o.mirrors = mirrors;
            o.monoHues = monoHues;
            o.opacities = opacities;
            o.regionOfInterestCrops = regionOfInterestCrops;
            o.relativeCrops = relativeCrops;
            o.removeColors = removeColors;
            o.resizes = resizes;
            o.rotates = rotates;
            o.scales = scales;
            o.shears = shears;
            o.trims = trims;
            o.unsharpMasks = unsharpMasks;
            return o;
        }
    }
}
