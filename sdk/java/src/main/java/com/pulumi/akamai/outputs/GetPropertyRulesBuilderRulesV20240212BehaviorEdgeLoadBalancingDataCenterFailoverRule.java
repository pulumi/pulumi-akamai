// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule {
    /**
     * @return When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
     * 
     */
    private @Nullable Boolean absolutePath;
    /**
     * @return Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
     * 
     */
    private @Nullable String contextRoot;
    /**
     * @return The hostname of the data center to fail over to.
     * 
     */
    private @Nullable String failoverHostname;
    /**
     * @return Allows you to modify the request&#39;s hostname or path.
     * 
     */
    private @Nullable Boolean modifyRequest;
    /**
     * @return Overrides the request&#39;s hostname with the `failover_hostname`.
     * 
     */
    private @Nullable Boolean overrideHostname;

    private GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule() {}
    /**
     * @return When enabled, interprets the path specified by `context_root` as an absolute server path, for example to reference a site-down page. Otherwise when disabled, the path is appended to the request.
     * 
     */
    public Optional<Boolean> absolutePath() {
        return Optional.ofNullable(this.absolutePath);
    }
    /**
     * @return Specifies the path to use in the forwarding request, typically the root (`/`) when failing over to a different data center, or a full path such as `/static/error.html` when failing over to an error page.
     * 
     */
    public Optional<String> contextRoot() {
        return Optional.ofNullable(this.contextRoot);
    }
    /**
     * @return The hostname of the data center to fail over to.
     * 
     */
    public Optional<String> failoverHostname() {
        return Optional.ofNullable(this.failoverHostname);
    }
    /**
     * @return Allows you to modify the request&#39;s hostname or path.
     * 
     */
    public Optional<Boolean> modifyRequest() {
        return Optional.ofNullable(this.modifyRequest);
    }
    /**
     * @return Overrides the request&#39;s hostname with the `failover_hostname`.
     * 
     */
    public Optional<Boolean> overrideHostname() {
        return Optional.ofNullable(this.overrideHostname);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean absolutePath;
        private @Nullable String contextRoot;
        private @Nullable String failoverHostname;
        private @Nullable Boolean modifyRequest;
        private @Nullable Boolean overrideHostname;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.absolutePath = defaults.absolutePath;
    	      this.contextRoot = defaults.contextRoot;
    	      this.failoverHostname = defaults.failoverHostname;
    	      this.modifyRequest = defaults.modifyRequest;
    	      this.overrideHostname = defaults.overrideHostname;
        }

        @CustomType.Setter
        public Builder absolutePath(@Nullable Boolean absolutePath) {

            this.absolutePath = absolutePath;
            return this;
        }
        @CustomType.Setter
        public Builder contextRoot(@Nullable String contextRoot) {

            this.contextRoot = contextRoot;
            return this;
        }
        @CustomType.Setter
        public Builder failoverHostname(@Nullable String failoverHostname) {

            this.failoverHostname = failoverHostname;
            return this;
        }
        @CustomType.Setter
        public Builder modifyRequest(@Nullable Boolean modifyRequest) {

            this.modifyRequest = modifyRequest;
            return this;
        }
        @CustomType.Setter
        public Builder overrideHostname(@Nullable Boolean overrideHostname) {

            this.overrideHostname = overrideHostname;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240212BehaviorEdgeLoadBalancingDataCenterFailoverRule();
            _resultValue.absolutePath = absolutePath;
            _resultValue.contextRoot = contextRoot;
            _resultValue.failoverHostname = failoverHostname;
            _resultValue.modifyRequest = modifyRequest;
            _resultValue.overrideHostname = overrideHostname;
            return _resultValue;
        }
    }
}
