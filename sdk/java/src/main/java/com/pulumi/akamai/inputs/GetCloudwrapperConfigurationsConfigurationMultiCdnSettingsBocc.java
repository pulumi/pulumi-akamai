// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc Empty = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc();

    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    @Import(name="conditionalSamplingFrequency", required=true)
    private String conditionalSamplingFrequency;

    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    public String conditionalSamplingFrequency() {
        return this.conditionalSamplingFrequency;
    }

    /**
     * Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     * 
     */
    @Import(name="forwardType", required=true)
    private String forwardType;

    /**
     * @return Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
     * 
     */
    public String forwardType() {
        return this.forwardType;
    }

    /**
     * Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     * 
     */
    @Import(name="requestType", required=true)
    private String requestType;

    /**
     * @return Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
     * 
     */
    public String requestType() {
        return this.requestType;
    }

    /**
     * The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    @Import(name="samplingFrequency", required=true)
    private String samplingFrequency;

    /**
     * @return The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
     * 
     */
    public String samplingFrequency() {
        return this.samplingFrequency;
    }

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc() {}

    private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc $) {
        this.conditionalSamplingFrequency = $.conditionalSamplingFrequency;
        this.enabled = $.enabled;
        this.forwardType = $.forwardType;
        this.requestType = $.requestType;
        this.samplingFrequency = $.samplingFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc $;

        public Builder() {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc();
        }

        public Builder(GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc defaults) {
            $ = new GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditionalSamplingFrequency The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
         * 
         * @return builder
         * 
         */
        public Builder conditionalSamplingFrequency(String conditionalSamplingFrequency) {
            $.conditionalSamplingFrequency = conditionalSamplingFrequency;
            return this;
        }

        /**
         * @param enabled Enable diagnostic data beacons for consumption by the Broadcast Operations Control Center.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param forwardType Select whether to beacon diagnostics data for internal ORIGIN_ONLY, MIDGRESS_ONLY, or both ORIGIN_AND_MIDGRESS forwards.
         * 
         * @return builder
         * 
         */
        public Builder forwardType(String forwardType) {
            $.forwardType = forwardType;
            return this;
        }

        /**
         * @param requestType Select whether to beacon diagnostics data for EDGE_ONLY or EDGE_AND_MIDGRESS requests.
         * 
         * @return builder
         * 
         */
        public Builder requestType(String requestType) {
            $.requestType = requestType;
            return this;
        }

        /**
         * @param samplingFrequency The sampling frequency of requests and forwards for EDGE, MIDGRESS, and ORIGIN beacons.
         * 
         * @return builder
         * 
         */
        public Builder samplingFrequency(String samplingFrequency) {
            $.samplingFrequency = samplingFrequency;
            return this;
        }

        public GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc build() {
            if ($.conditionalSamplingFrequency == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "conditionalSamplingFrequency");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "enabled");
            }
            if ($.forwardType == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "forwardType");
            }
            if ($.requestType == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "requestType");
            }
            if ($.samplingFrequency == null) {
                throw new MissingRequiredPropertyException("GetCloudwrapperConfigurationsConfigurationMultiCdnSettingsBocc", "samplingFrequency");
            }
            return $;
        }
    }

}
