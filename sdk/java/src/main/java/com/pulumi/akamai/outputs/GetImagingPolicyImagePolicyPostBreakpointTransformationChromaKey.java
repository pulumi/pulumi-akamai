// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey {
    /**
     * @return The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     * 
     */
    private @Nullable String hue;
    /**
     * @return How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     * 
     */
    private @Nullable String hueFeather;
    /**
     * @return How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     * 
     */
    private @Nullable String hueFeatherVar;
    /**
     * @return How close a color&#39;s hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     * 
     */
    private @Nullable String hueTolerance;
    /**
     * @return How close a color&#39;s hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     * 
     */
    private @Nullable String hueToleranceVar;
    /**
     * @return The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     * 
     */
    private @Nullable String hueVar;
    /**
     * @return How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     * 
     */
    private @Nullable String lightnessFeather;
    /**
     * @return How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     * 
     */
    private @Nullable String lightnessFeatherVar;
    /**
     * @return How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     * 
     */
    private @Nullable String lightnessTolerance;
    /**
     * @return How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     * 
     */
    private @Nullable String lightnessToleranceVar;
    /**
     * @return How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     * 
     */
    private @Nullable String saturationFeather;
    /**
     * @return How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     * 
     */
    private @Nullable String saturationFeatherVar;
    /**
     * @return How close a color&#39;s saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     * 
     */
    private @Nullable String saturationTolerance;
    /**
     * @return How close a color&#39;s saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     * 
     */
    private @Nullable String saturationToleranceVar;

    private GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey() {}
    /**
     * @return The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     * 
     */
    public Optional<String> hue() {
        return Optional.ofNullable(this.hue);
    }
    /**
     * @return How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     * 
     */
    public Optional<String> hueFeather() {
        return Optional.ofNullable(this.hueFeather);
    }
    /**
     * @return How much additional hue to make semi-transparent beyond the Hue Tolerance. By default Hue Feather is 0.083 which applies semi-transparency to hues 30° around the Hue Tolerance.
     * 
     */
    public Optional<String> hueFeatherVar() {
        return Optional.ofNullable(this.hueFeatherVar);
    }
    /**
     * @return How close a color&#39;s hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     * 
     */
    public Optional<String> hueTolerance() {
        return Optional.ofNullable(this.hueTolerance);
    }
    /**
     * @return How close a color&#39;s hue needs to be to the selected hue for it to be changed to fully transparent. If you enter the maximum value of 1.0 the entire image is made transparent. By default Hue Tolerance is approximately 0.083 or 8.3% of the color wheel. This value corresponds to 30° around the specified hue.
     * 
     */
    public Optional<String> hueToleranceVar() {
        return Optional.ofNullable(this.hueToleranceVar);
    }
    /**
     * @return The hue to remove. Enter the degree of rotation between 0 and 360 degrees around the color wheel. By default Chroma Key removes a green hue, 120° on the color wheel.
     * 
     */
    public Optional<String> hueVar() {
        return Optional.ofNullable(this.hueVar);
    }
    /**
     * @return How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     * 
     */
    public Optional<String> lightnessFeather() {
        return Optional.ofNullable(this.lightnessFeather);
    }
    /**
     * @return How much additional lightness to make semi-transparent beyond the Lightness Tolerance. The default value of 0.1 corresponds to 10% away from the tolerated lightness towards full black or full white.
     * 
     */
    public Optional<String> lightnessFeatherVar() {
        return Optional.ofNullable(this.lightnessFeatherVar);
    }
    /**
     * @return How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     * 
     */
    public Optional<String> lightnessTolerance() {
        return Optional.ofNullable(this.lightnessTolerance);
    }
    /**
     * @return How much of the lightest part and darkest part of a color to preserve. For example, you can space this value out from the middle (i.e. 0.5 lightness or full color) to help preserve the splash lighting impact in the image. You can define how close the color needs to be to the full color to remove it from your image. The default value of 0.75 means that a colour must be within 75% of the full color to full white or full black for full removal.
     * 
     */
    public Optional<String> lightnessToleranceVar() {
        return Optional.ofNullable(this.lightnessToleranceVar);
    }
    /**
     * @return How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     * 
     */
    public Optional<String> saturationFeather() {
        return Optional.ofNullable(this.saturationFeather);
    }
    /**
     * @return How much additional saturation to make semi-transparent beyond the Saturation Tolerance. By default Saturation Feather is 0.1 which applies semi-transparency to hues 10% below the saturationTolerance.
     * 
     */
    public Optional<String> saturationFeatherVar() {
        return Optional.ofNullable(this.saturationFeatherVar);
    }
    /**
     * @return How close a color&#39;s saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     * 
     */
    public Optional<String> saturationTolerance() {
        return Optional.ofNullable(this.saturationTolerance);
    }
    /**
     * @return How close a color&#39;s saturation needs to be to full saturation for it to be changed to fully transparent. For example, you can define how green the color needs to be to remove it from your image. The default value of 0.75 means that a color must be within 75% of full saturation in order to be made fully transparent.
     * 
     */
    public Optional<String> saturationToleranceVar() {
        return Optional.ofNullable(this.saturationToleranceVar);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String hue;
        private @Nullable String hueFeather;
        private @Nullable String hueFeatherVar;
        private @Nullable String hueTolerance;
        private @Nullable String hueToleranceVar;
        private @Nullable String hueVar;
        private @Nullable String lightnessFeather;
        private @Nullable String lightnessFeatherVar;
        private @Nullable String lightnessTolerance;
        private @Nullable String lightnessToleranceVar;
        private @Nullable String saturationFeather;
        private @Nullable String saturationFeatherVar;
        private @Nullable String saturationTolerance;
        private @Nullable String saturationToleranceVar;
        public Builder() {}
        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hue = defaults.hue;
    	      this.hueFeather = defaults.hueFeather;
    	      this.hueFeatherVar = defaults.hueFeatherVar;
    	      this.hueTolerance = defaults.hueTolerance;
    	      this.hueToleranceVar = defaults.hueToleranceVar;
    	      this.hueVar = defaults.hueVar;
    	      this.lightnessFeather = defaults.lightnessFeather;
    	      this.lightnessFeatherVar = defaults.lightnessFeatherVar;
    	      this.lightnessTolerance = defaults.lightnessTolerance;
    	      this.lightnessToleranceVar = defaults.lightnessToleranceVar;
    	      this.saturationFeather = defaults.saturationFeather;
    	      this.saturationFeatherVar = defaults.saturationFeatherVar;
    	      this.saturationTolerance = defaults.saturationTolerance;
    	      this.saturationToleranceVar = defaults.saturationToleranceVar;
        }

        @CustomType.Setter
        public Builder hue(@Nullable String hue) {

            this.hue = hue;
            return this;
        }
        @CustomType.Setter
        public Builder hueFeather(@Nullable String hueFeather) {

            this.hueFeather = hueFeather;
            return this;
        }
        @CustomType.Setter
        public Builder hueFeatherVar(@Nullable String hueFeatherVar) {

            this.hueFeatherVar = hueFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder hueTolerance(@Nullable String hueTolerance) {

            this.hueTolerance = hueTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder hueToleranceVar(@Nullable String hueToleranceVar) {

            this.hueToleranceVar = hueToleranceVar;
            return this;
        }
        @CustomType.Setter
        public Builder hueVar(@Nullable String hueVar) {

            this.hueVar = hueVar;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessFeather(@Nullable String lightnessFeather) {

            this.lightnessFeather = lightnessFeather;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessFeatherVar(@Nullable String lightnessFeatherVar) {

            this.lightnessFeatherVar = lightnessFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessTolerance(@Nullable String lightnessTolerance) {

            this.lightnessTolerance = lightnessTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder lightnessToleranceVar(@Nullable String lightnessToleranceVar) {

            this.lightnessToleranceVar = lightnessToleranceVar;
            return this;
        }
        @CustomType.Setter
        public Builder saturationFeather(@Nullable String saturationFeather) {

            this.saturationFeather = saturationFeather;
            return this;
        }
        @CustomType.Setter
        public Builder saturationFeatherVar(@Nullable String saturationFeatherVar) {

            this.saturationFeatherVar = saturationFeatherVar;
            return this;
        }
        @CustomType.Setter
        public Builder saturationTolerance(@Nullable String saturationTolerance) {

            this.saturationTolerance = saturationTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder saturationToleranceVar(@Nullable String saturationToleranceVar) {

            this.saturationToleranceVar = saturationToleranceVar;
            return this;
        }
        public GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey build() {
            final var _resultValue = new GetImagingPolicyImagePolicyPostBreakpointTransformationChromaKey();
            _resultValue.hue = hue;
            _resultValue.hueFeather = hueFeather;
            _resultValue.hueFeatherVar = hueFeatherVar;
            _resultValue.hueTolerance = hueTolerance;
            _resultValue.hueToleranceVar = hueToleranceVar;
            _resultValue.hueVar = hueVar;
            _resultValue.lightnessFeather = lightnessFeather;
            _resultValue.lightnessFeatherVar = lightnessFeatherVar;
            _resultValue.lightnessTolerance = lightnessTolerance;
            _resultValue.lightnessToleranceVar = lightnessToleranceVar;
            _resultValue.saturationFeather = saturationFeather;
            _resultValue.saturationFeatherVar = saturationFeatherVar;
            _resultValue.saturationTolerance = saturationTolerance;
            _resultValue.saturationToleranceVar = saturationToleranceVar;
            return _resultValue;
        }
    }
}
