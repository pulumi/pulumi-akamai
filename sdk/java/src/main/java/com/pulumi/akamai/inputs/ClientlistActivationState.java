// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientlistActivationState extends com.pulumi.resources.ResourceArgs {

    public static final ClientlistActivationState Empty = new ClientlistActivationState();

    /**
     * A brief description for the activation.
     * 
     */
    @Import(name="comments")
    private @Nullable Output<String> comments;

    /**
     * @return A brief description for the activation.
     * 
     */
    public Optional<Output<String>> comments() {
        return Optional.ofNullable(this.comments);
    }

    /**
     * The client list unique identifier.
     * 
     */
    @Import(name="listId")
    private @Nullable Output<String> listId;

    /**
     * @return The client list unique identifier.
     * 
     */
    public Optional<Output<String>> listId() {
        return Optional.ofNullable(this.listId);
    }

    /**
     * The network environment where you activate your client list: either STAGING or PRODUCTION.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The network environment where you activate your client list: either STAGING or PRODUCTION.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Users to notify via email.
     * 
     */
    @Import(name="notificationRecipients")
    private @Nullable Output<List<String>> notificationRecipients;

    /**
     * @return Users to notify via email.
     * 
     */
    public Optional<Output<List<String>>> notificationRecipients() {
        return Optional.ofNullable(this.notificationRecipients);
    }

    /**
     * Identifies the Siebel ticket, if the activation is linked to one.
     * 
     */
    @Import(name="siebelTicketId")
    private @Nullable Output<String> siebelTicketId;

    /**
     * @return Identifies the Siebel ticket, if the activation is linked to one.
     * 
     */
    public Optional<Output<String>> siebelTicketId() {
        return Optional.ofNullable(this.siebelTicketId);
    }

    /**
     * The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The client list version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The client list version.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ClientlistActivationState() {}

    private ClientlistActivationState(ClientlistActivationState $) {
        this.comments = $.comments;
        this.listId = $.listId;
        this.network = $.network;
        this.notificationRecipients = $.notificationRecipients;
        this.siebelTicketId = $.siebelTicketId;
        this.status = $.status;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientlistActivationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientlistActivationState $;

        public Builder() {
            $ = new ClientlistActivationState();
        }

        public Builder(ClientlistActivationState defaults) {
            $ = new ClientlistActivationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comments A brief description for the activation.
         * 
         * @return builder
         * 
         */
        public Builder comments(@Nullable Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments A brief description for the activation.
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param listId The client list unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder listId(@Nullable Output<String> listId) {
            $.listId = listId;
            return this;
        }

        /**
         * @param listId The client list unique identifier.
         * 
         * @return builder
         * 
         */
        public Builder listId(String listId) {
            return listId(Output.of(listId));
        }

        /**
         * @param network The network environment where you activate your client list: either STAGING or PRODUCTION.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network environment where you activate your client list: either STAGING or PRODUCTION.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param notificationRecipients Users to notify via email.
         * 
         * @return builder
         * 
         */
        public Builder notificationRecipients(@Nullable Output<List<String>> notificationRecipients) {
            $.notificationRecipients = notificationRecipients;
            return this;
        }

        /**
         * @param notificationRecipients Users to notify via email.
         * 
         * @return builder
         * 
         */
        public Builder notificationRecipients(List<String> notificationRecipients) {
            return notificationRecipients(Output.of(notificationRecipients));
        }

        /**
         * @param notificationRecipients Users to notify via email.
         * 
         * @return builder
         * 
         */
        public Builder notificationRecipients(String... notificationRecipients) {
            return notificationRecipients(List.of(notificationRecipients));
        }

        /**
         * @param siebelTicketId Identifies the Siebel ticket, if the activation is linked to one.
         * 
         * @return builder
         * 
         */
        public Builder siebelTicketId(@Nullable Output<String> siebelTicketId) {
            $.siebelTicketId = siebelTicketId;
            return this;
        }

        /**
         * @param siebelTicketId Identifies the Siebel ticket, if the activation is linked to one.
         * 
         * @return builder
         * 
         */
        public Builder siebelTicketId(String siebelTicketId) {
            return siebelTicketId(Output.of(siebelTicketId));
        }

        /**
         * @param status The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current activation status, either ACTIVE, INACTIVE, MODIFIED, PENDING_ACTIVATION, PENDING_DEACTIVATION, or FAILED.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param version The client list version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The client list version.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ClientlistActivationState build() {
            return $;
        }
    }

}
