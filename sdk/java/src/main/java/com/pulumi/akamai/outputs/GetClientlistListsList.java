// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClientlistListsList {
    /**
     * @return The client list creation date.
     * 
     */
    private String createDate;
    /**
     * @return The username of the user who created the client list.
     * 
     */
    private String createdBy;
    /**
     * @return Whether the client list was removed.
     * 
     */
    private Boolean deprecated;
    /**
     * @return The number of items that a client list contains.
     * 
     */
    private Integer itemsCount;
    /**
     * @return The ID of the client list.
     * 
     */
    private String listId;
    /**
     * @return The client list type.
     * 
     */
    private String listType;
    /**
     * @return The name of the client list
     * 
     */
    private String name;
    /**
     * @return The client list notes
     * 
     */
    private String notes;
    /**
     * @return The activation status in production environment.
     * 
     */
    private String productionActivationStatus;
    /**
     * @return Whether the client is editable for the authenticated user.
     * 
     */
    private Boolean readOnly;
    /**
     * @return Whether the client list is shared.
     * 
     */
    private Boolean shared;
    /**
     * @return The activation status in staging environment.
     * 
     */
    private String stagingActivationStatus;
    /**
     * @return The client list tags
     * 
     */
    private List<String> tags;
    /**
     * @return The type of the client list
     * 
     */
    private String type;
    /**
     * @return The date of last update.
     * 
     */
    private String updateDate;
    /**
     * @return The username of the user that updated the client list last.
     * 
     */
    private String updatedBy;
    /**
     * @return The current version of the client list.
     * 
     */
    private Integer version;

    private GetClientlistListsList() {}
    /**
     * @return The client list creation date.
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return The username of the user who created the client list.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Whether the client list was removed.
     * 
     */
    public Boolean deprecated() {
        return this.deprecated;
    }
    /**
     * @return The number of items that a client list contains.
     * 
     */
    public Integer itemsCount() {
        return this.itemsCount;
    }
    /**
     * @return The ID of the client list.
     * 
     */
    public String listId() {
        return this.listId;
    }
    /**
     * @return The client list type.
     * 
     */
    public String listType() {
        return this.listType;
    }
    /**
     * @return The name of the client list
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The client list notes
     * 
     */
    public String notes() {
        return this.notes;
    }
    /**
     * @return The activation status in production environment.
     * 
     */
    public String productionActivationStatus() {
        return this.productionActivationStatus;
    }
    /**
     * @return Whether the client is editable for the authenticated user.
     * 
     */
    public Boolean readOnly() {
        return this.readOnly;
    }
    /**
     * @return Whether the client list is shared.
     * 
     */
    public Boolean shared() {
        return this.shared;
    }
    /**
     * @return The activation status in staging environment.
     * 
     */
    public String stagingActivationStatus() {
        return this.stagingActivationStatus;
    }
    /**
     * @return The client list tags
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The type of the client list
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The date of last update.
     * 
     */
    public String updateDate() {
        return this.updateDate;
    }
    /**
     * @return The username of the user that updated the client list last.
     * 
     */
    public String updatedBy() {
        return this.updatedBy;
    }
    /**
     * @return The current version of the client list.
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientlistListsList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createDate;
        private String createdBy;
        private Boolean deprecated;
        private Integer itemsCount;
        private String listId;
        private String listType;
        private String name;
        private String notes;
        private String productionActivationStatus;
        private Boolean readOnly;
        private Boolean shared;
        private String stagingActivationStatus;
        private List<String> tags;
        private String type;
        private String updateDate;
        private String updatedBy;
        private Integer version;
        public Builder() {}
        public Builder(GetClientlistListsList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDate = defaults.createDate;
    	      this.createdBy = defaults.createdBy;
    	      this.deprecated = defaults.deprecated;
    	      this.itemsCount = defaults.itemsCount;
    	      this.listId = defaults.listId;
    	      this.listType = defaults.listType;
    	      this.name = defaults.name;
    	      this.notes = defaults.notes;
    	      this.productionActivationStatus = defaults.productionActivationStatus;
    	      this.readOnly = defaults.readOnly;
    	      this.shared = defaults.shared;
    	      this.stagingActivationStatus = defaults.stagingActivationStatus;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.updateDate = defaults.updateDate;
    	      this.updatedBy = defaults.updatedBy;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder deprecated(Boolean deprecated) {
            if (deprecated == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "deprecated");
            }
            this.deprecated = deprecated;
            return this;
        }
        @CustomType.Setter
        public Builder itemsCount(Integer itemsCount) {
            if (itemsCount == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "itemsCount");
            }
            this.itemsCount = itemsCount;
            return this;
        }
        @CustomType.Setter
        public Builder listId(String listId) {
            if (listId == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "listId");
            }
            this.listId = listId;
            return this;
        }
        @CustomType.Setter
        public Builder listType(String listType) {
            if (listType == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "listType");
            }
            this.listType = listType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            if (notes == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "notes");
            }
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder productionActivationStatus(String productionActivationStatus) {
            if (productionActivationStatus == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "productionActivationStatus");
            }
            this.productionActivationStatus = productionActivationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder readOnly(Boolean readOnly) {
            if (readOnly == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "readOnly");
            }
            this.readOnly = readOnly;
            return this;
        }
        @CustomType.Setter
        public Builder shared(Boolean shared) {
            if (shared == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "shared");
            }
            this.shared = shared;
            return this;
        }
        @CustomType.Setter
        public Builder stagingActivationStatus(String stagingActivationStatus) {
            if (stagingActivationStatus == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "stagingActivationStatus");
            }
            this.stagingActivationStatus = stagingActivationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            if (updateDate == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "updateDate");
            }
            this.updateDate = updateDate;
            return this;
        }
        @CustomType.Setter
        public Builder updatedBy(String updatedBy) {
            if (updatedBy == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "updatedBy");
            }
            this.updatedBy = updatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetClientlistListsList", "version");
            }
            this.version = version;
            return this;
        }
        public GetClientlistListsList build() {
            final var _resultValue = new GetClientlistListsList();
            _resultValue.createDate = createDate;
            _resultValue.createdBy = createdBy;
            _resultValue.deprecated = deprecated;
            _resultValue.itemsCount = itemsCount;
            _resultValue.listId = listId;
            _resultValue.listType = listType;
            _resultValue.name = name;
            _resultValue.notes = notes;
            _resultValue.productionActivationStatus = productionActivationStatus;
            _resultValue.readOnly = readOnly;
            _resultValue.shared = shared;
            _resultValue.stagingActivationStatus = stagingActivationStatus;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.updateDate = updateDate;
            _resultValue.updatedBy = updatedBy;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
