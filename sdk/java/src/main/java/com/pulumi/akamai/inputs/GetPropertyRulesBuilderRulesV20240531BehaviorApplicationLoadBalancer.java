// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerAllDownNetStorage;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerCloudletPolicy;
import com.pulumi.akamai.inputs.GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerFailoverOriginMap;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer extends com.pulumi.resources.InvokeArgs {

    public static final GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer Empty = new GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer();

    /**
     * Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
     * 
     */
    @Import(name="allDownNetStorage")
    private @Nullable GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerAllDownNetStorage allDownNetStorage;

    /**
     * @return Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerAllDownNetStorage> allDownNetStorage() {
        return Optional.ofNullable(this.allDownNetStorage);
    }

    /**
     * Specifies the fallback maintenance page&#39;s filename, expressed as a full path from the root of the NetStorage server.
     * 
     */
    @Import(name="allDownNetStorageFile")
    private @Nullable String allDownNetStorageFile;

    /**
     * @return Specifies the fallback maintenance page&#39;s filename, expressed as a full path from the root of the NetStorage server.
     * 
     */
    public Optional<String> allDownNetStorageFile() {
        return Optional.ofNullable(this.allDownNetStorageFile);
    }

    /**
     * Specifies the HTTP response code when all load-balancing origins are unavailable.
     * 
     */
    @Import(name="allDownStatusCode")
    private @Nullable String allDownStatusCode;

    /**
     * @return Specifies the HTTP response code when all load-balancing origins are unavailable.
     * 
     */
    public Optional<String> allDownStatusCode() {
        return Optional.ofNullable(this.allDownStatusCode);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="allDownTitle")
    private @Nullable String allDownTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> allDownTitle() {
        return Optional.ofNullable(this.allDownTitle);
    }

    /**
     * Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
     * 
     */
    @Import(name="allowCachePrefresh")
    private @Nullable Boolean allowCachePrefresh;

    /**
     * @return Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
     * 
     */
    public Optional<Boolean> allowCachePrefresh() {
        return Optional.ofNullable(this.allowCachePrefresh);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="cachedContentTitle")
    private @Nullable String cachedContentTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> cachedContentTitle() {
        return Optional.ofNullable(this.cachedContentTitle);
    }

    /**
     * Identifies the Cloudlet policy.
     * 
     */
    @Import(name="cloudletPolicy")
    private @Nullable GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerCloudletPolicy cloudletPolicy;

    /**
     * @return Identifies the Cloudlet policy.
     * 
     */
    public Optional<GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerCloudletPolicy> cloudletPolicy() {
        return Optional.ofNullable(this.cloudletPolicy);
    }

    /**
     * Activates the Application Load Balancer Cloudlet.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Activates the Application Load Balancer Cloudlet.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Sets the number of failed requests that would trigger the failover process.
     * 
     */
    @Import(name="failoverAttemptsThreshold")
    private @Nullable Integer failoverAttemptsThreshold;

    /**
     * @return Sets the number of failed requests that would trigger the failover process.
     * 
     */
    public Optional<Integer> failoverAttemptsThreshold() {
        return Optional.ofNullable(this.failoverAttemptsThreshold);
    }

    /**
     * Determines what to do if an origin fails.
     * 
     */
    @Import(name="failoverMode")
    private @Nullable String failoverMode;

    /**
     * @return Determines what to do if an origin fails.
     * 
     */
    public Optional<String> failoverMode() {
        return Optional.ofNullable(this.failoverMode);
    }

    /**
     * Specifies a fixed set of failover mapping rules.
     * 
     */
    @Import(name="failoverOriginMaps")
    private @Nullable List<GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps;

    /**
     * @return Specifies a fixed set of failover mapping rules.
     * 
     */
    public Optional<List<GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerFailoverOriginMap>> failoverOriginMaps() {
        return Optional.ofNullable(this.failoverOriginMaps);
    }

    /**
     * Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
     * 
     */
    @Import(name="failoverStatusCodes")
    private @Nullable List<String> failoverStatusCodes;

    /**
     * @return Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
     * 
     */
    public Optional<List<String>> failoverStatusCodes() {
        return Optional.ofNullable(this.failoverStatusCodes);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="failoverTitle")
    private @Nullable String failoverTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> failoverTitle() {
        return Optional.ofNullable(this.failoverTitle);
    }

    /**
     * A label to distinguish this Application Load Balancer policy from any others within the same property.
     * 
     */
    @Import(name="label")
    private @Nullable String label;

    /**
     * @return A label to distinguish this Application Load Balancer policy from any others within the same property.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    @Import(name="locked")
    private @Nullable Boolean locked;

    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Specifies the name for your session cookie.
     * 
     */
    @Import(name="originCookieName")
    private @Nullable String originCookieName;

    /**
     * @return Specifies the name for your session cookie.
     * 
     */
    public Optional<String> originCookieName() {
        return Optional.ofNullable(this.originCookieName);
    }

    /**
     * Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
     * 
     */
    @Import(name="specifyStickinessCookieDomain")
    private @Nullable Boolean specifyStickinessCookieDomain;

    /**
     * @return Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
     * 
     */
    public Optional<Boolean> specifyStickinessCookieDomain() {
        return Optional.ofNullable(this.specifyStickinessCookieDomain);
    }

    /**
     * Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
     * 
     */
    @Import(name="stickinessCookieAutomaticSalt")
    private @Nullable Boolean stickinessCookieAutomaticSalt;

    /**
     * @return Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
     * 
     */
    public Optional<Boolean> stickinessCookieAutomaticSalt() {
        return Optional.ofNullable(this.stickinessCookieAutomaticSalt);
    }

    /**
     * Specifies the domain to track the stickiness cookie.
     * 
     */
    @Import(name="stickinessCookieDomain")
    private @Nullable String stickinessCookieDomain;

    /**
     * @return Specifies the domain to track the stickiness cookie.
     * 
     */
    public Optional<String> stickinessCookieDomain() {
        return Optional.ofNullable(this.stickinessCookieDomain);
    }

    /**
     * Specifies the stickiness cookie&#39;s salt value. Use this option to share the cookie across many properties.
     * 
     */
    @Import(name="stickinessCookieSalt")
    private @Nullable String stickinessCookieSalt;

    /**
     * @return Specifies the stickiness cookie&#39;s salt value. Use this option to share the cookie across many properties.
     * 
     */
    public Optional<String> stickinessCookieSalt() {
        return Optional.ofNullable(this.stickinessCookieSalt);
    }

    /**
     * Ensures the cookie is transmitted only over HTTP.
     * 
     */
    @Import(name="stickinessCookieSetHttpOnlyFlag")
    private @Nullable Boolean stickinessCookieSetHttpOnlyFlag;

    /**
     * @return Ensures the cookie is transmitted only over HTTP.
     * 
     */
    public Optional<Boolean> stickinessCookieSetHttpOnlyFlag() {
        return Optional.ofNullable(this.stickinessCookieSetHttpOnlyFlag);
    }

    /**
     * Determines how a cookie persistently associates the client with a load-balanced origin.
     * 
     */
    @Import(name="stickinessCookieType")
    private @Nullable String stickinessCookieType;

    /**
     * @return Determines how a cookie persistently associates the client with a load-balanced origin.
     * 
     */
    public Optional<String> stickinessCookieType() {
        return Optional.ofNullable(this.stickinessCookieType);
    }

    /**
     * Sets how long it is before the cookie expires.
     * 
     */
    @Import(name="stickinessDuration")
    private @Nullable String stickinessDuration;

    /**
     * @return Sets how long it is before the cookie expires.
     * 
     */
    public Optional<String> stickinessDuration() {
        return Optional.ofNullable(this.stickinessDuration);
    }

    /**
     * Specifies when the cookie expires.
     * 
     */
    @Import(name="stickinessExpirationDate")
    private @Nullable String stickinessExpirationDate;

    /**
     * @return Specifies when the cookie expires.
     * 
     */
    public Optional<String> stickinessExpirationDate() {
        return Optional.ofNullable(this.stickinessExpirationDate);
    }

    /**
     * Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
     * 
     */
    @Import(name="stickinessRefresh")
    private @Nullable Boolean stickinessRefresh;

    /**
     * @return Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
     * 
     */
    public Optional<Boolean> stickinessRefresh() {
        return Optional.ofNullable(this.stickinessRefresh);
    }

    /**
     * This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    @Import(name="stickinessTitle")
    private @Nullable String stickinessTitle;

    /**
     * @return This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
     * 
     */
    public Optional<String> stickinessTitle() {
        return Optional.ofNullable(this.stickinessTitle);
    }

    /**
     * This option is for internal usage only.
     * 
     */
    @Import(name="templateUuid")
    private @Nullable String templateUuid;

    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    /**
     * A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer() {}

    private GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer(GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer $) {
        this.allDownNetStorage = $.allDownNetStorage;
        this.allDownNetStorageFile = $.allDownNetStorageFile;
        this.allDownStatusCode = $.allDownStatusCode;
        this.allDownTitle = $.allDownTitle;
        this.allowCachePrefresh = $.allowCachePrefresh;
        this.cachedContentTitle = $.cachedContentTitle;
        this.cloudletPolicy = $.cloudletPolicy;
        this.enabled = $.enabled;
        this.failoverAttemptsThreshold = $.failoverAttemptsThreshold;
        this.failoverMode = $.failoverMode;
        this.failoverOriginMaps = $.failoverOriginMaps;
        this.failoverStatusCodes = $.failoverStatusCodes;
        this.failoverTitle = $.failoverTitle;
        this.label = $.label;
        this.locked = $.locked;
        this.originCookieName = $.originCookieName;
        this.specifyStickinessCookieDomain = $.specifyStickinessCookieDomain;
        this.stickinessCookieAutomaticSalt = $.stickinessCookieAutomaticSalt;
        this.stickinessCookieDomain = $.stickinessCookieDomain;
        this.stickinessCookieSalt = $.stickinessCookieSalt;
        this.stickinessCookieSetHttpOnlyFlag = $.stickinessCookieSetHttpOnlyFlag;
        this.stickinessCookieType = $.stickinessCookieType;
        this.stickinessDuration = $.stickinessDuration;
        this.stickinessExpirationDate = $.stickinessExpirationDate;
        this.stickinessRefresh = $.stickinessRefresh;
        this.stickinessTitle = $.stickinessTitle;
        this.templateUuid = $.templateUuid;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer();
        }

        public Builder(GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer defaults) {
            $ = new GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer(Objects.requireNonNull(defaults));
        }

        /**
         * @param allDownNetStorage Specifies a NetStorage account for a static maintenance page as a fallback when no origins are available.
         * 
         * @return builder
         * 
         */
        public Builder allDownNetStorage(@Nullable GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerAllDownNetStorage allDownNetStorage) {
            $.allDownNetStorage = allDownNetStorage;
            return this;
        }

        /**
         * @param allDownNetStorageFile Specifies the fallback maintenance page&#39;s filename, expressed as a full path from the root of the NetStorage server.
         * 
         * @return builder
         * 
         */
        public Builder allDownNetStorageFile(@Nullable String allDownNetStorageFile) {
            $.allDownNetStorageFile = allDownNetStorageFile;
            return this;
        }

        /**
         * @param allDownStatusCode Specifies the HTTP response code when all load-balancing origins are unavailable.
         * 
         * @return builder
         * 
         */
        public Builder allDownStatusCode(@Nullable String allDownStatusCode) {
            $.allDownStatusCode = allDownStatusCode;
            return this;
        }

        /**
         * @param allDownTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder allDownTitle(@Nullable String allDownTitle) {
            $.allDownTitle = allDownTitle;
            return this;
        }

        /**
         * @param allowCachePrefresh Allows the cache to prefresh.  Only appropriate if all origins serve the same content for the same URL.
         * 
         * @return builder
         * 
         */
        public Builder allowCachePrefresh(@Nullable Boolean allowCachePrefresh) {
            $.allowCachePrefresh = allowCachePrefresh;
            return this;
        }

        /**
         * @param cachedContentTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder cachedContentTitle(@Nullable String cachedContentTitle) {
            $.cachedContentTitle = cachedContentTitle;
            return this;
        }

        /**
         * @param cloudletPolicy Identifies the Cloudlet policy.
         * 
         * @return builder
         * 
         */
        public Builder cloudletPolicy(@Nullable GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerCloudletPolicy cloudletPolicy) {
            $.cloudletPolicy = cloudletPolicy;
            return this;
        }

        /**
         * @param enabled Activates the Application Load Balancer Cloudlet.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param failoverAttemptsThreshold Sets the number of failed requests that would trigger the failover process.
         * 
         * @return builder
         * 
         */
        public Builder failoverAttemptsThreshold(@Nullable Integer failoverAttemptsThreshold) {
            $.failoverAttemptsThreshold = failoverAttemptsThreshold;
            return this;
        }

        /**
         * @param failoverMode Determines what to do if an origin fails.
         * 
         * @return builder
         * 
         */
        public Builder failoverMode(@Nullable String failoverMode) {
            $.failoverMode = failoverMode;
            return this;
        }

        /**
         * @param failoverOriginMaps Specifies a fixed set of failover mapping rules.
         * 
         * @return builder
         * 
         */
        public Builder failoverOriginMaps(@Nullable List<GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerFailoverOriginMap> failoverOriginMaps) {
            $.failoverOriginMaps = failoverOriginMaps;
            return this;
        }

        /**
         * @param failoverOriginMaps Specifies a fixed set of failover mapping rules.
         * 
         * @return builder
         * 
         */
        public Builder failoverOriginMaps(GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancerFailoverOriginMap... failoverOriginMaps) {
            return failoverOriginMaps(List.of(failoverOriginMaps));
        }

        /**
         * @param failoverStatusCodes Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
         * 
         * @return builder
         * 
         */
        public Builder failoverStatusCodes(@Nullable List<String> failoverStatusCodes) {
            $.failoverStatusCodes = failoverStatusCodes;
            return this;
        }

        /**
         * @param failoverStatusCodes Specifies a set of HTTP status codes that signal a failure on the origin, in which case the cookie that binds the client to that origin is invalidated and the client is rerouted to another available origin.
         * 
         * @return builder
         * 
         */
        public Builder failoverStatusCodes(String... failoverStatusCodes) {
            return failoverStatusCodes(List.of(failoverStatusCodes));
        }

        /**
         * @param failoverTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder failoverTitle(@Nullable String failoverTitle) {
            $.failoverTitle = failoverTitle;
            return this;
        }

        /**
         * @param label A label to distinguish this Application Load Balancer policy from any others within the same property.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable String label) {
            $.label = label;
            return this;
        }

        /**
         * @param locked Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Boolean locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param originCookieName Specifies the name for your session cookie.
         * 
         * @return builder
         * 
         */
        public Builder originCookieName(@Nullable String originCookieName) {
            $.originCookieName = originCookieName;
            return this;
        }

        /**
         * @param specifyStickinessCookieDomain Specifies whether to use a cookie domain with the stickiness cookie, to tell the browser to which domain to send the cookie.
         * 
         * @return builder
         * 
         */
        public Builder specifyStickinessCookieDomain(@Nullable Boolean specifyStickinessCookieDomain) {
            $.specifyStickinessCookieDomain = specifyStickinessCookieDomain;
            return this;
        }

        /**
         * @param stickinessCookieAutomaticSalt Sets whether to assign a `salt` value automatically to the cookie to prevent manipulation by the user. You should not enable this if sharing the population cookie across more than one property.
         * 
         * @return builder
         * 
         */
        public Builder stickinessCookieAutomaticSalt(@Nullable Boolean stickinessCookieAutomaticSalt) {
            $.stickinessCookieAutomaticSalt = stickinessCookieAutomaticSalt;
            return this;
        }

        /**
         * @param stickinessCookieDomain Specifies the domain to track the stickiness cookie.
         * 
         * @return builder
         * 
         */
        public Builder stickinessCookieDomain(@Nullable String stickinessCookieDomain) {
            $.stickinessCookieDomain = stickinessCookieDomain;
            return this;
        }

        /**
         * @param stickinessCookieSalt Specifies the stickiness cookie&#39;s salt value. Use this option to share the cookie across many properties.
         * 
         * @return builder
         * 
         */
        public Builder stickinessCookieSalt(@Nullable String stickinessCookieSalt) {
            $.stickinessCookieSalt = stickinessCookieSalt;
            return this;
        }

        /**
         * @param stickinessCookieSetHttpOnlyFlag Ensures the cookie is transmitted only over HTTP.
         * 
         * @return builder
         * 
         */
        public Builder stickinessCookieSetHttpOnlyFlag(@Nullable Boolean stickinessCookieSetHttpOnlyFlag) {
            $.stickinessCookieSetHttpOnlyFlag = stickinessCookieSetHttpOnlyFlag;
            return this;
        }

        /**
         * @param stickinessCookieType Determines how a cookie persistently associates the client with a load-balanced origin.
         * 
         * @return builder
         * 
         */
        public Builder stickinessCookieType(@Nullable String stickinessCookieType) {
            $.stickinessCookieType = stickinessCookieType;
            return this;
        }

        /**
         * @param stickinessDuration Sets how long it is before the cookie expires.
         * 
         * @return builder
         * 
         */
        public Builder stickinessDuration(@Nullable String stickinessDuration) {
            $.stickinessDuration = stickinessDuration;
            return this;
        }

        /**
         * @param stickinessExpirationDate Specifies when the cookie expires.
         * 
         * @return builder
         * 
         */
        public Builder stickinessExpirationDate(@Nullable String stickinessExpirationDate) {
            $.stickinessExpirationDate = stickinessExpirationDate;
            return this;
        }

        /**
         * @param stickinessRefresh Extends the duration of the cookie with each new request. When enabled, the `DURATION` thus specifies the latency between requests that would cause the cookie to expire.
         * 
         * @return builder
         * 
         */
        public Builder stickinessRefresh(@Nullable Boolean stickinessRefresh) {
            $.stickinessRefresh = stickinessRefresh;
            return this;
        }

        /**
         * @param stickinessTitle This field is only intended for export compatibility purposes, and modifying it will not impact your use of the behavior.
         * 
         * @return builder
         * 
         */
        public Builder stickinessTitle(@Nullable String stickinessTitle) {
            $.stickinessTitle = stickinessTitle;
            return this;
        }

        /**
         * @param templateUuid This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder templateUuid(@Nullable String templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        /**
         * @param uuid A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public GetPropertyRulesBuilderRulesV20240531BehaviorApplicationLoadBalancer build() {
            return $;
        }
    }

}
