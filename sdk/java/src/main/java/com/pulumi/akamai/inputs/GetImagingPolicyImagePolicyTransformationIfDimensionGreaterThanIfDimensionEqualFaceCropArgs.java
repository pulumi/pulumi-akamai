// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs Empty = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs();

    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    @Import(name="algorithmVar")
    private @Nullable Output<String> algorithmVar;

    public Optional<Output<String>> algorithmVar() {
        return Optional.ofNullable(this.algorithmVar);
    }

    @Import(name="confidence")
    private @Nullable Output<String> confidence;

    public Optional<Output<String>> confidence() {
        return Optional.ofNullable(this.confidence);
    }

    @Import(name="confidenceVar")
    private @Nullable Output<String> confidenceVar;

    public Optional<Output<String>> confidenceVar() {
        return Optional.ofNullable(this.confidenceVar);
    }

    @Import(name="failGravity")
    private @Nullable Output<String> failGravity;

    public Optional<Output<String>> failGravity() {
        return Optional.ofNullable(this.failGravity);
    }

    @Import(name="failGravityVar")
    private @Nullable Output<String> failGravityVar;

    public Optional<Output<String>> failGravityVar() {
        return Optional.ofNullable(this.failGravityVar);
    }

    @Import(name="focus")
    private @Nullable Output<String> focus;

    public Optional<Output<String>> focus() {
        return Optional.ofNullable(this.focus);
    }

    @Import(name="focusVar")
    private @Nullable Output<String> focusVar;

    public Optional<Output<String>> focusVar() {
        return Optional.ofNullable(this.focusVar);
    }

    @Import(name="gravity")
    private @Nullable Output<String> gravity;

    public Optional<Output<String>> gravity() {
        return Optional.ofNullable(this.gravity);
    }

    @Import(name="gravityVar")
    private @Nullable Output<String> gravityVar;

    public Optional<Output<String>> gravityVar() {
        return Optional.ofNullable(this.gravityVar);
    }

    @Import(name="height")
    private @Nullable Output<String> height;

    public Optional<Output<String>> height() {
        return Optional.ofNullable(this.height);
    }

    @Import(name="heightVar")
    private @Nullable Output<String> heightVar;

    public Optional<Output<String>> heightVar() {
        return Optional.ofNullable(this.heightVar);
    }

    @Import(name="padding")
    private @Nullable Output<String> padding;

    public Optional<Output<String>> padding() {
        return Optional.ofNullable(this.padding);
    }

    @Import(name="paddingVar")
    private @Nullable Output<String> paddingVar;

    public Optional<Output<String>> paddingVar() {
        return Optional.ofNullable(this.paddingVar);
    }

    @Import(name="style")
    private @Nullable Output<String> style;

    public Optional<Output<String>> style() {
        return Optional.ofNullable(this.style);
    }

    @Import(name="styleVar")
    private @Nullable Output<String> styleVar;

    public Optional<Output<String>> styleVar() {
        return Optional.ofNullable(this.styleVar);
    }

    @Import(name="width")
    private @Nullable Output<String> width;

    public Optional<Output<String>> width() {
        return Optional.ofNullable(this.width);
    }

    @Import(name="widthVar")
    private @Nullable Output<String> widthVar;

    public Optional<Output<String>> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs() {}

    private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs $) {
        this.algorithm = $.algorithm;
        this.algorithmVar = $.algorithmVar;
        this.confidence = $.confidence;
        this.confidenceVar = $.confidenceVar;
        this.failGravity = $.failGravity;
        this.failGravityVar = $.failGravityVar;
        this.focus = $.focus;
        this.focusVar = $.focusVar;
        this.gravity = $.gravity;
        this.gravityVar = $.gravityVar;
        this.height = $.height;
        this.heightVar = $.heightVar;
        this.padding = $.padding;
        this.paddingVar = $.paddingVar;
        this.style = $.style;
        this.styleVar = $.styleVar;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs();
        }

        public Builder(GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs defaults) {
            $ = new GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder algorithmVar(@Nullable Output<String> algorithmVar) {
            $.algorithmVar = algorithmVar;
            return this;
        }

        public Builder algorithmVar(String algorithmVar) {
            return algorithmVar(Output.of(algorithmVar));
        }

        public Builder confidence(@Nullable Output<String> confidence) {
            $.confidence = confidence;
            return this;
        }

        public Builder confidence(String confidence) {
            return confidence(Output.of(confidence));
        }

        public Builder confidenceVar(@Nullable Output<String> confidenceVar) {
            $.confidenceVar = confidenceVar;
            return this;
        }

        public Builder confidenceVar(String confidenceVar) {
            return confidenceVar(Output.of(confidenceVar));
        }

        public Builder failGravity(@Nullable Output<String> failGravity) {
            $.failGravity = failGravity;
            return this;
        }

        public Builder failGravity(String failGravity) {
            return failGravity(Output.of(failGravity));
        }

        public Builder failGravityVar(@Nullable Output<String> failGravityVar) {
            $.failGravityVar = failGravityVar;
            return this;
        }

        public Builder failGravityVar(String failGravityVar) {
            return failGravityVar(Output.of(failGravityVar));
        }

        public Builder focus(@Nullable Output<String> focus) {
            $.focus = focus;
            return this;
        }

        public Builder focus(String focus) {
            return focus(Output.of(focus));
        }

        public Builder focusVar(@Nullable Output<String> focusVar) {
            $.focusVar = focusVar;
            return this;
        }

        public Builder focusVar(String focusVar) {
            return focusVar(Output.of(focusVar));
        }

        public Builder gravity(@Nullable Output<String> gravity) {
            $.gravity = gravity;
            return this;
        }

        public Builder gravity(String gravity) {
            return gravity(Output.of(gravity));
        }

        public Builder gravityVar(@Nullable Output<String> gravityVar) {
            $.gravityVar = gravityVar;
            return this;
        }

        public Builder gravityVar(String gravityVar) {
            return gravityVar(Output.of(gravityVar));
        }

        public Builder height(@Nullable Output<String> height) {
            $.height = height;
            return this;
        }

        public Builder height(String height) {
            return height(Output.of(height));
        }

        public Builder heightVar(@Nullable Output<String> heightVar) {
            $.heightVar = heightVar;
            return this;
        }

        public Builder heightVar(String heightVar) {
            return heightVar(Output.of(heightVar));
        }

        public Builder padding(@Nullable Output<String> padding) {
            $.padding = padding;
            return this;
        }

        public Builder padding(String padding) {
            return padding(Output.of(padding));
        }

        public Builder paddingVar(@Nullable Output<String> paddingVar) {
            $.paddingVar = paddingVar;
            return this;
        }

        public Builder paddingVar(String paddingVar) {
            return paddingVar(Output.of(paddingVar));
        }

        public Builder style(@Nullable Output<String> style) {
            $.style = style;
            return this;
        }

        public Builder style(String style) {
            return style(Output.of(style));
        }

        public Builder styleVar(@Nullable Output<String> styleVar) {
            $.styleVar = styleVar;
            return this;
        }

        public Builder styleVar(String styleVar) {
            return styleVar(Output.of(styleVar));
        }

        public Builder width(@Nullable Output<String> width) {
            $.width = width;
            return this;
        }

        public Builder width(String width) {
            return width(Output.of(width));
        }

        public Builder widthVar(@Nullable Output<String> widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public Builder widthVar(String widthVar) {
            return widthVar(Output.of(widthVar));
        }

        public GetImagingPolicyImagePolicyTransformationIfDimensionGreaterThanIfDimensionEqualFaceCropArgs build() {
            return $;
        }
    }

}
