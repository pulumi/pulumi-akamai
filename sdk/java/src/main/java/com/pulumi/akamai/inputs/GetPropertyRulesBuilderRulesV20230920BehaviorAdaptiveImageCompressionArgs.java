// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs Empty = new GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs();

    @Import(name="compressMobile")
    private @Nullable Output<Boolean> compressMobile;

    public Optional<Output<Boolean>> compressMobile() {
        return Optional.ofNullable(this.compressMobile);
    }

    @Import(name="compressStandard")
    private @Nullable Output<Boolean> compressStandard;

    public Optional<Output<Boolean>> compressStandard() {
        return Optional.ofNullable(this.compressStandard);
    }

    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    @Import(name="templateUuid")
    private @Nullable Output<String> templateUuid;

    public Optional<Output<String>> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }

    @Import(name="tier1MobileCompressionMethod")
    private @Nullable Output<String> tier1MobileCompressionMethod;

    public Optional<Output<String>> tier1MobileCompressionMethod() {
        return Optional.ofNullable(this.tier1MobileCompressionMethod);
    }

    @Import(name="tier1MobileCompressionValue")
    private @Nullable Output<Integer> tier1MobileCompressionValue;

    public Optional<Output<Integer>> tier1MobileCompressionValue() {
        return Optional.ofNullable(this.tier1MobileCompressionValue);
    }

    @Import(name="tier1StandardCompressionMethod")
    private @Nullable Output<String> tier1StandardCompressionMethod;

    public Optional<Output<String>> tier1StandardCompressionMethod() {
        return Optional.ofNullable(this.tier1StandardCompressionMethod);
    }

    @Import(name="tier1StandardCompressionValue")
    private @Nullable Output<Integer> tier1StandardCompressionValue;

    public Optional<Output<Integer>> tier1StandardCompressionValue() {
        return Optional.ofNullable(this.tier1StandardCompressionValue);
    }

    @Import(name="tier2MobileCompressionMethod")
    private @Nullable Output<String> tier2MobileCompressionMethod;

    public Optional<Output<String>> tier2MobileCompressionMethod() {
        return Optional.ofNullable(this.tier2MobileCompressionMethod);
    }

    @Import(name="tier2MobileCompressionValue")
    private @Nullable Output<Integer> tier2MobileCompressionValue;

    public Optional<Output<Integer>> tier2MobileCompressionValue() {
        return Optional.ofNullable(this.tier2MobileCompressionValue);
    }

    @Import(name="tier2StandardCompressionMethod")
    private @Nullable Output<String> tier2StandardCompressionMethod;

    public Optional<Output<String>> tier2StandardCompressionMethod() {
        return Optional.ofNullable(this.tier2StandardCompressionMethod);
    }

    @Import(name="tier2StandardCompressionValue")
    private @Nullable Output<Integer> tier2StandardCompressionValue;

    public Optional<Output<Integer>> tier2StandardCompressionValue() {
        return Optional.ofNullable(this.tier2StandardCompressionValue);
    }

    @Import(name="tier3MobileCompressionMethod")
    private @Nullable Output<String> tier3MobileCompressionMethod;

    public Optional<Output<String>> tier3MobileCompressionMethod() {
        return Optional.ofNullable(this.tier3MobileCompressionMethod);
    }

    @Import(name="tier3MobileCompressionValue")
    private @Nullable Output<Integer> tier3MobileCompressionValue;

    public Optional<Output<Integer>> tier3MobileCompressionValue() {
        return Optional.ofNullable(this.tier3MobileCompressionValue);
    }

    @Import(name="tier3StandardCompressionMethod")
    private @Nullable Output<String> tier3StandardCompressionMethod;

    public Optional<Output<String>> tier3StandardCompressionMethod() {
        return Optional.ofNullable(this.tier3StandardCompressionMethod);
    }

    @Import(name="tier3StandardCompressionValue")
    private @Nullable Output<Integer> tier3StandardCompressionValue;

    public Optional<Output<Integer>> tier3StandardCompressionValue() {
        return Optional.ofNullable(this.tier3StandardCompressionValue);
    }

    @Import(name="titleAicMobile")
    private @Nullable Output<String> titleAicMobile;

    public Optional<Output<String>> titleAicMobile() {
        return Optional.ofNullable(this.titleAicMobile);
    }

    @Import(name="titleAicNonmobile")
    private @Nullable Output<String> titleAicNonmobile;

    public Optional<Output<String>> titleAicNonmobile() {
        return Optional.ofNullable(this.titleAicNonmobile);
    }

    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs() {}

    private GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs(GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs $) {
        this.compressMobile = $.compressMobile;
        this.compressStandard = $.compressStandard;
        this.locked = $.locked;
        this.templateUuid = $.templateUuid;
        this.tier1MobileCompressionMethod = $.tier1MobileCompressionMethod;
        this.tier1MobileCompressionValue = $.tier1MobileCompressionValue;
        this.tier1StandardCompressionMethod = $.tier1StandardCompressionMethod;
        this.tier1StandardCompressionValue = $.tier1StandardCompressionValue;
        this.tier2MobileCompressionMethod = $.tier2MobileCompressionMethod;
        this.tier2MobileCompressionValue = $.tier2MobileCompressionValue;
        this.tier2StandardCompressionMethod = $.tier2StandardCompressionMethod;
        this.tier2StandardCompressionValue = $.tier2StandardCompressionValue;
        this.tier3MobileCompressionMethod = $.tier3MobileCompressionMethod;
        this.tier3MobileCompressionValue = $.tier3MobileCompressionValue;
        this.tier3StandardCompressionMethod = $.tier3StandardCompressionMethod;
        this.tier3StandardCompressionValue = $.tier3StandardCompressionValue;
        this.titleAicMobile = $.titleAicMobile;
        this.titleAicNonmobile = $.titleAicNonmobile;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs $;

        public Builder() {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs();
        }

        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs defaults) {
            $ = new GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs(Objects.requireNonNull(defaults));
        }

        public Builder compressMobile(@Nullable Output<Boolean> compressMobile) {
            $.compressMobile = compressMobile;
            return this;
        }

        public Builder compressMobile(Boolean compressMobile) {
            return compressMobile(Output.of(compressMobile));
        }

        public Builder compressStandard(@Nullable Output<Boolean> compressStandard) {
            $.compressStandard = compressStandard;
            return this;
        }

        public Builder compressStandard(Boolean compressStandard) {
            return compressStandard(Output.of(compressStandard));
        }

        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        public Builder templateUuid(@Nullable Output<String> templateUuid) {
            $.templateUuid = templateUuid;
            return this;
        }

        public Builder templateUuid(String templateUuid) {
            return templateUuid(Output.of(templateUuid));
        }

        public Builder tier1MobileCompressionMethod(@Nullable Output<String> tier1MobileCompressionMethod) {
            $.tier1MobileCompressionMethod = tier1MobileCompressionMethod;
            return this;
        }

        public Builder tier1MobileCompressionMethod(String tier1MobileCompressionMethod) {
            return tier1MobileCompressionMethod(Output.of(tier1MobileCompressionMethod));
        }

        public Builder tier1MobileCompressionValue(@Nullable Output<Integer> tier1MobileCompressionValue) {
            $.tier1MobileCompressionValue = tier1MobileCompressionValue;
            return this;
        }

        public Builder tier1MobileCompressionValue(Integer tier1MobileCompressionValue) {
            return tier1MobileCompressionValue(Output.of(tier1MobileCompressionValue));
        }

        public Builder tier1StandardCompressionMethod(@Nullable Output<String> tier1StandardCompressionMethod) {
            $.tier1StandardCompressionMethod = tier1StandardCompressionMethod;
            return this;
        }

        public Builder tier1StandardCompressionMethod(String tier1StandardCompressionMethod) {
            return tier1StandardCompressionMethod(Output.of(tier1StandardCompressionMethod));
        }

        public Builder tier1StandardCompressionValue(@Nullable Output<Integer> tier1StandardCompressionValue) {
            $.tier1StandardCompressionValue = tier1StandardCompressionValue;
            return this;
        }

        public Builder tier1StandardCompressionValue(Integer tier1StandardCompressionValue) {
            return tier1StandardCompressionValue(Output.of(tier1StandardCompressionValue));
        }

        public Builder tier2MobileCompressionMethod(@Nullable Output<String> tier2MobileCompressionMethod) {
            $.tier2MobileCompressionMethod = tier2MobileCompressionMethod;
            return this;
        }

        public Builder tier2MobileCompressionMethod(String tier2MobileCompressionMethod) {
            return tier2MobileCompressionMethod(Output.of(tier2MobileCompressionMethod));
        }

        public Builder tier2MobileCompressionValue(@Nullable Output<Integer> tier2MobileCompressionValue) {
            $.tier2MobileCompressionValue = tier2MobileCompressionValue;
            return this;
        }

        public Builder tier2MobileCompressionValue(Integer tier2MobileCompressionValue) {
            return tier2MobileCompressionValue(Output.of(tier2MobileCompressionValue));
        }

        public Builder tier2StandardCompressionMethod(@Nullable Output<String> tier2StandardCompressionMethod) {
            $.tier2StandardCompressionMethod = tier2StandardCompressionMethod;
            return this;
        }

        public Builder tier2StandardCompressionMethod(String tier2StandardCompressionMethod) {
            return tier2StandardCompressionMethod(Output.of(tier2StandardCompressionMethod));
        }

        public Builder tier2StandardCompressionValue(@Nullable Output<Integer> tier2StandardCompressionValue) {
            $.tier2StandardCompressionValue = tier2StandardCompressionValue;
            return this;
        }

        public Builder tier2StandardCompressionValue(Integer tier2StandardCompressionValue) {
            return tier2StandardCompressionValue(Output.of(tier2StandardCompressionValue));
        }

        public Builder tier3MobileCompressionMethod(@Nullable Output<String> tier3MobileCompressionMethod) {
            $.tier3MobileCompressionMethod = tier3MobileCompressionMethod;
            return this;
        }

        public Builder tier3MobileCompressionMethod(String tier3MobileCompressionMethod) {
            return tier3MobileCompressionMethod(Output.of(tier3MobileCompressionMethod));
        }

        public Builder tier3MobileCompressionValue(@Nullable Output<Integer> tier3MobileCompressionValue) {
            $.tier3MobileCompressionValue = tier3MobileCompressionValue;
            return this;
        }

        public Builder tier3MobileCompressionValue(Integer tier3MobileCompressionValue) {
            return tier3MobileCompressionValue(Output.of(tier3MobileCompressionValue));
        }

        public Builder tier3StandardCompressionMethod(@Nullable Output<String> tier3StandardCompressionMethod) {
            $.tier3StandardCompressionMethod = tier3StandardCompressionMethod;
            return this;
        }

        public Builder tier3StandardCompressionMethod(String tier3StandardCompressionMethod) {
            return tier3StandardCompressionMethod(Output.of(tier3StandardCompressionMethod));
        }

        public Builder tier3StandardCompressionValue(@Nullable Output<Integer> tier3StandardCompressionValue) {
            $.tier3StandardCompressionValue = tier3StandardCompressionValue;
            return this;
        }

        public Builder tier3StandardCompressionValue(Integer tier3StandardCompressionValue) {
            return tier3StandardCompressionValue(Output.of(tier3StandardCompressionValue));
        }

        public Builder titleAicMobile(@Nullable Output<String> titleAicMobile) {
            $.titleAicMobile = titleAicMobile;
            return this;
        }

        public Builder titleAicMobile(String titleAicMobile) {
            return titleAicMobile(Output.of(titleAicMobile));
        }

        public Builder titleAicNonmobile(@Nullable Output<String> titleAicNonmobile) {
            $.titleAicNonmobile = titleAicNonmobile;
            return this;
        }

        public Builder titleAicNonmobile(String titleAicNonmobile) {
            return titleAicNonmobile(Output.of(titleAicNonmobile));
        }

        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetPropertyRulesBuilderRulesV20230920BehaviorAdaptiveImageCompressionArgs build() {
            return $;
        }
    }

}
