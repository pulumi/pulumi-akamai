// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20240109BehaviorRedirect {
    /**
     * @return Specify how to change the requested hostname, independently from the pathname.
     * 
     */
    private @Nullable String destinationHostname;
    /**
     * @return Specifies the full hostname with which to replace the current hostname.
     * 
     */
    private @Nullable String destinationHostnameOther;
    /**
     * @return Specifies the subdomain with which to replace to the current hostname&#39;s leftmost subdomain. For example, a value of `m` changes `www.example.com` to `m.example.com`.
     * 
     */
    private @Nullable String destinationHostnameSibling;
    /**
     * @return Specifies a subdomain to prepend to the current hostname. For example, a value of `m` changes `www.example.com` to `m.www.example.com`.
     * 
     */
    private @Nullable String destinationHostnameSubdomain;
    /**
     * @return Specify how to change the requested pathname, independently from the hostname.
     * 
     */
    private @Nullable String destinationPath;
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this replaces the current path.
     * 
     */
    private @Nullable String destinationPathOther;
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this prepends the current path. For example, a value of `/prefix/path` changes `/example/index.html` to `/prefix/path/example/index.html`.
     * 
     */
    private @Nullable String destinationPathPrefix;
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST` and `destinationPathSuffixStatus` is set to `SUFFIX`, this specifies the suffix to append to the path.
     * 
     */
    private @Nullable String destinationPathSuffix;
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this gives you the option of adding a suffix.
     * 
     */
    private @Nullable String destinationPathSuffixStatus;
    /**
     * @return Choose the protocol for the redirect URL.
     * 
     */
    private @Nullable String destinationProtocol;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return Either specify a default response for mobile browsers, or customize your own.
     * 
     */
    private @Nullable String mobileDefaultChoice;
    /**
     * @return When set to `APPEND`, passes incoming query string parameters as part of the redirect URL. Otherwise set this to `IGNORE`.
     * 
     */
    private @Nullable String queryString;
    /**
     * @return Specify the redirect&#39;s response code.
     * 
     */
    private @Nullable Integer responseCode;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;

    private GetPropertyRulesBuilderRulesV20240109BehaviorRedirect() {}
    /**
     * @return Specify how to change the requested hostname, independently from the pathname.
     * 
     */
    public Optional<String> destinationHostname() {
        return Optional.ofNullable(this.destinationHostname);
    }
    /**
     * @return Specifies the full hostname with which to replace the current hostname.
     * 
     */
    public Optional<String> destinationHostnameOther() {
        return Optional.ofNullable(this.destinationHostnameOther);
    }
    /**
     * @return Specifies the subdomain with which to replace to the current hostname&#39;s leftmost subdomain. For example, a value of `m` changes `www.example.com` to `m.example.com`.
     * 
     */
    public Optional<String> destinationHostnameSibling() {
        return Optional.ofNullable(this.destinationHostnameSibling);
    }
    /**
     * @return Specifies a subdomain to prepend to the current hostname. For example, a value of `m` changes `www.example.com` to `m.www.example.com`.
     * 
     */
    public Optional<String> destinationHostnameSubdomain() {
        return Optional.ofNullable(this.destinationHostnameSubdomain);
    }
    /**
     * @return Specify how to change the requested pathname, independently from the hostname.
     * 
     */
    public Optional<String> destinationPath() {
        return Optional.ofNullable(this.destinationPath);
    }
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this replaces the current path.
     * 
     */
    public Optional<String> destinationPathOther() {
        return Optional.ofNullable(this.destinationPathOther);
    }
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this prepends the current path. For example, a value of `/prefix/path` changes `/example/index.html` to `/prefix/path/example/index.html`.
     * 
     */
    public Optional<String> destinationPathPrefix() {
        return Optional.ofNullable(this.destinationPathPrefix);
    }
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST` and `destinationPathSuffixStatus` is set to `SUFFIX`, this specifies the suffix to append to the path.
     * 
     */
    public Optional<String> destinationPathSuffix() {
        return Optional.ofNullable(this.destinationPathSuffix);
    }
    /**
     * @return When `destinationPath` is set to `PREFIX_REQUEST`, this gives you the option of adding a suffix.
     * 
     */
    public Optional<String> destinationPathSuffixStatus() {
        return Optional.ofNullable(this.destinationPathSuffixStatus);
    }
    /**
     * @return Choose the protocol for the redirect URL.
     * 
     */
    public Optional<String> destinationProtocol() {
        return Optional.ofNullable(this.destinationProtocol);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return Either specify a default response for mobile browsers, or customize your own.
     * 
     */
    public Optional<String> mobileDefaultChoice() {
        return Optional.ofNullable(this.mobileDefaultChoice);
    }
    /**
     * @return When set to `APPEND`, passes incoming query string parameters as part of the redirect URL. Otherwise set this to `IGNORE`.
     * 
     */
    public Optional<String> queryString() {
        return Optional.ofNullable(this.queryString);
    }
    /**
     * @return Specify the redirect&#39;s response code.
     * 
     */
    public Optional<Integer> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20240109BehaviorRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String destinationHostname;
        private @Nullable String destinationHostnameOther;
        private @Nullable String destinationHostnameSibling;
        private @Nullable String destinationHostnameSubdomain;
        private @Nullable String destinationPath;
        private @Nullable String destinationPathOther;
        private @Nullable String destinationPathPrefix;
        private @Nullable String destinationPathSuffix;
        private @Nullable String destinationPathSuffixStatus;
        private @Nullable String destinationProtocol;
        private @Nullable Boolean locked;
        private @Nullable String mobileDefaultChoice;
        private @Nullable String queryString;
        private @Nullable Integer responseCode;
        private @Nullable String templateUuid;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20240109BehaviorRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationHostname = defaults.destinationHostname;
    	      this.destinationHostnameOther = defaults.destinationHostnameOther;
    	      this.destinationHostnameSibling = defaults.destinationHostnameSibling;
    	      this.destinationHostnameSubdomain = defaults.destinationHostnameSubdomain;
    	      this.destinationPath = defaults.destinationPath;
    	      this.destinationPathOther = defaults.destinationPathOther;
    	      this.destinationPathPrefix = defaults.destinationPathPrefix;
    	      this.destinationPathSuffix = defaults.destinationPathSuffix;
    	      this.destinationPathSuffixStatus = defaults.destinationPathSuffixStatus;
    	      this.destinationProtocol = defaults.destinationProtocol;
    	      this.locked = defaults.locked;
    	      this.mobileDefaultChoice = defaults.mobileDefaultChoice;
    	      this.queryString = defaults.queryString;
    	      this.responseCode = defaults.responseCode;
    	      this.templateUuid = defaults.templateUuid;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder destinationHostname(@Nullable String destinationHostname) {

            this.destinationHostname = destinationHostname;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHostnameOther(@Nullable String destinationHostnameOther) {

            this.destinationHostnameOther = destinationHostnameOther;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHostnameSibling(@Nullable String destinationHostnameSibling) {

            this.destinationHostnameSibling = destinationHostnameSibling;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHostnameSubdomain(@Nullable String destinationHostnameSubdomain) {

            this.destinationHostnameSubdomain = destinationHostnameSubdomain;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPath(@Nullable String destinationPath) {

            this.destinationPath = destinationPath;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPathOther(@Nullable String destinationPathOther) {

            this.destinationPathOther = destinationPathOther;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPathPrefix(@Nullable String destinationPathPrefix) {

            this.destinationPathPrefix = destinationPathPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPathSuffix(@Nullable String destinationPathSuffix) {

            this.destinationPathSuffix = destinationPathSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPathSuffixStatus(@Nullable String destinationPathSuffixStatus) {

            this.destinationPathSuffixStatus = destinationPathSuffixStatus;
            return this;
        }
        @CustomType.Setter
        public Builder destinationProtocol(@Nullable String destinationProtocol) {

            this.destinationProtocol = destinationProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder mobileDefaultChoice(@Nullable String mobileDefaultChoice) {

            this.mobileDefaultChoice = mobileDefaultChoice;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(@Nullable String queryString) {

            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder responseCode(@Nullable Integer responseCode) {

            this.responseCode = responseCode;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20240109BehaviorRedirect build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20240109BehaviorRedirect();
            _resultValue.destinationHostname = destinationHostname;
            _resultValue.destinationHostnameOther = destinationHostnameOther;
            _resultValue.destinationHostnameSibling = destinationHostnameSibling;
            _resultValue.destinationHostnameSubdomain = destinationHostnameSubdomain;
            _resultValue.destinationPath = destinationPath;
            _resultValue.destinationPathOther = destinationPathOther;
            _resultValue.destinationPathPrefix = destinationPathPrefix;
            _resultValue.destinationPathSuffix = destinationPathSuffix;
            _resultValue.destinationPathSuffixStatus = destinationPathSuffixStatus;
            _resultValue.destinationProtocol = destinationProtocol;
            _resultValue.locked = locked;
            _resultValue.mobileDefaultChoice = mobileDefaultChoice;
            _resultValue.queryString = queryString;
            _resultValue.responseCode = responseCode;
            _resultValue.templateUuid = templateUuid;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
