// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs();

    /**
     * Flips the image horizontally.
     * 
     */
    @Import(name="horizontal")
    private @Nullable Output<String> horizontal;

    /**
     * @return Flips the image horizontally.
     * 
     */
    public Optional<Output<String>> horizontal() {
        return Optional.ofNullable(this.horizontal);
    }

    /**
     * Flips the image horizontally.
     * 
     */
    @Import(name="horizontalVar")
    private @Nullable Output<String> horizontalVar;

    /**
     * @return Flips the image horizontally.
     * 
     */
    public Optional<Output<String>> horizontalVar() {
        return Optional.ofNullable(this.horizontalVar);
    }

    /**
     * Flips the image vertically.
     * 
     */
    @Import(name="vertical")
    private @Nullable Output<String> vertical;

    /**
     * @return Flips the image vertically.
     * 
     */
    public Optional<Output<String>> vertical() {
        return Optional.ofNullable(this.vertical);
    }

    /**
     * Flips the image vertically.
     * 
     */
    @Import(name="verticalVar")
    private @Nullable Output<String> verticalVar;

    /**
     * @return Flips the image vertically.
     * 
     */
    public Optional<Output<String>> verticalVar() {
        return Optional.ofNullable(this.verticalVar);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs(GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs $) {
        this.horizontal = $.horizontal;
        this.horizontalVar = $.horizontalVar;
        this.vertical = $.vertical;
        this.verticalVar = $.verticalVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param horizontal Flips the image horizontally.
         * 
         * @return builder
         * 
         */
        public Builder horizontal(@Nullable Output<String> horizontal) {
            $.horizontal = horizontal;
            return this;
        }

        /**
         * @param horizontal Flips the image horizontally.
         * 
         * @return builder
         * 
         */
        public Builder horizontal(String horizontal) {
            return horizontal(Output.of(horizontal));
        }

        /**
         * @param horizontalVar Flips the image horizontally.
         * 
         * @return builder
         * 
         */
        public Builder horizontalVar(@Nullable Output<String> horizontalVar) {
            $.horizontalVar = horizontalVar;
            return this;
        }

        /**
         * @param horizontalVar Flips the image horizontally.
         * 
         * @return builder
         * 
         */
        public Builder horizontalVar(String horizontalVar) {
            return horizontalVar(Output.of(horizontalVar));
        }

        /**
         * @param vertical Flips the image vertically.
         * 
         * @return builder
         * 
         */
        public Builder vertical(@Nullable Output<String> vertical) {
            $.vertical = vertical;
            return this;
        }

        /**
         * @param vertical Flips the image vertically.
         * 
         * @return builder
         * 
         */
        public Builder vertical(String vertical) {
            return vertical(Output.of(vertical));
        }

        /**
         * @param verticalVar Flips the image vertically.
         * 
         * @return builder
         * 
         */
        public Builder verticalVar(@Nullable Output<String> verticalVar) {
            $.verticalVar = verticalVar;
            return this;
        }

        /**
         * @param verticalVar Flips the image vertically.
         * 
         * @return builder
         * 
         */
        public Builder verticalVar(String verticalVar) {
            return verticalVar(Output.of(verticalVar));
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationMirrorArgs build() {
            return $;
        }
    }

}
