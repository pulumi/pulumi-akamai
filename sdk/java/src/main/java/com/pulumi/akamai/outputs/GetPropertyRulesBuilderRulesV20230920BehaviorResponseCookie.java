// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie {
    /**
     * @return Specifies the name of the cookie, which serves as a key to determine if the cookie is set.
     * 
     */
    private @Nullable String cookieName;
    /**
     * @return When enabled, uses the default domain value, otherwise the set specified in the `domain` field.
     * 
     */
    private @Nullable Boolean defaultDomain;
    /**
     * @return When enabled, uses the default path value, otherwise the set specified in the `path` field.
     * 
     */
    private @Nullable Boolean defaultPath;
    /**
     * @return If the `defaultDomain` is disabled, this sets the domain for which the cookie is valid. For example, `example.com` makes the cookie valid for that hostname and all subdomains.
     * 
     */
    private @Nullable String domain;
    /**
     * @return If `expires` is set to `DURATION`, this sets the cookie&#39;s lifetime.
     * 
     */
    private @Nullable String duration;
    /**
     * @return Allows you to set a response cookie.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return If `expires` is set to `FIXED_DATE`, this sets when the cookie expires as a UTC date and time.
     * 
     */
    private @Nullable String expirationDate;
    /**
     * @return Sets various ways to specify when the cookie expires.
     * 
     */
    private @Nullable String expires;
    /**
     * @return When the `type` of cookie is set to `UNIQUE`, this sets the date format.
     * 
     */
    private @Nullable String format;
    /**
     * @return When enabled, includes the `HttpOnly` attribute in the `Set-Cookie` response header to mitigate the risk of client-side scripts accessing the protected cookie, if the browser supports it.
     * 
     */
    private @Nullable Boolean httpOnly;
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    private @Nullable Boolean locked;
    /**
     * @return If the `defaultPath` is disabled, sets the path component for which the cookie is valid.
     * 
     */
    private @Nullable String path;
    /**
     * @return This option controls the `SameSite` cookie attribute that reduces the risk of cross-site request forgery attacks.
     * 
     */
    private @Nullable String sameSite;
    /**
     * @return When enabled, sets the cookie&#39;s `Secure` flag to transmit it with `HTTPS`.
     * 
     */
    private @Nullable Boolean secure;
    /**
     * @return This option is for internal usage only.
     * 
     */
    private @Nullable String templateUuid;
    /**
     * @return What type of value to assign.
     * 
     */
    private @Nullable String type;
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    private @Nullable String uuid;
    /**
     * @return If the cookie `type` is `FIXED`, this specifies the cookie value.
     * 
     */
    private @Nullable String value;

    private GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie() {}
    /**
     * @return Specifies the name of the cookie, which serves as a key to determine if the cookie is set.
     * 
     */
    public Optional<String> cookieName() {
        return Optional.ofNullable(this.cookieName);
    }
    /**
     * @return When enabled, uses the default domain value, otherwise the set specified in the `domain` field.
     * 
     */
    public Optional<Boolean> defaultDomain() {
        return Optional.ofNullable(this.defaultDomain);
    }
    /**
     * @return When enabled, uses the default path value, otherwise the set specified in the `path` field.
     * 
     */
    public Optional<Boolean> defaultPath() {
        return Optional.ofNullable(this.defaultPath);
    }
    /**
     * @return If the `defaultDomain` is disabled, this sets the domain for which the cookie is valid. For example, `example.com` makes the cookie valid for that hostname and all subdomains.
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return If `expires` is set to `DURATION`, this sets the cookie&#39;s lifetime.
     * 
     */
    public Optional<String> duration() {
        return Optional.ofNullable(this.duration);
    }
    /**
     * @return Allows you to set a response cookie.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return If `expires` is set to `FIXED_DATE`, this sets when the cookie expires as a UTC date and time.
     * 
     */
    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }
    /**
     * @return Sets various ways to specify when the cookie expires.
     * 
     */
    public Optional<String> expires() {
        return Optional.ofNullable(this.expires);
    }
    /**
     * @return When the `type` of cookie is set to `UNIQUE`, this sets the date format.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return When enabled, includes the `HttpOnly` attribute in the `Set-Cookie` response header to mitigate the risk of client-side scripts accessing the protected cookie, if the browser supports it.
     * 
     */
    public Optional<Boolean> httpOnly() {
        return Optional.ofNullable(this.httpOnly);
    }
    /**
     * @return Indicates that your Akamai representative has locked this behavior or criteria so that you can&#39;t modify it. This option is for internal usage only.
     * 
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }
    /**
     * @return If the `defaultPath` is disabled, sets the path component for which the cookie is valid.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return This option controls the `SameSite` cookie attribute that reduces the risk of cross-site request forgery attacks.
     * 
     */
    public Optional<String> sameSite() {
        return Optional.ofNullable(this.sameSite);
    }
    /**
     * @return When enabled, sets the cookie&#39;s `Secure` flag to transmit it with `HTTPS`.
     * 
     */
    public Optional<Boolean> secure() {
        return Optional.ofNullable(this.secure);
    }
    /**
     * @return This option is for internal usage only.
     * 
     */
    public Optional<String> templateUuid() {
        return Optional.ofNullable(this.templateUuid);
    }
    /**
     * @return What type of value to assign.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return A uuid member indicates that at least one of its component behaviors or criteria is advanced and read-only. You need to preserve this uuid as well when modifying the rule tree. This option is for internal usage only.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return If the cookie `type` is `FIXED`, this specifies the cookie value.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cookieName;
        private @Nullable Boolean defaultDomain;
        private @Nullable Boolean defaultPath;
        private @Nullable String domain;
        private @Nullable String duration;
        private @Nullable Boolean enabled;
        private @Nullable String expirationDate;
        private @Nullable String expires;
        private @Nullable String format;
        private @Nullable Boolean httpOnly;
        private @Nullable Boolean locked;
        private @Nullable String path;
        private @Nullable String sameSite;
        private @Nullable Boolean secure;
        private @Nullable String templateUuid;
        private @Nullable String type;
        private @Nullable String uuid;
        private @Nullable String value;
        public Builder() {}
        public Builder(GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookieName = defaults.cookieName;
    	      this.defaultDomain = defaults.defaultDomain;
    	      this.defaultPath = defaults.defaultPath;
    	      this.domain = defaults.domain;
    	      this.duration = defaults.duration;
    	      this.enabled = defaults.enabled;
    	      this.expirationDate = defaults.expirationDate;
    	      this.expires = defaults.expires;
    	      this.format = defaults.format;
    	      this.httpOnly = defaults.httpOnly;
    	      this.locked = defaults.locked;
    	      this.path = defaults.path;
    	      this.sameSite = defaults.sameSite;
    	      this.secure = defaults.secure;
    	      this.templateUuid = defaults.templateUuid;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder cookieName(@Nullable String cookieName) {

            this.cookieName = cookieName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDomain(@Nullable Boolean defaultDomain) {

            this.defaultDomain = defaultDomain;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPath(@Nullable Boolean defaultPath) {

            this.defaultPath = defaultPath;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder duration(@Nullable String duration) {

            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expirationDate(@Nullable String expirationDate) {

            this.expirationDate = expirationDate;
            return this;
        }
        @CustomType.Setter
        public Builder expires(@Nullable String expires) {

            this.expires = expires;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder httpOnly(@Nullable Boolean httpOnly) {

            this.httpOnly = httpOnly;
            return this;
        }
        @CustomType.Setter
        public Builder locked(@Nullable Boolean locked) {

            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder sameSite(@Nullable String sameSite) {

            this.sameSite = sameSite;
            return this;
        }
        @CustomType.Setter
        public Builder secure(@Nullable Boolean secure) {

            this.secure = secure;
            return this;
        }
        @CustomType.Setter
        public Builder templateUuid(@Nullable String templateUuid) {

            this.templateUuid = templateUuid;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {

            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        public GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie build() {
            final var _resultValue = new GetPropertyRulesBuilderRulesV20230920BehaviorResponseCookie();
            _resultValue.cookieName = cookieName;
            _resultValue.defaultDomain = defaultDomain;
            _resultValue.defaultPath = defaultPath;
            _resultValue.domain = domain;
            _resultValue.duration = duration;
            _resultValue.enabled = enabled;
            _resultValue.expirationDate = expirationDate;
            _resultValue.expires = expires;
            _resultValue.format = format;
            _resultValue.httpOnly = httpOnly;
            _resultValue.locked = locked;
            _resultValue.path = path;
            _resultValue.sameSite = sameSite;
            _resultValue.secure = secure;
            _resultValue.templateUuid = templateUuid;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
