// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetCloudwrapperLocationsLocationTrafficType;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudwrapperLocationsLocation extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudwrapperLocationsLocation Empty = new GetCloudwrapperLocationsLocation();

    @Import(name="locationId", required=true)
    private Integer locationId;

    public Integer locationId() {
        return this.locationId;
    }

    @Import(name="locationName", required=true)
    private String locationName;

    public String locationName() {
        return this.locationName;
    }

    @Import(name="multiCdnLocationId", required=true)
    private String multiCdnLocationId;

    public String multiCdnLocationId() {
        return this.multiCdnLocationId;
    }

    @Import(name="trafficTypes")
    private @Nullable List<GetCloudwrapperLocationsLocationTrafficType> trafficTypes;

    public Optional<List<GetCloudwrapperLocationsLocationTrafficType>> trafficTypes() {
        return Optional.ofNullable(this.trafficTypes);
    }

    private GetCloudwrapperLocationsLocation() {}

    private GetCloudwrapperLocationsLocation(GetCloudwrapperLocationsLocation $) {
        this.locationId = $.locationId;
        this.locationName = $.locationName;
        this.multiCdnLocationId = $.multiCdnLocationId;
        this.trafficTypes = $.trafficTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudwrapperLocationsLocation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudwrapperLocationsLocation $;

        public Builder() {
            $ = new GetCloudwrapperLocationsLocation();
        }

        public Builder(GetCloudwrapperLocationsLocation defaults) {
            $ = new GetCloudwrapperLocationsLocation(Objects.requireNonNull(defaults));
        }

        public Builder locationId(Integer locationId) {
            $.locationId = locationId;
            return this;
        }

        public Builder locationName(String locationName) {
            $.locationName = locationName;
            return this;
        }

        public Builder multiCdnLocationId(String multiCdnLocationId) {
            $.multiCdnLocationId = multiCdnLocationId;
            return this;
        }

        public Builder trafficTypes(@Nullable List<GetCloudwrapperLocationsLocationTrafficType> trafficTypes) {
            $.trafficTypes = trafficTypes;
            return this;
        }

        public Builder trafficTypes(GetCloudwrapperLocationsLocationTrafficType... trafficTypes) {
            return trafficTypes(List.of(trafficTypes));
        }

        public GetCloudwrapperLocationsLocation build() {
            $.locationId = Objects.requireNonNull($.locationId, "expected parameter 'locationId' to be non-null");
            $.locationName = Objects.requireNonNull($.locationName, "expected parameter 'locationName' to be non-null");
            $.multiCdnLocationId = Objects.requireNonNull($.multiCdnLocationId, "expected parameter 'multiCdnLocationId' to be non-null");
            return $;
        }
    }

}
