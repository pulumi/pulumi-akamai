// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGtmDomainCidrMapAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGtmDomainCidrMapAssignmentArgs Empty = new GetGtmDomainCidrMapAssignmentArgs();

    /**
     * Specifies an array of CIDR blocks.
     * 
     */
    @Import(name="blocks", required=true)
    private Output<List<String>> blocks;

    /**
     * @return Specifies an array of CIDR blocks.
     * 
     */
    public Output<List<String>> blocks() {
        return this.blocks;
    }

    /**
     * A unique identifier for an existing data center in the domain.
     * 
     */
    @Import(name="datacenterId", required=true)
    private Output<Integer> datacenterId;

    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Output<Integer> datacenterId() {
        return this.datacenterId;
    }

    /**
     * A descriptive label for all other AS zones.
     * 
     */
    @Import(name="nickname", required=true)
    private Output<String> nickname;

    /**
     * @return A descriptive label for all other AS zones.
     * 
     */
    public Output<String> nickname() {
        return this.nickname;
    }

    private GetGtmDomainCidrMapAssignmentArgs() {}

    private GetGtmDomainCidrMapAssignmentArgs(GetGtmDomainCidrMapAssignmentArgs $) {
        this.blocks = $.blocks;
        this.datacenterId = $.datacenterId;
        this.nickname = $.nickname;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGtmDomainCidrMapAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGtmDomainCidrMapAssignmentArgs $;

        public Builder() {
            $ = new GetGtmDomainCidrMapAssignmentArgs();
        }

        public Builder(GetGtmDomainCidrMapAssignmentArgs defaults) {
            $ = new GetGtmDomainCidrMapAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blocks Specifies an array of CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder blocks(Output<List<String>> blocks) {
            $.blocks = blocks;
            return this;
        }

        /**
         * @param blocks Specifies an array of CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder blocks(List<String> blocks) {
            return blocks(Output.of(blocks));
        }

        /**
         * @param blocks Specifies an array of CIDR blocks.
         * 
         * @return builder
         * 
         */
        public Builder blocks(String... blocks) {
            return blocks(List.of(blocks));
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Output<Integer> datacenterId) {
            $.datacenterId = datacenterId;
            return this;
        }

        /**
         * @param datacenterId A unique identifier for an existing data center in the domain.
         * 
         * @return builder
         * 
         */
        public Builder datacenterId(Integer datacenterId) {
            return datacenterId(Output.of(datacenterId));
        }

        /**
         * @param nickname A descriptive label for all other AS zones.
         * 
         * @return builder
         * 
         */
        public Builder nickname(Output<String> nickname) {
            $.nickname = nickname;
            return this;
        }

        /**
         * @param nickname A descriptive label for all other AS zones.
         * 
         * @return builder
         * 
         */
        public Builder nickname(String nickname) {
            return nickname(Output.of(nickname));
        }

        public GetGtmDomainCidrMapAssignmentArgs build() {
            if ($.blocks == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainCidrMapAssignmentArgs", "blocks");
            }
            if ($.datacenterId == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainCidrMapAssignmentArgs", "datacenterId");
            }
            if ($.nickname == null) {
                throw new MissingRequiredPropertyException("GetGtmDomainCidrMapAssignmentArgs", "nickname");
            }
            return $;
        }
    }

}
