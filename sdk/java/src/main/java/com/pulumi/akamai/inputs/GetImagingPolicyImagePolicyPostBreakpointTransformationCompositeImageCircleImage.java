// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.akamai.inputs.GetImagingPolicyImagePolicyPostBreakpointTransformation;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage extends com.pulumi.resources.InvokeArgs {

    public static final GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage Empty = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage();

    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    @Import(name="color")
    private @Nullable String color;

    /**
     * @return The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    public Optional<String> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    @Import(name="colorVar")
    private @Nullable String colorVar;

    /**
     * @return The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
     * 
     */
    public Optional<String> colorVar() {
        return Optional.ofNullable(this.colorVar);
    }

    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    @Import(name="diameter")
    private @Nullable String diameter;

    /**
     * @return The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    public Optional<String> diameter() {
        return Optional.ofNullable(this.diameter);
    }

    /**
     * The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    @Import(name="diameterVar")
    private @Nullable String diameterVar;

    /**
     * @return The diameter of the circle. The diameter will be the width and the height of the image in pixels.
     * 
     */
    public Optional<String> diameterVar() {
        return Optional.ofNullable(this.diameterVar);
    }

    @Import(name="transformation")
    private @Nullable GetImagingPolicyImagePolicyPostBreakpointTransformation transformation;

    public Optional<GetImagingPolicyImagePolicyPostBreakpointTransformation> transformation() {
        return Optional.ofNullable(this.transformation);
    }

    /**
     * The width of the box in pixels.
     * 
     */
    @Import(name="width")
    private @Nullable String width;

    /**
     * @return The width of the box in pixels.
     * 
     */
    public Optional<String> width() {
        return Optional.ofNullable(this.width);
    }

    /**
     * The width of the box in pixels.
     * 
     */
    @Import(name="widthVar")
    private @Nullable String widthVar;

    /**
     * @return The width of the box in pixels.
     * 
     */
    public Optional<String> widthVar() {
        return Optional.ofNullable(this.widthVar);
    }

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage() {}

    private GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage(GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage $) {
        this.color = $.color;
        this.colorVar = $.colorVar;
        this.diameter = $.diameter;
        this.diameterVar = $.diameterVar;
        this.transformation = $.transformation;
        this.width = $.width;
        this.widthVar = $.widthVar;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage $;

        public Builder() {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage();
        }

        public Builder(GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage defaults) {
            $ = new GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage(Objects.requireNonNull(defaults));
        }

        /**
         * @param color The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable String color) {
            $.color = color;
            return this;
        }

        /**
         * @param colorVar The fill color of the circle. The API supports hexadecimal representation and CSS hexadecimal color values.
         * 
         * @return builder
         * 
         */
        public Builder colorVar(@Nullable String colorVar) {
            $.colorVar = colorVar;
            return this;
        }

        /**
         * @param diameter The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameter(@Nullable String diameter) {
            $.diameter = diameter;
            return this;
        }

        /**
         * @param diameterVar The diameter of the circle. The diameter will be the width and the height of the image in pixels.
         * 
         * @return builder
         * 
         */
        public Builder diameterVar(@Nullable String diameterVar) {
            $.diameterVar = diameterVar;
            return this;
        }

        public Builder transformation(@Nullable GetImagingPolicyImagePolicyPostBreakpointTransformation transformation) {
            $.transformation = transformation;
            return this;
        }

        /**
         * @param width The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable String width) {
            $.width = width;
            return this;
        }

        /**
         * @param widthVar The width of the box in pixels.
         * 
         * @return builder
         * 
         */
        public Builder widthVar(@Nullable String widthVar) {
            $.widthVar = widthVar;
            return this;
        }

        public GetImagingPolicyImagePolicyPostBreakpointTransformationCompositeImageCircleImage build() {
            return $;
        }
    }

}
