// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.GetGtmDomainDatacenterDefaultLoadObject;
import com.pulumi.akamai.outputs.GetGtmDomainDatacenterLink;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetGtmDomainDatacenter {
    /**
     * @return The name of the city where the data center is located.
     * 
     */
    private String city;
    /**
     * @return Identifies the data center&#39;s ID of which this data center is a clone.
     * 
     */
    private Integer cloneOf;
    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    private Boolean cloudServerHostHeaderOverride;
    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    private Boolean cloudServerTargeting;
    /**
     * @return A two-letter code that specifies the continent where the data center maps to.
     * 
     */
    private String continent;
    /**
     * @return A two-letter ISO 3166 country code that specifies the country where the data center is located.
     * 
     */
    private String country;
    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    private Integer datacenterId;
    /**
     * @return Specifies the load reporting interface between you and the GTM system.
     * 
     */
    private @Nullable List<GetGtmDomainDatacenterDefaultLoadObject> defaultLoadObjects;
    /**
     * @return Specifies the geographic latitude of the data center&#39;s position.
     * 
     */
    private Double latitude;
    /**
     * @return Provides a URL path that allows direct navigation to a data center.
     * 
     */
    private @Nullable List<GetGtmDomainDatacenterLink> links;
    /**
     * @return Specifies the geographic longitude of the data center&#39;s position.
     * 
     */
    private Double longitude;
    /**
     * @return A descriptive label for the datacenter.
     * 
     */
    private String nickname;
    /**
     * @return Influences the score for a datacenter.
     * 
     */
    private Integer scorePenalty;
    /**
     * @return The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     * 
     */
    private String serverMonitorPool;
    /**
     * @return Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     * 
     */
    private String stateOrProvince;
    /**
     * @return Indicates whether or not the data center is virtual or physical.
     * 
     */
    private Boolean virtual;

    private GetGtmDomainDatacenter() {}
    /**
     * @return The name of the city where the data center is located.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return Identifies the data center&#39;s ID of which this data center is a clone.
     * 
     */
    public Integer cloneOf() {
        return this.cloneOf;
    }
    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    public Boolean cloudServerHostHeaderOverride() {
        return this.cloudServerHostHeaderOverride;
    }
    /**
     * @return Balances load between two or more servers in a cloud environment.
     * 
     */
    public Boolean cloudServerTargeting() {
        return this.cloudServerTargeting;
    }
    /**
     * @return A two-letter code that specifies the continent where the data center maps to.
     * 
     */
    public String continent() {
        return this.continent;
    }
    /**
     * @return A two-letter ISO 3166 country code that specifies the country where the data center is located.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return A unique identifier for an existing data center in the domain.
     * 
     */
    public Integer datacenterId() {
        return this.datacenterId;
    }
    /**
     * @return Specifies the load reporting interface between you and the GTM system.
     * 
     */
    public List<GetGtmDomainDatacenterDefaultLoadObject> defaultLoadObjects() {
        return this.defaultLoadObjects == null ? List.of() : this.defaultLoadObjects;
    }
    /**
     * @return Specifies the geographic latitude of the data center&#39;s position.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return Provides a URL path that allows direct navigation to a data center.
     * 
     */
    public List<GetGtmDomainDatacenterLink> links() {
        return this.links == null ? List.of() : this.links;
    }
    /**
     * @return Specifies the geographic longitude of the data center&#39;s position.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return A descriptive label for the datacenter.
     * 
     */
    public String nickname() {
        return this.nickname;
    }
    /**
     * @return Influences the score for a datacenter.
     * 
     */
    public Integer scorePenalty() {
        return this.scorePenalty;
    }
    /**
     * @return The name of the pool from which servermonitors are drawn for liveness tests in this datacenter. If omitted (null), the domain-wide default is used. (If no domain-wide default is specified, the pool used is all servermonitors in the same continent as the datacenter.).
     * 
     */
    public String serverMonitorPool() {
        return this.serverMonitorPool;
    }
    /**
     * @return Specifies a two-letter ISO 3166 country code for the state of province, where the data center is located.
     * 
     */
    public String stateOrProvince() {
        return this.stateOrProvince;
    }
    /**
     * @return Indicates whether or not the data center is virtual or physical.
     * 
     */
    public Boolean virtual() {
        return this.virtual;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGtmDomainDatacenter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String city;
        private Integer cloneOf;
        private Boolean cloudServerHostHeaderOverride;
        private Boolean cloudServerTargeting;
        private String continent;
        private String country;
        private Integer datacenterId;
        private @Nullable List<GetGtmDomainDatacenterDefaultLoadObject> defaultLoadObjects;
        private Double latitude;
        private @Nullable List<GetGtmDomainDatacenterLink> links;
        private Double longitude;
        private String nickname;
        private Integer scorePenalty;
        private String serverMonitorPool;
        private String stateOrProvince;
        private Boolean virtual;
        public Builder() {}
        public Builder(GetGtmDomainDatacenter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.city = defaults.city;
    	      this.cloneOf = defaults.cloneOf;
    	      this.cloudServerHostHeaderOverride = defaults.cloudServerHostHeaderOverride;
    	      this.cloudServerTargeting = defaults.cloudServerTargeting;
    	      this.continent = defaults.continent;
    	      this.country = defaults.country;
    	      this.datacenterId = defaults.datacenterId;
    	      this.defaultLoadObjects = defaults.defaultLoadObjects;
    	      this.latitude = defaults.latitude;
    	      this.links = defaults.links;
    	      this.longitude = defaults.longitude;
    	      this.nickname = defaults.nickname;
    	      this.scorePenalty = defaults.scorePenalty;
    	      this.serverMonitorPool = defaults.serverMonitorPool;
    	      this.stateOrProvince = defaults.stateOrProvince;
    	      this.virtual = defaults.virtual;
        }

        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder cloneOf(Integer cloneOf) {
            if (cloneOf == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "cloneOf");
            }
            this.cloneOf = cloneOf;
            return this;
        }
        @CustomType.Setter
        public Builder cloudServerHostHeaderOverride(Boolean cloudServerHostHeaderOverride) {
            if (cloudServerHostHeaderOverride == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "cloudServerHostHeaderOverride");
            }
            this.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            return this;
        }
        @CustomType.Setter
        public Builder cloudServerTargeting(Boolean cloudServerTargeting) {
            if (cloudServerTargeting == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "cloudServerTargeting");
            }
            this.cloudServerTargeting = cloudServerTargeting;
            return this;
        }
        @CustomType.Setter
        public Builder continent(String continent) {
            if (continent == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "continent");
            }
            this.continent = continent;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder datacenterId(Integer datacenterId) {
            if (datacenterId == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "datacenterId");
            }
            this.datacenterId = datacenterId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultLoadObjects(@Nullable List<GetGtmDomainDatacenterDefaultLoadObject> defaultLoadObjects) {

            this.defaultLoadObjects = defaultLoadObjects;
            return this;
        }
        public Builder defaultLoadObjects(GetGtmDomainDatacenterDefaultLoadObject... defaultLoadObjects) {
            return defaultLoadObjects(List.of(defaultLoadObjects));
        }
        @CustomType.Setter
        public Builder latitude(Double latitude) {
            if (latitude == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "latitude");
            }
            this.latitude = latitude;
            return this;
        }
        @CustomType.Setter
        public Builder links(@Nullable List<GetGtmDomainDatacenterLink> links) {

            this.links = links;
            return this;
        }
        public Builder links(GetGtmDomainDatacenterLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder longitude(Double longitude) {
            if (longitude == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "longitude");
            }
            this.longitude = longitude;
            return this;
        }
        @CustomType.Setter
        public Builder nickname(String nickname) {
            if (nickname == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "nickname");
            }
            this.nickname = nickname;
            return this;
        }
        @CustomType.Setter
        public Builder scorePenalty(Integer scorePenalty) {
            if (scorePenalty == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "scorePenalty");
            }
            this.scorePenalty = scorePenalty;
            return this;
        }
        @CustomType.Setter
        public Builder serverMonitorPool(String serverMonitorPool) {
            if (serverMonitorPool == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "serverMonitorPool");
            }
            this.serverMonitorPool = serverMonitorPool;
            return this;
        }
        @CustomType.Setter
        public Builder stateOrProvince(String stateOrProvince) {
            if (stateOrProvince == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "stateOrProvince");
            }
            this.stateOrProvince = stateOrProvince;
            return this;
        }
        @CustomType.Setter
        public Builder virtual(Boolean virtual) {
            if (virtual == null) {
              throw new MissingRequiredPropertyException("GetGtmDomainDatacenter", "virtual");
            }
            this.virtual = virtual;
            return this;
        }
        public GetGtmDomainDatacenter build() {
            final var _resultValue = new GetGtmDomainDatacenter();
            _resultValue.city = city;
            _resultValue.cloneOf = cloneOf;
            _resultValue.cloudServerHostHeaderOverride = cloudServerHostHeaderOverride;
            _resultValue.cloudServerTargeting = cloudServerTargeting;
            _resultValue.continent = continent;
            _resultValue.country = country;
            _resultValue.datacenterId = datacenterId;
            _resultValue.defaultLoadObjects = defaultLoadObjects;
            _resultValue.latitude = latitude;
            _resultValue.links = links;
            _resultValue.longitude = longitude;
            _resultValue.nickname = nickname;
            _resultValue.scorePenalty = scorePenalty;
            _resultValue.serverMonitorPool = serverMonitorPool;
            _resultValue.stateOrProvince = stateOrProvince;
            _resultValue.virtual = virtual;
            return _resultValue;
        }
    }
}
