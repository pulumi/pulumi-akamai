// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CpsDvEnrollmentTechContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final CpsDvEnrollmentTechContactArgs Empty = new CpsDvEnrollmentTechContactArgs();

    @Import(name="addressLineOne", required=true)
    private Output<String> addressLineOne;

    public Output<String> addressLineOne() {
        return this.addressLineOne;
    }

    @Import(name="addressLineTwo")
    private @Nullable Output<String> addressLineTwo;

    public Optional<Output<String>> addressLineTwo() {
        return Optional.ofNullable(this.addressLineTwo);
    }

    @Import(name="city", required=true)
    private Output<String> city;

    public Output<String> city() {
        return this.city;
    }

    @Import(name="countryCode", required=true)
    private Output<String> countryCode;

    public Output<String> countryCode() {
        return this.countryCode;
    }

    @Import(name="email", required=true)
    private Output<String> email;

    public Output<String> email() {
        return this.email;
    }

    @Import(name="firstName", required=true)
    private Output<String> firstName;

    public Output<String> firstName() {
        return this.firstName;
    }

    @Import(name="lastName", required=true)
    private Output<String> lastName;

    public Output<String> lastName() {
        return this.lastName;
    }

    @Import(name="organization", required=true)
    private Output<String> organization;

    public Output<String> organization() {
        return this.organization;
    }

    @Import(name="phone", required=true)
    private Output<String> phone;

    public Output<String> phone() {
        return this.phone;
    }

    @Import(name="postalCode", required=true)
    private Output<String> postalCode;

    public Output<String> postalCode() {
        return this.postalCode;
    }

    @Import(name="region", required=true)
    private Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    @Import(name="title")
    private @Nullable Output<String> title;

    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private CpsDvEnrollmentTechContactArgs() {}

    private CpsDvEnrollmentTechContactArgs(CpsDvEnrollmentTechContactArgs $) {
        this.addressLineOne = $.addressLineOne;
        this.addressLineTwo = $.addressLineTwo;
        this.city = $.city;
        this.countryCode = $.countryCode;
        this.email = $.email;
        this.firstName = $.firstName;
        this.lastName = $.lastName;
        this.organization = $.organization;
        this.phone = $.phone;
        this.postalCode = $.postalCode;
        this.region = $.region;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CpsDvEnrollmentTechContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CpsDvEnrollmentTechContactArgs $;

        public Builder() {
            $ = new CpsDvEnrollmentTechContactArgs();
        }

        public Builder(CpsDvEnrollmentTechContactArgs defaults) {
            $ = new CpsDvEnrollmentTechContactArgs(Objects.requireNonNull(defaults));
        }

        public Builder addressLineOne(Output<String> addressLineOne) {
            $.addressLineOne = addressLineOne;
            return this;
        }

        public Builder addressLineOne(String addressLineOne) {
            return addressLineOne(Output.of(addressLineOne));
        }

        public Builder addressLineTwo(@Nullable Output<String> addressLineTwo) {
            $.addressLineTwo = addressLineTwo;
            return this;
        }

        public Builder addressLineTwo(String addressLineTwo) {
            return addressLineTwo(Output.of(addressLineTwo));
        }

        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder countryCode(Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public Builder postalCode(Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public CpsDvEnrollmentTechContactArgs build() {
            if ($.addressLineOne == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "addressLineOne");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "city");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "countryCode");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "email");
            }
            if ($.firstName == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "firstName");
            }
            if ($.lastName == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "lastName");
            }
            if ($.organization == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "organization");
            }
            if ($.phone == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "phone");
            }
            if ($.postalCode == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "postalCode");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("CpsDvEnrollmentTechContactArgs", "region");
            }
            return $;
        }
    }

}
